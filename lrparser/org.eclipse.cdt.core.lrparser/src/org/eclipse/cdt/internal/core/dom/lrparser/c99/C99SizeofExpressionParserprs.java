/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99SizeofExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, C99SizeofExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            1,4,1,3,3,3,1,3,3,1,
            3,3,1,3,3,3,3,1,3,3,
            1,3,1,3,1,3,1,3,1,3,
            1,5,1,3,3,3,3,3,3,3,
            3,3,3,3,1,1,2,1,0,1,
            3,1,1,1,1,1,1,1,1,3,
            3,2,2,4,1,2,1,1,1,2,
            5,7,5,1,0,7,5,9,8,3,
            2,2,2,3,2,4,2,2,2,2,
            2,1,1,1,1,2,1,2,2,2,
            1,2,2,1,2,2,1,2,2,1,
            2,2,1,3,1,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            5,5,6,6,2,2,2,1,0,1,
            2,4,2,1,1,1,3,1,1,2,
            3,6,7,1,0,1,3,1,3,1,
            1,1,1,1,1,3,1,1,1,1,
            1,3,1,2,2,1,5,3,1,3,
            5,1,3,1,3,2,4,3,5,4,
            6,6,3,5,1,1,2,3,4,1,
            2,1,3,1,1,3,2,1,1,1,
            1,2,1,2,3,1,1,1,3,1,
            2,2,2,3,4,5,1,5,1,1,
            3,3,4,1,1,2,3,2,3,2,
            1,0,1,2,1,1,1,1,1,2,
            4,3,6,2,4,1,1,-36,0,0,
            0,0,0,0,0,0,-2,0,0,0,
            0,0,0,0,0,0,0,0,0,-5,
            0,0,0,0,0,0,0,0,0,-121,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -177,0,-12,0,0,0,0,0,0,0,
            0,0,-13,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-127,-4,-14,-140,
            -169,-104,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-16,0,
            -170,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -165,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -29,-30,-33,-34,-3,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-17,0,-49,0,0,0,0,0,
            0,0,0,-18,0,0,0,-72,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-71,0,0,
            0,-19,-20,-21,-22,0,-107,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-126,0,0,0,
            0,0,0,0,0,-23,0,0,0,0,
            0,0,0,0,0,0,0,-24,-25,0,
            -185,0,0,0,0,0,0,0,0,-26,
            0,0,0,0,0,0,0,0,0,0,
            -27,0,0,0,0,0,0,0,0,-85,
            0,0,0,0,0,0,0,0,0,0,
            -86,-87,-139,-88,-56,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-57,0,0,0,0,0,
            0,0,0,-89,0,0,0,0,0,0,
            0,0,0,0,-58,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-59,0,0,0,0,0,
            0,0,0,-90,0,0,0,0,0,0,
            0,0,0,0,-60,0,0,0,0,0,
            0,0,0,-91,0,0,0,0,0,0,
            0,0,0,0,-61,0,0,0,0,0,
            0,0,0,-92,0,0,0,0,0,0,
            0,0,0,0,-62,0,0,0,0,0,
            0,0,0,-93,0,0,0,0,0,0,
            0,0,0,0,-63,0,0,0,0,0,
            0,0,0,-94,0,0,0,0,0,0,
            0,0,0,0,-64,0,0,0,0,0,
            0,0,0,-191,0,0,0,0,0,0,
            0,0,0,0,-65,0,0,0,0,0,
            0,0,0,-95,0,0,0,0,0,0,
            0,0,0,0,-66,0,0,0,0,0,
            0,0,0,-130,0,0,0,0,0,0,
            0,0,0,0,-46,0,0,0,0,0,
            0,0,0,0,0,-96,-97,-98,-99,-79,
            0,0,0,0,0,-144,0,0,0,0,
            0,0,0,0,-100,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-101,-102,
            -103,-151,-114,-80,0,0,0,0,-6,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-145,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-168,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -182,0,0,0,0,0,0,0,0,-116,
            0,0,0,0,0,0,0,0,0,-37,
            0,0,0,0,0,0,0,0,-47,0,
            0,0,0,0,0,0,0,-188,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-192,0,0,0,
            0,0,0,0,0,-82,0,0,0,0,
            0,0,0,0,0,-38,0,0,0,0,
            0,0,0,0,-7,0,0,0,0,0,
            0,-119,0,-202,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-120,0,0,0,0,0,0,0,
            0,-131,0,0,0,0,0,0,0,0,
            0,-129,-8,0,0,0,0,0,0,0,
            0,-51,0,0,0,0,0,0,0,0,
            -155,0,0,0,0,0,0,-161,-162,-123,
            -69,-142,-148,-74,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-203,0,0,
            0,0,0,0,0,-113,-67,0,0,-166,
            -193,0,-204,-106,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-54,0,0,0,0,0,0,
            0,0,-160,0,0,0,0,0,0,0,
            -55,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-52,0,0,0,
            0,0,0,0,0,-84,0,0,0,0,
            -76,-179,-9,0,0,0,0,0,0,-115,
            0,0,-143,0,0,0,0,-167,0,-68,
            0,0,-171,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-184,0,0,0,0,
            -75,0,0,-77,0,-111,0,0,0,0,
            -48,0,0,0,0,0,0,0,0,-201,
            0,0,0,0,0,0,-152,0,0,0,
            0,0,0,0,0,0,0,-50,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-10,
            0,0,0,0,0,0,0,-42,0,0,
            0,0,0,0,0,0,0,0,-43,0,
            0,0,0,0,0,0,0,-117,0,-11,
            0,0,0,0,0,0,0,0,0,-44,
            0,0,0,0,0,0,0,0,-108,0,
            -45,0,0,0,0,0,0,0,0,-194,
            0,-73,-187,-156,-109,-118,-35,-124,0,0,
            0,0,0,0,0,0,-110,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-147,0,0,0,0,0,0,-15,-28,
            -31,0,0,-122,-78,0,0,0,0,0,
            0,0,0,-125,0,-39,0,0,0,0,
            0,0,0,0,0,0,0,0,-133,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-40,0,0,0,0,
            0,0,-41,0,0,0,0,0,0,-70,
            0,0,0,0,0,0,-81,0,0,-112,
            -83,0,-135,0,-195,0,-138,0,0,-134,
            -176,0,-128,-136,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-154,0,0,-158,0,
            0,0,0,-141,0,0,-149,0,0,0,
            -137,-175,0,0,-190,-105,0,0,0,0,
            0,0,0,0,0,0,-146,0,0,0,
            0,0,-1,0,0,0,-32,0,0,-132,
            0,0,-150,0,-153,0,0,-163,0,0,
            0,0,-189,0,0,-183,0,0,0,0,
            0,0,-172,0,0,-174,0,0,0,-157,
            0,0,0,0,0,0,0,0,0,-53,
            -159,0,0,-164,-173,0,-199,0,0,0,
            0,0,-178,0,-200,-180,0,-181,0,-186,
            0,0,-197,0,-196,-198,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            83,9,23,23,22,22,26,26,67,67,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,51,51,68,
            68,5,5,5,5,5,5,5,5,5,
            5,6,6,7,7,7,7,8,8,8,
            10,10,10,11,11,11,11,11,12,12,
            12,13,13,14,14,15,15,16,16,17,
            17,18,18,19,19,19,19,19,19,19,
            19,19,19,19,19,93,45,40,84,84,
            71,71,46,94,94,94,94,94,94,94,
            95,95,95,96,96,101,101,102,102,97,
            97,98,98,98,104,104,99,99,99,99,
            100,100,100,100,100,103,103,24,24,24,
            24,24,28,28,28,77,77,72,72,72,
            72,73,73,73,74,74,74,75,75,75,
            76,76,76,105,105,106,106,107,29,31,
            31,31,31,31,52,54,54,54,54,54,
            54,54,54,54,54,54,54,64,64,27,
            27,61,61,61,61,62,62,62,55,55,
            56,56,48,48,48,32,85,85,78,79,
            79,79,63,63,80,80,81,81,65,65,
            20,21,21,21,30,47,47,33,33,33,
            33,36,36,38,34,34,35,39,39,108,
            108,37,109,109,86,86,25,25,25,25,
            25,25,25,25,25,82,49,49,49,49,
            58,58,57,57,57,59,59,50,50,87,
            87,69,69,60,60,60,41,41,41,42,
            43,43,43,44,44,44,44,53,53,70,
            70,70,70,66,88,89,89,90,90,91,
            91,110,110,111,111,112,112,112,112,114,
            114,113,113,113,115,115,83,83,1,14,
            19,15,389,580,43,483,409,42,522,494,
            524,523,556,525,569,568,73,90,133,210,
            644,14,19,15,389,40,135,132,134,158,
            558,14,19,15,389,580,43,483,409,390,
            522,494,524,523,556,525,569,568,73,277,
            137,345,164,644,14,19,15,389,33,141,
            144,147,150,644,14,19,15,389,32,388,
            1211,1264,1445,1507,1511,1206,270,331,118,803,
            649,678,29,279,216,1557,218,1593,220,221,
            226,340,265,1261,1104,268,280,251,210,433,
            613,558,14,19,15,389,580,43,483,409,
            390,522,494,524,523,556,525,569,568,73,
            277,436,14,19,15,389,580,43,483,409,
            390,522,494,524,523,556,525,569,568,73,
            277,471,471,504,504,616,14,19,15,389,
            580,43,483,409,279,522,494,524,523,556,
            525,569,568,73,90,1500,16,280,1130,391,
            285,1603,286,67,281,616,14,19,15,389,
            41,43,483,409,57,522,846,282,368,14,
            19,15,389,580,43,483,409,1385,522,494,
            524,523,556,525,569,568,73,1369,135,23,
            22,236,350,261,11,6,388,672,14,19,
            15,389,580,43,483,409,1388,522,494,524,
            523,556,525,569,568,73,1454,402,14,19,
            15,389,580,43,483,409,91,522,494,524,
            523,556,525,569,568,73,1577,1566,332,87,
            237,587,14,19,15,389,580,43,483,409,
            677,522,494,524,523,556,525,569,568,73,
            277,616,14,19,15,389,580,43,483,409,
            700,522,494,524,523,556,525,569,568,73,
            91,718,164,746,381,616,14,19,15,389,
            580,43,483,409,283,522,494,524,523,556,
            525,569,568,73,84,616,14,19,15,389,
            580,43,483,409,382,522,494,524,523,556,
            525,569,568,73,83,616,14,19,15,389,
            580,43,483,409,1634,522,494,524,523,556,
            525,569,568,73,82,616,14,19,15,389,
            580,43,483,409,446,522,494,524,523,556,
            525,569,568,73,81,616,14,19,15,389,
            580,43,483,409,515,522,494,524,523,556,
            525,569,568,73,80,616,14,19,15,389,
            580,43,483,409,544,522,494,524,523,556,
            525,569,568,73,79,616,14,19,15,389,
            580,43,483,409,496,522,494,524,523,556,
            525,569,568,73,78,616,14,19,15,389,
            580,43,483,409,527,522,494,524,523,556,
            525,569,568,73,77,616,14,19,15,389,
            580,43,483,409,811,522,494,524,523,556,
            525,569,568,73,76,616,14,19,15,389,
            580,43,483,409,452,522,494,524,523,556,
            525,569,568,73,75,616,14,19,15,389,
            580,43,483,409,286,522,494,524,523,556,
            525,569,568,73,74,616,14,19,15,389,
            41,43,483,744,133,210,153,202,288,265,
            116,192,135,132,134,158,616,14,19,15,
            389,580,43,483,409,622,522,494,524,523,
            556,525,569,568,73,1613,137,883,164,596,
            625,603,135,626,166,141,144,147,150,616,
            14,19,15,389,41,39,1211,1264,1445,1507,
            1511,1206,616,14,19,15,389,580,43,483,
            409,950,522,494,524,523,556,525,569,568,
            73,1635,616,14,19,15,389,41,43,483,
            409,361,522,494,524,523,556,525,569,568,
            92,616,14,19,15,389,41,43,483,409,
            651,522,494,524,523,556,525,569,568,92,
            616,14,19,15,389,41,43,612,1650,616,
            14,19,15,389,41,43,483,764,616,14,
            19,15,389,41,43,483,409,209,522,494,
            524,523,556,525,569,568,92,616,14,19,
            15,389,41,43,483,409,212,522,494,524,
            523,556,525,569,568,92,616,14,19,15,
            389,41,43,614,1653,616,14,19,15,389,
            41,38,658,1032,616,14,19,15,389,41,
            43,483,409,200,522,494,524,523,556,525,
            569,568,92,616,14,19,15,389,41,43,
            483,409,497,522,494,524,523,556,525,569,
            568,72,304,616,14,19,15,389,41,37,
            201,882,616,14,19,15,389,41,43,483,
            409,812,522,494,524,523,848,270,231,780,
            256,652,256,64,432,215,1557,218,1593,220,
            221,226,1562,263,1261,1104,268,182,309,259,
            250,210,250,210,20,273,680,504,270,271,
            475,653,260,353,242,1590,215,1557,218,1593,
            220,221,226,1100,263,1261,1104,268,274,881,
            1616,216,1557,218,1593,220,221,226,1223,257,
            1233,1697,1697,1266,616,14,19,15,389,41,
            43,483,409,779,522,494,524,523,556,525,
            879,616,14,19,15,389,41,43,483,409,
            1697,522,494,524,523,556,880,616,14,19,
            15,389,41,43,483,409,286,522,494,524,
            849,327,478,616,14,19,15,389,41,36,
            29,1515,1697,409,1648,1697,133,210,594,1520,
            504,133,210,443,136,132,134,158,1697,140,
            132,134,158,251,210,215,1557,218,1593,220,
            221,226,21,251,210,288,779,1697,138,1131,
            164,48,1697,139,757,164,504,142,145,148,
            151,616,14,19,15,389,41,43,483,409,
            478,522,494,804,133,210,272,711,269,1515,
            196,198,143,132,134,158,824,784,616,14,
            19,15,389,41,43,483,409,1655,522,847,
            1697,1072,1697,215,1557,218,1593,220,221,226,
            616,14,19,15,389,41,35,1131,616,14,
            19,15,389,41,43,483,409,256,644,616,
            14,19,15,389,41,43,483,409,29,684,
            616,14,19,15,389,41,34,1524,197,198,
            616,14,19,15,389,41,43,483,409,652,
            704,616,14,19,15,389,41,43,483,409,
            600,724,160,594,567,256,29,374,256,1515,
            1697,1510,238,1212,1697,1561,518,465,14,19,
            15,389,41,35,273,250,210,270,250,210,
            290,1697,270,215,1557,218,1593,220,221,226,
            243,1697,1697,263,1261,1104,268,1616,263,1261,
            1104,268,465,14,19,15,389,41,35,29,
            29,493,1266,387,290,769,387,262,308,308,
            455,193,1697,1102,652,244,616,14,19,15,
            389,41,46,195,195,133,210,547,1697,29,
            856,1387,1387,146,132,134,158,240,1546,86,
            86,88,1697,1697,454,454,616,14,19,15,
            389,41,45,616,14,19,15,389,41,44,
            529,14,19,15,389,41,42,781,453,1127,
            571,793,1697,29,1697,135,1697,29,1697,824,
            46,680,1549,504,94,1230,1598,133,210,824,
            1565,133,210,824,1072,149,132,134,158,152,
            132,134,158,228,195,275,142,1697,195,238,
            1697,1697,1384,1697,29,824,1384,650,824,1566,
            255,565,571,411,1118,573,408,1523,190,1062,
            195,824,190,195,824,1091,1620,652,1384,1631,
            1620,1384,225,499,1697,1697,1072,29,1098,1072,
            216,270,455,96,190,504,455,190,565,824,
            239,1643,1620,746,1646,1620,594,265,1261,1104,
            268,361,255,652,1072,255,504,276,224,1523,
            190,1062,1637,86,1062,1098,206,86,306,824,
            29,812,1101,1098,812,652,241,504,222,455,
            255,1173,1099,812,195,307,812,1595,812,1062,
            652,1645,1384,652,1656,812,812,181,242,227,
            26,1697,1697,206,1697,1697,317,231,191,184,
            86,207,183,287,202,865,289,1697,1256,1099,
            1697,203,278,1697,0,17,178,0,18,177,
            0,1,1920,0,1,1931,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            0,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,0,29,
            30,31,32,33,34,35,36,37,38,39,
            40,0,42,43,44,0,1,0,3,2,
            5,6,7,8,9,0,0,10,13,14,
            15,16,17,0,1,2,0,0,5,64,
            4,61,62,10,29,30,31,32,33,34,
            35,36,37,38,39,40,0,42,43,44,
            0,46,47,0,1,0,3,2,5,6,
            7,8,9,0,41,10,13,14,15,16,
            17,55,56,57,58,0,1,0,3,53,
            54,80,29,30,31,32,33,34,35,36,
            37,38,39,40,0,42,43,44,4,46,
            47,0,1,28,3,0,5,6,7,8,
            9,65,0,63,13,14,15,16,17,0,
            0,2,45,0,5,0,1,4,3,10,
            29,30,31,32,33,34,35,36,37,38,
            39,40,0,42,43,44,0,46,47,0,
            1,0,3,28,5,6,7,8,9,0,
            41,0,13,14,15,16,17,55,56,57,
            58,0,1,0,3,0,53,54,29,30,
            31,32,33,34,35,36,37,38,39,40,
            0,42,43,44,0,46,47,0,1,28,
            3,0,5,6,7,8,9,6,7,8,
            13,14,15,16,17,0,55,56,57,58,
            0,6,7,8,0,50,29,30,31,32,
            33,34,35,36,37,38,39,40,18,42,
            43,44,18,46,47,0,1,0,3,0,
            60,6,7,8,9,6,7,8,13,14,
            15,16,17,0,1,2,0,4,0,1,
            2,5,4,10,29,30,31,32,33,34,
            35,36,37,38,39,40,0,42,43,44,
            0,0,6,7,8,9,6,7,8,13,
            14,15,16,17,0,1,2,41,4,0,
            63,45,0,1,10,29,30,31,32,33,
            34,35,36,37,38,39,40,0,1,2,
            3,4,5,0,0,2,9,4,11,12,
            0,0,0,10,4,18,19,20,21,22,
            23,24,25,26,27,0,0,48,49,68,
            69,0,1,2,3,4,5,0,0,2,
            9,4,11,12,6,7,8,10,51,18,
            19,20,21,22,23,24,25,26,27,48,
            49,0,0,53,54,0,1,2,3,4,
            5,10,0,11,12,0,11,12,6,7,
            8,0,51,18,19,20,21,22,23,24,
            25,26,27,28,0,1,2,3,4,5,
            0,1,0,3,0,11,12,0,1,2,
            0,46,18,19,20,21,22,23,24,25,
            26,27,0,48,49,0,0,5,0,1,
            2,3,4,0,0,0,11,12,5,11,
            12,0,61,62,0,51,18,19,20,21,
            22,23,24,25,26,27,0,0,0,1,
            2,3,4,41,60,0,59,11,12,11,
            12,45,0,0,41,47,18,19,20,21,
            22,23,24,25,26,27,28,0,1,2,
            3,4,48,49,0,1,0,3,11,12,
            0,5,0,1,4,18,19,20,21,22,
            23,24,25,26,27,28,0,1,2,3,
            4,48,49,0,1,0,3,11,12,0,
            1,2,0,0,18,19,20,21,22,23,
            24,25,26,27,28,0,1,2,3,4,
            50,0,50,0,0,0,11,12,0,1,
            28,3,66,18,19,20,21,22,23,24,
            25,26,27,0,1,2,3,4,0,0,
            0,0,0,28,11,12,5,0,10,10,
            65,18,19,20,21,22,23,24,25,26,
            27,0,1,2,3,4,0,0,28,0,
            59,0,11,12,5,28,0,10,64,18,
            19,20,21,22,23,24,25,26,27,0,
            52,2,51,4,5,6,7,8,9,10,
            0,59,13,14,15,16,17,0,0,2,
            41,4,5,6,7,8,9,10,0,52,
            13,14,15,16,17,0,60,0,0,0,
            41,0,0,0,0,0,70,71,72,73,
            74,75,76,77,78,79,0,0,41,0,
            50,0,6,7,8,9,0,0,0,13,
            14,15,16,17,6,7,8,9,0,0,
            0,13,14,15,16,17,6,7,8,9,
            45,0,0,13,14,15,16,17,6,7,
            8,9,0,0,2,13,14,15,16,17,
            0,0,10,0,0,5,5,0,0,0,
            0,19,20,45,45,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,52,45,0,46,0,0,
            0,0,0,0,0,0,0,0,0,67,
            0,0,0,0,0,0,66,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1697,600,1439,611,1320,67,1908,1909,1910,1858,
            61,1213,1073,1859,1857,1911,1860,1856,1350,373,
            363,330,1707,1708,1709,1710,1025,889,1,1863,
            1868,1867,1865,1866,1864,1869,1870,1862,1871,1872,
            1873,1697,1006,884,850,1697,1,266,1,1126,
            189,1,1,1,1,1697,58,498,1,1,
            1,1,1,1,1691,1103,47,1697,1702,1082,
            1493,1298,485,498,1,1,1,1,1,1,
            1,1,1,1,1,1,69,1,1,1,
            65,189,1891,1697,1,219,1,1521,189,1,
            1,1,1,1697,1701,498,1,1,1,1,
            1,1371,1360,1339,1328,1697,1876,87,1877,1486,
            1456,1684,1,1,1,1,1,1,1,1,
            1,1,1,1,1697,1,1,1,1134,189,
            1891,1697,1,1220,1,1697,189,1,1,1,
            1,1181,60,1197,1,1,1,1,1,1,
            1697,1382,591,49,1702,1697,1876,1493,1877,498,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1697,1,1,1,1697,189,1891,1697,
            1,1697,1,1348,188,1,1,1,1,1697,
            1701,59,1,1,1,1,1,1371,1360,1339,
            1328,1697,1876,1697,1877,1,1486,1456,1,1,
            1,1,1,1,1,1,1,1,1,1,
            208,1,1,1,1697,188,1891,1697,1,1386,
            1,246,189,1,1,1,1,1,1,1,
            1,1,1,1,1,1697,1371,1360,1339,1328,
            63,1908,1909,1910,64,1951,1,1,1,1,
            1,1,1,1,1,1,1,1,1271,1,
            1,1,1271,189,1891,1697,1875,66,1874,247,
            941,1908,1909,1910,1858,1,1,1,1859,1857,
            1911,1860,1856,258,1920,1103,1697,1,1697,1920,
            1380,1702,1444,498,1863,1868,1867,1865,1866,1864,
            1869,1870,1862,1871,1872,1873,127,1006,884,850,
            245,71,1908,1909,1910,1858,1908,1909,1910,1859,
            1857,1911,1860,1856,264,1920,1103,1701,1444,53,
            1197,1133,1697,1932,498,1863,1868,1867,1865,1866,
            1864,1869,1870,1862,1871,1872,1873,1,1714,1439,
            1715,1397,1700,261,1697,1382,527,1,1213,1073,
            48,57,1697,498,1493,1350,373,363,330,1707,
            1708,1709,1710,1025,889,1697,1697,835,969,1164,
            1630,1697,1714,1439,1715,1432,1700,264,248,1382,
            902,1444,1213,1073,1908,1909,1910,498,1699,1350,
            373,363,330,1707,1708,1709,1710,1025,889,835,
            969,267,50,1486,1456,1,1714,1439,1715,1320,
            27,498,249,1016,960,56,1213,1073,1908,1909,
            1910,62,1699,1350,373,363,330,1707,1708,1709,
            1710,1025,889,1554,1697,1714,1439,1715,1320,1700,
            1697,1726,1697,1727,1697,1213,1073,1,1920,1380,
            1697,27,1350,373,363,330,1707,1708,1709,1710,
            1025,889,1,835,969,52,252,89,1697,1,
            1,1,1,1697,1697,1697,1016,960,1702,1,
            1,1697,1298,485,55,1699,1,1,1,1,
            1,1,1,1,1,1,51,1697,1697,1714,
            1439,1715,1320,89,571,1697,997,1016,960,1213,
            1073,1287,1697,54,1701,2004,1350,373,363,330,
            1707,1708,1709,1710,1025,889,392,1,1714,1439,
            1715,1320,835,969,205,1876,1,1877,1213,1073,
            1,1706,1,1694,1134,1350,373,363,330,1707,
            1708,1709,1710,1025,889,1554,1697,1714,1439,1715,
            1320,835,969,1697,1876,70,1877,1213,1073,1,
            1920,1380,1697,1697,1350,373,363,330,1707,1708,
            1709,1710,1025,889,1554,1697,1714,1439,1715,1320,
            1951,1697,1951,1697,68,186,1213,1073,204,1606,
            392,1606,1705,1350,373,363,330,1707,1708,1709,
            1710,1025,889,1697,1714,1440,1715,1320,1697,217,
            185,1697,199,1469,1213,1073,1700,187,922,498,
            1181,1350,373,363,330,1707,1708,1709,1710,1025,
            889,1,1714,1439,1715,1320,41,284,1513,1,
            1053,1697,1213,1073,1702,1517,1697,978,1082,1350,
            373,363,330,1707,1708,1709,1710,1025,889,17,
            1228,1685,1699,1685,1685,178,178,178,178,1685,
            1,1034,178,178,178,178,178,18,1697,1688,
            1701,1688,1688,177,177,177,177,1688,1697,1383,
            177,177,177,177,177,1697,815,1697,1697,1697,
            1685,1697,1697,1697,1697,28,795,775,755,735,
            715,675,695,655,635,615,128,1697,1688,1697,
            1950,1697,1908,1909,1910,1858,1697,1697,129,1859,
            1857,1911,1860,1856,1908,1909,1910,1858,28,204,
            130,1859,1857,1911,1860,1856,1908,1909,1910,1858,
            431,1697,131,1859,1857,1911,1860,1856,1908,1909,
            1910,1858,31,1697,1441,1859,1857,1911,1860,1856,
            1697,1697,1587,1697,1697,1706,1704,1697,1697,1697,
            1697,1721,1722,1724,2633,1697,1697,1697,1697,1697,
            1697,1697,1697,1697,1697,1697,1697,1697,1697,1697,
            1697,1697,1697,1697,1697,1697,1697,1697,1697,1697,
            1697,1697,1697,1697,452,1280,1697,1703,1697,1697,
            1697,1697,1697,1697,1697,1697,1697,1697,1697,451,
            1697,1697,1697,1697,1697,1697,1705
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            415,1,108,41,108,108,108,108,108,108,
            108,108,108,3,326,77,74,81,79,87,
            85,89,88,91,90,10,108,326,310,310,
            367,108,191,191,244,326,108,108,108,108,
            108,108,108,108,108,108,108,108,108,108,
            108,108,108,108,108,108,108,108,108,108,
            108,108,108,108,108,108,191,191,45,56,
            248,102,280,189,188,219,231,231,70,70,
            231,70,231,340,145,145,74,74,79,79,
            79,79,77,77,85,81,81,88,87,212,
            90,89,72,54,244,239,125,45,363,106,
            191,386,283,194,250,194,250,320,194,108,
            54,239,363,363,45,105,102,191,242,340,
            190,285,250,250,250,250,320,320,322,49,
            54,363,239,108,108,45,106,280,207,206,
            248,285,191,250,277,313,250,250,277,322,
            214,322,320,277,52,217,310,108,48,54,
            239,45,45,191,386,283,242,277,315,277,
            277,108,310,322,56,45,310,108,322,285,
            98,108,97,121,248,277,45,277,191,190,
            315,108,121,311
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,66,10,2,52,67,19,20,18,
            4,11,12,53,54,48,49,55,56,57,
            58,61,62,63,64,65,68,69,46,60,
            70,71,72,73,74,76,75,77,78,79,
            59,41,80,45,51,5,0,60,10,52,
            0,5,46,10,52,19,20,18,4,11,
            12,26,27,21,2,22,23,24,25,1,
            3,28,0,4,53,54,11,12,49,48,
            55,56,57,58,61,62,18,63,64,65,
            51,41,46,80,68,69,59,66,5,45,
            0,6,7,8,9,51,5,22,23,24,
            25,3,19,20,18,11,12,26,27,21,
            4,2,1,0,6,7,8,2,22,23,
            24,25,1,3,19,20,18,4,11,12,
            26,27,21,0,7,9,17,8,16,15,
            14,6,13,52,67,19,20,18,11,12,
            53,54,48,49,55,56,57,58,61,62,
            63,64,65,68,69,60,70,71,72,73,
            74,75,76,77,78,79,4,2,10,45,
            41,5,0,13,6,14,15,16,7,9,
            17,8,1,4,28,2,5,45,41,66,
            10,59,0,5,45,46,60,0,37,29,
            34,32,33,31,30,35,36,38,39,40,
            59,66,17,14,9,13,16,15,6,7,
            8,45,1,5,41,2,10,4,0,13,
            29,6,30,42,14,31,15,32,33,16,
            7,34,35,9,43,17,44,36,37,8,
            38,39,40,1,3,47,46,5,0,4,
            2,10,41,5,13,29,6,30,42,14,
            31,15,32,33,16,7,34,35,9,43,
            17,44,36,37,8,38,39,40,50,3,
            1,0,66,5,4,1,2,59,0,1,
            3,5,46,45,0,21,22,23,24,25,
            2,19,20,18,4,11,12,26,27,3,
            1,42,43,44,37,29,34,32,33,31,
            30,35,36,38,39,40,17,14,9,13,
            16,15,6,7,8,0,5,41,21,22,
            23,24,25,1,3,2,19,20,18,4,
            11,12,26,27,0,13,29,6,30,42,
            14,31,15,32,33,16,7,34,35,9,
            43,17,44,36,37,8,38,39,40,1,
            3,50,4,0,21,22,23,24,25,1,
            3,2,19,20,18,4,11,12,26,27,
            47,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            83,8,17,8,17,17,17,17,17,17,
            17,17,17,8,64,8,8,8,8,8,
            8,8,8,8,8,8,17,64,19,19,
            68,65,41,41,55,1,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,65,17,17,17,17,17,17,17,
            17,17,17,17,17,17,41,41,23,17,
            73,21,54,38,38,47,48,48,27,27,
            48,27,48,43,8,8,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,81,56,81,16,23,62,22,
            41,71,40,8,81,8,81,81,8,17,
            16,81,62,62,23,22,9,41,32,2,
            8,80,81,75,81,75,27,81,25,11,
            81,62,9,17,17,23,22,31,38,38,
            73,80,41,75,29,59,86,75,29,25,
            8,8,27,29,15,8,27,17,13,16,
            9,23,23,41,71,40,33,29,50,29,
            29,17,27,25,17,23,27,17,25,79,
            60,17,8,50,73,29,23,29,41,41,
            50,17,35,8
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,77,76,75,74,73,72,0,20,0,
            89,0,91,0,66,9,4,0,68,0,
            9,4,23,0,51,0,27,0,26,0,
            22,9,43,42,36,34,0,25,0,9,
            22,0,61,62,63,64,52,28,0,9,
            36,34,0,22,9,43,42,0,9,67,
            0,58,0,32,9,45,0,9,84,0,
            9,24,49,0,56,9,32,0,86,24,
            9,0,9,83,0,9,32,48,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,69,1,
            10,11,44,55,60,63,72,8,6,7,
            68,81,82,83,84,12,13,3,47,52,
            56,61,62,66,67,74,75,78,79,80,
            90,54,70,73,42,91,93,16,17,30,
            89,4,14,15,18,19,20,21,29,31,
            22,23,24,25,26,92,5,27,28,32,
            33,34,35,36,37,38,39,40,41,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,101,105,106,107,108,0,109,
            110,111,112,113,114,115,116,117,118,129,
            0,97,96,122,149,98,121,128,0,0,
            0,140,145,147,0,148,0,0,0,0,
            158,159,160,0,100,120,137,139,146,155,
            0,131,136,0,0,138,150,153,154,157,
            132,133,134,135,144,161,99,102,103,104,
            119,123,124,125,126,127,130,142,0,0,
            143,152,95,0,141,151,156,162,163,0,
            164,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            160,80,33,39,87,107,113,138,12,19,
            49,67,119,124,26,45,97,175,179,147,
            1,1,30,54,77,183,6,101,154,129,
            154,93,57,57,57
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            17,17,4,4,17,17,17,144,17,24,
            4,24,17,17,24,4,95,24,4,151,
            4,4,24,4,24,24,9,104,157,132,
            168,95,64,59,72
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            4,63,25,25,63,61,61,98,53,44,
            25,39,61,61,44,25,48,4,4,18,
            91,90,42,25,36,2,66,48,6,99,
            4,48,39,37,39
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            46,46,51,51,46,46,46,86,46,41,
            51,41,46,46,41,51,66,41,51,59,
            51,51,41,51,41,41,60,1,41,92,
            41,66,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            34,19,23,23,19,19,19,-1,89,27,
            23,11,19,19,27,23,5,34,34,64,
            1,3,27,23,11,34,90,5,37,-1,
            34,5,11,11,11
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            139,10,0,96,0,181,102,0,31,136,
            0,144,163,102,28,0,98,0,150,102,
            2,135,0,97,0,150,102,2,0,153,
            2,0,112,9,175,102,10,0,112,175,
            102,9,10,0,112,9,10,0,112,175,
            102,10,0,112,10,0,129,0,2,0,
            151,97,0,2,97,0,150,102,2,129,
            0,2,0,150,97,0,140,2,0,144,
            173,102,28,120,42,0,144,173,102,28,
            42,0,125,0,99,0,178,102,125,0,
            102,125,0,141,99,0,148,102,28,120,
            44,0,148,102,28,120,43,0,148,102,
            28,44,0,148,102,28,43,0,187,85,
            0,77,2,100,97,99,0,187,115,138,
            2,89,0,53,0,0,138,69,110,0,
            29,117,0,162,2,0,97,106,0,144,
            163,102,28,115,162,2,0,97,3,0,
            104,0,98,0,177,2,97,0,138,10,
            97,0,138,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            391,0,390,0,1549,1620,1546,1524,1520,0,
            1118,1280,1380,1212,361,1103,1072,0,824,1206,
            308,0,1593,1557,1261,1104,361,1103,1072,1566,
            1382,1387,0,373,363,330,1432,1397,1500,1181,
            1164,1197,1082,1298,485,1271,969,835,1371,1360,
            1339,1328,1493,1486,1456,1016,960,1350,1320,1213,
            1073,1025,889,1034,997,978,941,922,902,856,
            547,1053,527,498,815,795,775,755,735,715,
            695,675,655,635,615,308,591,455,571,411,
            431,340,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,176,102,164,21,27,26,12,11,4,
            18,20,19,97,2,101,100,104,103,106,
            105,108,107,110,109,98,45,2,67,52,
            2,10,162,138,125,102,12,11,54,53,
            4,58,57,56,55,48,49,18,62,61,
            64,63,69,68,65,79,78,77,75,76,
            74,73,72,71,70,60,162,177,138,115,
            102,10,2,136,135,165,166,167,44,43,
            168,42,169,170,1,3,100,100,103,103,
            103,103,101,101,105,104,104,107,106,138,
            109,108,115,28,142,4,9,112,102,4,
            153,102,2,120,28,120,28,28,120,59,
            102,4,102,102,112,175,151,150,117,102,
            152,102,28,102,28,102,102,28,163,102,
            28,102,151,175,9,112,4,2,127,129,
            102,45,150,102,148,125,149,102,148,173,
            120,174,102,144,45,181,52,10,182,102,
            151,112,112,140,102,2,142,148,102,148,
            144,60,45,173,60,139,52,10,163,102,
            178,59,140,2,102,144,139,144,150,179,
            45,59,142,45
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_sizeof_type_name_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_name",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_or_typedefname",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 47,
           SCOPE_UBOUND      = 34,
           SCOPE_SIZE        = 35,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 204,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2004,
           MAX_LA            = 2,
           NUM_RULES         = 307,
           NUM_NONTERMINALS  = 115,
           NUM_SYMBOLS       = 208,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1583,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1684,
           ERROR_ACTION      = 1697;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
