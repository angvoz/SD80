/*******************************************************************************
* Copyright (c) 2006, 2007 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*******************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.c99;

public class C99ExprEvaluatorprs implements lpg.lpgjavaruntime.ParseTable, C99ExprEvaluatorsym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,1,1,1,3,1,2,2,2,2,
            1,3,3,3,1,3,3,1,3,3,
            1,3,3,3,3,1,3,3,1,3,
            1,3,1,3,1,3,1,3,1,5,
            1,-1,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-7,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-36,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-54,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-37,0,0,0,0,0,
            0,0,0,0,0,0,0,-34,0,0,
            0,0,0,0,0,0,0,0,0,-35,
            0,0,0,0,0,0,0,0,0,0,
            -32,0,0,0,0,0,0,0,0,0,
            -33,0,0,0,0,0,0,0,0,-26,
            0,0,0,0,0,0,0,-27,0,0,
            0,0,0,0,0,-28,0,0,0,0,
            0,0,-29,0,0,0,0,0,0,-30,
            0,0,0,0,0,0,-31,0,0,0,
            0,0,0,-22,0,0,0,0,0,-23,
            0,0,0,0,0,-24,0,0,0,0,
            -25,0,0,0,0,-3,0,0,0,-4,
            0,0,0,-5,0,0,0,-6,0,0,
            0,-19,0,0,0,-20,0,0,0,-21,
            0,0,0,-2,-8,-9,-10,-11,-12,-13,
            -14,-15,-16,-17,-18,-38,-39,-40,-41,-42,
            -43,-44,-45,-46,-47,-48,-49,-50,-51,-52,
            -53,0
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            15,1,1,2,2,2,3,3,3,3,
            3,4,4,4,4,5,5,5,6,6,
            6,7,7,7,7,7,8,8,8,9,
            9,10,10,11,11,12,12,13,13,14,
            14,15,1,3,6,11,255,257,256,259,
            258,261,260,263,262,264,41,254,1,3,
            6,11,255,257,256,259,258,261,260,263,
            262,264,41,265,1,3,6,11,255,257,
            256,259,258,261,260,263,262,264,41,280,
            1,3,6,11,255,257,256,259,258,261,
            260,263,262,264,40,1,3,6,11,255,
            257,256,259,258,261,260,263,281,1,3,
            6,11,255,257,256,259,258,261,260,278,
            1,3,6,11,255,257,256,259,258,261,
            279,1,3,6,11,255,257,256,259,258,
            276,1,3,6,11,255,257,256,259,277,
            1,3,6,11,255,257,256,270,1,3,
            6,11,255,257,256,271,1,3,6,11,
            255,257,272,1,3,6,11,255,257,273,
            1,3,6,11,255,257,274,1,3,6,
            11,255,257,275,1,3,6,11,255,266,
            1,3,6,11,255,267,1,3,6,11,
            268,1,3,6,11,269,1,3,6,10,
            1,3,6,9,1,3,6,8,1,3,
            6,7,1,3,6,14,1,3,6,13,
            1,3,6,12,57,19,7,46,39,2,
            74,76,58,77,18,78,51,56,30,38,
            6,23,61,64,67,70,79,73,81,80,
            83,84,284,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,0,0,3,4,0,0,1,2,8,
            9,10,11,8,9,10,11,0,0,19,
            20,21,0,5,6,7,26,27,28,0,
            8,9,10,11,5,6,7,0,0,22,
            23,0,5,6,7,0,0,0,3,4,
            0,13,14,3,4,0,0,0,3,4,
            0,1,2,0,1,2,0,1,2,0,
            1,2,0,0,17,0,0,0,0,0,
            0,25,0,0,0,13,14,12,15,0,
            12,0,16,0,15,18,16,0,0,0,
            17,0,0,0,0,0,24,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            284,26,284,238,234,28,21,204,210,197,
            190,183,176,197,190,183,176,39,15,58,
            230,226,27,250,246,242,288,285,286,17,
            197,190,183,176,250,246,242,16,29,105,
            74,284,250,246,242,18,284,284,221,216,
            20,168,160,221,216,19,284,37,221,216,
            25,204,210,24,204,210,23,204,210,22,
            204,210,30,33,118,31,35,284,32,34,
            36,283,284,38,284,168,160,151,141,284,
            151,284,130,284,141,289,130,284,284,284,
            118,284,284,284,284,284,90
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static byte asb[] = {0,
            1,10,1,1,1,1,1,12,17,15,
            23,19,26,25,28,27,29,35,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,15,15,12,
            12,19,19,17,17,17,17,25,23,27,
            26,33,28,1
        };
    };
    public final static byte asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            26,19,27,28,3,4,20,21,0,25,
            0,5,6,7,3,4,2,1,8,9,
            10,11,13,14,12,15,16,17,18,25,
            22,23,24,0,18,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            1,4,3,3,3,3,1,4,4,4,
            4,4,4,4,4,4,4,4,3,3,
            3,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,1
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static byte nasr[] = {0,
            4,0,3,0
        };
    };
    public final static byte nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static byte terminalIndex[] = {0,
            19,20,13,14,12,17,18,21,22,23,
            24,11,25,26,27,28,29,3,4,15,
            16,30,31,32,51,89,90,92,1,2,
            5,6,7,8,9,10,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,52,53,54,55,56,57,58,
            59,60,61,62,63,64,65,66,67,68,
            69,70,71,72,73,74,75,76,77,78,
            79,80,81,82,83,84,85,86,87,88,
            91,93,94,95,96,97,98
        };
    };
    public final static byte terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static byte nonterminalIndex[] = {0,
            0,0,100,101,102,103,104,105,106,107,
            108,109,110,111,99,0
        };
    };
    public final static byte nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static byte scopePrefix[] = {
            1,8
        };
    };
    public final static byte scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static byte scopeSuffix[] = {
            5,11
        };
    };
    public final static byte scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static byte scopeLhs[] = {
            14,2
        };
    };
    public final static byte scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            24,18
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            23,1
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static byte scopeRhs[] = {0,
            112,23,110,0,32,111,0,112,19,0,
            3,0
        };
    };
    public final static byte scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            105,130,118,151,141,197,190,183,176,168,
            160,221,216,210,204,250,246,242,238,234,
            230,226,90,74,58,42,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static byte inSymb[] = {0,
            0,112,21,20,4,3,19,101,103,102,
            105,104,107,106,109,108,110,112,7,6,
            5,1,2,4,3,14,13,11,10,9,
            8,15,12,17,16,23,22,102,102,101,
            101,104,104,103,103,103,103,106,105,108,
            107,112,109,24
        };
    };
    public final static byte inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "]",
            "[",
            ")",
            "(",
            "}",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            ";",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "#",
            "##",
            "nl",
            "$empty",
            "EOF_TOKEN",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "identifier",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "Invalid",
            "PlaceMarker",
            "Parameter",
            "DisabledMacroName",
            "ERROR_TOKEN",
            "constant_expression",
            "unary_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 97,
           SCOPE_UBOUND      = 1,
           SCOPE_SIZE        = 2,
           MAX_NAME_LENGTH   = 25;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 54,
           NT_OFFSET         = 97,
           LA_STATE_OFFSET   = 325,
           MAX_LA            = 1,
           NUM_RULES         = 41,
           NUM_NONTERMINALS  = 16,
           NUM_SYMBOLS       = 113,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 42,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 25,
           EOLT_SYMBOL       = 25,
           ACCEPT_ACTION     = 283,
           ERROR_ACTION      = 284;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
