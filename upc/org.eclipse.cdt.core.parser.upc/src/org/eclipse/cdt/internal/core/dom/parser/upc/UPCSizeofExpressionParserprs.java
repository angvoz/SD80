/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.upc;

public class UPCSizeofExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, UPCSizeofExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,3,1,1,
            4,4,3,3,2,2,8,1,0,1,
            1,2,2,2,2,2,2,2,2,2,
            1,4,1,3,3,3,1,3,3,1,
            3,3,1,3,3,3,3,1,3,3,
            1,3,1,3,1,3,1,3,1,3,
            1,5,1,3,3,3,3,3,3,3,
            3,3,3,3,1,1,2,1,0,1,
            3,1,1,1,1,1,1,1,1,3,
            4,3,2,4,1,2,1,1,1,2,
            5,7,5,1,0,7,5,9,8,3,
            2,2,2,3,2,4,2,2,2,2,
            2,1,1,1,1,2,1,2,2,2,
            1,2,2,1,2,2,1,2,2,1,
            2,2,1,3,1,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,6,8,0,
            0,1,1,3,3,3,0,1,0,1,
            2,4,2,1,1,1,3,1,1,2,
            3,7,8,0,1,0,1,3,1,3,
            1,1,1,1,1,1,3,1,1,1,
            1,1,3,1,2,2,1,5,3,1,
            3,5,1,3,1,3,2,4,3,5,
            4,6,6,3,5,1,2,3,4,5,
            0,1,2,1,3,1,1,3,2,1,
            1,1,1,2,1,2,3,1,1,1,
            3,1,2,2,2,3,4,5,1,7,
            3,0,0,1,1,3,3,4,1,1,
            2,3,2,3,2,1,0,1,2,1,
            1,1,1,1,2,4,3,6,2,4,
            1,1,1,1,1,2,2,2,1,1,
            2,1,1,1,3,3,2,1,3,2,
            3,2,3,2,2,11,10,10,9,10,
            9,9,8,10,9,9,8,9,8,8,
            7,10,9,9,8,9,8,8,7,1,
            1,-39,0,0,0,0,0,0,0,0,
            0,0,-2,0,0,0,0,0,0,0,
            0,0,-4,0,0,0,0,-84,-77,-17,
            0,0,0,0,-125,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-19,-78,
            -80,-81,-36,0,0,0,0,0,-9,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-10,0,0,0,
            0,0,0,0,0,-119,0,-20,0,-191,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -164,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-52,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-134,0,-37,-21,-108,
            0,-114,0,0,0,0,0,0,0,0,
            0,-120,0,0,-22,0,-70,0,0,0,
            0,0,0,0,0,0,0,0,-71,-72,
            0,-57,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-121,0,0,-122,0,0,0,0,
            0,0,-40,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-75,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-187,
            0,0,0,0,0,0,0,0,0,0,
            -112,0,0,0,0,0,0,0,0,0,
            -3,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-123,0,-58,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-111,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-85,-129,-118,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-49,0,0,0,
            0,0,0,0,0,0,-130,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-30,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-59,
            0,0,0,0,0,0,0,0,0,0,
            -137,0,0,0,0,0,0,0,0,0,
            -60,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-61,0,0,0,0,0,0,0,0,
            0,0,-151,0,0,0,0,0,0,0,
            0,0,-62,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-63,0,0,0,0,0,0,
            0,0,0,0,-173,0,0,0,0,0,
            0,0,0,0,-64,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-65,0,0,0,0,
            0,0,0,0,0,0,-174,0,0,0,
            0,0,0,0,0,0,-66,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-67,0,0,
            0,0,0,0,0,0,0,0,-188,0,
            0,0,0,0,0,0,0,0,-68,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-69,
            0,0,0,0,0,0,0,0,0,0,
            -139,0,0,0,0,0,0,0,0,0,
            -149,0,0,0,0,0,0,0,0,0,
            0,-200,0,0,0,0,0,0,0,0,
            0,-150,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-167,0,0,0,0,0,0,0,
            0,0,0,-23,0,0,0,0,0,0,
            0,0,-190,0,0,0,0,0,0,0,
            0,0,0,-127,0,0,0,0,0,0,
            0,0,0,-24,0,0,-11,0,0,0,
            0,0,0,0,-198,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-206,0,0,0,0,0,
            0,0,0,0,0,-140,0,0,0,0,
            0,0,0,0,-32,0,0,0,-12,0,
            0,0,0,0,0,0,-214,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-124,0,0,0,
            0,0,0,0,0,0,0,-87,0,0,
            0,0,0,0,0,0,-89,0,-115,0,
            -54,0,0,0,0,0,0,0,0,0,
            0,-34,0,0,0,0,0,-25,0,0,
            0,0,0,-144,0,0,0,0,0,-133,
            -50,0,0,0,0,0,0,0,0,0,
            0,-41,0,0,0,0,0,0,0,0,
            0,-74,0,0,0,-199,0,0,0,0,
            0,0,0,-83,0,0,0,0,0,0,
            0,-153,-117,0,0,0,0,-132,0,-33,
            0,0,0,0,0,0,0,0,0,0,
            -143,-26,0,0,0,0,-163,0,0,0,
            -184,0,0,0,-148,-82,0,0,0,0,
            0,0,0,-166,0,0,0,0,0,-178,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-55,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-189,0,
            -195,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-51,0,0,
            0,0,0,0,0,0,0,0,-156,0,
            0,-213,-209,-35,-56,0,0,0,0,0,
            0,0,0,-27,0,0,0,-28,-29,0,
            -53,0,0,0,0,0,0,0,0,0,
            0,0,0,-142,-90,0,0,0,0,0,
            0,0,0,-215,0,0,0,-154,-91,0,
            0,0,0,0,0,0,-5,0,0,0,
            0,0,0,0,-45,0,0,0,0,0,
            0,0,0,0,0,0,0,-92,0,0,
            0,0,0,0,0,0,0,-46,0,0,
            0,0,0,0,0,0,0,0,-47,0,
            0,0,0,0,0,0,0,0,0,-48,
            0,0,0,0,0,0,0,0,0,0,
            -79,-208,-13,0,0,0,0,0,0,0,
            -145,-168,0,-205,-169,-147,-93,-76,-155,-216,
            -94,0,0,0,0,0,0,-158,0,0,
            0,0,0,-175,-95,-96,0,0,0,0,
            0,0,0,0,-86,0,0,-161,0,-170,
            0,-97,-202,0,0,-196,0,-88,0,0,
            0,0,0,0,0,-98,0,0,0,0,
            -99,-100,-179,0,0,0,0,0,0,0,
            0,0,0,0,0,-109,0,0,0,0,
            -138,0,0,0,0,0,0,0,-152,0,
            0,0,0,0,0,0,-38,-203,0,-101,
            -201,0,0,0,-102,-103,0,0,0,0,
            -14,0,0,0,0,0,0,0,-180,0,
            0,0,0,0,0,-42,0,0,0,0,
            0,0,0,-6,0,0,0,0,0,0,
            0,0,0,0,-43,0,0,0,0,0,
            0,0,0,0,-104,-105,0,-44,0,0,
            0,0,0,0,0,-73,0,0,0,0,
            0,0,0,-116,-131,-177,-176,-7,0,0,
            0,0,0,0,0,-106,0,0,-8,0,
            0,0,0,0,0,-107,0,0,0,0,
            0,0,-110,0,-197,-204,0,-126,-135,0,
            -15,0,0,0,0,0,0,-16,0,0,
            0,0,0,0,0,0,-18,0,0,-31,
            0,-141,0,0,-146,0,-113,0,0,0,
            0,-181,-128,-160,-159,-165,-193,-185,-210,-162,
            0,-194,0,0,0,-186,0,0,0,0,
            0,0,0,-171,0,0,0,0,0,-207,
            0,0,-1,0,0,-211,0,0,0,0,
            -136,-182,0,0,-212,0,0,0,0,-183,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-157,0,0,0,
            0,0,-172,0,0,0,0,0,-192,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            89,11,21,21,26,26,34,34,71,71,
            1,1,2,2,2,2,3,3,3,4,
            5,5,5,5,5,5,5,5,53,53,
            72,6,6,6,6,6,6,6,6,6,
            6,7,7,8,8,8,8,9,9,9,
            10,10,10,12,12,12,12,12,13,13,
            13,14,14,15,15,16,16,17,17,18,
            18,19,19,20,20,20,20,20,20,20,
            20,20,20,20,20,104,48,42,90,90,
            75,75,43,105,105,105,105,105,105,105,
            106,106,106,107,107,112,112,113,113,108,
            108,109,109,109,115,115,110,110,110,110,
            111,111,111,111,111,114,114,27,27,27,
            27,27,29,29,29,81,81,76,76,76,
            76,77,77,77,78,78,78,79,79,79,
            80,80,80,116,116,117,117,118,30,32,
            32,32,32,32,54,56,56,56,56,56,
            56,56,56,56,56,56,56,65,62,62,
            91,92,66,66,63,63,63,67,82,82,
            83,83,68,68,68,50,93,93,84,85,
            85,85,64,64,94,86,86,87,87,69,
            69,22,23,23,23,31,49,49,35,35,
            35,35,38,38,40,36,36,37,41,41,
            119,119,39,120,120,95,95,28,28,28,
            28,28,28,28,28,28,88,51,51,51,
            51,33,58,58,57,57,57,59,59,52,
            52,96,96,73,73,60,60,60,44,44,
            44,45,46,46,46,47,47,47,47,55,
            55,55,61,97,74,74,74,74,70,98,
            99,99,100,100,101,101,121,121,122,122,
            123,123,123,123,125,125,124,124,124,126,
            126,89,89,2,2,2,6,6,6,22,
            22,24,24,25,25,102,102,102,105,127,
            127,127,127,127,127,127,110,110,110,110,
            110,110,110,110,110,110,110,110,110,110,
            110,110,110,110,110,110,110,110,110,110,
            128,128,1,1425,16,20,17,390,1409,43,
            468,419,545,324,529,1104,1074,1302,1228,1408,
            1404,73,90,329,133,211,319,320,455,248,
            877,135,132,134,158,590,19,16,20,17,
            390,1409,43,468,419,545,1234,529,1104,1074,
            1302,1228,1408,1404,73,279,137,273,164,356,
            355,791,792,598,141,144,147,150,1316,686,
            19,16,20,17,390,41,39,383,1511,422,
            1274,1555,1568,1207,133,211,319,320,274,1686,
            284,143,132,134,158,542,1755,686,19,16,
            20,17,390,41,38,285,762,1011,414,1301,
            654,19,16,20,17,390,1409,43,468,419,
            545,1234,529,1104,1074,1302,1228,1408,1404,73,
            279,359,19,16,20,17,390,1409,43,468,
            419,545,1234,529,1104,1074,1302,1228,1408,1404,
            73,279,686,19,16,20,17,390,41,43,
            468,419,545,321,1582,284,225,177,598,287,
            6,1755,443,19,16,20,17,390,41,35,
            285,395,293,185,1621,39,286,598,133,211,
            319,320,1755,244,18,135,132,134,158,598,
            230,287,686,19,16,20,17,390,41,43,
            468,419,545,1716,529,1104,1074,1302,1228,1676,
            137,21,164,293,184,22,895,1752,141,144,
            147,150,1316,686,19,16,20,17,390,41,
            43,1439,1511,422,1274,1555,1568,1207,281,19,
            16,20,17,390,1409,43,468,419,545,1757,
            529,1104,1074,1302,1228,1408,1404,73,641,237,
            622,19,16,20,17,390,1409,43,468,419,
            545,230,529,1104,1074,1302,1228,1408,1404,73,
            279,686,19,16,20,17,390,1409,43,468,
            419,545,239,529,1104,1074,1302,1228,1408,1404,
            73,90,293,186,686,19,16,20,17,390,
            41,43,468,419,545,288,529,1104,1074,1302,
            1706,1755,750,19,16,20,17,390,1409,43,
            468,419,545,1763,529,1104,1074,1302,1228,1408,
            1404,73,714,518,230,478,19,16,20,17,
            390,41,43,468,419,545,383,529,1104,1074,
            1302,1228,1408,1404,92,241,327,686,19,16,
            20,17,390,41,43,468,1562,316,19,16,
            20,17,390,1409,43,468,419,545,801,529,
            1104,1074,1302,1228,1408,1404,73,843,238,686,
            19,16,20,17,390,1409,43,468,419,545,
            583,529,1104,1074,1302,1228,1408,1404,73,91,
            686,19,16,20,17,390,1409,43,468,419,
            545,230,529,1104,1074,1302,1228,1408,1404,73,
            84,686,19,16,20,17,390,1409,43,468,
            419,545,325,529,1104,1074,1302,1228,1408,1404,
            73,83,686,19,16,20,17,390,1409,43,
            468,419,545,230,529,1104,1074,1302,1228,1408,
            1404,73,82,686,19,16,20,17,390,1409,
            43,468,419,545,240,529,1104,1074,1302,1228,
            1408,1404,73,81,686,19,16,20,17,390,
            1409,43,468,419,545,230,529,1104,1074,1302,
            1228,1408,1404,73,80,686,19,16,20,17,
            390,1409,43,468,419,545,242,529,1104,1074,
            1302,1228,1408,1404,73,79,686,19,16,20,
            17,390,1409,43,468,419,545,230,529,1104,
            1074,1302,1228,1408,1404,73,78,686,19,16,
            20,17,390,1409,43,468,419,545,243,529,
            1104,1074,1302,1228,1408,1404,73,77,686,19,
            16,20,17,390,1409,43,468,419,545,230,
            529,1104,1074,1302,1228,1408,1404,73,76,686,
            19,16,20,17,390,1409,43,468,419,545,
            292,529,1104,1074,1302,1228,1408,1404,73,75,
            686,19,16,20,17,390,1409,43,468,419,
            545,40,529,1104,1074,1302,1228,1408,1404,73,
            74,686,19,16,20,17,390,1409,43,468,
            419,545,230,529,1104,1074,1302,1228,1408,1404,
            73,885,686,19,16,20,17,390,1409,43,
            468,419,545,294,529,1104,1074,1302,1228,1408,
            1404,73,927,686,19,16,20,17,390,41,
            43,468,419,545,183,529,1104,1074,1302,1228,
            1408,1404,92,686,19,16,20,17,390,41,
            43,468,419,545,75,529,1104,1074,1302,1228,
            1408,1404,92,1765,252,1315,969,686,19,16,
            20,17,390,41,37,686,19,16,20,17,
            390,41,43,468,419,545,1032,529,1104,1074,
            1302,1228,1408,1404,92,686,19,16,20,17,
            390,41,43,468,419,545,6,529,1104,1074,
            1302,1228,1408,1404,92,293,30,1764,210,686,
            19,16,20,17,390,41,36,686,19,16,
            20,17,390,41,43,468,419,545,200,529,
            1104,1074,1302,1228,1408,1404,92,686,19,16,
            20,17,390,41,43,468,419,545,525,529,
            1104,1074,1302,1228,1408,1404,72,225,177,598,
            201,686,19,16,20,17,390,41,43,468,
            419,545,566,529,1104,1074,1625,24,115,133,
            211,319,320,651,289,271,136,132,134,158,
            127,686,19,16,20,17,390,41,43,468,
            1576,1389,686,19,16,20,17,390,41,43,
            1468,138,16,164,88,672,293,1768,272,142,
            145,148,151,1316,830,216,1438,219,1529,221,
            222,227,415,694,265,420,389,270,598,261,
            293,30,586,1697,1801,1723,133,211,319,320,
            262,691,80,146,132,134,158,71,275,276,
            272,802,559,1596,277,66,24,216,1438,219,
            1529,221,222,227,293,293,265,420,389,270,
            406,1544,1766,1522,290,208,259,252,211,319,
            320,27,1209,686,19,16,20,17,390,41,
            43,468,419,545,1307,529,1104,1626,272,293,
            295,489,23,1728,1725,217,1438,219,1529,221,
            222,227,1393,1843,267,420,389,270,686,19,
            16,20,17,390,41,43,468,419,545,16,
            529,1581,489,16,6,6,216,1438,219,1529,
            221,222,227,1393,130,651,651,466,179,53,
            1790,686,19,16,20,17,390,41,43,468,
            419,545,1723,1620,6,782,1723,216,1438,219,
            1529,221,222,227,831,1770,86,86,820,565,
            1330,1790,560,1675,1434,196,198,718,19,16,
            20,17,390,318,1524,686,19,16,20,17,
            390,41,43,468,419,1527,226,1728,597,217,
            1438,219,1529,221,222,227,197,198,686,19,
            16,20,17,390,41,43,468,419,1531,686,
            19,16,20,17,390,41,43,468,419,1545,
            686,19,16,20,17,390,41,43,468,419,
            1546,391,633,686,19,16,20,17,390,41,
            35,6,451,1393,239,71,187,315,886,887,
            59,429,1525,133,211,319,320,1784,598,1694,
            140,132,134,158,598,667,669,216,1438,219,
            1529,221,222,227,275,839,272,225,6,281,
            6,1544,545,598,278,139,802,164,848,1810,
            223,470,265,420,389,270,890,133,211,319,
            320,493,328,6,149,132,134,158,1209,228,
            133,211,319,320,1772,192,808,152,132,134,
            158,443,19,16,20,17,390,41,35,443,
            19,16,20,17,390,41,35,807,692,1769,
            484,691,326,291,272,192,510,280,1262,1728,
            245,686,19,16,20,17,390,41,34,71,
            267,420,389,270,232,272,686,19,16,20,
            17,390,41,46,718,19,16,20,17,390,
            317,265,420,389,270,686,19,16,20,17,
            390,41,45,178,1796,630,327,264,686,19,
            16,20,17,390,41,44,558,19,16,20,
            17,390,41,42,849,178,694,849,718,19,
            16,20,17,390,316,526,349,1767,526,718,
            19,16,20,17,390,40,396,253,211,319,
            320,1240,229,552,1240,71,71,1723,661,412,
            1723,718,19,16,20,17,390,33,718,19,
            16,20,17,390,32,1596,257,6,1330,257,
            6,1288,773,1729,1288,834,1729,66,362,202,
            179,362,400,66,57,897,801,84,858,71,
            755,1768,169,1361,195,526,868,195,526,252,
            211,319,320,526,66,252,211,319,320,86,
            693,195,86,513,1240,528,71,1617,528,195,
            1617,511,113,203,651,546,252,211,319,320,
            755,1768,526,526,1762,1695,1912,1912,1912,257,
            423,1695,1762,547,1563,1912,1729,1912,1240,195,
            1530,1912,190,193,1912,86,1912,844,1912,207,
            190,311,1849,234,1912,747,1639,1802,526,243,
            1912,1021,1762,257,1726,1802,1311,1776,1538,1912,
            1729,1912,1618,1912,1240,253,211,319,320,1912,
            191,253,211,319,320,1912,1912,1912,1912,207,
            1912,1912,373,1912,1912,1912,1912,1912,1912,258,
            1912,1912,1912,1912,1912,1912,1566,1776,1912,0,
            322,715,0,19,177,0,1,2136,0,1,
            2147,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,12,13,14,0,16,17,18,19,
            20,21,22,0,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,0,0,
            40,41,42,43,44,45,46,47,48,49,
            50,51,0,53,54,55,0,1,0,3,
            0,5,6,7,8,0,0,11,12,13,
            0,6,7,8,0,5,11,12,13,0,
            6,7,8,0,1,11,12,13,32,33,
            34,35,36,37,56,57,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,0,1,0,3,60,5,6,7,
            8,69,52,11,12,13,0,1,2,0,
            4,79,80,81,82,83,84,85,86,87,
            88,15,59,0,32,33,34,35,36,37,
            0,72,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,0,1,
            0,3,60,5,6,7,8,0,0,11,
            12,13,0,6,7,8,0,73,11,12,
            13,0,6,7,8,0,14,11,12,13,
            32,33,34,35,36,37,77,78,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,0,1,0,3,60,0,
            6,7,8,0,5,11,12,13,0,6,
            7,8,0,5,11,12,13,0,6,7,
            8,0,74,11,12,13,32,33,34,35,
            36,37,15,72,40,41,42,43,44,45,
            46,47,48,49,50,51,38,53,54,55,
            0,1,2,3,4,5,0,58,0,9,
            10,0,0,1,14,3,16,17,18,19,
            20,21,22,15,24,25,26,27,28,29,
            30,31,32,75,0,0,1,2,3,4,
            5,70,71,0,9,10,0,0,0,14,
            0,16,17,18,19,20,21,22,58,24,
            25,26,27,28,29,30,31,32,0,61,
            64,65,66,67,0,0,2,0,0,1,
            2,3,4,5,9,10,38,9,10,15,
            56,57,14,58,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            0,64,65,66,67,0,6,7,8,0,
            74,11,12,13,5,0,1,2,0,4,
            52,0,89,0,0,1,2,4,23,5,
            15,73,32,33,34,35,36,37,0,15,
            40,41,42,43,44,45,46,47,48,49,
            50,51,0,1,2,3,4,5,0,38,
            0,9,10,39,0,1,14,3,16,17,
            18,19,20,21,22,15,24,25,26,27,
            28,29,30,31,75,62,63,0,1,2,
            3,4,5,0,56,57,9,10,0,1,
            2,14,0,16,17,18,19,20,21,22,
            58,24,25,26,27,28,29,30,31,0,
            0,61,0,1,2,3,4,0,1,0,
            3,9,10,14,0,1,14,3,16,17,
            18,19,20,21,22,58,24,25,26,27,
            28,29,30,31,0,0,1,64,65,66,
            67,0,0,9,10,4,68,0,1,2,
            3,4,70,71,0,0,9,10,4,59,
            5,14,60,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,0,
            1,2,3,4,0,0,0,0,9,10,
            4,0,5,14,39,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,0,1,2,3,4,62,63,0,0,
            9,10,0,1,2,14,39,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,0,1,2,3,4,62,63,
            0,0,9,10,4,0,0,14,0,16,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,0,1,2,3,4,
            0,0,0,0,9,10,5,68,5,14,
            0,16,17,18,19,20,21,22,0,24,
            25,26,27,28,29,30,31,0,1,2,
            3,4,56,57,56,57,9,10,38,38,
            39,14,39,16,17,18,19,20,21,22,
            0,24,25,26,27,28,29,30,31,0,
            1,2,3,4,0,1,0,3,9,10,
            68,0,1,14,3,16,17,18,19,20,
            21,22,0,24,25,26,27,28,29,30,
            31,0,0,2,23,4,5,6,7,8,
            0,0,11,12,13,23,15,6,7,8,
            0,0,11,12,13,15,0,0,2,2,
            4,4,0,32,33,34,35,36,37,0,
            39,15,15,32,33,34,35,36,37,0,
            0,1,2,0,15,6,7,8,0,38,
            11,12,13,0,6,7,8,0,0,11,
            12,13,4,6,7,8,23,0,11,12,
            13,32,33,34,35,36,37,0,0,69,
            32,33,34,35,36,37,0,0,2,32,
            33,34,35,36,37,0,0,2,2,0,
            5,15,16,17,0,1,0,3,9,10,
            15,15,59,0,0,38,0,59,5,0,
            1,0,3,0,0,0,0,23,0,23,
            0,0,0,0,39,0,69,23,0,23,
            0,0,0,0,23,0,0,61,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,76,0,0,52,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1912,1922,1747,1923,1513,1,2124,2125,2126,1159,
            1107,2235,421,2236,1631,251,1738,1731,1709,1924,
            1925,1926,1927,180,457,429,2225,2226,2227,1698,
            1654,1447,2073,2074,2072,2127,2075,2071,53,181,
            2078,2083,2082,2080,2081,2079,2084,2085,2077,2086,
            2087,2088,41,1198,713,388,1912,1,283,1,
            1912,189,1,1,1,1912,1912,1,1,1,
            1912,2124,2125,2126,247,1919,2235,421,2236,65,
            1,1,1,1,1909,1,1,1,1,1,
            1,1,1,1,737,1241,1,1,1,1,
            1,1,1,1,1,1,1,1,189,1,
            1,1,1912,1,67,1,2106,188,1,1,
            1,1000,1918,1,1,1,260,2136,1282,71,
            1,979,958,937,916,895,853,874,832,811,
            790,608,2168,1912,1,1,1,1,1,1,
            1912,1343,1,1,1,1,1,1,1,1,
            1,1,1,1,188,1,1,1,1912,1,
            1912,1,2106,189,1,1,1,246,69,1,
            1,1,63,2124,2125,2126,248,1211,2235,421,
            2236,66,1,1,1,1912,1378,1,1,1,
            1,1,1,1,1,1,562,1395,1,1,
            1,1,1,1,1,1,1,1,1,1,
            189,1,1,1,1912,1922,1912,1923,2106,1912,
            2124,2125,2126,249,1915,2235,421,2236,1912,2124,
            2125,2126,250,1921,2235,421,2236,269,2124,2125,
            2126,61,674,2235,421,2236,2073,2074,2072,2127,
            2075,2071,608,1343,2078,2083,2082,2080,2081,2079,
            2084,2085,2077,2086,2087,2088,1392,1198,713,388,
            1,1922,1747,1923,532,1915,58,1914,1912,1159,
            1107,1912,1912,1922,1631,1923,1738,1731,1709,1924,
            1925,1926,1927,1063,457,429,2225,2226,2227,1698,
            1654,1447,692,1920,57,1912,1922,1747,1923,1609,
            1915,1411,512,1912,1159,1107,70,60,87,1631,
            1912,1738,1731,1709,1924,1925,1926,1927,1914,457,
            429,2225,2226,2227,1698,1654,1447,1042,68,1324,
            1500,1489,1478,1455,268,50,1283,1912,1,1922,
            1747,1923,1513,28,1252,593,769,1159,1107,608,
            737,1241,1631,1914,1738,1731,1709,1924,1925,1926,
            1927,3177,457,429,2225,2226,2227,1698,1654,1447,
            127,1500,1489,1478,1455,1912,2124,2125,2126,1,
            674,2235,421,2236,1921,266,2136,1282,1912,251,
            28,254,1899,47,1,1906,1282,1678,530,1917,
            608,1211,2073,2074,2072,2127,2075,2071,56,608,
            2078,2083,2082,2080,2081,2079,2084,2085,2077,2086,
            2087,2088,1912,1922,1747,1923,1513,1915,1912,1837,
            289,1159,1107,1916,183,3178,1631,3178,1738,1731,
            1709,1924,1925,1926,1927,1083,457,429,2225,2226,
            2227,1698,1654,1447,1920,1665,1646,1912,1922,1747,
            1923,1601,1915,59,737,1241,1159,1107,1,2136,
            1512,1631,62,1738,1731,1709,1924,1925,1926,1927,
            1914,457,429,2225,2226,2227,1698,1654,1447,64,
            1,1359,1912,1,1,1,1,182,3180,1912,
            3180,1,1,1378,204,3185,1,3185,1,1,
            1,1,1,1,1,1914,1,1,1,1,
            1,1,1,1,52,1912,2148,1500,1489,1478,
            1455,1912,1912,1252,593,1094,1135,1912,1922,1747,
            1923,1513,1411,512,49,1,1159,1107,1678,2168,
            89,1631,2224,1738,1731,1709,1924,1925,1926,1927,
            530,457,429,2225,2226,2227,1698,1654,1447,1,
            1922,1747,1923,1513,1912,1912,48,1912,1159,1107,
            1678,1912,1917,1631,89,1738,1731,1709,1924,1925,
            1926,1927,3177,457,429,2225,2226,2227,1698,1654,
            1447,1912,1922,1747,1923,1513,1665,1646,1912,1912,
            1159,1107,1,2136,1512,1631,1916,1738,1731,1709,
            1924,1925,1926,1927,3177,457,429,2225,2226,2227,
            1698,1654,1447,1,1922,1747,1923,1513,1665,1646,
            1912,1912,1159,1107,1526,1912,55,1631,54,1738,
            1731,1709,1924,1925,1926,1927,3177,457,429,2225,
            2226,2227,1698,1654,1447,1912,1922,1747,1923,1513,
            29,1912,199,1,1159,1107,1917,1187,1917,1631,
            1912,1738,1731,1709,1924,1925,1926,1927,1912,457,
            429,2225,2226,2227,1698,1654,1447,1912,1922,1750,
            1923,1513,737,1241,737,1241,1159,1107,491,1805,
            1916,1631,1916,1738,1731,1709,1924,1925,1926,1927,
            1912,457,429,2225,2226,2227,1698,1654,1447,1,
            1922,1747,1923,1513,206,1922,1912,1923,1159,1107,
            1167,1912,1922,1631,1923,1738,1731,1709,1924,1925,
            1926,1927,1912,457,429,2225,2226,2227,1698,1654,
            1447,19,1912,1903,1146,1903,1903,177,177,177,
            322,128,177,177,177,1558,1903,2124,2125,2126,
            1912,29,2235,421,2236,1900,263,266,1528,1528,
            1,251,1912,177,177,177,177,177,177,218,
            1903,608,608,2073,2074,2072,2127,2075,2071,129,
            251,2136,1512,1912,608,2124,2125,2126,130,1940,
            2235,421,2236,1,2124,2125,2126,131,1,2235,
            421,2236,251,2124,2125,2126,1560,209,2235,421,
            2236,2073,2074,2072,2127,2075,2071,205,1912,630,
            2073,2074,2072,2127,2075,2071,31,1912,1222,2073,
            2074,2072,2127,2075,2071,1,220,1528,1696,51,
            1917,1394,1937,1938,1912,1922,1912,1923,1252,593,
            608,608,2167,282,187,3183,187,2168,1521,205,
            1266,187,1266,1912,1912,1912,1912,1424,1912,1583,
            1912,1912,1912,1912,1916,1912,1115,183,1912,182,
            1912,1912,1912,1912,204,1912,1912,1290,1912,1912,
            1912,1912,1912,1912,1912,1912,1912,1912,1912,1912,
            1912,1912,1155,1912,1912,1521
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            461,1,170,41,170,170,170,170,170,170,
            170,170,170,170,170,170,3,55,108,105,
            112,110,118,116,120,119,122,121,10,170,
            55,406,406,252,170,332,332,363,55,170,
            170,170,170,170,170,170,170,170,170,170,
            170,170,170,170,170,170,170,170,170,170,
            170,170,170,170,170,170,170,170,170,332,
            332,45,137,367,161,373,330,329,335,48,
            347,157,347,157,157,347,157,347,75,283,
            105,105,110,110,110,110,108,108,116,112,
            112,119,118,415,121,120,159,135,363,367,
            164,45,98,194,332,417,376,194,157,406,
            406,157,406,170,135,367,355,98,45,193,
            161,332,361,75,331,378,45,194,159,219,
            159,277,279,370,249,159,355,98,170,170,
            45,194,373,410,409,367,378,332,159,219,
            277,277,249,133,459,406,170,369,249,135,
            98,355,45,45,332,417,376,361,219,249,
            449,219,277,279,456,279,137,45,406,170,
            135,355,378,219,451,279,249,170,406,45,
            279,332,331,249,129,170,128,189,367,249,
            249,407,451,170,189,279
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            89,0,75,15,2,61,76,16,17,14,
            4,9,10,62,63,56,57,64,65,66,
            67,70,71,72,73,74,77,78,52,69,
            79,80,81,82,83,85,84,86,87,88,
            68,39,89,38,58,5,0,5,68,38,
            58,39,75,15,18,19,20,21,22,2,
            16,17,14,4,9,10,24,25,26,27,
            28,29,30,31,1,3,53,54,55,48,
            40,45,43,44,42,41,46,47,49,50,
            51,37,34,32,33,36,35,6,7,8,
            12,11,13,0,4,62,63,9,10,57,
            56,64,65,66,67,70,71,14,72,73,
            74,58,39,52,89,77,78,68,75,5,
            38,0,5,52,15,61,16,17,14,4,
            9,10,24,25,18,29,30,31,2,19,
            20,21,22,26,27,28,1,3,23,0,
            58,5,32,6,7,8,11,12,13,19,
            20,21,22,26,27,28,3,16,17,14,
            9,10,24,25,18,29,30,31,4,2,
            1,0,32,58,5,16,17,14,4,9,
            10,24,25,18,29,30,31,2,1,3,
            19,20,21,22,26,27,28,0,33,40,
            6,41,53,34,42,35,43,44,36,7,
            45,46,32,54,37,55,47,48,8,49,
            50,51,1,3,11,12,13,60,5,52,
            0,5,39,18,19,20,21,22,1,3,
            2,16,17,14,4,9,10,24,25,26,
            27,28,29,30,31,0,1,3,5,52,
            38,0,7,32,37,8,36,35,34,6,
            33,11,12,13,61,76,16,17,14,9,
            10,62,63,56,57,64,65,66,67,70,
            71,72,73,74,77,78,69,79,80,81,
            82,83,84,85,86,87,88,4,2,15,
            38,39,5,0,48,40,45,43,44,42,
            41,46,47,49,50,51,68,75,37,34,
            32,33,36,35,6,7,8,11,12,13,
            38,1,5,39,2,15,4,0,69,15,
            61,0,4,2,15,39,5,33,40,6,
            41,53,34,42,35,43,44,36,7,45,
            46,32,54,37,55,47,48,8,49,50,
            51,11,12,13,59,3,1,0,2,5,
            38,39,75,15,68,0,4,33,40,6,
            41,53,34,42,35,43,44,36,7,45,
            46,32,54,37,55,47,48,8,49,50,
            51,1,3,11,12,13,59,0,75,5,
            4,1,2,68,0,5,38,52,69,0,
            18,19,20,21,22,1,3,2,16,17,
            14,4,9,10,24,25,26,27,28,29,
            30,31,60,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            115,25,16,25,16,16,16,16,16,16,
            16,16,16,16,16,16,25,98,25,25,
            25,25,25,25,25,25,25,25,25,16,
            98,35,35,48,99,64,64,81,1,16,
            16,16,16,16,16,16,16,16,16,16,
            16,16,16,16,16,99,16,16,16,16,
            16,16,16,16,16,16,16,16,16,64,
            64,28,16,53,26,80,9,9,45,11,
            46,70,46,38,38,46,37,46,40,25,
            25,25,25,25,25,25,25,25,25,25,
            25,25,25,25,25,25,25,61,87,25,
            30,28,102,27,64,91,63,27,7,7,
            7,7,7,16,14,25,61,102,28,27,
            96,64,57,18,25,93,28,27,33,61,
            25,61,66,51,61,25,61,102,16,16,
            28,27,56,9,9,53,93,64,25,107,
            61,7,68,13,25,7,16,78,68,61,
            102,96,28,28,64,91,63,72,61,68,
            104,118,7,66,25,25,15,28,7,16,
            14,96,111,107,59,66,68,16,7,28,
            66,64,64,68,105,16,25,59,53,68,
            68,25,59,16,74,85
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            81,79,78,66,77,76,1,0,28,0,
            102,0,70,11,61,5,0,81,80,79,
            78,66,77,76,0,11,5,21,0,5,
            11,0,92,0,72,0,94,67,0,66,
            62,63,64,65,54,29,0,11,90,0,
            99,0,33,51,0,26,46,45,38,36,
            11,0,11,26,0,53,0,34,0,91,
            0,46,45,38,36,33,0,101,0,26,
            45,46,11,0,97,0,46,45,33,0,
            33,51,11,27,0,22,0,50,11,48,
            0,58,0,11,71,0,83,11,50,0,
            95,11,27,0,11,89,0,11,50,68,
            0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,10,11,
            96,97,98,8,1,6,7,68,81,82,
            83,84,3,12,13,93,94,95,100,101,
            102,69,44,55,60,63,72,42,90,47,
            52,56,61,62,66,67,74,75,78,79,
            80,91,54,70,73,16,17,89,30,107,
            4,14,15,18,19,20,21,29,31,22,
            23,24,25,26,92,5,27,28,32,33,
            34,35,36,37,38,39,40,41,108,45,
            46,49,50,51,53,57,58,59,65,71,
            77,88,99,103,104,105,106
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            114,0,0,0,116,120,121,122,123,124,
            0,125,126,127,128,129,130,131,132,133,
            110,143,0,0,0,111,136,164,142,0,
            0,0,0,112,160,162,0,163,0,0,
            0,0,135,173,174,175,0,115,151,155,
            161,170,0,145,150,0,165,168,169,172,
            0,146,147,148,149,152,0,154,159,176,
            113,117,118,119,134,137,138,139,140,141,
            144,0,153,157,0,0,158,167,109,0,
            0,0,156,0,166,171,0,177,178,0,
            179,180,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            108,139,196,118,47,57,147,12,174,21,
            75,93,63,28,71,40,129,211,215,40,
            40,183,40,1,1,1,32,35,80,103,
            35,219,6,133,190,165,190,125,153,153,
            153,153,153,83,83,83
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            116,116,116,116,4,4,116,18,180,26,
            4,26,68,26,4,4,127,26,4,44,
            68,187,53,4,4,4,26,38,4,26,
            106,26,9,136,193,168,204,127,155,157,
            159,161,163,90,85,98
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            64,62,5,64,28,28,62,55,109,47,
            28,41,28,47,28,28,68,5,5,28,
            28,19,28,102,101,100,45,60,28,38,
            49,3,70,68,7,110,5,68,80,79,
            78,77,76,41,39,41
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            52,52,52,52,58,58,52,52,95,39,
            58,39,19,39,58,58,75,39,58,4,
            19,68,32,58,58,58,39,2,58,39,
            1,39,69,1,39,101,39,75,1,53,
            54,54,48,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            19,19,34,19,23,23,19,94,-1,27,
            23,9,23,27,23,23,3,34,34,23,
            23,68,23,17,1,7,27,29,23,9,
            11,34,95,3,40,-1,34,3,20,20,
            20,20,20,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            150,15,0,110,0,205,118,0,31,150,
            0,160,181,118,23,168,0,112,0,0,
            164,118,2,152,0,111,0,164,118,2,
            0,167,2,0,158,118,0,173,0,195,
            118,15,0,9,110,0,127,32,195,118,
            15,0,69,133,110,0,127,195,118,32,
            15,0,195,118,32,15,0,133,110,0,
            127,32,15,0,127,195,118,15,0,127,
            15,0,145,0,2,0,166,111,0,2,
            111,0,164,118,2,145,0,2,0,165,
            111,0,156,2,0,160,0,160,193,118,
            23,108,201,53,0,112,0,160,193,118,
            23,201,53,0,157,0,113,0,200,118,
            157,0,118,157,0,156,113,0,189,118,
            23,199,108,198,173,0,189,118,23,198,
            173,0,188,0,149,0,148,0,147,0,
            146,0,145,0,212,94,0,77,2,115,
            111,113,0,212,133,155,2,98,0,53,
            0,0,155,78,125,0,29,132,0,180,
            2,0,111,121,0,160,181,118,23,133,
            180,2,0,111,3,0,119,0,112,0,
            197,2,112,0,155,15,112,0,155,2,
            0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1522,0,1772,1802,1764,0,1234,0,1434,1330,
            1392,1512,1361,1282,1240,0,421,0,1207,526,
            362,0,1529,1438,420,389,1330,1596,1282,1240,
            1528,1617,0,1738,1731,1709,1698,1654,1447,1609,
            1601,532,1686,674,562,1343,1211,1411,512,1378,
            1241,737,1500,1489,1478,1455,1678,1665,1646,1252,
            593,1631,1513,1159,1107,457,429,1167,1135,1115,
            1083,1063,1042,1021,747,1187,715,692,608,1000,
            979,958,937,916,895,874,853,832,811,790,
            362,769,651,630,470,491,395,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,196,118,182,31,30,29,18,25,24,
            10,9,4,14,17,16,112,2,116,115,
            119,117,121,120,123,122,125,124,113,38,
            2,76,61,2,15,180,155,157,118,10,
            9,63,62,4,67,66,65,64,56,57,
            14,71,70,73,72,78,77,74,88,87,
            86,84,85,83,82,81,80,79,69,180,
            197,155,133,118,15,2,153,152,183,12,
            184,173,185,55,54,186,53,187,188,108,
            115,115,117,117,117,117,116,116,120,119,
            119,122,121,155,124,123,133,23,158,140,
            32,127,118,4,167,118,2,15,198,174,
            174,201,174,68,118,140,4,118,127,195,
            165,164,134,118,166,118,150,4,108,23,
            108,23,181,118,23,168,4,118,195,32,
            127,4,2,143,145,118,38,164,199,118,
            23,118,160,38,205,61,15,206,118,23,
            118,165,127,127,156,118,2,158,23,189,
            157,190,118,193,108,194,69,150,61,15,
            118,165,118,118,118,193,160,69,38,150,
            181,164,202,189,200,68,156,2,118,160,
            160,38,38,68,158,141
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "MYTHREAD",
            "THREADS",
            "UPC_MAX_BLOCKSIZE",
            "relaxed",
            "shared",
            "strict",
            "upc_barrier",
            "upc_localsizeof",
            "upc_blocksizeof",
            "upc_elemsizeof",
            "upc_notify",
            "upc_fence",
            "upc_wait",
            "upc_forall",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_sizeof_type_id_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "layout_qualifier"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 60,
           SCOPE_UBOUND      = 45,
           SCOPE_SIZE        = 46,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 216,
           NT_OFFSET         = 107,
           LA_STATE_OFFSET   = 2273,
           MAX_LA            = 2,
           NUM_RULES         = 361,
           NUM_NONTERMINALS  = 128,
           NUM_SYMBOLS       = 235,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1793,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 89,
           EOLT_SYMBOL       = 89,
           ACCEPT_ACTION     = 1899,
           ERROR_ACTION      = 1912;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
