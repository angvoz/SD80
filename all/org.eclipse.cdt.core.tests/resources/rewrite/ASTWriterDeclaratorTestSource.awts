//!DeclaratorTest
//%CPP
int sd;
int *ip;
int hs = 1;
char & c;
void foo()
{
    struct B
    {
        int f();
    };
    int (B::* pb)() = &B::f;
}


//!ArrayDeclaratorTest
//%CPP
int *pi[3];
int (*p3i)[3];

//!FieldDeclaratorTest
//%CPP
struct Bit
{
    int bit : 3;
};

//!CStandardFunctionDeclaratorTest
//%C
int foo();
int bar(int a, int b);
int fun(const char *a, ...);
int fun3(int i, const char *a, ...);

//!CPPStandardFunctionDeclaratorTest
//%CPP
int foo();
int bar(int a, int b);
int fun(const char *a, ...);
int fun2(const char *a ...);
int fun3(int i, const char *a, ...);
//= ,... is synonymous with ...
int foo();
int bar(int a, int b);
int fun(const char *a, ...);
int fun2(const char *a, ...);
int fun3(int i, const char *a, ...);

//!CPPFunctionDeclaratorTest
//%CPP
char & operator [](unsigned int);
TestClass::TestClass(int a)
:alpha(a)
{
}

void undefPar(const char *c) throw (int);
virtual void pure() = 0;
int getV() const;
int vol() volatile;

//!ICPPASTFunctionTryBlockDeclarator
//%CPP
int f(int);
class C
{
    int i;
    double d;
public:
    C(int, double);
};
C::C(int ii, double id)
try
:i(f(ii)), d(id)
{
}
catch(...){
}


//!CKnRFunctionDeclarator
//%C GNU
int foo(a, b)
int b, a;
{
}


