/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.upc;

public class UPCExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, UPCExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,3,1,1,
            4,4,3,3,2,2,8,1,0,1,
            1,2,2,2,2,2,2,2,2,2,
            4,1,4,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,5,9,8,
            3,2,2,2,3,2,4,2,2,2,
            2,2,1,1,1,1,2,1,2,2,
            2,1,2,2,1,2,2,1,2,2,
            1,2,2,1,3,1,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,6,8,
            0,0,1,1,3,3,3,0,1,0,
            1,2,4,2,1,1,1,3,1,1,
            2,3,7,8,0,1,0,1,3,1,
            3,1,1,1,1,1,1,3,1,1,
            1,1,1,3,1,2,2,1,5,3,
            1,3,5,1,3,1,3,2,4,3,
            5,4,6,6,3,5,1,2,3,4,
            5,0,1,2,1,3,1,1,3,2,
            1,1,1,1,2,1,2,3,1,1,
            1,3,1,2,2,2,3,4,5,1,
            7,3,0,0,1,1,3,3,4,1,
            1,2,3,2,3,2,1,0,1,2,
            1,1,1,1,1,2,4,3,6,2,
            4,1,1,1,1,1,2,4,2,4,
            2,4,1,1,2,1,1,1,3,3,
            2,1,3,2,3,2,3,2,2,11,
            10,10,9,10,9,9,8,10,9,9,
            8,9,8,8,7,10,9,9,8,9,
            8,8,7,1,1,-43,0,0,0,0,
            0,0,0,0,0,-82,0,0,0,0,
            0,0,0,0,0,0,-120,-88,0,0,
            0,0,-156,-2,-85,-86,0,0,0,0,
            0,-61,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-180,
            0,-4,0,0,0,-131,0,0,0,0,
            0,0,0,-5,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-137,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-203,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-58,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -126,0,0,0,0,0,0,0,0,-129,
            0,0,-132,0,0,-36,0,-17,-95,0,
            0,-19,0,-90,-211,0,-133,0,-20,0,
            0,-143,0,-176,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-146,0,
            -123,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-89,0,-21,0,0,
            0,0,0,0,0,0,-9,0,0,0,
            0,0,0,0,0,-134,0,-155,0,0,
            0,0,0,0,0,0,-151,0,0,0,
            0,0,0,0,0,0,-10,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -83,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-199,0,0,0,0,0,0,
            0,0,0,-40,0,0,0,0,0,0,
            0,0,0,0,-3,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-135,0,-166,0,-59,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-80,0,-130,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-22,0,-142,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -23,0,0,-30,0,0,0,0,0,0,
            0,0,0,-41,0,0,0,0,0,0,
            0,0,0,0,-63,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-64,0,0,0,0,
            0,0,0,0,0,-74,0,0,0,0,
            0,0,0,0,0,0,-65,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-66,0,0,
            0,0,0,0,0,0,0,-75,0,0,
            0,0,0,0,0,0,0,0,-67,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-68,
            0,0,0,0,0,0,0,0,0,-76,
            0,0,0,0,0,0,0,0,0,0,
            -69,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-70,0,0,0,0,0,0,0,0,
            0,-77,0,0,0,0,0,0,0,0,
            0,0,-71,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-72,0,0,0,0,0,0,
            0,0,0,-78,0,0,0,0,0,0,
            0,0,0,0,-73,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-161,0,0,0,0,
            0,0,0,0,0,-79,0,0,0,0,
            0,0,0,0,0,0,-162,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-179,0,0,
            0,0,0,0,0,0,0,-24,0,0,
            0,0,0,0,0,0,0,-202,0,0,
            0,0,0,0,0,0,0,-92,0,0,
            0,0,0,0,0,0,0,-178,0,-201,
            0,-25,-196,0,-44,0,0,0,0,0,
            0,0,0,-210,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-218,0,0,0,0,0,0,
            0,0,0,-93,0,0,0,0,0,0,
            0,0,0,-37,0,0,0,-26,-208,0,
            -45,0,0,0,0,0,0,0,0,-226,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-136,
            0,0,0,0,0,0,0,0,0,-217,
            0,0,0,0,0,0,0,0,0,-97,
            0,0,0,-27,-28,0,-55,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -139,-29,0,0,0,0,-194,-152,-169,-145,
            0,0,0,0,0,-213,0,0,0,0,
            -56,0,0,0,0,0,0,0,0,0,
            -154,0,0,0,0,0,0,0,0,-91,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-124,-141,0,0,0,0,
            0,0,0,0,0,0,-228,-98,-165,0,
            0,0,0,0,0,0,0,0,0,-62,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-190,0,-6,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-207,-38,0,0,0,0,0,
            -157,-99,-100,0,0,0,-127,-101,-144,0,
            0,-39,0,-167,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-225,0,
            -159,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-57,0,0,0,0,
            0,0,0,0,0,-170,0,0,-150,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-173,-175,-149,0,0,0,0,
            0,-102,-103,0,0,-104,0,-49,0,0,
            0,0,0,0,0,0,0,0,0,-50,
            0,0,0,0,0,0,0,0,0,-181,
            0,0,0,0,-51,0,0,0,0,0,
            0,0,0,0,-87,0,-52,0,0,0,
            0,0,0,0,0,0,-105,0,-11,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-106,-174,0,-107,-192,0,0,0,0,
            -53,0,0,0,0,0,0,0,0,0,
            -220,-12,0,0,0,0,0,0,0,0,
            0,0,-54,0,0,0,0,0,0,0,
            0,0,0,-94,-84,-13,0,0,0,0,
            0,0,0,-209,0,-108,-109,-110,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -111,0,0,0,-96,0,0,0,0,-164,
            0,0,0,0,0,0,0,-227,0,0,
            0,0,0,0,0,-184,-112,0,0,0,
            0,0,-163,-113,-114,0,0,0,0,0,
            -14,0,0,0,0,0,0,0,0,0,
            0,0,-42,0,0,0,0,0,0,0,
            0,0,0,-46,0,0,0,0,0,0,
            0,-47,0,0,0,0,0,0,0,-115,
            -116,0,-48,0,0,0,0,0,0,0,
            -81,0,0,0,0,0,0,0,-128,0,
            0,0,0,-117,-118,-182,-205,-119,0,-188,
            -191,-122,-138,0,-189,0,0,-195,0,0,
            0,-147,-185,-204,0,0,-7,0,0,0,
            0,0,0,0,0,0,0,-8,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-153,-158,-168,-221,0,-171,0,0,
            -216,0,0,-186,0,-177,0,0,-197,0,
            -15,0,0,0,0,0,0,-16,0,0,
            0,0,0,0,-18,0,-193,0,-187,-31,
            0,0,-214,-198,0,-32,0,0,-219,0,
            -33,0,-200,0,0,0,0,0,-34,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-121,0,0,0,0,0,0,0,0,
            0,0,-35,-212,0,0,0,-224,0,0,
            0,-125,0,-222,0,0,0,-223,0,-140,
            0,-172,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-206,0,0,0,
            0,-215,0,-148,0,0,0,0,-160,0,
            0,-1,-183,0,-60,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            89,10,22,22,21,21,37,37,72,72,
            1,1,2,2,2,2,3,3,3,4,
            5,5,5,5,5,5,5,5,54,54,
            73,6,6,6,6,6,6,6,6,6,
            6,6,7,7,8,8,8,8,9,9,
            9,11,11,11,12,12,12,12,12,13,
            13,13,14,14,15,15,16,16,17,17,
            18,18,19,19,20,20,20,20,20,20,
            20,20,20,20,20,20,104,30,28,90,
            90,75,75,46,105,105,105,105,105,105,
            105,106,106,106,107,107,112,112,113,113,
            108,108,109,109,109,115,115,110,110,110,
            110,111,111,111,111,111,114,114,27,27,
            27,27,27,32,32,32,81,81,76,76,
            76,76,77,77,77,78,78,78,79,79,
            79,80,80,80,116,116,117,117,118,33,
            35,35,35,35,35,55,57,57,57,57,
            57,57,57,57,57,57,57,57,66,63,
            63,91,92,67,67,64,64,64,68,82,
            82,83,83,69,69,69,31,93,93,84,
            85,85,85,65,65,94,86,86,87,87,
            70,70,23,24,24,24,34,51,51,38,
            38,38,38,41,41,43,39,39,40,44,
            44,119,119,42,120,120,95,95,29,29,
            29,29,29,29,29,29,29,88,52,52,
            52,52,36,59,59,58,58,58,60,60,
            53,53,96,96,45,45,61,61,61,47,
            47,47,48,49,49,49,50,50,50,50,
            56,56,56,62,97,74,74,74,74,71,
            98,99,99,100,100,101,101,121,121,122,
            122,123,123,123,123,125,125,124,124,124,
            126,126,89,89,2,2,2,6,6,6,
            6,6,6,23,23,25,25,26,26,102,
            102,102,105,127,127,127,127,127,127,127,
            110,110,110,110,110,110,110,110,110,110,
            110,110,110,110,110,110,110,110,110,110,
            110,110,110,110,128,128,1,1318,16,20,
            17,528,1252,44,539,532,63,758,598,1088,
            781,1178,1122,1235,1234,74,91,17,952,134,
            212,323,324,919,175,916,382,448,136,133,
            135,159,606,19,16,20,17,528,42,44,
            539,532,1702,758,598,1088,781,1178,1122,1624,
            936,138,200,165,274,275,380,627,1812,142,
            145,148,151,534,631,19,16,20,17,528,
            321,422,1495,596,1290,1564,1595,1230,531,19,
            16,20,17,528,1252,44,539,532,393,758,
            598,1088,781,1178,1122,1235,1234,74,280,581,
            19,16,20,17,528,1252,44,539,532,393,
            758,598,1088,781,1178,1122,1235,1234,74,280,
            325,1756,420,291,606,19,16,20,17,528,
            42,44,539,532,285,758,598,1088,781,1578,
            1744,427,19,16,20,17,528,42,35,286,
            144,292,618,190,186,285,190,30,790,840,
            1874,1744,373,245,115,190,1759,190,185,892,
            286,277,819,1266,347,19,16,20,17,528,
            1252,44,539,532,393,758,598,1088,781,1178,
            1122,1235,1234,74,280,254,212,323,324,225,
            178,756,19,16,20,17,528,1252,44,539,
            532,1840,758,598,1088,781,1178,1122,1235,1234,
            74,1306,134,212,323,324,40,716,245,24,
            287,136,133,135,159,209,1744,606,19,16,
            20,17,528,42,39,288,786,1743,953,134,
            212,323,324,616,138,426,165,134,144,133,
            135,159,142,145,148,151,534,606,19,16,
            20,17,528,42,38,1495,596,1290,1564,1595,
            1230,281,19,16,20,17,528,1252,44,539,
            532,1832,758,598,1088,781,1178,1122,1235,1234,
            74,1305,1445,238,556,19,16,20,17,528,
            1252,44,539,532,88,758,598,1088,781,1178,
            1122,1235,1234,74,280,606,19,16,20,17,
            528,1252,44,539,532,1681,758,598,1088,781,
            1178,1122,1235,1234,74,91,190,187,988,1748,
            606,19,16,20,17,528,42,44,539,532,
            289,758,598,1088,1591,794,1744,452,19,16,
            20,17,528,42,44,539,532,227,758,598,
            1088,781,1178,1122,1235,1234,93,21,62,331,
            314,19,16,20,17,528,1252,44,539,532,
            422,758,598,1088,781,1178,1122,1235,1234,74,
            1623,53,239,1446,606,19,16,20,17,528,
            1252,44,539,532,88,758,598,1088,781,1178,
            1122,1235,1234,74,92,606,19,16,20,17,
            528,1252,44,539,532,18,758,598,1088,781,
            1178,1122,1235,1234,74,85,606,19,16,20,
            17,528,1252,44,539,532,88,758,598,1088,
            781,1178,1122,1235,1234,74,84,606,19,16,
            20,17,528,1252,44,539,532,1670,758,598,
            1088,781,1178,1122,1235,1234,74,83,606,19,
            16,20,17,528,1252,44,539,532,88,758,
            598,1088,781,1178,1122,1235,1234,74,82,606,
            19,16,20,17,528,1252,44,539,532,1671,
            758,598,1088,781,1178,1122,1235,1234,74,81,
            606,19,16,20,17,528,1252,44,539,532,
            88,758,598,1088,781,1178,1122,1235,1234,74,
            80,606,19,16,20,17,528,1252,44,539,
            532,1694,758,598,1088,781,1178,1122,1235,1234,
            74,79,606,19,16,20,17,528,1252,44,
            539,532,88,758,598,1088,781,1178,1122,1235,
            1234,74,78,606,19,16,20,17,528,1252,
            44,539,532,1695,758,598,1088,781,1178,1122,
            1235,1234,74,77,606,19,16,20,17,528,
            1252,44,539,532,88,758,598,1088,781,1178,
            1122,1235,1234,74,76,606,19,16,20,17,
            528,1252,44,539,532,1698,758,598,1088,781,
            1178,1122,1235,1234,74,75,606,19,16,20,
            17,528,1252,44,539,532,88,758,598,1088,
            781,1178,1122,1235,1234,74,1713,606,19,16,
            20,17,528,1252,44,539,532,22,758,598,
            1088,781,1178,1122,1235,1234,74,1754,606,19,
            16,20,17,528,42,44,539,532,8,758,
            598,1088,781,1178,1122,1235,1234,93,606,19,
            16,20,17,528,42,44,539,532,246,758,
            598,1088,781,1178,1122,1235,1234,93,190,294,
            190,296,135,996,1793,606,19,16,20,17,
            528,42,44,1372,606,19,16,20,17,528,
            42,44,539,532,1824,758,598,1088,781,1178,
            1122,1235,1234,93,606,19,16,20,17,528,
            42,44,539,532,795,758,598,1088,781,1178,
            1122,1235,1234,93,190,30,523,1574,763,996,
            211,606,19,16,20,17,528,42,44,1373,
            606,19,16,20,17,528,42,44,539,532,
            201,758,598,1088,781,1178,1122,1235,1234,93,
            606,19,16,20,17,528,42,44,539,532,
            918,758,598,1088,781,1178,1122,1235,1234,73,
            225,178,537,1834,59,340,202,606,19,16,
            20,17,528,42,44,539,532,23,758,598,
            1525,803,307,134,212,323,324,113,17,966,
            854,1879,137,133,135,159,953,569,1842,569,
            1745,606,19,16,20,17,528,42,44,539,
            532,17,758,1576,196,139,1260,165,1777,273,
            96,1523,193,143,146,149,152,534,217,718,
            220,1384,222,223,228,794,794,266,396,395,
            271,262,259,134,212,323,324,171,781,881,
            1838,263,147,133,135,159,192,240,242,1700,
            606,19,16,20,17,528,42,44,539,532,
            276,758,598,1088,781,1178,1625,893,273,656,
            19,16,20,17,528,319,260,217,718,220,
            1384,222,223,228,909,32,266,396,395,271,
            1779,17,899,901,1746,695,273,88,174,88,
            1377,1480,17,1703,926,218,718,220,1384,222,
            223,228,695,89,268,396,395,271,272,909,
            278,834,217,718,220,1384,222,223,228,1746,
            87,1883,735,226,281,1789,606,19,16,20,
            17,528,42,44,539,532,88,758,1577,427,
            19,16,20,17,528,42,35,217,718,220,
            1384,222,223,228,17,256,794,279,197,199,
            1789,330,865,874,1708,1046,887,1220,606,19,
            16,20,17,528,42,44,539,532,329,1378,
            606,19,16,20,17,528,42,44,539,532,
            256,1452,27,198,199,606,19,16,20,17,
            528,42,44,539,532,375,1453,606,19,16,
            20,17,528,42,44,539,532,927,1456,606,
            19,16,20,17,528,42,37,282,134,212,
            323,324,934,948,1759,889,256,141,133,135,
            159,606,19,16,20,17,528,42,44,539,
            1507,968,606,19,16,20,17,528,42,36,
            140,1746,165,606,19,16,20,17,528,42,
            44,539,1522,179,152,884,606,19,16,20,
            17,528,42,35,256,1689,277,772,937,217,
            718,220,1384,222,223,228,276,134,212,323,
            324,377,1779,208,273,207,150,133,135,159,
            427,19,16,20,17,528,42,35,973,1123,
            1784,203,266,396,395,271,842,306,134,212,
            323,324,246,794,938,784,1377,153,133,135,
            159,606,19,16,20,17,528,42,34,254,
            212,323,324,898,1703,241,218,718,220,1384,
            222,223,228,376,606,19,16,20,17,528,
            42,47,606,19,16,20,17,528,42,46,
            622,647,273,606,19,16,20,17,528,42,
            45,503,19,16,20,17,528,42,43,913,
            266,396,395,271,672,697,17,529,722,569,
            913,17,985,986,265,144,469,569,948,1759,
            569,1867,941,794,850,1697,1260,681,19,16,
            20,17,528,317,1260,1702,230,1260,706,19,
            16,20,17,528,40,243,1702,254,212,323,
            324,1812,258,976,987,63,63,1379,994,1712,
            258,256,1347,258,794,1783,494,1712,1379,804,
            1712,731,19,16,20,17,528,33,731,19,
            16,20,17,528,32,17,244,958,208,88,
            17,1702,1702,88,998,366,17,1364,180,330,
            366,17,1872,794,1179,1784,366,1347,1608,17,
            224,366,196,87,229,794,1643,196,87,366,
            794,1643,904,196,87,293,794,1643,196,87,
            684,794,1643,17,794,836,196,87,80,794,
            1643,878,797,366,256,1986,920,1986,256,1986,
            797,273,57,1986,962,1986,295,1986,1703,194,
            196,87,569,794,1643,253,212,323,324,268,
            396,395,271,253,212,323,324,169,1004,196,
            1986,204,907,1777,942,1317,1986,569,1986,797,
            1986,1986,478,797,569,17,1986,1986,1986,1986,
            1986,542,695,233,196,695,1986,1986,1777,542,
            1986,1260,253,212,323,324,253,212,323,324,
            87,191,312,87,1986,1617,1986,1986,1986,1986,
            760,1986,1986,1986,1526,1257,1986,258,1036,1986,
            1986,1986,1426,1986,1712,1986,191,1986,1616,1986,
            1986,1986,1714,1986,1986,1986,1986,1986,1986,1751,
            1257,1986,1986,1986,1986,1986,1986,1986,1986,1986,
            1986,1986,1986,1986,1986,1986,1986,1986,1986,1986,
            1986,394,1986,0,326,737,0,19,178,0,
            1,2211,0,1,2222,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,0,8,9,
            10,11,12,13,14,15,0,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,0,32,33,34,35,36,37,7,0,
            40,41,42,43,44,45,46,47,48,49,
            50,51,0,53,54,55,0,1,0,3,
            8,0,0,7,25,26,27,28,29,30,
            39,32,33,34,35,36,37,70,71,0,
            1,25,26,27,28,29,30,0,32,33,
            34,35,36,37,7,0,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,0,1,0,3,60,56,57,7,
            25,26,27,28,29,30,39,32,33,34,
            35,36,37,0,0,77,78,25,26,27,
            28,29,30,0,32,33,34,35,36,37,
            7,0,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,0,1,
            0,3,60,0,0,7,25,26,27,28,
            29,30,39,32,33,34,35,36,37,0,
            1,0,3,25,26,27,28,29,30,0,
            32,33,34,35,36,37,0,73,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,0,1,0,3,60,56,
            57,25,26,27,28,29,30,38,32,33,
            34,35,36,37,0,0,1,0,3,25,
            26,27,28,29,30,0,32,33,34,35,
            36,37,7,89,40,41,42,43,44,45,
            46,47,48,49,50,51,0,53,54,55,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,0,17,18,19,
            20,21,22,23,24,0,0,52,64,65,
            66,67,32,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,0,
            17,18,19,20,21,22,23,24,58,0,
            64,65,66,67,0,32,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,58,0,68,0,69,0,5,6,0,
            1,0,3,2,8,79,80,81,82,83,
            84,85,86,87,88,16,0,68,52,25,
            26,27,28,29,30,0,32,33,34,35,
            36,37,31,74,40,41,42,43,44,45,
            46,47,48,49,50,51,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,0,17,18,19,20,21,22,23,
            24,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,0,17,18,
            19,20,21,22,23,24,0,0,1,2,
            3,4,5,6,58,8,9,10,11,12,
            13,14,15,0,17,18,19,20,21,22,
            23,24,0,1,2,3,4,5,6,58,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,0,0,1,
            0,1,2,3,4,5,6,60,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,0,1,2,3,4,
            5,6,69,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            0,1,2,3,4,5,6,59,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,0,1,2,3,4,
            5,6,0,8,9,10,11,12,13,14,
            15,0,17,18,19,20,21,22,23,24,
            0,1,2,3,4,5,6,16,8,9,
            10,11,12,13,14,15,0,17,18,19,
            20,21,22,23,24,0,1,2,3,4,
            5,6,16,8,9,10,11,12,13,14,
            15,0,17,18,19,20,21,22,23,24,
            0,1,2,3,4,5,6,16,8,9,
            10,11,12,13,14,15,0,17,18,19,
            20,21,22,23,24,0,1,2,3,4,
            5,6,16,8,9,10,11,12,13,14,
            15,0,17,18,19,20,21,22,23,24,
            0,1,2,3,4,5,6,16,8,9,
            10,11,12,13,14,15,0,17,18,19,
            20,21,22,23,24,0,1,2,3,4,
            5,6,0,8,9,10,11,12,13,14,
            15,0,17,18,19,20,21,22,23,24,
            0,0,2,0,4,0,1,7,3,0,
            0,2,0,0,0,1,0,3,9,10,
            7,16,0,0,0,25,26,27,28,29,
            30,31,32,33,34,35,36,37,0,39,
            31,25,26,27,28,29,30,25,26,27,
            28,29,30,0,72,64,65,66,67,0,
            1,0,3,25,26,27,28,29,30,0,
            61,58,0,0,1,2,73,4,25,26,
            27,28,29,30,0,76,25,26,27,28,
            29,30,69,0,25,26,27,28,29,30,
            0,1,2,0,31,2,0,7,0,0,
            7,0,0,1,2,4,4,0,0,2,
            0,4,4,0,4,2,0,4,0,1,
            2,31,0,7,31,0,4,0,0,39,
            56,57,39,31,7,0,0,2,31,56,
            57,5,6,0,31,0,0,0,5,6,
            0,0,56,57,38,39,31,0,1,31,
            3,0,0,62,63,38,31,0,70,71,
            62,63,62,63,7,0,31,0,1,2,
            0,59,0,1,2,0,68,7,38,61,
            0,1,31,3,0,0,0,0,4,4,
            38,16,75,0,0,0,61,0,0,0,
            59,0,16,0,0,0,0,0,72,16,
            16,74,0,0,16,16,0,0,31,0,
            0,0,52,0,59,0,0,0,0,0,
            0,0,75,38,0,38,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1986,1996,1775,1997,1566,1542,1509,62,1631,1768,
            1761,1728,1998,1999,2000,2001,1,637,607,2300,
            2301,2302,1717,1349,434,2199,2200,2201,2313,388,
            2314,1,2148,2149,2147,2202,2150,2146,90,129,
            2153,2158,2157,2155,2156,2154,2159,2160,2152,2161,
            2162,2163,64,529,1164,1108,1986,1,72,1,
            1237,54,252,190,2199,2200,2201,2313,388,2314,
            90,2148,2149,2147,2202,2150,2146,1416,1271,1986,
            2223,1,1,1,1,1,1,1986,1,1,
            1,1,1,1,1991,130,1,1,1,1,
            1,1,1,1,1,1,1,1,190,1,
            1,1,1986,1,181,1,2181,1531,1553,189,
            2199,2200,2201,2313,388,2314,1990,2148,2149,2147,
            2202,2150,2146,182,68,402,1885,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1991,131,1,1,1,1,1,1,1,1,
            1,1,1,1,189,1,1,1,1986,1,
            284,1,2181,58,1986,190,2199,2200,2201,2313,
            388,2314,1990,2148,2149,2147,2202,2150,2146,1986,
            1996,1986,1997,1,1,1,1,1,1,88,
            1,1,1,1,1,1,132,494,1,1,
            1,1,1,1,1,1,1,1,1,1,
            190,1,1,1,1986,1996,1986,1997,2181,1531,
            1553,2199,2200,2201,2313,388,2314,784,2148,2149,
            2147,2202,2150,2146,59,184,3346,1986,3346,2199,
            2200,2201,2313,388,2314,1986,2148,2149,2147,2202,
            2150,2146,1993,1973,2153,2158,2157,2155,2156,2154,
            2159,2160,2152,2161,2162,2163,61,529,1164,1108,
            1,1996,1775,1997,511,1542,1509,1989,1631,1768,
            1761,1728,1998,1999,2000,2001,1986,637,607,2300,
            2301,2302,1717,1349,434,1986,42,1992,1497,1485,
            1470,1458,571,1986,1996,1775,1997,1600,1542,1509,
            1989,1631,1768,1761,1728,1998,1999,2000,2001,200,
            637,607,2300,2301,2302,1717,1349,434,1988,70,
            1497,1485,1470,1458,1986,1057,1,1996,1775,1997,
            1566,1542,1509,28,1631,1768,1761,1728,1998,1999,
            2000,2001,3322,637,607,2300,2301,2302,1717,1349,
            434,1988,51,1210,128,1015,65,1181,1125,1986,
            1996,269,1997,520,1237,994,973,952,931,910,
            868,889,847,826,805,1258,1986,1190,28,2199,
            2200,2201,2313,388,2314,1986,2148,2149,2147,2202,
            2150,2146,651,1330,2153,2158,2157,2155,2156,2154,
            2159,2160,2152,2161,2162,2163,1986,1996,1775,1997,
            1566,1542,1509,1989,1631,1768,1761,1728,1998,1999,
            2000,2001,1986,637,607,2300,2301,2302,1717,1349,
            434,1986,1996,1775,1997,1429,1542,1509,1989,1631,
            1768,1761,1728,1998,1999,2000,2001,1986,637,607,
            2300,2301,2302,1717,1349,434,1986,1986,1,1,
            1,1,1,1,1988,1,1,1,1,1,
            1,1,1,1986,1,1,1,1,1,1,
            1,1,1986,1996,1775,1997,1566,1542,1509,1988,
            1631,1768,1761,1728,1998,1999,2000,2001,387,637,
            607,2300,2301,2302,1717,1349,434,1986,1,1983,
            1,1996,1775,1997,1566,1542,1509,2299,1631,1768,
            1761,1728,1998,1999,2000,2001,3322,637,607,2300,
            2301,2302,1717,1349,434,1986,1996,1775,1997,1566,
            1542,1509,674,1631,1768,1761,1728,1998,1999,2000,
            2001,3322,637,607,2300,2301,2302,1717,1349,434,
            1,1996,1775,1997,1566,1542,1509,2243,1631,1768,
            1761,1728,1998,1999,2000,2001,3322,637,607,2300,
            2301,2302,1717,1349,434,1986,1996,1775,1997,1566,
            1542,1509,1986,1631,1768,1761,1728,1998,1999,2000,
            2001,322,637,607,2300,2301,2302,1717,1349,434,
            1986,1996,1780,1997,1566,1542,1509,387,1631,1768,
            1761,1728,1998,1999,2000,2001,320,637,607,2300,
            2301,2302,1717,1349,434,1986,1996,1786,1997,1566,
            1542,1509,387,1631,1768,1761,1728,1998,1999,2000,
            2001,318,637,607,2300,2301,2302,1717,1349,434,
            1986,1996,1791,1997,1566,1542,1509,387,1631,1768,
            1761,1728,1998,1999,2000,2001,41,637,607,2300,
            2301,2302,1717,1349,434,1986,1996,1799,1997,1566,
            1542,1509,387,1631,1768,1761,1728,1998,1999,2000,
            2001,1986,637,607,2300,2301,2302,1717,1349,434,
            1986,1996,1823,1997,1566,1542,1509,387,1631,1768,
            1761,1728,1998,1999,2000,2001,1986,637,607,2300,
            2301,2302,1717,1349,434,1,1996,1775,1997,1566,
            1542,1509,66,1631,1768,1761,1728,1998,1999,2000,
            2001,60,637,607,2300,2301,2302,1717,1349,434,
            19,1986,1977,69,1977,1986,1996,1977,1997,31,
            1986,1365,1986,1986,183,3350,1986,3350,2011,2012,
            1989,1281,248,210,1986,178,178,178,178,178,
            178,1977,178,178,178,178,178,178,247,1977,
            1382,2199,2200,2201,2313,388,2314,1,1,1,
            1,1,1,249,720,1497,1485,1470,1458,205,
            3351,250,3351,2199,2200,2201,2313,388,2314,251,
            1174,1988,1986,261,2211,1319,494,1,1,1,
            1,1,1,1,57,526,2199,2200,2201,2313,
            388,2314,1134,56,2199,2200,2201,2313,388,2314,
            1,1980,1319,1,651,1565,55,1991,63,1986,
            1991,48,267,2211,1319,1673,252,264,50,1565,
            49,1,1673,267,1673,1565,1986,252,1,2211,
            1541,651,1,1991,651,270,252,1986,1986,1990,
            1531,1553,1990,651,1995,221,53,1705,651,1531,
            1553,1181,1125,52,651,290,67,71,1181,1125,
            255,1,1531,1553,1828,1990,651,207,1996,1078,
            1997,326,29,1662,1654,1399,651,1,1416,1271,
            1662,1654,1662,1654,1995,1,1098,1,2211,1541,
            283,2243,252,2211,1541,1986,1154,1371,1259,1118,
            206,535,1974,535,1986,1986,1986,219,1251,1401,
            544,1444,1994,1986,188,29,1120,206,188,188,
            2243,1986,1696,1986,1986,1986,1986,1986,720,1701,
            184,1330,1986,1986,183,205,1986,1986,651,1986,
            1986,1986,1371,1986,2242,1986,1986,1986,1986,1986,
            1986,1986,1994,2014,1986,3332
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            473,58,146,102,146,146,146,146,146,146,
            146,146,146,146,146,146,64,8,404,401,
            408,406,414,412,416,415,418,417,71,146,
            8,8,8,8,8,386,386,286,146,283,
            283,347,8,146,146,146,146,146,146,146,
            146,146,146,146,146,146,146,146,146,146,
            146,146,146,146,146,146,146,146,146,146,
            146,146,146,283,283,283,283,283,283,106,
            113,351,137,353,281,280,319,1,331,133,
            331,133,133,331,133,331,28,234,401,401,
            406,406,406,406,404,404,412,408,408,415,
            414,317,417,416,389,389,389,389,135,111,
            347,351,140,106,51,170,283,429,356,170,
            133,386,386,133,386,146,111,351,339,51,
            106,169,137,283,345,28,282,358,106,170,
            135,195,135,228,230,61,225,135,339,51,
            146,146,106,170,353,312,311,351,358,283,
            135,195,228,228,225,109,464,386,146,60,
            225,111,51,339,106,106,283,429,356,345,
            195,225,466,195,228,230,461,230,113,106,
            386,146,111,339,358,195,468,230,225,146,
            386,106,230,283,282,225,425,146,424,165,
            351,225,225,387,468,146,165,230
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            7,68,38,58,39,75,31,11,12,13,
            14,15,2,9,10,8,4,5,6,17,
            18,19,20,21,22,23,24,1,3,53,
            54,55,48,40,45,43,44,42,41,46,
            47,49,50,51,37,34,32,33,36,35,
            25,26,27,29,28,30,0,89,0,69,
            31,61,0,75,31,2,61,76,9,10,
            8,4,5,6,62,63,56,57,64,65,
            66,67,70,71,72,73,74,77,78,52,
            69,79,80,81,82,83,85,84,86,87,
            88,68,39,89,38,58,7,0,7,52,
            31,61,9,10,8,4,5,6,17,18,
            11,22,23,24,2,12,13,14,15,19,
            20,21,1,3,16,0,58,7,32,25,
            26,27,28,29,30,12,13,14,15,19,
            20,21,3,9,10,8,5,6,17,18,
            11,22,23,24,4,2,1,0,32,58,
            7,9,10,8,4,5,6,17,18,11,
            22,23,24,2,1,3,12,13,14,15,
            19,20,21,0,33,40,25,41,53,34,
            42,35,43,44,36,26,45,46,32,54,
            37,55,47,48,27,49,50,51,1,3,
            28,29,30,60,7,52,0,1,3,7,
            52,38,0,26,32,37,27,36,35,34,
            25,33,28,29,30,61,76,9,10,8,
            5,6,62,63,56,57,64,65,66,67,
            70,71,72,73,74,77,78,69,79,80,
            81,82,83,84,85,86,87,88,4,2,
            31,38,39,7,0,7,39,11,12,13,
            14,15,1,3,2,9,10,8,4,5,
            6,17,18,19,20,21,22,23,24,0,
            2,7,38,39,75,31,68,0,48,40,
            45,43,44,42,41,46,47,49,50,51,
            68,75,37,34,32,33,36,35,25,26,
            27,28,29,30,38,1,7,39,2,31,
            4,0,4,2,31,39,7,33,40,25,
            41,53,34,42,35,43,44,36,26,45,
            46,32,54,37,55,47,48,27,49,50,
            51,28,29,30,59,3,1,0,69,79,
            80,81,82,83,84,85,86,87,88,16,
            4,62,63,5,6,57,56,64,65,66,
            67,70,71,8,72,73,74,58,39,52,
            89,77,78,68,75,7,38,0,4,33,
            40,25,41,53,34,42,35,43,44,36,
            26,45,46,32,54,37,55,47,48,27,
            49,50,51,1,3,28,29,30,59,0,
            7,38,52,69,0,75,7,4,1,2,
            68,0,11,12,13,14,15,1,3,2,
            9,10,8,4,5,6,17,18,19,20,
            21,22,23,24,60,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            119,44,35,44,35,35,35,35,35,35,
            35,35,35,35,35,35,44,102,44,44,
            44,44,44,44,44,44,44,44,44,35,
            102,102,102,102,102,23,23,83,103,21,
            21,89,1,35,35,35,35,35,35,35,
            35,35,35,35,35,35,35,35,35,103,
            35,35,35,35,35,35,35,35,35,35,
            35,35,35,21,21,21,21,21,21,54,
            35,9,52,88,16,16,61,12,62,28,
            62,26,26,62,25,62,56,44,44,44,
            44,44,44,44,44,44,44,44,44,44,
            44,44,44,44,44,44,44,44,44,75,
            109,44,45,54,113,53,21,93,20,53,
            7,7,7,7,7,35,33,44,75,113,
            54,53,30,21,71,37,44,95,54,53,
            50,75,44,75,48,14,75,44,75,113,
            35,35,54,53,70,16,16,9,95,21,
            44,115,75,7,86,32,44,7,35,18,
            86,75,113,30,54,54,21,93,20,77,
            75,86,106,64,7,48,44,44,34,54,
            7,35,33,30,98,115,73,48,86,35,
            7,54,48,21,21,86,107,35,44,73,
            9,86,86,44,73,35,79,68
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            81,79,78,67,77,76,1,0,36,52,
            0,102,0,99,0,29,0,101,0,10,
            21,0,73,0,94,68,0,91,0,23,
            0,71,10,62,5,0,81,80,79,78,
            67,77,76,0,5,10,0,54,0,92,
            0,10,5,22,0,67,63,64,65,66,
            55,32,0,10,31,69,0,97,0,21,
            49,48,41,39,10,0,49,48,41,39,
            36,0,10,90,0,37,0,21,48,49,
            10,0,36,52,10,27,0,95,10,27,
            0,31,10,30,0,10,72,0,49,48,
            36,0,59,0,83,10,31,0,10,89,
            0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,10,11,87,8,6,7,
            68,81,82,83,84,3,12,13,93,94,
            95,100,101,102,48,64,76,96,97,98,
            1,69,44,55,60,63,72,42,90,47,
            52,56,61,62,66,67,74,75,78,79,
            80,91,54,70,73,16,17,89,30,107,
            4,14,15,18,19,20,21,29,31,22,
            23,24,25,26,92,5,27,28,32,33,
            34,35,36,37,38,39,40,41,108,45,
            46,49,50,51,53,57,58,59,65,71,
            77,88,99,103,104,105,106
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            114,0,0,0,116,120,121,122,123,0,
            124,125,126,127,128,129,130,131,132,133,
            111,110,143,0,0,0,136,0,164,115,
            155,142,0,0,0,0,112,160,162,0,
            163,0,0,0,118,135,173,174,175,0,
            151,161,170,0,145,150,0,165,168,169,
            172,0,146,147,148,149,152,0,154,159,
            176,113,117,119,134,137,138,139,140,141,
            144,0,153,157,0,0,158,167,109,0,
            0,0,156,0,166,171,0,177,178,0,
            179,180,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            120,151,212,130,59,69,159,26,186,35,
            87,105,75,6,12,16,40,83,52,141,
            208,227,231,52,52,195,52,1,1,1,
            44,47,92,115,47,235,20,145,202,177,
            202,137,165,165,165,165,165,95,95,95
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            128,128,128,128,4,4,128,32,192,10,
            4,10,80,10,10,10,10,4,4,139,
            10,10,4,56,80,199,65,4,4,4,
            10,50,4,10,118,10,23,148,205,180,
            220,139,167,169,171,173,175,102,97,110
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            65,63,5,65,29,29,63,56,109,50,
            29,44,29,6,6,6,50,29,29,69,
            6,5,5,29,29,19,29,102,101,100,
            48,61,29,41,51,3,71,69,7,110,
            5,69,80,79,78,77,76,44,42,44
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            52,52,52,52,58,58,52,52,95,39,
            58,39,12,39,39,39,39,58,58,75,
            39,39,58,4,12,68,32,58,58,58,
            39,2,58,39,1,39,69,1,39,101,
            39,75,1,53,54,54,48,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            19,19,34,19,23,23,19,94,-1,27,
            23,9,23,34,34,34,27,23,23,3,
            34,34,34,23,23,68,23,17,1,7,
            27,29,23,9,11,34,95,3,40,-1,
            34,3,20,20,20,20,20,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            153,31,0,110,0,152,2,24,0,111,
            0,152,2,23,0,152,2,22,0,205,
            117,0,31,150,0,161,181,117,16,169,
            0,112,0,0,165,117,2,155,0,165,
            117,2,0,168,2,0,159,117,0,173,
            0,195,117,31,0,9,110,0,127,32,
            195,117,31,0,69,133,110,0,127,195,
            117,32,31,0,195,117,32,31,0,133,
            110,0,127,32,31,0,127,195,117,31,
            0,127,31,0,148,0,2,0,166,111,
            0,2,111,0,165,117,2,148,0,2,
            0,165,111,0,158,2,0,160,0,161,
            193,117,16,108,201,53,0,112,0,161,
            193,117,16,201,53,0,138,0,113,0,
            200,117,138,0,117,138,0,156,113,0,
            189,117,16,199,108,198,174,0,189,117,
            16,198,174,0,188,0,149,0,148,0,
            147,0,146,0,145,0,212,94,0,77,
            2,115,111,113,0,212,128,137,2,98,
            0,53,0,0,137,78,125,0,29,132,
            0,152,2,0,111,121,0,152,2,11,
            0,161,181,117,16,128,152,2,0,111,
            3,0,119,0,112,0,197,2,112,0,
            137,31,112,0,137,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            420,0,1867,1257,1842,0,393,0,1608,1347,
            1399,1541,1364,1319,1260,0,388,0,1230,569,
            366,0,1384,718,396,395,1347,1812,1319,1260,
            1565,1643,0,1768,1761,1728,1717,1349,434,1600,
            1429,511,1681,1330,402,720,494,1416,1271,1237,
            1553,1531,1497,1485,1470,1458,1673,1662,1654,1181,
            1125,1631,1566,1542,1509,637,607,1190,1154,1134,
            1098,1078,1057,1036,760,1210,737,571,651,1015,
            994,973,952,931,910,889,868,847,826,805,
            366,784,695,674,469,544,448,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,196,117,182,24,23,22,11,18,17,
            6,5,4,8,10,9,112,2,116,115,
            119,118,121,120,123,122,125,124,113,38,
            2,2,2,2,2,76,61,2,31,152,
            137,138,117,6,5,63,62,4,67,66,
            65,64,56,57,8,71,70,73,72,78,
            77,74,88,87,86,84,85,83,82,81,
            80,79,69,152,152,152,152,152,197,137,
            128,117,31,2,156,155,183,29,184,174,
            185,55,54,186,53,187,188,108,115,115,
            118,118,118,118,116,116,120,119,119,122,
            121,137,124,123,128,128,128,128,128,16,
            159,143,32,127,117,4,168,117,2,31,
            198,175,175,201,175,68,117,143,4,117,
            127,195,166,165,134,117,167,117,153,4,
            108,16,108,16,181,117,16,169,4,117,
            195,32,127,4,2,146,148,117,38,165,
            199,117,16,117,161,38,205,61,31,206,
            117,16,117,166,127,127,158,117,2,159,
            16,189,138,190,117,193,108,194,69,153,
            61,31,117,166,117,117,117,193,161,69,
            38,153,181,165,202,189,200,68,158,2,
            117,161,161,38,38,68,159,144
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "MYTHREAD",
            "THREADS",
            "UPC_MAX_BLOCKSIZE",
            "relaxed",
            "shared",
            "strict",
            "upc_barrier",
            "upc_localsizeof",
            "upc_blocksizeof",
            "upc_elemsizeof",
            "upc_notify",
            "upc_fence",
            "upc_wait",
            "upc_forall",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "expression_parser_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "layout_qualifier"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 60,
           SCOPE_UBOUND      = 49,
           SCOPE_SIZE        = 50,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 228,
           NT_OFFSET         = 107,
           LA_STATE_OFFSET   = 2351,
           MAX_LA            = 2,
           NUM_RULES         = 365,
           NUM_NONTERMINALS  = 128,
           NUM_SYMBOLS       = 235,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1882,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 89,
           EOLT_SYMBOL       = 89,
           ACCEPT_ACTION     = 1973,
           ERROR_ACTION      = 1986;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
