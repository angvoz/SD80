###############################################################################
# Copyright (c) 2010 Alena Laskavaia and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     Alena Laskavaia - initial API and implementation
###############################################################################
#Properties file for org.eclipse.cdt.codan.checkers
Bundle-Vendor = Eclipse CDT
Bundle-Name = Codan Checkers
checker.name.AssignmentInCondition = Assignment in condition
problem.description.AssignmentInCondition = Finds statements like  'if (a=b)'
problem.messagePattern.AssignmentInCondition = Possible assignment in condition ''{0}''
problem.name.AssignmentInCondition = Assignment in condition
checker.name.StatementHasNoEffect = StatementHasNoEffectChecker
problem.description.StatementHasNoEffect = Finds statements like 'a;' or '-a;' or 'a-b;' which do no seems to have any side effect therefore suspicious
problem.messagePattern.StatementHasNoEffect = Statement has no effect ''{0}''
problem.name.StatementHasNoEffect = Statement has no effect
checker.name.NonVirtualDescructor = NonVirtualDescructorChecker
problem.description.NonVirtualDescructor = If destructor is not declared virtual - destructor of derived class would not be called.
problem.messagePattern.NonVirtualDescructor = Class ''{0}'' has virtual method ''{1}'' but non-virtual destructor ''{2}''
problem.name.NonVirtualDescructor = Class has a virtual method and non-virtual destructor
checker.name.CatchByReference = CatchByReferenceChecker
problem.description.CatchByReference = Catching by reference is recommended by C++ experts, "Throw by value, catch by reference". For one thing, this avoids copying and potentially slicing the exception.
problem.messagePattern.CatchByReference = Catching by reference is recommended ''{0}''
problem.name.CatchByReference = Catching by reference is recommended
checker.name.SuggestedParenthesis = SuggestedParenthesisChecker
problem.description.SuggestedParenthesis = This checker finds problems related to either lack of understanding precedence of operators or misspelling of operators in expression. For example (!a<10) or (a && b & c)
problem.messagePattern.SuggestedParenthesis = Suggested parenthesis around expression ''{0}''
problem.name.SuggestedParenthesis = Suggested parenthesis around expression
checker.name.NamingConventionFunction = NamingConventionFunctionChecker
problem.description.NamingConventionFunction = Finds and reports functions name of which does not match pattern parameter
problem.messagePattern.NamingConventionFunction = Bad function name "{0}" (pattern /{1}/)
problem.name.NamingConventionFunction = Name convention for function
checker.name.ReturnChecker = Return inconsistencies
problem.description.NoReturnValue = Return statement has no return value, if somebody would use return value from this function it would be random
problem.messagePattern.NoReturnValue = Return without value, in function returning non-void
problem.name.NoReturnValue = No return value
problem.description.UnusedReturnValue = Return statement has a value, but function is declared to return void. Did you mean to declare function with return value?
problem.messagePattern.UnusedReturnValue = Return has value, in function returning void
problem.name.UnusedReturnValue = Unused return value
problem.description.NoReturn = No return statement in a function which is declared to return value
problem.messagePattern.NoReturn = No return, in function returning non-void
problem.name.NoReturn = No return
checker.name.AssignmentToItself = Assignment to itself
problem.messagePattern.AssignmentToItself = Assignment to itself ''{0}''
problem.name.AssignmentToItself = Assignment to itself
problem.description.AssignmentToItself = Finds expression where left and right side of the assignment is the same, i.e. 'var = var'
checker.name.ReturnStyle = Return with parenthesis
problem.name.ReturnStyle = Return with parenthesis
problem.messagePattern.ReturnStyle = Return statement has invalid style. Return value should be surrounded by parenthesis
problem.description.ReturnStyle = Checks for return statements that do no return the value in parenthesis. For example 'return 0;'  
checker.name.SuspiciousSemicolon = Suspicious semicolon
problem.name.SuspiciousSemicolon = Suspicious semicolon
problem.messagePattern.SuspiciousSemicolon = Suspicious semicolon
problem.description.SuspiciousSemicolon = A semicolon is used as a null statement in a condition. For example, 'if(expression);'
checker.name.CaseBreak = No break at end of case
problem.description.CaseBreak = Looks for "case" statements which end without a "break" statement
problem.messagePattern.CaseBreak = No break at the end of this case