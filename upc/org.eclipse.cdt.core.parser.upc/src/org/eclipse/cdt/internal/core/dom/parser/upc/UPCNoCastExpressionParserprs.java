/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.upc;

public class UPCNoCastExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, UPCNoCastExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,8,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,4,1,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,5,9,8,
            3,2,2,2,3,2,4,2,2,2,
            2,2,1,1,1,1,2,1,2,2,
            2,1,2,2,1,2,2,1,2,2,
            1,2,2,1,3,1,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,6,8,
            0,0,1,1,3,3,3,0,1,0,
            1,2,4,2,1,1,1,3,1,1,
            2,3,7,8,0,1,0,1,3,1,
            3,1,1,1,1,1,1,3,1,1,
            1,1,1,3,1,2,2,1,5,3,
            1,3,5,1,3,1,3,2,4,3,
            5,4,6,6,3,5,1,3,4,5,
            6,0,1,2,1,3,1,1,3,2,
            1,1,1,1,2,1,2,3,1,1,
            1,3,1,2,2,2,3,4,5,1,
            7,3,0,0,1,1,3,3,4,1,
            1,2,3,2,3,2,1,0,1,2,
            1,1,1,1,1,2,4,3,6,2,
            4,1,1,1,1,1,2,4,2,4,
            2,4,1,1,2,1,1,1,3,3,
            2,1,3,2,3,2,3,2,2,11,
            10,10,9,10,9,9,8,10,9,9,
            8,9,8,8,7,10,9,9,8,9,
            8,8,7,1,1,-38,0,0,0,0,
            0,0,0,0,0,-35,0,0,0,0,
            0,0,0,0,0,0,-2,-84,0,0,
            0,0,-153,-81,-136,-226,0,0,0,0,
            0,-60,0,0,0,0,0,0,0,0,
            0,-4,0,0,0,0,0,0,0,-177,
            0,0,0,0,0,-128,0,-18,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-134,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-200,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-57,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -123,0,0,0,0,0,0,0,0,-126,
            0,0,-129,0,0,-39,0,-117,-91,0,
            0,-19,0,-86,-209,0,-20,0,-21,0,
            0,-140,0,-173,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-143,0,
            -120,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-85,0,-156,0,0,
            0,0,0,0,0,0,-9,0,0,0,
            0,0,0,0,0,-130,0,-152,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-10,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -79,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-196,0,0,0,0,0,0,
            0,0,0,-36,0,0,0,0,0,0,
            0,0,0,0,-3,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-131,0,-22,-82,-58,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-96,0,-127,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-23,0,-48,
            0,0,0,0,0,0,0,0,0,0,
            0,-139,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-24,0,-30,0,0,0,0,0,
            0,0,0,0,-73,0,0,0,0,0,
            0,0,0,0,0,-62,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-63,0,0,0,
            0,0,0,0,0,0,-74,0,0,0,
            0,0,0,0,0,0,0,-64,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-65,0,
            0,0,0,0,0,0,0,0,-75,0,
            0,0,0,0,0,0,0,0,0,-66,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -67,0,0,0,0,0,0,0,0,0,
            -76,0,0,0,0,0,0,0,0,0,
            0,-68,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-69,0,0,0,0,0,0,0,
            0,0,-95,0,0,0,0,0,0,0,
            0,0,0,-70,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-71,0,0,0,0,0,
            0,0,0,0,-124,0,0,0,0,0,
            0,0,0,0,0,-72,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-133,0,0,0,
            0,0,0,0,0,0,-141,0,0,0,
            0,0,0,0,0,0,0,-158,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-159,0,
            0,0,0,0,0,0,0,0,-167,0,
            0,0,0,0,0,0,0,0,0,-176,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-199,
            0,0,0,0,0,0,0,0,0,-190,
            0,0,0,0,0,0,0,0,0,0,
            -132,0,-148,-193,0,-43,0,0,0,0,
            0,0,0,0,-208,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-217,0,0,0,0,0,
            0,0,0,0,-186,0,0,0,0,0,
            0,0,0,0,0,-175,0,0,-25,0,
            -26,0,-198,0,-27,0,-93,0,-78,-225,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-83,0,-149,-142,0,0,0,
            0,0,-206,-227,-28,0,0,-5,0,0,
            0,0,0,0,0,-172,0,0,0,0,
            0,0,-29,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-88,0,0,0,0,-89,0,0,-77,
            0,-94,0,-97,-211,-162,0,0,-6,0,
            0,0,0,0,0,0,-61,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-187,-7,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-151,0,-121,0,0,
            -205,-154,0,0,0,0,0,-40,0,-178,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-54,0,0,0,0,0,
            0,0,0,0,-163,0,0,0,0,0,
            0,0,0,0,0,-98,0,-99,-100,-189,
            -207,0,-55,0,0,0,0,0,0,0,
            0,0,0,0,0,-56,0,0,0,0,
            0,0,0,0,0,-165,0,0,-224,-157,
            0,-170,-179,-101,0,0,0,0,0,0,
            -102,0,0,0,-49,0,0,0,0,0,
            0,0,0,0,0,0,-52,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-171,0,-103,-104,0,-105,0,
            -50,0,0,0,0,0,0,0,0,0,
            -106,0,-51,0,0,0,0,0,0,0,
            0,0,-107,0,-11,0,0,0,0,0,
            0,0,0,0,-53,0,0,0,0,0,
            0,0,0,0,-219,-44,0,0,0,0,
            0,0,0,0,0,-147,0,0,0,0,
            0,0,0,0,-108,-109,-164,-87,-80,-12,
            0,0,0,0,0,0,0,0,0,0,
            0,-110,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-138,-90,0,
            0,0,0,-161,0,0,0,0,0,0,
            0,-92,-111,-112,0,0,0,0,-146,0,
            -160,0,0,0,0,0,-113,-192,0,0,
            0,0,0,0,0,0,0,0,-114,-115,
            0,-116,0,0,0,0,0,-13,0,0,
            0,0,0,0,0,-14,0,0,0,0,
            0,0,0,-37,-45,0,0,0,0,0,
            0,0,-119,0,-46,0,0,0,0,0,
            0,0,-47,0,0,0,0,0,0,0,
            -125,0,-180,-185,-166,-184,-182,0,-188,-135,
            0,-183,0,0,0,-144,-150,-155,0,0,
            0,0,0,0,0,-220,0,0,0,0,
            0,0,0,0,0,-8,0,0,0,0,
            0,0,-15,0,0,0,0,0,0,-17,
            -168,-174,0,0,0,0,0,0,0,0,
            0,0,-31,0,-16,0,0,0,0,0,
            0,-41,0,-32,-213,-197,0,0,-118,0,
            0,0,-215,0,-33,0,-34,-214,-210,0,
            -194,-216,0,0,0,0,0,0,0,0,
            0,0,-195,0,0,-122,0,0,0,0,
            0,0,0,0,0,0,0,0,-137,0,
            0,-218,0,0,0,0,0,0,0,0,
            0,0,-221,-222,0,-169,0,-223,-203,-204,
            -191,0,0,0,0,0,0,-145,0,0,
            0,0,0,0,0,-181,0,0,-1,0,
            -201,0,0,0,0,0,0,0,0,0,
            0,0,-42,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-202,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-212,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -59,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            89,10,104,22,22,21,21,37,37,72,
            72,1,1,2,2,2,2,3,3,3,
            4,5,5,5,5,5,5,5,5,54,
            54,73,6,6,6,6,6,6,6,6,
            6,6,6,7,8,8,8,8,9,9,
            9,11,11,11,12,12,12,12,12,13,
            13,13,14,14,15,15,16,16,17,17,
            18,18,19,19,20,20,20,20,20,20,
            20,20,20,20,20,20,105,31,30,90,
            90,75,75,45,106,106,106,106,106,106,
            106,107,107,107,108,108,113,113,114,114,
            109,109,110,110,110,116,116,111,111,111,
            111,112,112,112,112,112,115,115,27,27,
            27,27,27,32,32,32,81,81,76,76,
            76,76,77,77,77,78,78,78,79,79,
            79,80,80,80,117,117,118,118,119,33,
            35,35,35,35,35,55,57,57,57,57,
            57,57,57,57,57,57,57,57,66,63,
            63,91,92,67,67,64,64,64,68,82,
            82,83,83,69,69,69,36,93,93,84,
            85,85,85,65,65,94,86,86,87,87,
            70,70,23,24,24,24,34,51,51,38,
            38,38,38,41,41,43,39,39,40,44,
            44,120,120,42,121,121,95,95,28,28,
            28,28,28,28,28,28,28,88,52,52,
            52,52,29,59,59,58,58,58,60,60,
            53,53,96,96,50,50,61,61,61,46,
            46,46,47,48,48,48,49,49,49,49,
            56,56,56,62,97,74,74,74,74,71,
            98,99,99,100,100,101,101,122,122,123,
            123,124,124,124,124,126,126,125,125,125,
            127,127,89,89,2,2,2,6,6,6,
            6,6,6,23,23,25,25,26,26,102,
            102,102,106,128,128,128,128,128,128,128,
            111,111,111,111,111,111,111,111,111,111,
            111,111,111,111,111,111,111,111,111,111,
            111,111,111,111,129,129,1,1302,17,21,
            18,428,1273,44,537,532,188,718,539,793,
            758,1211,1209,1255,1215,74,91,88,607,134,
            212,323,324,401,537,61,525,1300,136,133,
            135,159,664,20,17,21,18,428,43,44,
            537,532,194,718,539,793,758,1211,1209,1603,
            581,138,274,165,1440,1690,521,1153,931,142,
            145,148,151,534,218,1395,220,1557,222,223,
            228,412,1244,596,1558,1589,1602,1217,571,20,
            17,21,18,428,1273,44,537,532,393,718,
            539,793,758,1211,1209,1255,1215,74,280,633,
            20,17,21,18,428,1273,44,537,532,393,
            718,539,793,758,1211,1209,1255,1215,74,280,
            325,1732,420,291,664,20,17,21,18,428,
            43,44,537,532,285,718,539,793,758,1555,
            1698,446,20,17,21,18,428,43,36,286,
            293,292,618,230,186,285,230,31,13,455,
            1828,1698,70,245,137,230,1771,457,448,250,
            286,277,125,1305,363,20,17,21,18,428,
            1273,44,537,532,393,718,539,793,758,1211,
            1209,1255,1215,74,280,254,212,323,324,225,
            178,819,20,17,21,18,428,1273,44,537,
            532,1799,718,539,793,758,1211,1209,1255,1215,
            74,1588,134,212,323,324,862,1151,61,25,
            287,136,133,135,159,209,1698,664,20,17,
            21,18,428,43,40,288,230,185,797,134,
            212,323,324,716,138,426,165,1683,144,133,
            135,159,142,145,148,151,534,664,20,17,
            21,18,428,43,39,1244,596,1558,1589,1602,
            1217,281,20,17,21,18,428,1273,44,537,
            532,1786,718,539,793,758,1211,1209,1255,1215,
            74,1358,1266,238,602,20,17,21,18,428,
            1273,44,537,532,188,718,539,793,758,1211,
            1209,1255,1215,74,280,664,20,17,21,18,
            428,1273,44,537,532,19,718,539,793,758,
            1211,1209,1255,1215,74,91,564,1697,39,580,
            664,20,17,21,18,428,43,44,537,532,
            289,718,539,793,1556,239,1698,487,20,17,
            21,18,428,43,44,537,532,275,718,539,
            793,758,1211,1209,1255,1215,93,22,32,331,
            664,20,17,21,18,428,43,44,537,532,
            412,1408,322,20,17,21,18,428,1273,44,
            537,532,1609,718,539,793,758,1211,1209,1255,
            1215,74,1611,81,239,664,20,17,21,18,
            428,1273,44,537,532,188,718,539,793,758,
            1211,1209,1255,1215,74,92,664,20,17,21,
            18,428,1273,44,537,532,1617,718,539,793,
            758,1211,1209,1255,1215,74,85,664,20,17,
            21,18,428,1273,44,537,532,188,718,539,
            793,758,1211,1209,1255,1215,74,84,664,20,
            17,21,18,428,1273,44,537,532,1629,718,
            539,793,758,1211,1209,1255,1215,74,83,664,
            20,17,21,18,428,1273,44,537,532,188,
            718,539,793,758,1211,1209,1255,1215,74,82,
            664,20,17,21,18,428,1273,44,537,532,
            1630,718,539,793,758,1211,1209,1255,1215,74,
            81,664,20,17,21,18,428,1273,44,537,
            532,188,718,539,793,758,1211,1209,1255,1215,
            74,80,664,20,17,21,18,428,1273,44,
            537,532,1632,718,539,793,758,1211,1209,1255,
            1215,74,79,664,20,17,21,18,428,1273,
            44,537,532,188,718,539,793,758,1211,1209,
            1255,1215,74,78,664,20,17,21,18,428,
            1273,44,537,532,23,718,539,793,758,1211,
            1209,1255,1215,74,77,664,20,17,21,18,
            428,1273,44,537,532,188,718,539,793,758,
            1211,1209,1255,1215,74,76,664,20,17,21,
            18,428,1273,44,537,532,272,718,539,793,
            758,1211,1209,1255,1215,74,75,664,20,17,
            21,18,428,1273,44,537,532,188,718,539,
            793,758,1211,1209,1255,1215,74,73,664,20,
            17,21,18,428,1273,44,537,532,278,718,
            539,793,758,1211,1209,1255,1215,74,1687,664,
            20,17,21,18,428,1273,44,537,532,188,
            718,539,793,758,1211,1209,1255,1215,74,1692,
            664,20,17,21,18,428,43,44,537,532,
            279,718,539,793,758,1211,1209,1255,1215,93,
            664,20,17,21,18,428,43,44,537,532,
            538,718,539,793,758,1211,1209,1255,1215,93,
            1361,230,187,139,892,1756,664,20,17,21,
            18,428,43,44,1304,664,20,17,21,18,
            428,43,44,537,532,1769,718,539,793,758,
            1211,1209,1255,1215,93,664,20,17,21,18,
            428,43,44,537,532,293,718,539,793,758,
            1211,1209,1255,1215,93,1819,230,294,1411,59,
            211,115,194,230,296,243,230,225,178,61,
            664,20,17,21,18,428,43,44,537,532,
            201,718,539,793,758,1211,1209,1255,1215,93,
            134,212,323,324,394,1731,13,1000,1663,137,
            133,135,159,892,144,53,1816,1436,695,20,
            17,21,18,428,321,202,518,134,212,323,
            324,1759,139,337,165,273,141,133,135,159,
            143,146,149,152,534,217,1395,220,1557,222,
            223,228,359,266,719,394,271,399,262,140,
            71,165,850,28,477,797,954,1813,263,726,
            20,17,21,18,428,319,1684,664,20,17,
            21,18,428,43,44,537,532,276,718,539,
            793,758,1211,1604,273,1008,757,20,17,21,
            18,428,317,260,217,1395,220,1557,222,223,
            228,281,266,719,394,271,13,1686,239,1814,
            523,63,13,273,1690,616,1484,1015,230,31,
            518,1706,1370,218,1395,220,1557,222,223,228,
            240,268,719,394,271,664,20,17,21,18,
            428,43,44,537,532,644,718,539,1489,217,
            1395,220,1557,222,223,228,498,282,119,126,
            518,518,1802,664,20,17,21,18,428,43,
            44,537,532,227,718,1501,664,20,17,21,
            18,428,43,44,537,532,61,718,1513,63,
            181,24,13,13,143,197,199,179,203,1706,
            1836,207,1618,469,1772,664,20,17,21,18,
            428,43,44,537,532,1663,1409,664,20,17,
            21,18,428,43,44,537,1486,217,1395,220,
            1557,222,223,228,482,1771,312,372,1335,408,
            1802,664,20,17,21,18,428,43,44,537,
            532,291,1444,664,20,17,21,18,428,43,
            44,537,532,331,1451,664,20,17,21,18,
            428,43,38,198,199,664,20,17,21,18,
            428,43,44,537,1487,412,664,20,17,21,
            18,428,43,44,1406,1706,446,20,17,21,
            18,428,43,36,208,361,673,617,891,994,
            664,20,17,21,18,428,43,37,330,1681,
            1154,1783,643,217,1395,220,1557,222,223,228,
            276,134,212,323,324,226,1686,273,239,903,
            147,133,135,159,446,20,17,21,18,428,
            43,36,932,333,669,266,719,394,271,239,
            242,239,134,212,323,324,246,700,482,1771,
            1015,150,133,135,159,134,212,323,324,731,
            762,329,793,241,153,133,135,159,664,20,
            17,21,18,428,43,36,664,20,17,21,
            18,428,43,35,1011,664,20,17,21,18,
            428,43,47,245,1219,664,20,17,21,18,
            428,43,46,664,20,17,21,18,428,43,
            45,559,273,237,559,707,188,239,208,13,
            292,569,239,1841,569,569,735,824,856,1820,
            266,719,394,271,1253,1783,61,224,1247,243,
            1663,1247,1247,1663,244,265,788,20,17,21,
            18,428,41,664,20,17,21,18,428,34,
            13,857,6,1759,258,1663,1335,258,259,1057,
            366,1696,1057,13,1696,664,20,17,21,18,
            428,33,251,366,13,188,239,196,396,1014,
            87,684,695,518,366,13,1654,13,82,239,
            196,853,133,87,684,366,229,366,293,1654,
            376,196,89,915,87,684,69,273,1690,233,
            1654,295,196,805,196,87,684,87,684,69,
            180,1654,704,1654,847,268,719,394,271,253,
            212,323,324,518,518,889,57,931,373,679,
            169,113,253,212,323,324,569,1947,503,569,
            569,569,1947,1947,1947,1947,69,1947,569,528,
            1947,69,973,196,193,542,1247,196,196,695,
            204,1254,1140,13,1947,1247,1140,1140,542,253,
            212,323,324,695,253,212,323,324,961,87,
            312,1947,258,1947,772,1947,1947,1755,1947,1696,
            1947,258,973,87,735,191,1099,1068,1696,191,
            192,254,212,323,324,1868,1947,1947,1410,1821,
            1882,13,1763,1821,1947,254,212,323,324,1947,
            1947,695,1947,1947,1768,1947,1947,1947,1947,1947,
            1947,1947,1947,1947,1947,1947,1947,1947,387,1947,
            1947,87,1572,1947,0,326,737,0,20,178,
            0,1,2172,0,1,2183,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,0,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,0,32,33,34,35,36,37,0,8,
            40,41,42,43,44,45,46,47,48,49,
            50,51,0,53,54,55,0,1,0,3,
            0,5,0,1,2,9,10,11,0,0,
            0,15,16,17,69,6,7,9,10,11,
            0,0,12,15,16,17,5,0,32,33,
            34,35,36,37,56,57,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,0,1,0,3,60,5,0,38,
            39,9,10,11,0,0,74,15,16,17,
            68,73,0,9,10,11,0,5,0,15,
            16,17,0,0,32,33,34,35,36,37,
            70,71,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,0,1,
            38,3,60,5,56,57,89,9,10,11,
            0,56,57,15,16,17,72,0,0,9,
            10,11,5,0,0,15,16,17,56,57,
            32,33,34,35,36,37,0,75,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,0,1,39,3,60,0,
            1,38,3,9,10,11,0,0,0,15,
            16,17,0,5,0,9,10,11,4,0,
            0,15,16,17,0,5,32,33,34,35,
            36,37,56,57,40,41,42,43,44,45,
            46,47,48,49,50,51,0,53,54,55,
            0,1,2,3,4,5,6,7,8,39,
            0,0,0,13,14,4,58,5,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,0,32,64,65,66,67,6,7,77,
            78,0,1,2,3,4,5,6,7,8,
            0,39,0,0,13,14,0,0,58,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,0,32,64,65,66,67,0,1,
            0,3,0,1,2,3,4,5,6,7,
            8,0,0,1,12,13,14,6,7,58,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,0,64,65,66,67,0,1,
            0,3,9,10,11,69,74,0,15,16,
            17,0,1,2,52,79,80,81,82,83,
            84,85,86,87,88,32,33,34,35,36,
            37,31,72,40,41,42,43,44,45,46,
            47,48,49,50,51,0,1,2,3,4,
            5,6,7,8,0,1,0,3,13,14,
            4,61,0,18,19,20,21,22,23,24,
            25,26,27,28,29,30,0,70,71,0,
            4,0,1,0,3,0,0,1,2,3,
            4,5,6,7,8,0,1,0,3,13,
            14,4,0,58,18,19,20,21,22,23,
            24,25,26,27,28,29,30,0,62,63,
            0,1,5,3,0,1,2,0,1,2,
            3,4,12,6,7,8,0,0,62,63,
            13,14,5,0,58,18,19,20,21,22,
            23,24,25,26,27,28,29,30,0,62,
            63,59,4,0,1,0,3,31,0,52,
            0,1,2,3,4,12,6,7,8,0,
            0,2,12,13,14,0,0,60,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,0,1,2,3,4,0,6,7,8,
            31,31,75,12,13,14,0,59,2,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,0,1,2,3,4,31,6,7,
            8,61,0,0,12,13,14,31,0,0,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,0,1,2,3,4,0,6,
            7,8,0,0,31,0,13,14,0,1,
            8,18,19,20,21,22,23,24,25,26,
            27,28,29,30,0,1,2,3,4,0,
            6,7,8,0,0,0,0,13,14,0,
            68,12,18,19,20,21,22,23,24,25,
            26,27,28,29,30,0,1,2,3,4,
            0,6,7,8,0,0,0,59,13,14,
            0,73,12,18,19,20,21,22,23,24,
            25,26,27,28,29,30,0,1,2,3,
            4,0,6,7,8,59,0,0,0,13,
            14,68,38,12,18,19,20,21,22,23,
            24,25,26,27,28,29,30,0,1,2,
            3,4,0,6,7,8,0,0,0,0,
            13,14,0,5,12,18,19,20,21,22,
            23,24,25,26,27,28,29,30,0,1,
            2,3,4,0,6,7,8,0,0,0,
            0,13,14,0,38,12,18,19,20,21,
            22,23,24,25,26,27,28,29,30,0,
            52,2,0,4,5,0,0,0,9,10,
            11,0,0,0,15,16,17,12,12,12,
            9,10,11,0,12,12,15,16,17,0,
            31,32,33,34,35,36,37,0,39,0,
            0,0,0,32,33,34,35,36,37,9,
            10,11,0,0,0,15,16,17,0,0,
            0,9,10,11,0,0,0,15,16,17,
            0,69,32,33,34,35,36,37,0,38,
            0,0,2,0,32,33,34,35,36,37,
            9,10,11,13,14,0,15,16,17,0,
            0,0,38,0,1,2,0,0,5,0,
            0,31,0,32,33,34,35,36,37,9,
            10,11,0,0,0,15,16,17,0,0,
            0,9,10,11,31,0,0,15,16,17,
            0,61,39,0,0,2,0,0,5,0,
            1,2,0,4,0,0,76,0,1,2,
            0,4,2,0,4,2,0,4,0,0,
            0,0,0,0,31,0,0,0,0,0,
            31,0,39,0,0,0,0,0,31,0,
            0,31,0,0,31,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1947,1958,1730,1959,1638,1947,1560,1515,1646,2160,
            2161,2162,1,1745,1723,2274,388,2275,1716,1960,
            1961,1962,1963,637,607,2261,2262,2263,1336,1309,
            1258,64,2109,2110,2108,2163,2111,2107,54,1385,
            2114,2119,2118,2116,2117,2115,2120,2121,2113,2122,
            2123,2124,70,529,1297,1292,1947,1,68,1,
            252,190,1,2172,1535,1,1,1,1947,51,
            1947,1,1,1,674,1536,1156,2160,2161,2162,
            62,1947,528,2274,388,2275,1953,1947,1,1,
            1,1,1,1,1467,1525,1,1,1,1,
            1,1,1,1,1,1,1,1,190,1,
            1,1,1947,1,66,1,2142,189,58,1818,
            1952,1,1,1,247,57,1317,1,1,1,
            1185,494,1947,2160,2161,2162,181,1957,182,2274,
            388,2275,56,284,1,1,1,1,1,1,
            1426,1413,1,1,1,1,1,1,1,1,
            1,1,1,1,189,1,1,1,1947,1,
            1439,1,2142,190,1467,1525,1934,1,1,1,
            248,1467,1525,1,1,1,720,1947,1947,1,
            1,1,1953,88,1947,1,1,1,1467,1525,
            1,1,1,1,1,1,55,1956,1,1,
            1,1,1,1,1,1,1,1,1,1,
            190,1,1,1,1947,1958,1952,1959,2142,1947,
            1958,795,1959,2160,2161,2162,249,1947,1947,2274,
            388,2275,72,1951,1947,1,1,1,395,59,
            1,1,1,1,1947,90,2109,2110,2108,2163,
            2111,2107,1467,1525,2114,2119,2118,2116,2117,2115,
            2120,2121,2113,2122,2123,2124,1947,529,1297,1292,
            1,1958,1730,1959,511,1951,1560,1515,1646,90,
            61,1947,1,1745,1723,598,1950,1953,1716,1960,
            1961,1962,1963,637,607,2261,2262,2263,1336,1309,
            1258,53,571,1503,1491,1455,760,1536,1156,402,
            1901,1947,1958,1730,1959,1594,1951,1560,1515,1646,
            60,1952,71,1947,1745,1723,43,1947,1950,1716,
            1960,1961,1962,1963,637,607,2261,2262,2263,1336,
            1309,1258,1947,1089,1503,1491,1455,760,184,3170,
            67,3170,1,1958,1730,1959,1638,29,1560,1515,
            1646,52,1947,2184,3111,1745,1723,1536,1156,1950,
            1716,1960,1961,1962,1963,637,607,2261,2262,2263,
            1336,1309,1258,128,1503,1491,1455,760,183,3175,
            1947,3175,2160,2161,2162,1026,1317,63,2274,388,
            2275,1,2172,1535,29,1005,984,963,942,921,
            879,900,858,837,816,2109,2110,2108,2163,2111,
            2107,1110,720,2114,2119,2118,2116,2117,2115,2120,
            2121,2113,2122,2123,2124,1947,1958,1730,1959,1638,
            1951,1560,1515,1646,205,3176,48,3176,1745,1723,
            1673,1206,1947,1716,1960,1961,1962,1963,637,607,
            2261,2262,2263,1336,1309,1258,50,1426,1413,1947,
            1673,207,1958,1947,1959,1947,1947,1958,1730,1959,
            1546,1951,1560,1515,1646,206,535,49,535,1745,
            1723,1673,1,1950,1716,1960,1961,1962,1963,637,
            607,2261,2262,2263,1336,1309,1258,1947,1665,1655,
            1947,1958,1955,1959,252,2172,1535,1947,1,1,
            1,1,1246,1,1,1,270,1,1665,1655,
            1,1,1957,1947,1950,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1665,
            1655,2204,252,1947,1958,1947,1959,651,1947,1954,
            1,1958,1730,1959,1638,1356,1560,1515,1646,269,
            290,520,3111,1745,1723,1947,1947,2260,1716,1960,
            1961,1962,1963,637,607,2261,2262,2263,1336,1309,
            1258,1947,1958,1730,1959,1638,326,1560,1515,1646,
            651,1130,1956,3111,1745,1723,221,2204,1195,1716,
            1960,1961,1962,1963,637,607,2261,2262,2263,1336,
            1309,1258,1,1958,1730,1959,1638,1935,1560,1515,
            1646,1213,1947,219,3111,1745,1723,651,1947,1947,
            1716,1960,1961,1962,1963,637,607,2261,2262,2263,
            1336,1309,1258,1947,1958,1730,1959,1638,69,1560,
            1515,1646,65,1947,651,1947,1745,1723,1,1944,
            1385,1716,1960,1961,1962,1963,637,607,2261,2262,
            2263,1336,1309,1258,1947,1958,1743,1959,1638,322,
            1560,1515,1646,200,1947,1947,1,1745,1723,1947,
            1047,528,1716,1960,1961,1962,1963,637,607,2261,
            2262,2263,1336,1309,1258,1947,1958,1754,1959,1638,
            320,1560,1515,1646,255,1947,1947,2204,1745,1723,
            1947,494,528,1716,1960,1961,1962,1963,637,607,
            2261,2262,2263,1336,1309,1258,1947,1958,1765,1959,
            1638,318,1560,1515,1646,2203,1947,1947,1947,1745,
            1723,1220,1685,528,1716,1960,1961,1962,1963,637,
            607,2261,2262,2263,1336,1309,1258,1947,1958,1767,
            1959,1638,42,1560,1515,1646,30,1947,283,1947,
            1745,1723,1947,1362,528,1716,1960,1961,1962,1963,
            637,607,2261,2262,2263,1336,1309,1258,1,1958,
            1730,1959,1638,1947,1560,1515,1646,1947,1947,1947,
            1947,1745,1723,1947,544,1442,1716,1960,1961,1962,
            1963,637,607,2261,2262,2263,1336,1309,1258,20,
            1362,1938,210,1938,1938,1947,1947,188,178,178,
            178,129,188,188,178,178,178,1443,1689,184,
            2160,2161,2162,1947,183,205,2274,388,2275,1947,
            1938,178,178,178,178,178,178,1947,1938,1947,
            130,30,1947,2109,2110,2108,2163,2111,2107,2160,
            2161,2162,131,1947,1947,2274,388,2275,1947,1947,
            1947,2160,2161,2162,206,1947,1947,2274,388,2275,
            1947,1165,2109,2110,2108,2163,2111,2107,1947,1976,
            32,132,1752,1947,2109,2110,2108,2163,2111,2107,
            2160,2161,2162,1973,1974,1947,2274,388,2275,1947,
            1947,1947,2808,1,1941,1306,1947,1947,1953,1947,
            250,1853,1947,2109,2110,2108,2163,2111,2107,2160,
            2161,2162,251,1947,1947,2274,388,2275,1947,1947,
            1947,2160,2161,2162,651,1947,1947,2274,388,2275,
            1947,1368,1952,1,1947,1559,1947,1947,1953,261,
            2172,1306,1947,1,1947,1947,526,267,2172,1306,
            264,252,1559,267,1,1559,1947,252,1947,1947,
            1947,1947,1947,1947,651,1947,1947,1947,1947,1947,
            651,1947,1952,1947,1947,1947,1947,1947,651,1947,
            1947,651,1947,1947,651
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            473,1,146,102,146,146,146,146,146,146,
            146,146,146,146,146,146,10,64,84,81,
            88,86,94,92,96,95,98,97,70,146,
            10,10,10,10,318,318,230,10,368,368,
            443,146,146,146,146,146,146,146,146,146,
            146,146,146,146,146,146,146,146,146,146,
            146,146,146,146,146,146,146,146,146,146,
            146,146,318,318,318,318,135,234,137,335,
            316,315,202,3,214,133,214,133,133,214,
            133,214,30,269,318,106,81,81,86,86,
            86,86,84,84,92,88,88,95,94,333,
            97,96,371,371,371,371,111,230,234,140,
            106,53,170,318,411,338,170,133,368,368,
            133,368,146,111,234,222,53,106,169,137,
            318,228,30,317,340,106,170,135,236,135,
            321,323,61,266,135,222,222,146,146,106,
            170,335,328,327,234,340,318,135,236,321,
            321,266,109,471,368,146,60,266,111,222,
            53,106,106,318,411,338,228,236,266,195,
            236,321,323,468,323,113,106,368,146,111,
            53,222,340,236,197,323,266,146,368,106,
            323,222,318,317,266,407,146,406,165,234,
            266,266,369,197,146,165,323
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            89,0,5,68,38,58,39,75,31,18,
            19,20,21,22,2,13,14,8,4,6,
            7,23,24,25,26,27,28,29,30,1,
            3,53,54,55,48,40,45,43,44,42,
            41,46,47,49,50,51,37,34,32,33,
            36,35,9,10,11,16,15,17,0,69,
            31,61,0,31,2,61,76,13,14,69,
            79,80,81,82,83,85,84,86,87,88,
            4,62,63,6,7,57,56,64,65,66,
            67,70,71,8,72,73,74,52,75,77,
            78,68,39,89,38,58,5,0,5,52,
            31,61,13,14,8,4,6,7,23,24,
            18,28,29,30,2,19,20,21,22,25,
            26,27,1,3,12,0,58,5,32,9,
            10,11,15,16,17,19,20,21,22,25,
            26,27,3,13,14,8,6,7,23,24,
            18,28,29,30,4,2,1,0,32,58,
            5,13,14,8,4,6,7,23,24,18,
            28,29,30,2,1,3,19,20,21,22,
            25,26,27,0,75,5,4,1,2,68,
            0,48,40,45,43,44,42,41,46,47,
            49,50,51,68,75,37,34,32,33,36,
            35,9,10,11,15,16,17,38,1,5,
            39,2,31,4,0,33,40,9,41,53,
            34,42,35,43,44,36,10,45,46,32,
            54,37,55,47,48,11,49,50,51,1,
            3,15,16,17,60,5,52,0,10,32,
            37,11,36,35,34,9,33,15,16,17,
            61,76,13,14,8,6,7,62,63,56,
            57,64,65,66,67,70,71,72,73,74,
            77,78,69,79,80,81,82,83,84,85,
            86,87,88,4,2,31,38,39,5,0,
            1,3,5,52,38,0,2,5,38,39,
            75,31,68,0,4,2,31,39,5,33,
            40,9,41,53,34,42,35,43,44,36,
            10,45,46,32,54,37,55,47,48,11,
            49,50,51,15,16,17,59,3,1,0,
            8,4,6,7,62,63,56,57,64,65,
            66,67,70,71,72,73,74,77,78,69,
            79,80,81,82,83,84,85,86,87,88,
            58,39,52,89,12,68,75,5,38,0,
            4,33,40,9,41,53,34,42,35,43,
            44,36,10,45,46,32,54,37,55,47,
            48,11,49,50,51,1,3,15,16,17,
            59,0,5,39,18,19,20,21,22,1,
            3,2,13,14,8,4,6,7,23,24,
            25,26,27,28,29,30,0,5,38,52,
            69,0,18,19,20,21,22,1,3,2,
            13,14,8,4,6,7,23,24,25,26,
            27,28,29,30,60,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            119,41,32,41,32,32,32,32,32,32,
            32,32,32,32,32,32,94,41,41,41,
            41,41,41,41,41,41,41,41,41,32,
            94,94,94,94,18,18,85,1,20,20,
            98,95,32,32,32,32,32,32,32,32,
            32,32,32,32,32,32,32,32,95,32,
            32,32,32,32,32,32,32,32,32,32,
            32,32,18,18,18,18,41,64,47,84,
            13,13,61,9,62,25,62,23,23,62,
            22,62,56,41,18,49,41,41,41,41,
            41,41,41,41,41,41,41,41,41,41,
            41,41,41,41,41,41,76,101,41,42,
            49,105,48,18,89,17,48,7,7,7,
            7,7,32,30,41,82,105,49,48,27,
            18,72,34,41,91,49,48,54,76,41,
            76,45,11,76,41,82,76,32,32,49,
            48,71,13,13,64,91,18,41,107,76,
            7,69,29,41,7,32,15,69,76,76,
            105,49,49,18,89,17,78,76,69,51,
            115,7,45,41,41,31,49,7,32,30,
            105,27,111,107,74,45,69,32,7,49,
            45,27,18,18,69,52,32,41,74,64,
            69,69,41,74,32,80,67
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            81,79,78,67,77,76,1,0,102,0,
            99,0,28,0,101,0,10,21,0,73,
            0,94,68,0,91,0,23,0,71,10,
            62,5,0,81,80,79,78,67,77,76,
            0,5,10,0,54,0,10,5,22,0,
            10,72,0,92,0,67,63,64,65,66,
            55,32,0,29,52,0,97,0,37,0,
            21,48,47,41,39,10,0,48,47,41,
            39,29,0,21,47,48,10,0,29,52,
            10,27,0,36,10,31,0,10,90,0,
            48,47,29,0,59,0,83,10,36,0,
            95,10,27,0,10,36,69,0,10,89,
            0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,10,11,8,48,64,
            76,3,6,7,96,97,98,68,81,82,
            83,84,12,13,93,94,95,100,101,102,
            1,69,44,55,60,63,72,42,90,47,
            52,56,61,62,66,67,74,75,78,79,
            80,91,54,70,73,16,17,89,30,107,
            4,14,15,18,19,20,21,29,31,22,
            23,24,25,26,92,5,27,28,32,33,
            34,35,36,37,38,39,40,41,108,45,
            46,49,50,51,53,57,58,59,65,71,
            77,88,99,103,104,105,106
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            114,0,0,0,116,120,121,122,123,0,
            124,125,126,127,128,129,130,131,0,132,
            111,110,142,0,0,0,135,163,0,0,
            115,141,0,0,0,154,112,159,161,0,
            162,0,0,0,134,172,173,174,0,118,
            150,160,169,0,144,149,0,164,167,168,
            171,0,145,146,147,148,151,0,153,158,
            175,113,117,119,133,136,137,138,139,140,
            143,0,152,156,0,0,157,166,109,0,
            0,0,155,0,165,170,0,176,177,0,
            178,179,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            120,151,206,130,59,69,159,26,186,35,
            87,105,75,6,12,16,40,83,52,141,
            202,224,228,52,52,195,52,1,1,1,
            44,47,92,115,47,232,20,145,177,214,
            137,165,165,165,165,165,95,95,95
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            128,128,128,128,4,4,128,32,192,10,
            4,10,80,10,10,10,10,4,4,139,
            10,10,4,56,80,199,65,4,4,4,
            10,50,4,10,118,10,23,148,180,217,
            139,167,169,171,173,175,102,97,110
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            65,63,5,65,28,28,63,56,110,49,
            28,44,28,6,6,6,49,28,28,69,
            6,5,5,28,28,19,28,102,101,100,
            47,61,28,41,51,3,71,69,111,5,
            69,80,79,78,77,76,44,42,44
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            52,52,52,52,58,58,52,52,95,39,
            58,39,19,39,39,39,39,58,58,75,
            39,39,58,4,19,68,32,58,58,58,
            39,2,58,39,1,39,69,1,101,39,
            75,1,53,54,54,48,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            19,19,34,19,23,23,19,93,-1,27,
            23,9,23,34,34,34,27,23,23,3,
            34,34,34,23,23,67,23,17,1,7,
            27,29,23,9,11,34,94,3,-1,34,
            3,20,20,20,20,20,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            152,31,0,110,0,157,2,30,0,111,
            0,157,2,29,0,157,2,28,0,205,
            117,0,31,149,0,161,181,117,12,169,
            0,112,0,0,165,117,2,154,0,165,
            117,2,0,168,2,0,159,117,0,172,
            0,195,117,31,0,9,110,0,127,32,
            195,117,31,0,69,132,110,0,127,195,
            117,32,31,0,195,117,32,31,0,132,
            110,0,127,32,31,0,127,195,117,31,
            0,127,31,0,148,0,2,0,165,111,
            0,2,111,0,165,117,2,148,0,2,
            0,164,111,0,158,2,0,159,0,161,
            193,117,12,108,201,53,0,112,0,161,
            193,117,12,201,53,0,143,0,113,0,
            200,117,143,0,117,143,0,155,113,0,
            189,117,12,199,108,198,174,0,189,117,
            12,198,174,0,188,0,148,0,147,0,
            146,0,145,0,144,0,213,94,0,77,
            2,115,111,113,0,213,128,138,2,98,
            0,53,0,0,138,78,125,0,29,132,
            0,157,2,18,0,161,181,117,12,128,
            157,2,0,157,2,0,111,3,0,119,
            0,112,0,197,2,112,0,138,31,112,
            0,138,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            420,0,1820,1821,1816,0,393,0,396,1335,
            1439,1535,1361,1306,1247,0,388,0,1217,569,
            366,0,1557,1395,719,394,1335,1759,1306,1247,
            1559,1654,0,1594,1546,511,1317,402,720,494,
            1426,1413,1385,1525,1467,1503,1491,1455,760,1673,
            1665,1655,1536,1156,1745,1723,1646,1638,1560,1515,
            637,607,1716,1336,1309,1258,1220,1185,1165,1130,
            1110,1089,1068,772,1047,737,571,651,1026,1005,
            984,963,942,921,900,879,858,837,816,366,
            795,695,674,469,544,448,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,196,117,182,30,29,28,18,24,23,
            7,6,4,8,14,13,2,112,116,115,
            119,118,121,120,123,122,125,124,113,38,
            2,2,2,2,157,138,143,117,76,61,
            2,31,7,6,63,62,4,67,66,65,
            64,56,57,8,71,70,73,72,78,77,
            74,88,87,86,84,85,83,82,81,80,
            79,69,157,157,157,157,128,117,31,2,
            155,154,183,16,184,174,185,55,54,186,
            53,187,188,108,197,138,115,115,118,118,
            118,118,116,116,120,119,119,122,121,138,
            124,123,128,128,128,128,12,159,136,32,
            127,117,4,168,117,2,31,198,175,175,
            201,175,68,117,136,4,117,127,195,166,
            165,134,117,167,117,152,4,108,12,108,
            12,181,117,12,169,4,136,195,32,127,
            4,2,146,148,117,38,165,199,117,12,
            117,161,38,205,61,31,206,117,12,136,
            117,127,127,158,117,2,159,12,189,143,
            190,117,193,108,194,69,152,61,31,117,
            117,166,117,117,117,193,161,69,38,152,
            181,166,165,202,189,200,68,158,2,117,
            161,161,38,38,68,159,144
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "MYTHREAD",
            "THREADS",
            "UPC_MAX_BLOCKSIZE",
            "relaxed",
            "shared",
            "strict",
            "upc_barrier",
            "upc_localsizeof",
            "upc_blocksizeof",
            "upc_elemsizeof",
            "upc_notify",
            "upc_fence",
            "upc_wait",
            "upc_forall",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_cast_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "layout_qualifier"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 60,
           SCOPE_UBOUND      = 48,
           SCOPE_SIZE        = 49,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 227,
           NT_OFFSET         = 107,
           LA_STATE_OFFSET   = 2312,
           MAX_LA            = 2,
           NUM_RULES         = 365,
           NUM_NONTERMINALS  = 129,
           NUM_SYMBOLS       = 236,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1839,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 89,
           EOLT_SYMBOL       = 89,
           ACCEPT_ACTION     = 1934,
           ERROR_ACTION      = 1947;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
