/*******************************************************************************
 * Copyright (c) 2009, 2010 Nokia and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Nokia - Initial API and implementation
 *******************************************************************************/

package org.eclipse.cdt.debug.edc.internal.scripting;

import java.text.MessageFormat;
import java.util.List;
import java.util.Map;

import org.eclipse.cdt.debug.edc.internal.services.dsf.RunControl.ExecutionDMC;
import org.eclipse.cdt.debug.edc.services.Stack.StackFrameDMC;

/**
 *
 */
public class TestUtils {

	public static String createStackFrameLabel(Map<String, Object> frameData) {
		// This is similar to how the label is generated by DSF
		// in StackFramesVMNode.fillColumnLabel()
		// but tweaked to make more like expected test data

		StringBuilder label = new StringBuilder();

		// Add the function name
		Object o = frameData.get(StackFrameDMC.FUNCTION_NAME);
		if (o != null) {
			String function = o.toString();
			if (function.length() > 0) {
				label.append(function);
				label.append("()"); //$NON-NLS-1$
			}
		}

		// Add full file name
		o = frameData.get(StackFrameDMC.SOURCE_FILE);
		if (o != null) {
			String file = o.toString();
			if (file.length() > 0) {
				label.append(" at "); //$NON-NLS-1$
				label.append(file);
			}
		}

		// Add line number
		o = frameData.get(StackFrameDMC.LINE_NUMBER);
		if (o != null) {
			int line = ((Integer) o).intValue();
			if (line >= 0) {
				label.append(": "); //$NON-NLS-1$
				label.append(line);
			}
		}

		return label.toString();
	}

	public static Object getStackFrameObjectFromLabel(String sessionId, String label) throws Exception {
		List<ExecutionDMC> suspendedThreads = DOMUtils.getSuspendedThreads(sessionId);
		if (suspendedThreads.isEmpty()) {
			throw new IllegalStateException("TestUtils.getStackFrameObjectFromLabel called with no suspended threads");
		}
		if (suspendedThreads.size() > 1) {
			throw new IllegalStateException(
					"TestUtils.getStackFrameObjectFromLabel called with multiple suspended threads");
		}
		ExecutionDMC executionDMC = suspendedThreads.get(0);

		List<StackFrameDMC> stackFrames = DOMUtils.getStackFrames(executionDMC.getID());
		for (StackFrameDMC frame : stackFrames) {
			String testLabel = MessageFormat.format("{0}:{1}", frame.getSourceFile(), frame.getLineNumber());
			if (testLabel.indexOf(label) >= 0)
				return frame;
		}

		return null;
	}
}
