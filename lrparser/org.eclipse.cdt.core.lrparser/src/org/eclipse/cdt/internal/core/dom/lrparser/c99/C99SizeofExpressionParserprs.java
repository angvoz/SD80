/*******************************************************************************
* Copyright (c) 2006, 2009 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99SizeofExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, C99SizeofExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,4,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,1,4,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,5,9,8,
            3,2,2,2,3,2,4,2,2,2,
            2,2,1,1,1,1,2,1,2,2,
            2,1,2,2,1,2,2,1,2,2,
            1,2,2,1,3,1,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,6,8,
            0,0,1,1,3,3,3,0,1,0,
            1,2,4,2,1,1,1,3,1,1,
            2,3,7,8,0,1,0,1,3,1,
            3,1,1,1,1,1,1,3,1,1,
            1,1,1,3,1,2,2,1,5,3,
            1,3,5,1,3,1,3,2,4,3,
            5,4,6,6,3,5,1,3,4,5,
            6,0,1,2,1,3,1,1,3,2,
            1,1,1,1,2,1,2,3,1,1,
            1,3,1,2,2,2,3,4,5,1,
            1,7,3,0,0,1,1,3,3,4,
            1,1,2,3,2,3,2,1,0,1,
            2,1,1,1,1,1,2,1,3,6,
            4,2,4,1,1,-36,0,0,0,0,
            0,0,0,0,0,0,-2,0,0,0,
            0,0,0,0,0,0,0,0,-4,-156,
            -115,0,-14,0,0,0,0,-72,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -167,0,-29,0,-104,0,0,0,0,-80,
            0,0,-116,0,-16,0,-17,0,0,0,
            0,0,0,0,-138,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-174,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-178,0,-128,-78,0,0,-48,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-30,0,0,0,-18,0,-42,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-6,0,0,0,0,0,0,0,0,
            -189,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-3,0,0,0,0,0,0,0,0,
            0,0,-19,0,0,0,0,0,0,0,
            0,0,0,0,-117,0,0,-118,0,-119,
            0,0,0,-43,0,0,0,0,0,0,
            0,0,0,0,0,-108,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-5,0,0,0,
            0,0,0,0,-127,0,0,0,0,0,
            0,0,0,0,0,-81,0,0,0,0,
            0,0,0,0,0,-131,0,-158,0,-55,
            0,0,0,0,0,0,0,0,0,0,
            -122,0,0,0,0,0,0,0,0,0,
            -20,0,-21,0,0,0,0,-27,0,0,
            0,0,0,0,0,0,0,0,-22,0,
            0,0,0,0,0,0,0,0,0,0,
            -23,0,-188,0,-24,0,0,0,0,-74,
            0,-12,0,0,0,0,0,0,0,0,
            0,0,0,0,-56,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-57,0,0,0,0,
            0,0,0,0,0,0,-25,0,0,0,
            0,0,0,0,0,0,-58,0,0,0,
            0,0,0,0,0,0,0,-26,0,0,
            0,0,0,0,0,0,0,-59,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-60,0,
            0,0,0,0,0,0,0,0,0,-86,
            0,0,0,0,0,0,0,0,0,-61,
            0,0,0,0,0,0,0,0,0,0,
            -87,0,0,0,0,0,0,0,0,0,
            -62,0,0,0,0,0,0,0,0,0,
            0,-88,0,0,0,0,0,0,0,0,
            0,-63,0,0,0,0,0,0,0,0,
            0,0,-89,0,0,0,0,0,0,0,
            0,0,-64,0,0,0,0,0,0,0,
            0,0,0,-90,0,0,0,0,0,0,
            0,0,0,-65,0,0,0,0,0,0,
            0,0,0,0,-91,0,0,0,0,0,
            0,0,0,0,-66,0,0,0,0,0,
            0,0,0,0,0,-92,0,0,0,0,
            0,0,0,0,0,-120,0,0,0,0,
            0,0,0,0,0,0,-93,0,0,0,
            0,0,0,0,0,0,-141,0,0,0,
            0,0,0,0,0,0,0,-94,0,0,
            0,0,0,0,0,0,0,-142,0,0,
            0,0,0,0,0,0,0,0,-95,0,
            0,0,0,0,0,0,0,0,-177,0,
            0,0,0,0,0,0,0,0,0,-134,
            0,0,0,0,0,0,0,0,-186,0,
            0,0,0,0,0,0,0,0,0,-197,
            0,0,0,0,0,0,0,0,-13,0,
            0,0,0,0,0,0,-7,0,0,0,
            0,0,0,0,-192,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-198,0,0,0,0,0,
            0,0,0,0,0,-135,0,0,0,0,
            0,0,0,0,-155,-96,0,-170,0,0,
            -97,0,-70,0,0,0,0,0,0,0,
            -206,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -54,0,0,0,0,0,0,0,0,0,
            0,-130,0,0,0,0,0,0,0,-180,
            -176,0,0,0,0,-75,0,0,-37,0,
            0,0,0,0,0,0,0,0,-98,-145,
            0,0,-110,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-200,-193,-124,0,
            -187,0,0,0,0,0,-99,0,-100,0,
            -146,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-31,0,-101,0,0,0,
            0,0,0,0,0,0,0,0,0,-184,
            -102,-85,0,-33,0,0,-51,0,0,0,
            0,0,0,0,0,0,0,-121,0,0,
            0,0,0,0,0,-71,0,0,0,0,
            0,0,0,-52,0,0,0,0,0,0,
            0,0,0,0,-164,0,0,0,-137,-154,
            0,-34,0,-105,0,0,0,-183,0,0,
            -67,0,0,0,0,-107,0,-123,0,-83,
            0,0,0,-140,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-38,0,0,0,
            0,0,0,0,0,0,-49,0,0,0,
            0,0,0,0,0,0,0,0,0,-50,
            0,0,0,0,0,0,0,0,0,0,
            -205,0,0,0,-153,0,-157,-68,0,0,
            -132,0,-191,0,-136,0,-151,0,0,-44,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-8,
            0,0,0,0,0,0,0,-166,0,-45,
            0,0,0,0,0,0,0,0,0,0,
            -46,0,0,0,0,0,0,0,0,0,
            -47,0,0,0,0,0,0,0,0,0,
            -73,0,0,-76,-69,-109,0,-112,-139,-165,
            -171,0,-111,0,0,0,0,0,0,0,
            0,-172,-175,0,0,0,0,-207,0,0,
            0,0,0,0,0,0,0,-199,-204,0,
            -147,0,0,0,0,-144,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -9,0,0,0,0,0,0,0,-10,0,
            0,0,0,0,0,0,-11,0,0,0,
            0,0,0,0,-35,-39,0,0,0,0,
            0,0,0,0,-113,0,-40,0,0,0,
            0,0,0,0,-173,0,-103,-126,-143,-162,
            0,-41,0,0,0,0,0,0,0,0,
            0,0,-15,-129,-159,0,0,0,0,-28,
            -32,0,0,0,0,-179,0,-160,-148,-190,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-185,0,-77,0,0,0,0,
            0,0,0,0,0,0,0,0,-79,0,
            0,0,-196,-82,0,0,0,0,0,-106,
            -169,0,0,0,0,0,0,-84,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -125,0,0,-152,-181,0,0,0,0,-182,
            0,0,0,0,0,0,-133,0,0,-168,
            0,0,0,-150,-1,-114,-163,0,0,0,
            0,0,-53,0,0,0,0,0,0,-161,
            -149,0,-202,0,0,0,0,0,0,0,
            -203,0,0,0,0,0,0,-201,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-194,0,0,-195,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            87,11,102,24,24,23,23,39,39,69,
            69,1,1,2,2,2,2,3,3,3,
            4,5,5,5,5,5,5,5,5,59,
            59,70,6,6,6,6,6,6,6,6,
            6,6,7,7,8,8,8,8,9,9,
            9,10,10,10,12,12,12,12,12,13,
            13,13,14,14,15,15,16,16,17,17,
            18,18,19,19,20,20,20,20,20,20,
            20,20,20,20,20,20,103,45,40,88,
            88,72,72,47,104,104,104,104,104,104,
            104,105,105,105,106,106,111,111,112,112,
            107,107,108,108,108,114,114,109,109,109,
            109,110,110,110,110,110,113,113,25,25,
            25,25,25,28,28,28,78,78,73,73,
            73,73,74,74,74,75,75,75,76,76,
            76,77,77,77,115,115,116,116,117,29,
            31,31,31,31,31,53,54,54,54,54,
            54,54,54,54,54,54,54,54,63,60,
            60,89,90,65,65,61,61,61,66,79,
            79,80,80,67,67,67,49,91,91,81,
            82,82,82,62,62,92,83,83,84,84,
            68,68,21,22,22,22,30,48,48,32,
            32,32,32,35,35,37,33,33,34,38,
            38,118,118,36,119,119,93,93,26,26,
            26,26,26,26,26,26,26,85,50,50,
            50,50,27,56,56,55,55,55,57,57,
            51,51,94,94,71,71,58,58,58,41,
            41,41,42,43,43,43,44,44,44,44,
            64,64,46,46,52,96,95,95,95,95,
            86,97,98,98,99,99,100,100,120,120,
            121,121,122,122,122,122,124,124,123,123,
            123,125,126,126,87,87,1,780,17,21,
            18,343,738,44,387,385,523,31,467,633,
            631,661,649,717,665,74,91,134,212,15,
            668,329,990,607,136,133,135,159,275,20,
            17,21,18,343,738,44,387,385,523,1153,
            467,633,631,661,649,717,665,74,1426,138,
            165,692,238,360,31,50,142,145,148,151,
            421,445,1268,360,186,241,1228,194,339,1424,
            1586,1599,1604,1618,1212,441,20,17,21,18,
            343,738,44,387,385,523,340,467,633,631,
            661,649,717,665,74,280,336,20,17,21,
            18,343,738,44,387,385,523,340,467,633,
            631,661,649,717,665,74,280,1443,442,292,
            194,281,693,25,575,97,383,1264,489,20,
            17,21,18,343,42,44,387,385,523,286,
            467,969,281,360,31,254,212,12,1264,489,
            20,17,21,18,343,42,44,387,385,843,
            288,287,489,20,17,21,18,343,42,40,
            1075,465,20,17,21,18,343,738,44,387,
            385,523,289,467,633,631,661,649,717,665,
            74,280,489,20,17,21,18,343,738,44,
            387,385,523,30,467,633,631,661,649,717,
            665,74,91,24,341,360,185,281,576,1355,
            360,187,293,1264,489,20,17,21,18,343,
            42,44,387,385,864,290,537,20,17,21,
            18,343,738,44,387,385,523,1641,467,633,
            631,661,649,717,665,74,1538,513,20,17,
            21,18,343,41,339,299,20,17,21,18,
            343,738,44,387,385,523,446,467,633,631,
            661,649,717,665,74,1539,189,178,236,239,
            489,20,17,21,18,343,42,44,387,385,
            523,50,467,633,631,661,1211,134,212,253,
            212,580,395,63,136,133,135,159,489,20,
            17,21,18,343,738,44,387,385,523,219,
            467,633,631,661,649,717,665,74,92,138,
            165,313,535,282,1130,327,142,145,148,151,
            323,445,513,20,17,21,18,343,34,1424,
            1586,1599,1604,1618,1212,489,20,17,21,18,
            343,738,44,387,385,523,274,467,633,631,
            661,649,717,665,74,85,489,20,17,21,
            18,343,738,44,387,385,523,413,467,633,
            631,661,649,717,665,74,84,489,20,17,
            21,18,343,738,44,387,385,523,524,467,
            633,631,661,649,717,665,74,83,489,20,
            17,21,18,343,738,44,387,385,523,282,
            467,633,631,661,649,717,665,74,82,489,
            20,17,21,18,343,738,44,387,385,523,
            561,467,633,631,661,649,717,665,74,81,
            489,20,17,21,18,343,738,44,387,385,
            523,199,467,633,631,661,649,717,665,74,
            80,489,20,17,21,18,343,738,44,387,
            385,523,201,467,633,631,661,649,717,665,
            74,79,489,20,17,21,18,343,738,44,
            387,385,523,110,467,633,631,661,649,717,
            665,74,78,489,20,17,21,18,343,738,
            44,387,385,523,117,467,633,631,661,649,
            717,665,74,77,489,20,17,21,18,343,
            738,44,387,385,523,448,467,633,631,661,
            649,717,665,74,76,489,20,17,21,18,
            343,738,44,387,385,523,472,467,633,631,
            661,649,717,665,74,75,489,20,17,21,
            18,343,738,44,387,385,523,657,467,633,
            631,661,649,717,665,74,73,489,20,17,
            21,18,343,738,44,387,385,523,678,467,
            633,631,661,649,717,665,74,1555,489,20,
            17,21,18,343,738,44,387,385,523,200,
            467,633,631,661,649,717,665,74,1568,489,
            20,17,21,18,343,42,44,387,385,523,
            191,467,633,631,661,649,717,665,93,489,
            20,17,21,18,343,42,44,387,385,523,
            685,467,633,631,661,649,717,665,93,513,
            20,17,21,18,343,33,1570,489,20,17,
            21,18,343,42,39,489,20,17,21,18,
            343,42,44,387,385,523,211,467,633,631,
            661,649,717,665,93,489,20,17,21,18,
            343,42,44,387,385,523,50,467,633,631,
            661,649,717,665,93,394,57,1644,696,193,
            1357,104,1691,416,20,17,21,18,343,42,
            43,489,20,17,21,18,343,42,44,387,
            385,523,201,467,633,631,661,649,717,665,
            93,489,20,17,21,18,343,42,44,387,
            385,523,105,467,633,631,661,649,1197,28,
            648,360,295,1569,1535,1264,562,1584,202,489,
            20,17,21,18,343,42,44,801,273,650,
            207,254,212,236,217,1181,220,1461,222,223,
            228,1540,275,266,1136,670,271,701,676,59,
            262,360,1431,276,253,212,273,711,1698,6,
            263,718,217,1181,220,1461,222,223,228,254,
            212,266,1136,670,271,373,1284,429,1680,217,
            1181,220,1461,222,223,228,512,227,1428,444,
            696,246,189,178,397,1680,260,489,20,17,
            21,18,343,42,44,387,385,523,206,467,
            633,631,1149,134,212,89,59,1083,585,209,
            137,133,135,159,489,20,17,21,18,343,
            42,44,387,385,523,152,467,633,1177,50,
            542,1431,397,1276,400,139,165,283,305,1683,
            1260,397,143,146,149,152,715,445,717,1698,
            470,273,1278,1348,608,19,1610,218,1181,220,
            1461,222,223,228,1537,608,268,1136,670,271,
            217,1181,220,1461,222,223,228,489,20,17,
            21,18,343,42,44,822,1458,489,20,17,
            21,18,343,42,44,387,385,523,208,1076,
            489,20,17,21,18,343,42,44,387,385,
            523,305,1081,1078,1442,50,540,627,397,197,
            199,333,1698,360,297,716,1611,722,1566,1010,
            489,20,17,21,18,343,42,44,387,385,
            885,23,538,217,1181,220,1461,222,223,228,
            489,20,17,21,18,343,42,38,206,1458,
            489,20,17,21,18,343,42,44,387,385,
            906,489,20,17,21,18,343,42,44,387,
            927,489,20,17,21,18,343,42,44,387,
            948,675,198,199,232,281,281,179,397,59,
            50,58,1525,365,20,17,21,18,343,42,
            36,1650,698,144,276,134,212,273,706,22,
            240,272,141,133,135,159,1347,245,151,171,
            1764,689,266,1136,670,271,365,20,17,21,
            18,343,42,36,1764,1278,1764,140,165,1428,
            218,1181,220,1461,222,223,228,226,1764,1764,
            246,489,20,17,21,18,343,42,37,489,
            20,17,21,18,343,42,36,489,20,17,
            21,18,343,42,35,60,489,20,17,21,
            18,343,42,47,1764,544,1236,489,20,17,
            21,18,343,42,46,206,606,52,281,281,
            544,273,489,20,17,21,18,343,42,45,
            1122,606,1276,50,397,281,266,1136,670,271,
            50,50,242,241,316,1122,236,1276,281,59,
            281,316,512,265,663,1610,258,278,196,243,
            1554,1764,1351,28,206,196,604,253,212,1264,
            1255,258,244,87,294,1554,1276,1351,1262,613,
            87,87,1515,206,636,1262,1425,134,212,1515,
            324,542,1431,1764,144,133,135,159,645,1255,
            134,212,1168,203,1214,134,212,147,133,135,
            159,1271,150,133,135,159,273,1278,1764,134,
            212,236,180,1764,48,646,153,133,135,159,
            142,268,1136,670,271,606,606,454,1764,1764,
            95,606,253,212,397,389,497,497,606,196,
            1122,606,1764,50,1764,196,512,1657,1645,208,
            397,521,1122,206,512,196,1764,279,1764,277,
            230,281,606,371,1210,1442,258,444,59,371,
            1716,1764,1351,224,1764,87,1122,1764,258,371,
            314,191,1664,87,1351,296,397,191,1179,342,
            1764,1764,204,1388,1660,1276,937,192,1764,1603,
            1660,1764,259,1764,1764,1764,1764,1764,1719,229,
            1764,1764,233,1764,1764,1764,1764,1764,1448,1764,
            1764,1764,327,1764,0,20,178,0,1,1989,
            0,1,2000,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,0,12,13,0,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,0,
            0,31,32,33,34,35,36,37,38,39,
            40,41,42,29,44,45,46,0,1,0,
            3,0,5,6,7,8,0,0,0,0,
            13,2,0,4,59,14,55,56,57,58,
            11,24,25,26,27,28,47,48,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,0,1,0,3,51,5,
            6,7,8,0,0,1,2,13,4,0,
            80,55,56,57,58,11,0,60,24,25,
            26,27,28,61,62,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,0,1,0,3,51,5,6,7,8,
            0,0,1,2,13,4,47,48,55,56,
            57,58,11,47,48,24,25,26,27,28,
            0,1,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,0,1,
            0,3,51,0,6,7,8,4,0,0,
            0,13,4,60,4,0,0,1,2,59,
            5,5,24,25,26,27,28,11,0,31,
            32,33,34,35,36,37,38,39,40,41,
            42,0,44,45,46,0,30,6,7,8,
            0,6,7,8,13,0,53,54,43,9,
            10,53,54,53,54,24,25,26,27,28,
            61,62,31,32,33,34,35,36,37,38,
            39,40,41,42,0,1,2,3,4,5,
            0,0,64,9,10,5,12,13,0,15,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,5,0,1,2,9,10,64,
            12,13,0,15,16,17,18,19,20,21,
            22,23,0,0,50,2,0,4,0,1,
            50,3,0,11,11,0,1,2,3,4,
            5,0,14,0,9,10,5,12,50,14,
            15,16,17,18,19,20,21,22,23,0,
            1,29,3,59,0,1,2,3,4,5,
            29,30,0,9,10,63,12,5,43,15,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,0,68,69,0,9,10,0,
            12,5,30,15,16,17,18,19,20,21,
            22,23,0,14,50,0,1,2,3,4,
            0,1,29,3,9,10,30,12,0,14,
            15,16,17,18,19,20,21,22,23,51,
            0,1,2,3,4,0,1,0,3,9,
            10,0,12,0,14,15,16,17,18,19,
            20,21,22,23,0,1,2,3,4,0,
            1,0,3,9,10,0,12,65,14,15,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,65,47,48,0,9,10,0,
            12,5,49,15,16,17,18,19,20,21,
            22,23,0,1,2,3,4,0,47,48,
            0,9,10,0,12,0,30,15,16,17,
            18,19,20,21,22,23,0,1,2,3,
            4,0,1,0,3,9,10,4,12,0,
            0,15,16,17,18,19,20,21,22,23,
            0,0,2,2,4,5,6,7,8,49,
            0,11,11,13,0,0,1,0,3,0,
            6,7,8,60,24,25,26,27,28,14,
            30,12,49,70,71,72,73,74,75,76,
            77,78,79,0,0,0,0,0,2,6,
            7,8,0,6,7,8,13,11,6,7,
            8,15,16,0,0,13,0,24,25,26,
            27,28,6,7,8,0,24,25,26,27,
            28,6,7,8,0,0,1,0,13,0,
            6,7,8,6,7,8,0,13,52,24,
            25,26,27,28,0,9,10,0,24,25,
            26,27,28,67,0,0,2,0,11,5,
            0,6,7,8,0,11,9,10,0,5,
            2,0,0,0,49,0,5,0,5,11,
            0,1,2,11,30,0,1,2,0,1,
            0,3,63,29,0,0,0,0,4,52,
            4,0,12,0,29,0,29,0,11,14,
            0,0,0,0,0,14,43,14,0,14,
            0,14,0,0,52,0,0,0,0,0,
            66,0,0,0,0,0,0,66,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1764,1775,1553,1776,1499,1764,1977,1978,1979,1491,
            1380,59,1507,1926,88,1019,672,577,1777,1778,
            1779,1780,1027,482,1927,1925,1980,1928,1924,54,
            1764,1931,1936,1935,1933,1934,1932,1937,1938,1930,
            1939,1940,1941,638,1280,596,380,1764,1,1,
            1,1764,190,1,1,1,61,210,252,264,
            1,1421,62,1,916,2773,1390,1360,544,469,
            348,1,1,1,1,1,1401,1411,1,1,
            1,1,1,1,1,1,1,1,1,1,
            190,1,1,1,1764,1,181,1,1959,189,
            1,1,1,60,261,1989,1150,1,1,58,
            1754,1390,1360,544,469,348,57,999,1,1,
            1,1,1,1330,1317,1,1,1,1,1,
            1,1,1,1,1,1,1,189,1,1,
            1,1764,1,1764,1,1959,190,1,1,1,
            200,267,1989,1150,1,252,1401,1411,1390,1360,
            544,469,348,1401,1411,1,1,1,1,1,
            1764,2001,1,1,1,1,1,1,1,1,
            1,1,1,1,190,1,1,1,1764,1775,
            182,1776,1959,48,1977,1978,1979,1542,50,63,
            49,1926,1542,491,1542,1764,1,1758,1150,1091,
            1772,1770,1927,1925,1980,1928,1924,348,68,1931,
            1936,1935,1933,1934,1932,1937,1938,1930,1939,1940,
            1941,128,1280,596,380,1764,1769,1977,1978,1979,
            51,1977,1978,1979,1926,69,1527,1516,1771,1307,
            1139,1527,1516,1527,1516,1927,1925,1980,1928,1924,
            1330,1317,1931,1936,1935,1933,1934,1932,1937,1938,
            1930,1939,1940,1941,1,1775,1553,1776,1433,1768,
            1764,285,1217,1491,1380,1768,1507,556,1764,1019,
            672,577,1777,1778,1779,1780,1027,482,1764,1775,
            1553,1776,1466,1768,1,1989,1167,1491,1380,1217,
            1507,958,66,1019,672,577,1777,1778,1779,1780,
            1027,482,270,267,1767,1421,72,252,1764,1775,
            1767,1776,255,348,348,1,1775,1553,1776,1499,
            29,1764,1066,1764,1491,1380,1770,1507,1767,2773,
            1019,672,577,1777,1778,1779,1780,1027,482,1764,
            1775,1681,1776,1055,1764,1775,1553,1776,1499,1768,
            1459,1769,1,1491,1380,1244,1507,90,29,1019,
            672,577,1777,1778,1779,1780,1027,482,1764,1,
            1,1,1,30,1111,1673,1764,1,1,1764,
            1,1770,90,1,1,1,1,1,1,1,
            1,1,70,621,1767,1764,1775,1553,1776,1499,
            184,2803,416,2803,1491,1380,1769,1507,71,2773,
            1019,672,577,1777,1778,1779,1780,1027,482,2079,
            1,1775,1553,1776,1499,183,2805,56,2805,1491,
            1380,1764,1507,1,2773,1019,672,577,1777,1778,
            1779,1780,1027,482,1764,1775,1553,1776,1499,205,
            2807,55,2807,1491,1380,1764,1507,610,2773,1019,
            672,577,1777,1778,1779,1780,1027,482,1764,1775,
            1553,1776,1499,610,1401,1411,1,1491,1380,1764,
            1507,1770,2021,1019,672,577,1777,1778,1779,1780,
            1027,482,1764,1775,1560,1776,1499,1764,1401,1411,
            1,1491,1380,42,1507,1764,1769,1019,672,577,
            1777,1778,1779,1780,1027,482,1,1775,1553,1776,
            1499,207,1775,1,1776,1491,1380,252,1507,1764,
            1764,1019,672,577,1777,1778,1779,1780,1027,482,
            20,269,1755,1666,1755,1755,178,178,178,2020,
            1764,1755,348,178,247,1764,1775,1764,1776,64,
            1977,1978,1979,895,178,178,178,178,178,1259,
            1755,448,2021,874,853,832,811,790,748,769,
            727,706,685,129,1764,1764,32,248,1195,1977,
            1978,1979,130,1,1,1,1926,1561,1977,1978,
            1979,1790,1791,1764,1764,1926,249,1927,1925,1980,
            1928,1924,1,1,1,131,1927,1925,1980,1928,
            1924,1977,1978,1979,132,1,1761,250,1926,67,
            1977,1978,1979,1977,1978,1979,53,1926,463,1927,
            1925,1980,1928,1924,1764,1307,1139,1764,1927,1925,
            1980,1928,1924,373,1,251,1421,52,979,1770,
            1764,1977,1978,1979,1764,348,1307,1139,221,1774,
            1667,1,291,284,2021,30,1774,206,375,348,
            1,1989,1167,1035,1769,252,1989,1167,206,1171,
            65,1171,1244,1341,1764,1764,1764,219,1169,1131,
            1429,1764,448,188,1793,188,2788,188,348,1345,
            1764,1764,1764,1764,1764,1430,375,184,1764,183,
            1764,205,1764,1764,1353,1764,1764,1764,1764,1764,
            1773,1764,1764,1764,1764,1764,1764,1773
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            375,1,54,41,54,54,54,54,54,54,
            54,54,54,3,334,23,20,27,25,33,
            31,35,34,37,36,9,54,334,258,258,
            203,54,170,170,286,334,54,54,54,54,
            54,54,54,54,54,54,54,54,54,54,
            54,54,54,54,54,54,54,54,54,54,
            54,54,54,54,54,54,170,170,45,82,
            290,48,228,168,167,261,273,96,273,96,
            96,273,96,273,348,124,20,20,25,25,
            25,25,23,23,31,27,27,34,33,76,
            36,35,98,200,98,286,290,104,45,371,
            52,170,305,231,96,258,258,96,258,54,
            200,80,290,281,371,45,51,48,170,284,
            348,169,233,98,173,98,222,80,281,281,
            54,54,45,52,228,298,297,290,233,170,
            98,173,222,222,224,101,281,371,45,45,
            170,305,231,284,173,200,71,173,222,224,
            292,224,200,78,295,258,54,100,371,281,
            233,173,73,224,200,54,258,3,82,45,
            258,54,281,170,169,200,301,54,300,67,
            290,200,45,259,73,54,67
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,11,2,52,67,15,16,60,70,
            71,72,73,74,76,75,77,78,79,4,
            53,54,9,10,48,47,55,56,57,58,
            61,62,12,63,64,65,43,66,68,69,
            59,30,80,29,50,5,0,6,7,8,
            13,50,5,18,19,20,21,3,15,16,
            12,9,10,22,23,17,4,2,1,0,
            66,5,4,1,2,59,0,5,43,11,
            52,15,16,12,4,9,10,22,23,17,
            2,18,19,20,21,1,3,14,0,60,
            11,52,0,6,7,8,2,18,19,20,
            21,1,3,15,16,12,4,9,10,22,
            23,17,0,7,13,28,8,27,26,25,
            6,24,52,67,15,16,12,9,10,53,
            54,47,48,55,56,57,58,61,62,63,
            64,65,68,69,60,70,71,72,73,74,
            75,76,77,78,79,4,2,11,29,30,
            5,0,24,31,6,32,44,25,33,26,
            34,35,27,7,36,37,13,45,28,46,
            38,39,8,40,41,42,1,3,51,5,
            43,0,5,30,17,18,19,20,21,1,
            3,2,15,16,12,4,9,10,22,23,
            0,1,3,5,43,29,0,4,2,11,
            30,5,24,31,6,32,44,25,33,26,
            34,35,27,7,36,37,13,45,28,46,
            38,39,8,40,41,42,49,3,1,0,
            39,31,36,34,35,33,32,37,38,40,
            41,42,59,66,28,25,13,24,27,26,
            6,7,8,29,1,5,30,2,11,4,
            0,5,29,43,60,0,2,30,11,59,
            66,5,29,0,4,24,31,6,32,44,
            25,33,26,34,35,27,7,36,37,13,
            45,28,46,38,39,8,40,41,42,1,
            3,49,0,17,18,19,20,21,2,15,
            16,12,4,9,10,22,23,1,3,44,
            45,46,39,31,36,34,35,33,32,37,
            38,40,41,42,28,25,13,24,27,26,
            6,7,8,0,17,18,19,20,21,1,
            3,2,15,16,12,4,9,10,22,23,
            51,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            118,41,23,41,23,23,23,23,23,23,
            23,23,23,41,98,41,41,41,41,41,
            41,41,41,41,41,41,23,98,18,18,
            63,99,122,122,89,1,23,23,23,23,
            23,23,23,23,23,23,23,23,23,23,
            23,23,99,23,23,23,23,23,23,23,
            23,23,23,23,23,23,122,122,13,50,
            76,11,88,44,44,71,72,29,72,86,
            86,72,85,72,66,41,41,41,41,41,
            41,41,41,41,41,41,41,41,41,41,
            41,41,51,59,41,102,41,31,13,61,
            12,122,93,121,7,7,7,7,7,23,
            74,59,41,83,61,13,12,27,122,55,
            34,41,95,46,59,41,59,21,83,59,
            23,23,13,12,54,44,44,76,95,122,
            41,106,59,7,48,9,59,61,13,13,
            122,93,121,79,59,74,15,114,7,48,
            41,41,74,20,41,7,23,25,61,27,
            110,106,57,48,74,23,7,42,22,13,
            7,23,27,122,122,74,16,23,41,57,
            76,74,13,41,57,23,81
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            78,76,75,65,74,73,1,0,98,0,
            11,5,24,0,11,69,0,70,0,86,
            11,52,5,0,100,0,21,0,89,0,
            5,11,0,78,77,76,75,65,74,73,
            0,96,0,26,0,90,0,59,0,5,
            52,46,0,23,43,42,35,33,11,0,
            56,0,11,88,0,65,60,61,62,63,
            53,28,0,39,0,27,50,0,43,42,
            35,33,27,0,92,66,0,23,42,43,
            11,0,27,50,11,25,0,49,11,45,
            0,43,42,27,0,80,11,49,0,93,
            11,25,0,11,49,67,0,11,87,0,
            11,23,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,10,11,
            1,8,69,3,6,7,68,81,82,83,
            84,12,13,44,55,60,63,72,42,90,
            47,52,56,61,62,66,67,74,75,78,
            79,80,91,54,70,73,16,17,30,89,
            93,4,14,15,18,19,20,21,29,31,
            22,23,24,25,26,92,5,27,28,32,
            33,34,35,36,37,38,39,40,41,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            100,0,0,0,102,106,107,108,109,110,
            0,111,112,113,114,115,116,117,0,118,
            128,0,97,96,121,149,0,127,0,0,
            0,145,147,0,148,0,0,0,98,0,
            158,159,160,0,101,105,120,136,140,146,
            155,0,130,0,150,153,154,157,0,131,
            132,133,134,135,137,0,139,144,99,103,
            104,119,122,123,124,125,126,129,0,138,
            142,0,0,143,152,162,95,0,0,0,
            141,0,151,156,161,0,163,164,0,165,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            82,113,92,35,41,121,12,136,21,51,
            69,28,47,103,161,165,145,1,1,32,
            56,79,169,6,107,152,152,127,99,59,
            59,59
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            90,90,90,4,4,90,18,142,26,4,
            26,26,4,101,26,4,149,4,4,26,
            4,26,26,9,110,155,158,130,101,66,
            61,74
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            62,60,62,26,26,60,46,108,44,26,
            38,44,26,67,5,5,19,100,99,42,
            26,35,3,86,67,7,5,109,67,38,
            36,38
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            43,43,43,50,50,43,43,86,30,50,
            30,30,50,66,30,50,59,50,50,30,
            50,30,30,60,1,30,30,92,66,2,
            2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            23,23,23,27,27,23,17,-1,31,27,
            9,31,27,5,38,38,68,1,3,31,
            27,9,38,94,5,41,38,-1,5,9,
            9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            140,11,0,96,0,190,104,0,31,135,
            0,152,188,104,14,145,0,98,0,0,
            148,104,2,135,0,97,0,148,104,2,
            0,151,2,0,113,13,178,104,11,0,
            113,178,104,13,11,0,113,13,11,0,
            113,178,104,11,0,113,11,0,128,0,
            2,0,151,97,0,2,97,0,148,104,
            2,128,0,2,0,150,97,0,141,2,
            0,152,176,104,14,94,185,44,0,98,
            0,152,176,104,14,185,44,0,142,0,
            99,0,184,104,142,0,104,142,0,141,
            99,0,172,104,14,183,94,182,158,0,
            172,104,14,182,158,0,197,85,0,77,
            2,101,97,99,0,197,116,138,2,89,
            0,53,0,0,138,69,111,0,29,118,
            0,164,2,0,97,107,0,97,105,0,
            181,2,98,0,138,11,98,0,138,2,
            0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            442,0,340,0,1650,1660,1644,0,1448,1341,
            1167,1268,1255,1150,1122,0,491,416,395,1537,
            1083,0,606,1212,316,0,1461,1181,1136,670,
            1255,1150,1122,1610,1421,1515,0,1019,672,577,
            1466,1433,1083,610,1111,1244,1217,1330,1317,448,
            1411,1401,1390,1360,544,469,1542,1527,1516,1307,
            1139,1507,1499,1491,1380,1027,482,1091,1055,1035,
            491,999,979,958,937,585,916,556,348,895,
            874,853,832,811,790,769,748,727,706,685,
            316,638,512,416,395,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,180,104,165,17,23,22,10,9,4,
            12,16,15,98,2,102,101,105,103,107,
            106,109,108,111,110,99,29,2,67,52,
            2,11,164,138,142,104,10,9,54,53,
            4,58,57,56,55,47,48,12,62,61,
            64,63,69,68,65,79,78,77,75,76,
            74,73,72,71,70,60,164,181,138,116,
            104,11,2,136,135,166,167,158,168,46,
            45,169,44,170,171,94,101,101,103,103,
            103,103,102,102,106,105,105,108,107,138,
            110,109,116,14,145,143,120,13,113,104,
            4,151,104,2,182,159,159,185,159,59,
            104,14,120,4,104,113,178,149,148,118,
            104,150,104,94,14,94,14,104,4,120,
            178,13,113,4,2,126,128,104,29,148,
            183,104,14,104,188,104,120,104,113,113,
            141,104,2,143,14,172,142,173,104,176,
            94,177,152,29,190,52,11,191,104,149,
            104,104,104,176,152,60,29,132,60,140,
            52,11,149,148,186,172,184,59,141,2,
            104,152,140,29,29,59,143
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_sizeof_type_id_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "initializer_seq",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 51,
           SCOPE_UBOUND      = 31,
           SCOPE_SIZE        = 32,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 207,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2079,
           MAX_LA            = 2,
           NUM_RULES         = 315,
           NUM_NONTERMINALS  = 126,
           NUM_SYMBOLS       = 219,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1665,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1754,
           ERROR_ACTION      = 1764;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
