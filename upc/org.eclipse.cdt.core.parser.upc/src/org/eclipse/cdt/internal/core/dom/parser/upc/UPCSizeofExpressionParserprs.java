/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.upc;

public class UPCSizeofExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, UPCSizeofExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,8,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,1,4,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,5,9,8,
            3,2,2,2,3,2,4,2,2,2,
            2,2,1,1,1,1,2,1,2,2,
            2,1,2,2,1,2,2,1,2,2,
            1,2,2,1,3,1,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,6,8,
            0,0,1,1,3,3,3,0,1,0,
            1,2,4,2,1,1,1,3,1,1,
            2,3,7,8,0,1,0,1,3,1,
            3,1,1,1,1,1,1,3,1,1,
            1,1,1,3,1,2,2,1,5,3,
            1,3,5,1,3,1,3,2,4,3,
            5,4,6,6,3,5,1,3,4,5,
            6,0,1,2,1,3,1,1,3,2,
            1,1,1,1,2,1,2,3,1,1,
            1,3,1,2,2,2,3,4,5,1,
            7,3,0,0,1,1,3,3,4,1,
            1,2,3,2,3,2,1,0,1,2,
            1,1,1,1,1,2,4,3,6,2,
            4,1,1,1,1,1,2,2,2,1,
            1,2,1,1,1,3,3,2,1,3,
            2,3,2,3,2,2,11,10,10,9,
            10,9,9,8,10,9,9,8,9,8,
            8,7,10,9,9,8,9,8,8,7,
            1,1,-39,0,0,0,0,0,0,0,
            0,0,0,-163,0,0,0,0,0,0,
            0,0,0,-2,0,0,0,0,-119,0,
            -4,-77,0,0,0,0,-57,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-32,0,0,-144,0,0,
            -84,-80,-120,0,0,0,0,0,0,-9,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-125,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-191,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-58,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-114,0,0,0,
            0,0,0,0,0,0,0,0,0,-17,
            0,-162,0,0,-121,0,0,0,-5,0,
            0,0,0,0,0,0,-85,-33,0,0,
            -164,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-134,0,-167,0,0,0,0,0,0,
            0,0,0,0,-131,0,0,0,0,0,
            0,0,0,0,0,0,0,-122,0,-81,
            0,0,0,0,0,0,0,0,0,0,
            -19,0,-20,0,-21,-181,0,0,0,0,
            0,0,0,0,0,0,0,0,-22,0,
            0,0,0,0,0,0,0,0,-40,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-75,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-187,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-3,0,0,0,
            0,0,0,0,0,0,0,-78,0,0,
            0,0,0,0,0,0,0,-123,0,-54,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-111,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-23,-72,
            -118,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-49,0,0,0,0,0,0,0,
            0,0,-130,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-30,0,0,0,0,0,
            0,0,0,0,0,-112,0,0,0,0,
            0,0,0,0,0,-59,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-60,0,0,0,
            0,0,0,0,0,0,0,-129,0,0,
            0,0,0,0,0,0,0,-61,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-62,0,
            0,0,0,0,0,0,0,0,0,-137,
            0,0,0,0,0,0,0,0,0,-63,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -64,0,0,0,0,0,0,0,0,0,
            0,-151,0,0,0,0,0,0,0,0,
            0,-65,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-66,0,0,0,0,0,0,0,
            0,0,0,-173,0,0,0,0,0,0,
            0,0,0,-67,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-68,0,0,0,0,0,
            0,0,0,0,0,-174,0,0,0,0,
            0,0,0,0,0,-69,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-124,0,0,0,
            0,0,0,0,0,0,0,-188,0,0,
            0,0,0,0,0,0,0,-149,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-150,0,
            0,0,0,0,0,0,0,0,0,-24,
            0,0,0,0,0,0,0,0,0,-190,
            0,0,0,0,0,0,0,0,0,0,
            -127,0,0,0,0,0,0,0,0,-199,
            0,0,0,0,0,0,0,0,0,0,
            -108,0,0,0,0,0,0,0,0,0,
            -25,0,0,-10,0,0,0,0,0,0,
            0,-208,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-216,0,0,0,0,0,0,0,0,
            0,0,-140,0,0,0,0,0,0,0,
            0,-166,0,0,0,-89,0,-55,0,0,
            0,0,0,0,0,0,0,0,-113,0,
            0,0,-169,-26,0,-27,-82,0,0,0,
            0,-36,-154,-200,0,0,0,0,0,-37,
            0,0,0,0,-133,-50,0,0,0,0,
            0,0,0,0,0,0,0,0,-74,0,
            0,0,-142,-145,-28,0,-117,0,0,0,
            0,0,0,0,0,-153,0,0,-139,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-6,0,0,0,0,0,
            0,0,0,0,0,-147,0,-29,-178,0,
            0,0,0,0,0,0,0,0,-143,0,
            0,0,0,-155,0,-41,0,0,0,0,
            0,0,0,0,0,0,0,0,-180,-196,
            0,-70,-207,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-51,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-90,0,0,0,0,0,0,
            0,-7,0,0,0,0,0,0,0,-52,
            0,0,0,0,0,0,0,0,0,0,
            -109,0,-53,0,0,0,0,0,0,0,
            0,0,0,0,0,-215,-8,0,0,0,
            0,0,0,0,0,-168,0,-201,0,0,
            -189,0,0,-45,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-184,
            0,0,0,0,0,0,0,-15,0,0,
            0,0,0,0,0,-46,0,0,0,0,
            0,0,0,0,0,0,-47,0,0,0,
            0,0,0,0,0,0,0,-48,0,0,
            0,0,0,0,0,0,0,0,-79,0,
            0,-210,0,-138,0,0,0,0,0,0,
            0,-91,0,-16,0,0,0,0,0,0,
            0,0,0,0,0,-71,0,-197,0,0,
            0,0,-76,-217,-160,-148,0,0,0,0,
            0,0,0,0,-218,0,0,-92,-87,-93,
            0,0,0,-156,0,-177,-161,-115,0,-94,
            0,0,0,-83,-132,-158,0,0,0,0,
            0,0,0,0,0,-86,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-88,
            0,0,0,0,0,0,0,0,0,0,
            0,-95,0,-96,0,0,0,0,0,-198,
            -97,0,0,0,0,0,0,0,-98,0,
            0,0,0,-152,0,0,0,0,0,0,
            0,-11,0,0,0,0,0,0,0,-183,
            0,0,0,0,0,-12,0,0,0,0,
            0,0,0,-13,0,0,0,0,0,0,
            0,-14,0,0,0,0,0,0,0,-38,
            -42,0,0,0,0,0,0,0,-202,-99,
            0,-43,0,0,0,0,0,0,0,-44,
            0,0,0,0,0,0,0,0,-73,0,
            0,0,0,0,0,0,-116,-170,0,-176,
            -34,-171,-100,0,0,0,0,0,0,-179,
            0,0,0,-128,-175,0,0,-204,-18,0,
            0,0,-31,0,-101,0,0,-102,0,0,
            -194,-103,-104,0,-105,0,0,0,0,-106,
            0,0,0,0,-107,0,-206,0,0,0,
            0,0,-195,0,-136,0,0,0,0,-110,
            0,-172,-1,0,0,0,0,-205,0,-212,
            0,0,0,0,-192,-213,-126,-135,-211,0,
            0,0,0,0,0,0,0,0,-141,0,
            0,0,-193,0,-182,0,0,0,0,0,
            -146,0,0,0,0,0,0,0,-159,0,
            0,0,-35,0,0,0,0,0,-203,0,
            0,0,-56,0,-165,0,-157,-185,-186,0,
            -209,-214,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            89,11,104,21,21,26,26,34,34,71,
            71,1,1,2,2,2,2,3,3,3,
            4,5,5,5,5,5,5,5,5,53,
            53,72,6,6,6,6,6,6,6,6,
            6,6,7,7,8,8,8,8,9,9,
            9,10,10,10,12,12,12,12,12,13,
            13,13,14,14,15,15,16,16,17,17,
            18,18,19,19,20,20,20,20,20,20,
            20,20,20,20,20,20,105,48,42,90,
            90,75,75,43,106,106,106,106,106,106,
            106,107,107,107,108,108,113,113,114,114,
            109,109,110,110,110,116,116,111,111,111,
            111,112,112,112,112,112,115,115,27,27,
            27,27,27,30,30,30,81,81,76,76,
            76,76,77,77,77,78,78,78,79,79,
            79,80,80,80,117,117,118,118,119,31,
            33,33,33,33,33,54,56,56,56,56,
            56,56,56,56,56,56,56,56,65,62,
            62,91,92,66,66,63,63,63,67,82,
            82,83,83,68,68,68,50,93,93,84,
            85,85,85,64,64,94,86,86,87,87,
            69,69,22,23,23,23,32,49,49,35,
            35,35,35,38,38,40,36,36,37,41,
            41,120,120,39,121,121,95,95,28,28,
            28,28,28,28,28,28,28,88,51,51,
            51,51,29,58,58,57,57,57,59,59,
            52,52,96,96,73,73,60,60,60,44,
            44,44,45,46,46,46,47,47,47,47,
            55,55,55,61,97,74,74,74,74,70,
            98,99,99,100,100,101,101,122,122,123,
            123,124,124,124,124,126,126,125,125,125,
            127,127,89,89,2,2,2,6,6,6,
            22,22,24,24,25,25,102,102,102,106,
            128,128,128,128,128,128,128,111,111,111,
            111,111,111,111,111,111,111,111,111,111,
            111,111,111,111,111,111,111,111,111,111,
            111,129,129,1,1384,17,21,18,520,1318,
            44,603,601,619,71,605,1110,749,1234,1161,
            1275,1236,74,91,324,134,212,320,321,762,
            1289,329,248,136,133,135,159,686,20,17,
            21,18,520,42,44,603,601,619,28,605,
            1110,749,1234,1161,1755,293,31,138,289,165,
            274,455,791,293,186,142,145,148,151,1237,
            686,20,17,21,18,520,42,40,391,1509,
            590,1574,1586,1600,1216,590,20,17,21,18,
            520,1318,44,603,601,619,418,605,1110,749,
            1234,1161,1275,1236,74,280,654,20,17,21,
            18,520,1318,44,603,601,619,418,605,1110,
            749,1234,1161,1275,1236,74,280,25,423,686,
            20,17,21,18,520,42,44,603,601,619,
            285,605,1110,749,1234,1760,1821,443,20,17,
            21,18,520,42,36,286,1845,1436,291,1329,
            877,285,755,1848,322,293,185,1821,245,718,
            20,17,21,18,520,319,286,518,293,31,
            1689,359,20,17,21,18,520,1318,44,603,
            601,619,418,605,1110,749,1234,1161,1275,1236,
            74,280,225,178,686,20,17,21,18,520,
            42,44,603,601,619,75,605,1110,749,1234,
            1161,1275,1236,93,134,212,320,321,895,1809,
            792,208,136,133,135,159,287,254,212,320,
            321,356,1821,414,525,287,400,1068,1460,1849,
            24,288,134,212,320,321,138,1350,165,39,
            144,133,135,159,142,145,148,151,1237,686,
            20,17,21,18,520,42,44,1522,1509,590,
            1574,1586,1600,1216,281,20,17,21,18,520,
            1318,44,603,601,619,1229,605,1110,749,1234,
            1161,1275,1236,74,816,238,622,20,17,21,
            18,520,1318,44,603,601,619,194,605,1110,
            749,1234,1161,1275,1236,74,280,686,20,17,
            21,18,520,1318,44,603,601,619,355,605,
            1110,749,1234,1161,1275,1236,74,91,293,187,
            686,20,17,21,18,520,42,44,603,601,
            619,289,605,1110,749,1748,275,1821,750,20,
            17,21,18,520,1318,44,603,601,619,1734,
            605,1110,749,1234,1161,1275,1236,74,858,183,
            230,478,20,17,21,18,520,42,44,603,
            601,619,391,605,1110,749,1234,1161,1275,1236,
            93,22,328,686,20,17,21,18,520,42,
            44,603,1621,316,20,17,21,18,520,1318,
            44,603,601,619,900,605,1110,749,1234,1161,
            1275,1236,74,942,239,686,20,17,21,18,
            520,1318,44,603,601,619,230,605,1110,749,
            1234,1161,1275,1236,74,92,686,20,17,21,
            18,520,1318,44,603,601,619,240,605,1110,
            749,1234,1161,1275,1236,74,85,686,20,17,
            21,18,520,1318,44,603,601,619,230,605,
            1110,749,1234,1161,1275,1236,74,84,686,20,
            17,21,18,520,1318,44,603,601,619,242,
            605,1110,749,1234,1161,1275,1236,74,83,686,
            20,17,21,18,520,1318,44,603,601,619,
            230,605,1110,749,1234,1161,1275,1236,74,82,
            686,20,17,21,18,520,1318,44,603,601,
            619,326,605,1110,749,1234,1161,1275,1236,74,
            81,686,20,17,21,18,520,1318,44,603,
            601,619,230,605,1110,749,1234,1161,1275,1236,
            74,80,686,20,17,21,18,520,1318,44,
            603,601,619,241,605,1110,749,1234,1161,1275,
            1236,74,79,686,20,17,21,18,520,1318,
            44,603,601,619,230,605,1110,749,1234,1161,
            1275,1236,74,78,686,20,17,21,18,520,
            1318,44,603,601,619,243,605,1110,749,1234,
            1161,1275,1236,74,77,686,20,17,21,18,
            520,1318,44,603,601,619,230,605,1110,749,
            1234,1161,1275,1236,74,76,686,20,17,21,
            18,520,1318,44,603,601,619,244,605,1110,
            749,1234,1161,1275,1236,74,75,686,20,17,
            21,18,520,1318,44,603,601,619,230,605,
            1110,749,1234,1161,1275,1236,74,73,686,20,
            17,21,18,520,1318,44,603,601,619,293,
            605,1110,749,1234,1161,1275,1236,74,984,686,
            20,17,21,18,520,1318,44,603,601,619,
            252,605,1110,749,1234,1161,1275,1236,74,1026,
            686,20,17,21,18,520,42,44,603,601,
            619,16,605,1110,749,1234,1161,1275,1236,93,
            686,20,17,21,18,520,42,44,603,601,
            619,6,605,1110,749,1234,1161,1275,1236,93,
            1546,115,445,1438,686,20,17,21,18,520,
            42,39,686,20,17,21,18,520,42,44,
            603,601,619,211,605,1110,749,1234,1161,1275,
            1236,93,686,20,17,21,18,520,42,44,
            603,601,619,6,605,1110,749,1234,1161,1275,
            1236,93,293,294,1545,201,225,178,686,20,
            17,21,18,520,42,44,603,601,619,66,
            605,1110,1752,71,80,202,130,24,134,212,
            320,321,598,820,293,1848,137,133,135,159,
            598,253,212,320,321,127,686,20,17,21,
            18,520,42,44,603,1629,1564,282,1709,16,
            139,227,165,6,6,179,19,694,143,146,
            149,152,1237,273,522,1233,415,575,1775,40,
            217,1243,220,1334,222,223,228,1720,1780,266,
            698,392,271,277,262,718,20,17,21,18,
            520,318,276,209,273,263,16,783,53,406,
            1411,217,1243,220,1334,222,223,228,389,691,
            266,698,392,271,887,1735,686,20,17,21,
            18,520,42,44,1558,1722,1568,273,1797,71,
            489,260,598,239,218,1243,220,1334,222,223,
            228,1799,226,268,698,392,271,686,20,17,
            21,18,520,42,44,603,601,619,1765,605,
            1690,1829,374,179,782,217,1243,220,1334,222,
            223,228,718,20,17,21,18,520,317,1851,
            686,20,17,21,18,520,42,44,603,601,
            619,808,1723,686,20,17,21,18,520,42,
            44,603,601,619,193,1745,489,718,20,17,
            21,18,520,41,197,199,451,1799,230,273,
            1797,293,296,1353,686,20,17,21,18,520,
            42,44,603,601,1560,268,698,392,271,295,
            802,217,1243,220,1334,222,223,228,718,20,
            17,21,18,520,34,1851,686,20,17,21,
            18,520,42,44,603,601,1570,686,20,17,
            21,18,520,42,44,603,601,1612,686,20,
            17,21,18,520,42,44,603,601,1614,391,
            198,199,633,1620,443,20,17,21,18,520,
            42,36,565,1799,718,20,17,21,18,520,
            33,134,212,320,321,327,598,292,802,141,
            133,135,159,886,831,57,178,217,1243,220,
            1334,222,223,228,1717,59,562,1782,597,525,
            315,1735,23,140,16,165,694,6,598,276,
            429,273,196,1797,830,598,598,1751,1650,218,
            1243,220,1334,222,223,228,839,266,698,392,
            271,1790,230,1780,272,606,134,212,320,321,
            848,278,279,1568,147,133,135,159,134,212,
            320,321,667,191,669,1319,150,133,135,159,
            71,545,134,212,320,321,708,1349,1815,890,
            153,133,135,159,443,20,17,21,18,520,
            42,36,686,20,17,21,18,520,42,38,
            755,1848,281,588,203,246,686,20,17,21,
            18,520,42,37,686,20,17,21,18,520,
            42,36,686,20,17,21,18,520,42,35,
            807,686,20,17,21,18,520,42,47,691,
            493,1269,686,20,17,21,18,520,42,46,
            686,20,17,21,18,520,42,45,273,558,
            20,17,21,18,520,42,43,849,6,208,
            849,566,187,328,266,698,392,271,562,466,
            6,562,687,1795,66,598,1538,1849,598,6,
            265,1773,1796,6,1255,484,1780,1255,192,1780,
            363,84,510,630,363,327,253,212,320,321,
            349,224,562,89,229,396,196,71,1411,258,
            196,1319,258,169,1575,511,1798,1575,1255,1798,
            552,87,66,513,562,87,562,1250,692,1680,
            71,1250,575,1680,687,66,71,661,412,16,
            196,180,1255,258,253,212,320,321,1738,773,
            1798,1536,1242,234,233,113,1352,253,212,320,
            321,834,1078,606,204,87,562,258,1780,897,
            1555,312,1576,6,1798,254,212,320,321,243,
            1813,191,196,6,687,801,1788,844,858,868,
            1544,693,546,1839,687,1767,1815,1914,562,1914,
            1914,254,212,320,321,606,1914,1914,1914,1914,
            1914,1914,384,1914,1255,87,1914,1914,1914,1914,
            1914,750,1914,192,1914,87,1914,1914,1914,1914,
            1914,1753,1914,1914,1914,1914,1914,1914,1914,259,
            1914,0,323,751,0,20,178,0,1,2139,
            0,1,2150,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,12,13,14,0,16,17,18,19,
            20,21,22,0,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,0,0,
            40,41,42,43,44,45,46,47,48,49,
            50,51,0,53,54,55,0,1,0,3,
            0,5,6,7,8,0,0,11,12,13,
            0,6,7,8,0,5,11,12,13,0,
            6,7,8,0,1,11,12,13,32,33,
            34,35,36,37,56,57,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,0,1,0,3,60,5,6,7,
            8,69,52,11,12,13,0,1,2,0,
            4,79,80,81,82,83,84,85,86,87,
            88,15,59,0,32,33,34,35,36,37,
            0,72,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,0,1,
            0,3,60,5,6,7,8,0,0,11,
            12,13,0,6,7,8,0,73,11,12,
            13,0,6,7,8,0,14,11,12,13,
            32,33,34,35,36,37,77,78,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,0,1,0,3,60,0,
            6,7,8,0,5,11,12,13,0,6,
            7,8,0,5,11,12,13,0,6,7,
            8,0,74,11,12,13,32,33,34,35,
            36,37,15,72,40,41,42,43,44,45,
            46,47,48,49,50,51,38,53,54,55,
            0,1,2,3,4,5,0,58,0,9,
            10,0,0,1,14,3,16,17,18,19,
            20,21,22,15,24,25,26,27,28,29,
            30,31,32,75,0,0,1,2,3,4,
            5,70,71,0,9,10,0,0,0,14,
            0,16,17,18,19,20,21,22,58,24,
            25,26,27,28,29,30,31,32,0,61,
            64,65,66,67,0,0,2,0,0,1,
            2,3,4,5,9,10,38,9,10,15,
            56,57,14,58,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            0,64,65,66,67,0,6,7,8,0,
            74,11,12,13,5,0,1,2,0,4,
            52,0,89,0,0,1,2,4,23,5,
            15,73,32,33,34,35,36,37,0,15,
            40,41,42,43,44,45,46,47,48,49,
            50,51,0,1,2,3,4,5,0,38,
            0,9,10,39,0,1,14,3,16,17,
            18,19,20,21,22,15,24,25,26,27,
            28,29,30,31,75,62,63,0,1,2,
            3,4,5,0,56,57,9,10,0,1,
            2,14,0,16,17,18,19,20,21,22,
            58,24,25,26,27,28,29,30,31,0,
            0,61,0,1,2,3,4,0,1,0,
            3,9,10,14,0,1,14,3,16,17,
            18,19,20,21,22,58,24,25,26,27,
            28,29,30,31,0,0,1,64,65,66,
            67,0,0,9,10,4,68,0,1,2,
            3,4,70,71,0,0,9,10,4,59,
            5,14,60,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,0,
            1,2,3,4,0,0,0,0,9,10,
            4,0,5,14,39,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,0,1,2,3,4,62,63,0,0,
            9,10,0,1,2,14,39,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,0,1,2,3,4,62,63,
            0,0,9,10,4,0,0,14,0,16,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,0,1,2,3,4,
            0,0,0,0,9,10,5,68,5,14,
            0,16,17,18,19,20,21,22,0,24,
            25,26,27,28,29,30,31,0,1,2,
            3,4,56,57,56,57,9,10,38,38,
            39,14,39,16,17,18,19,20,21,22,
            0,24,25,26,27,28,29,30,31,0,
            1,2,3,4,0,1,0,3,9,10,
            68,0,1,14,3,16,17,18,19,20,
            21,22,0,24,25,26,27,28,29,30,
            31,0,0,2,23,4,5,6,7,8,
            0,0,11,12,13,23,15,6,7,8,
            0,0,11,12,13,15,0,0,2,2,
            4,4,0,32,33,34,35,36,37,0,
            39,15,15,32,33,34,35,36,37,0,
            0,1,2,0,15,6,7,8,0,38,
            11,12,13,0,6,7,8,0,0,11,
            12,13,4,6,7,8,23,0,11,12,
            13,32,33,34,35,36,37,0,0,69,
            32,33,34,35,36,37,0,0,2,32,
            33,34,35,36,37,0,0,2,2,0,
            5,15,16,17,0,1,0,3,9,10,
            15,15,59,0,0,38,0,59,5,0,
            1,0,3,0,0,0,0,23,0,23,
            0,0,0,0,39,0,69,23,0,23,
            0,0,0,0,23,0,0,61,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,76,0,0,52,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1914,1925,1739,1926,1664,1,2127,2128,2129,1656,
            1642,2238,422,2239,1672,252,1524,1468,1427,1927,
            1928,1929,1930,181,1164,430,2228,2229,2230,1392,
            1305,529,2076,2077,2075,2130,2078,2074,54,182,
            2081,2086,2085,2083,2084,2082,2087,2088,2080,2089,
            2090,2091,42,1559,537,421,1914,1,284,1,
            1914,190,1,1,1,1914,1914,1,1,1,
            1914,2127,2128,2129,247,1922,2238,422,2239,66,
            2127,2128,2129,1,1911,2238,422,2239,1,1,
            1,1,1,1,773,1256,1,1,1,1,
            1,1,1,1,1,1,1,1,190,1,
            1,1,1914,1,68,1,2109,189,1,1,
            1,1036,1921,1,1,1,261,2139,1286,72,
            1,1015,994,973,952,931,889,910,868,847,
            826,644,2171,1914,1,1,1,1,1,1,
            1914,1218,1,1,1,1,1,1,1,1,
            1,1,1,1,189,1,1,1,1914,1,
            1914,1,2109,190,1,1,1,248,70,1,
            1,1,64,1,1,1,249,710,1,1,
            1,67,1,1,1,1914,1367,1,1,1,
            1,1,1,1,1,1,397,1843,1,1,
            1,1,1,1,1,1,1,1,1,1,
            190,1,1,1,1914,1925,1914,1926,2109,1914,
            2127,2128,2129,250,1918,2238,422,2239,1914,2127,
            2128,2129,251,1924,2238,422,2239,270,2127,2128,
            2129,62,489,2238,422,2239,2076,2077,2075,2130,
            2078,2074,644,1218,2081,2086,2085,2083,2084,2082,
            2087,2088,2080,2089,2090,2091,1426,1559,537,421,
            1,1925,1739,1926,507,1918,59,1917,1914,1656,
            1642,1914,1914,1925,1672,1926,1524,1468,1427,1927,
            1928,1929,1930,564,1164,430,2228,2229,2230,1392,
            1305,529,728,1923,58,1914,1925,1739,1926,1634,
            1918,1413,1400,1914,1656,1642,71,61,88,1672,
            1914,1524,1468,1427,1927,1928,1929,1930,1917,1164,
            430,2228,2229,2230,1392,1305,529,1099,69,1212,
            1498,1487,1476,1444,269,51,1277,1914,1,1925,
            1739,1926,1664,29,1336,629,805,1656,1642,644,
            773,1256,1672,1917,1524,1468,1427,1927,1928,1929,
            1930,3180,1164,430,2228,2229,2230,1392,1305,529,
            128,1498,1487,1476,1444,1914,2127,2128,2129,1,
            489,2238,422,2239,1924,267,2139,1286,1914,252,
            29,255,1901,48,1,1908,1286,1700,1151,1920,
            644,710,2076,2077,2075,2130,2078,2074,57,644,
            2081,2086,2085,2083,2084,2082,2087,2088,2080,2089,
            2090,2091,1914,1925,1739,1926,1664,1918,1914,1847,
            290,1656,1642,1919,184,3181,1672,3181,1524,1468,
            1427,1927,1928,1929,1930,1120,1164,430,2228,2229,
            2230,1392,1305,529,1923,1692,1681,1914,1925,1739,
            1926,1514,1918,60,773,1256,1656,1642,1,2139,
            1512,1672,63,1524,1468,1427,1927,1928,1929,1930,
            1917,1164,430,2228,2229,2230,1392,1305,529,65,
            1,1441,1914,1,1,1,1,183,3183,1914,
            3183,1,1,1367,205,3188,1,3188,1,1,
            1,1,1,1,1,1917,1,1,1,1,
            1,1,1,1,53,1914,2151,1498,1487,1476,
            1444,1914,1914,1336,629,1131,1172,1914,1925,1739,
            1926,1664,1413,1400,50,1,1656,1642,1700,2171,
            90,1672,2227,1524,1468,1427,1927,1928,1929,1930,
            1151,1164,430,2228,2229,2230,1392,1305,529,1,
            1925,1739,1926,1664,1914,1914,49,1914,1656,1642,
            1700,1914,1920,1672,90,1524,1468,1427,1927,1928,
            1929,1930,3180,1164,430,2228,2229,2230,1392,1305,
            529,1914,1925,1739,1926,1664,1692,1681,1914,1914,
            1656,1642,1,2139,1512,1672,1919,1524,1468,1427,
            1927,1928,1929,1930,3180,1164,430,2228,2229,2230,
            1392,1305,529,1,1925,1739,1926,1664,1692,1681,
            1914,1914,1656,1642,1316,1914,56,1672,55,1524,
            1468,1427,1927,1928,1929,1930,3180,1164,430,2228,
            2229,2230,1392,1305,529,1914,1925,1739,1926,1664,
            30,1914,200,1,1656,1642,1920,1057,1920,1672,
            1914,1524,1468,1427,1927,1928,1929,1930,1914,1164,
            430,2228,2229,2230,1392,1305,529,1914,1925,1743,
            1926,1664,773,1256,773,1256,1656,1642,541,1852,
            1919,1672,1919,1524,1468,1427,1927,1928,1929,1930,
            1914,1164,430,2228,2229,2230,1392,1305,529,1,
            1925,1739,1926,1664,207,1925,1914,1926,1656,1642,
            1192,1914,1925,1672,1926,1524,1468,1427,1927,1928,
            1929,1930,1914,1164,430,2228,2229,2230,1392,1305,
            529,20,1914,1905,1203,1905,1905,178,178,178,
            323,129,178,178,178,1567,1905,2127,2128,2129,
            1914,30,2238,422,2239,1902,264,267,1543,1543,
            1,252,1914,178,178,178,178,178,178,219,
            1905,644,644,2076,2077,2075,2130,2078,2074,130,
            252,2139,1512,1914,644,2127,2128,2129,131,1943,
            2238,422,2239,1,2127,2128,2129,132,1,2238,
            422,2239,252,2127,2128,2129,1718,210,2238,422,
            2239,2076,2077,2075,2130,2078,2074,206,1914,666,
            2076,2077,2075,2130,2078,2074,32,1914,1721,2076,
            2077,2075,2130,2078,2074,1,221,1543,1566,52,
            1920,1833,1940,1941,1914,1925,1914,1926,1336,629,
            644,644,2170,283,188,3186,188,2171,1274,206,
            1244,188,1244,1914,1914,1914,1914,1273,1914,1730,
            1914,1914,1914,1914,1919,1914,1140,184,1914,183,
            1914,1914,1914,1914,205,1914,1914,538,1914,1914,
            1914,1914,1914,1914,1914,1914,1914,1914,1914,1914,
            1914,1914,415,1914,1914,1274
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            428,1,149,98,149,149,149,149,149,149,
            149,149,149,149,149,149,60,10,80,77,
            84,82,90,88,92,91,94,93,66,149,
            10,368,368,403,149,294,294,329,10,149,
            149,149,149,149,149,149,149,149,149,149,
            149,149,149,149,149,149,149,149,149,149,
            149,149,149,149,149,149,149,149,149,294,
            294,102,109,333,140,335,292,291,301,3,
            313,129,313,129,129,313,129,313,30,245,
            77,77,82,82,82,82,80,80,88,84,
            84,91,90,138,93,92,131,107,329,333,
            143,102,53,173,294,371,338,173,129,368,
            368,129,368,149,107,333,321,53,102,172,
            140,294,327,30,293,340,102,173,131,198,
            131,231,233,298,228,131,321,321,149,149,
            102,173,335,238,237,333,340,294,131,198,
            231,231,228,105,455,368,149,297,228,107,
            321,53,102,102,294,371,338,327,198,228,
            133,198,231,233,452,233,109,102,368,149,
            107,53,321,340,198,135,233,228,149,368,
            102,233,321,294,293,228,241,149,240,168,
            333,228,228,369,135,149,168,233
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            89,0,5,68,38,58,39,75,15,18,
            19,20,21,22,2,16,17,14,4,9,
            10,24,25,26,27,28,29,30,31,1,
            3,53,54,55,48,40,45,43,44,42,
            41,46,47,49,50,51,37,34,32,33,
            36,35,6,7,8,12,11,13,0,15,
            2,61,76,16,17,69,79,80,81,82,
            83,85,84,86,87,88,4,62,63,9,
            10,57,56,64,65,66,67,70,71,14,
            72,73,74,52,75,77,78,68,39,89,
            38,58,5,0,5,52,15,61,16,17,
            14,4,9,10,24,25,18,29,30,31,
            2,19,20,21,22,26,27,28,1,3,
            23,0,75,5,4,1,2,68,0,58,
            5,32,6,7,8,11,12,13,19,20,
            21,22,26,27,28,3,16,17,14,9,
            10,24,25,18,29,30,31,4,2,1,
            0,32,58,5,16,17,14,4,9,10,
            24,25,18,29,30,31,2,1,3,19,
            20,21,22,26,27,28,0,33,40,6,
            41,53,34,42,35,43,44,36,7,45,
            46,32,54,37,55,47,48,8,49,50,
            51,1,3,11,12,13,60,5,52,0,
            1,3,5,52,38,0,2,39,15,68,
            75,5,38,0,7,32,37,8,36,35,
            34,6,33,11,12,13,61,76,16,17,
            14,9,10,62,63,56,57,64,65,66,
            67,70,71,72,73,74,77,78,69,79,
            80,81,82,83,84,85,86,87,88,4,
            2,15,38,39,5,0,69,15,61,0,
            48,40,45,43,44,42,41,46,47,49,
            50,51,68,75,37,34,32,33,36,35,
            6,7,8,11,12,13,38,1,5,39,
            2,15,4,0,4,2,15,39,5,33,
            40,6,41,53,34,42,35,43,44,36,
            7,45,46,32,54,37,55,47,48,8,
            49,50,51,11,12,13,59,3,1,0,
            4,33,40,6,41,53,34,42,35,43,
            44,36,7,45,46,32,54,37,55,47,
            48,8,49,50,51,1,3,11,12,13,
            59,0,5,39,18,19,20,21,22,1,
            3,2,16,17,14,4,9,10,24,25,
            26,27,28,29,30,31,0,18,19,20,
            21,22,1,3,2,16,17,14,4,9,
            10,24,25,26,27,28,29,30,31,60,
            0,5,38,52,69,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            115,31,22,31,22,22,22,22,22,22,
            22,22,22,22,22,22,31,107,31,31,
            31,31,31,31,31,31,31,31,31,22,
            107,13,13,104,108,60,60,86,1,22,
            22,22,22,22,22,22,22,22,22,22,
            22,22,22,22,22,108,22,22,22,22,
            22,22,22,22,22,22,22,22,22,60,
            60,39,22,56,37,85,11,11,49,17,
            50,54,50,97,97,50,96,50,44,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,67,79,31,
            41,39,52,38,60,99,59,38,7,7,
            7,7,7,22,20,31,75,52,39,38,
            32,60,63,24,31,101,39,38,69,67,
            31,67,77,15,67,31,75,67,22,22,
            39,38,62,11,11,56,101,60,31,90,
            67,7,9,19,31,7,22,83,9,67,
            67,52,39,39,60,99,59,71,67,9,
            34,118,7,77,31,31,21,39,7,22,
            20,52,32,111,90,65,77,9,22,7,
            39,77,32,60,60,9,35,22,31,65,
            56,9,9,31,65,22,73,94
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            81,79,78,66,77,76,1,0,34,0,
            28,0,72,0,99,0,102,0,70,11,
            61,5,0,81,80,79,78,66,77,76,
            0,22,0,11,71,0,11,5,21,0,
            5,11,0,66,62,63,64,65,54,30,
            0,58,0,91,0,29,51,0,11,26,
            0,26,46,45,38,36,11,0,92,0,
            46,45,38,36,29,0,53,0,46,45,
            29,0,101,0,26,45,46,11,0,83,
            11,50,0,97,0,94,67,0,29,51,
            11,27,0,11,90,0,50,11,48,0,
            95,11,27,0,11,89,0,11,50,68,
            0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,10,11,
            96,97,98,8,1,6,7,68,81,82,
            83,84,3,12,13,93,94,95,100,101,
            102,69,44,55,60,63,72,42,90,47,
            52,56,61,62,66,67,74,75,78,79,
            80,91,54,70,73,16,17,89,30,107,
            4,14,15,18,19,20,21,29,31,22,
            23,24,25,26,92,5,27,28,32,33,
            34,35,36,37,38,39,40,41,108,45,
            46,49,50,51,53,57,58,59,65,71,
            77,88,99,103,104,105,106
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            114,0,0,0,116,120,121,122,123,124,
            0,125,126,127,128,129,130,131,0,132,
            110,142,0,0,0,111,135,163,0,141,
            0,0,0,112,159,161,0,162,0,0,
            0,0,134,172,173,174,0,115,150,154,
            160,169,0,144,149,0,164,167,168,171,
            0,145,146,147,148,151,0,153,158,175,
            113,117,118,119,133,136,137,138,139,140,
            143,0,152,156,0,0,157,166,109,0,
            0,0,155,0,165,170,0,176,177,0,
            178,179,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            108,139,196,118,47,57,147,12,174,21,
            75,93,63,28,71,40,129,211,215,40,
            40,183,40,1,1,1,32,35,80,103,
            35,219,6,133,190,165,190,125,153,153,
            153,153,153,83,83,83
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            116,116,116,116,4,4,116,18,180,26,
            4,26,68,26,4,4,127,26,4,44,
            68,187,53,4,4,4,26,38,4,26,
            106,26,9,136,193,168,204,127,155,157,
            159,161,163,90,85,98
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            64,62,5,64,28,28,62,55,110,47,
            28,41,28,47,28,28,68,5,5,28,
            28,19,28,102,101,100,45,60,28,38,
            49,3,70,68,7,111,5,68,80,79,
            78,77,76,41,39,41
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            52,52,52,52,58,58,52,52,95,39,
            58,39,19,39,58,58,75,39,58,4,
            19,68,32,58,58,58,39,2,58,39,
            1,39,69,1,39,101,39,75,1,53,
            54,54,48,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            19,19,34,19,23,23,19,94,-1,27,
            23,9,23,27,23,23,3,34,34,23,
            23,68,23,17,1,7,27,29,23,9,
            11,34,95,3,40,-1,34,3,20,20,
            20,20,20,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            150,15,0,110,0,205,118,0,31,149,
            0,160,181,118,23,168,0,112,0,0,
            164,118,2,152,0,111,0,164,118,2,
            0,167,2,0,158,118,0,172,0,195,
            118,15,0,9,110,0,127,32,195,118,
            15,0,69,132,110,0,127,195,118,32,
            15,0,195,118,32,15,0,132,110,0,
            127,32,15,0,127,195,118,15,0,127,
            15,0,145,0,2,0,165,111,0,2,
            111,0,164,118,2,145,0,2,0,164,
            111,0,156,2,0,159,0,160,193,118,
            23,108,201,53,0,112,0,160,193,118,
            23,201,53,0,157,0,113,0,200,118,
            157,0,118,157,0,155,113,0,189,118,
            23,199,108,198,173,0,189,118,23,198,
            173,0,188,0,148,0,147,0,146,0,
            145,0,144,0,213,94,0,77,2,115,
            111,113,0,213,133,155,2,98,0,53,
            0,0,155,78,125,0,29,132,0,180,
            2,0,111,121,0,160,181,118,23,133,
            180,2,0,111,3,0,119,0,112,0,
            197,2,112,0,155,15,112,0,155,2,
            0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1436,0,1773,1815,1545,0,418,0,1544,1319,
            1426,1512,1350,1286,1255,0,422,0,1216,562,
            363,0,1334,1243,698,392,1319,1411,1286,1255,
            1543,1680,0,1524,1468,1427,1392,1305,529,1634,
            1514,507,1709,489,397,1218,710,1413,1400,1367,
            1256,773,1498,1487,1476,1444,1700,1692,1681,1336,
            629,1672,1664,1656,1642,1164,430,1192,1172,1140,
            1120,564,1099,1078,783,1057,751,728,644,1036,
            1015,994,973,952,931,910,889,868,847,826,
            363,805,687,666,466,541,445,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,196,118,182,31,30,29,18,25,24,
            10,9,4,14,17,16,112,2,116,115,
            119,117,121,120,123,122,125,124,113,38,
            2,76,61,2,15,180,155,157,118,10,
            9,63,62,4,67,66,65,64,56,57,
            14,71,70,73,72,78,77,74,88,87,
            86,84,85,83,82,81,80,79,69,180,
            197,155,133,118,15,2,153,152,183,12,
            184,173,185,55,54,186,53,187,188,108,
            115,115,117,117,117,117,116,116,120,119,
            119,122,121,155,124,123,133,23,158,136,
            32,127,118,4,167,118,2,15,198,174,
            174,201,174,68,118,136,4,118,127,195,
            165,164,134,118,166,118,150,4,108,23,
            108,23,181,118,23,168,4,136,195,32,
            127,4,2,143,145,118,38,164,199,118,
            23,118,160,38,205,61,15,206,118,23,
            136,118,127,127,156,118,2,158,23,189,
            157,190,118,193,108,194,69,150,61,15,
            118,118,165,118,118,118,193,160,69,38,
            150,181,165,164,202,189,200,68,156,2,
            118,160,160,38,38,68,158,141
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "MYTHREAD",
            "THREADS",
            "UPC_MAX_BLOCKSIZE",
            "relaxed",
            "shared",
            "strict",
            "upc_barrier",
            "upc_localsizeof",
            "upc_blocksizeof",
            "upc_elemsizeof",
            "upc_notify",
            "upc_fence",
            "upc_wait",
            "upc_forall",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_sizeof_type_id_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "layout_qualifier"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 60,
           SCOPE_UBOUND      = 45,
           SCOPE_SIZE        = 46,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 218,
           NT_OFFSET         = 107,
           LA_STATE_OFFSET   = 2276,
           MAX_LA            = 2,
           NUM_RULES         = 362,
           NUM_NONTERMINALS  = 129,
           NUM_SYMBOLS       = 236,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1783,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 89,
           EOLT_SYMBOL       = 89,
           ACCEPT_ACTION     = 1901,
           ERROR_ACTION      = 1914;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
