/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99Parserprs implements lpg.lpgjavaruntime.ParseTable, C99Parsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,0,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,3,1,1,
            1,4,4,3,3,2,2,8,1,0,
            1,1,1,1,2,2,2,2,2,2,
            2,2,2,4,1,4,1,3,3,3,
            1,3,3,1,3,3,1,3,3,3,
            3,1,3,3,1,3,1,3,1,3,
            1,3,1,3,1,5,1,3,3,3,
            3,3,3,3,3,3,3,3,1,1,
            2,1,0,1,3,1,1,1,1,1,
            1,1,1,3,3,2,3,5,1,2,
            1,1,1,2,5,7,5,1,0,7,
            5,10,9,3,2,2,2,3,2,4,
            3,3,3,3,3,1,1,1,1,2,
            1,2,2,2,1,2,2,1,2,2,
            1,2,2,1,2,2,1,3,1,3,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,5,5,6,6,2,
            2,2,1,0,1,2,4,2,1,1,
            3,1,1,2,3,6,7,1,0,1,
            3,1,3,1,1,1,1,1,1,3,
            1,1,1,1,1,3,1,2,2,1,
            6,4,1,3,6,1,3,1,3,2,
            4,3,5,4,6,6,3,5,1,1,
            2,3,4,1,2,1,3,1,1,3,
            2,1,1,1,1,2,1,2,3,1,
            1,1,3,1,2,2,2,3,4,5,
            1,5,1,1,3,3,4,1,1,2,
            3,2,3,2,1,0,1,2,1,1,
            1,1,1,2,4,4,6,2,4,-6,
            0,-167,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -2,-98,0,0,-4,0,-18,0,0,-20,
            0,0,0,-67,-37,0,0,0,0,0,
            0,0,-26,0,-30,0,0,0,0,0,
            0,0,0,-93,0,-61,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -58,0,0,0,0,0,0,0,0,0,
            0,0,-177,0,0,-27,0,0,0,0,
            0,0,0,-12,0,-87,0,0,-265,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-249,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -3,0,-46,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-29,-165,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -8,0,-31,0,0,-44,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-161,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -62,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-21,
            0,-101,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -32,0,-125,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-33,0,-154,0,0,0,0,0,0,
            0,0,0,0,0,-268,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-48,0,-162,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-36,0,0,0,-242,0,-41,0,
            0,-13,-236,-28,0,-15,0,-24,-92,0,
            0,0,0,0,0,0,0,0,0,0,
            -109,0,0,0,0,0,0,0,0,0,
            0,0,-22,0,0,-145,0,-45,0,0,
            -243,0,0,0,0,0,0,0,0,0,
            0,0,-65,0,0,0,0,-143,0,0,
            0,0,0,0,0,-150,-121,0,0,0,
            0,0,0,0,0,-105,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-127,-76,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -156,-23,0,0,0,0,0,0,0,0,
            0,0,-25,-77,0,0,0,-34,0,0,
            0,0,0,0,0,0,-72,-78,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -128,-79,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-129,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -35,0,-130,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-38,0,-131,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-49,0,-132,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-51,0,-133,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-54,0,-134,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-55,0,-135,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-60,0,-136,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-88,0,-137,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-239,0,
            -184,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-191,
            -40,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-80,-108,
            -163,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-192,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-227,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-229,0,-160,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-118,-81,-82,0,0,0,-222,0,-94,
            0,0,-95,-83,-74,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-231,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-198,-252,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-39,-126,-260,0,-155,-187,0,0,
            0,0,0,0,0,0,0,0,0,-144,
            -84,-85,-86,0,0,0,0,0,0,0,
            0,0,0,-113,0,0,0,-90,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -91,-262,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -63,-271,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -75,-199,0,0,0,0,0,-189,0,-97,
            0,-96,-112,0,0,-124,-246,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-42,0,0,0,0,
            0,-7,0,-146,0,-234,0,0,0,0,
            0,0,0,0,0,-99,0,-186,0,0,
            -102,-169,-100,0,-180,0,0,0,0,0,
            0,-138,0,0,0,-1,0,0,0,0,
            0,0,-9,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -258,0,-139,0,0,0,0,-253,-103,-104,
            0,0,-193,-185,-164,0,0,-179,0,0,
            0,0,0,0,0,-182,0,0,0,-170,
            -183,0,0,0,0,0,0,0,0,0,
            -106,0,0,0,-254,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-114,0,0,0,0,-115,-275,0,0,
            0,-256,0,-120,0,0,0,-168,0,-110,
            0,0,0,0,0,0,0,0,-172,0,
            0,0,-188,-203,0,0,0,0,-257,0,
            0,0,0,-56,-196,-53,-175,0,0,0,
            0,0,0,0,-235,-176,0,0,0,-233,
            0,-281,0,0,0,-280,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-178,0,0,0,-200,-221,0,-201,
            0,0,-286,0,0,0,-116,-17,-190,0,
            -202,0,0,0,0,0,0,0,-204,0,
            0,0,0,0,-119,-251,0,0,0,-288,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-10,0,0,0,
            0,0,0,-230,0,0,0,0,0,0,
            0,-122,0,-220,0,0,0,0,0,0,
            0,0,0,-248,0,0,0,0,-181,0,
            -205,0,-259,0,0,0,0,0,0,0,
            0,-223,0,0,0,0,0,0,-274,0,
            -264,0,0,0,0,0,0,0,0,0,
            0,0,-270,0,-225,0,-226,0,-276,-43,
            0,0,0,0,0,-64,-206,-207,-208,-209,
            0,0,0,0,-283,-261,0,0,0,-210,
            0,0,0,0,0,0,0,0,0,-211,
            0,0,0,0,0,-212,-171,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -47,0,0,0,-19,0,0,-237,0,0,
            0,0,-213,0,0,0,-157,0,0,0,
            0,0,0,0,0,0,0,-241,0,0,
            0,0,0,0,-266,0,0,0,-272,-238,
            -214,0,-215,0,0,0,0,0,0,0,
            0,0,-140,0,0,-216,0,-217,0,0,
            0,-158,0,0,0,0,0,0,0,0,
            0,0,-159,0,0,0,0,0,0,0,
            0,0,0,-151,-218,0,0,0,0,0,
            0,0,0,-197,0,-66,0,-277,-57,0,
            -152,-279,0,0,0,0,0,0,0,-282,
            0,0,0,0,-269,0,0,0,0,-219,
            0,0,0,-284,-224,-278,0,-232,0,0,
            0,0,-123,-244,-245,-141,0,-173,0,-287,
            0,0,0,0,0,-142,0,0,0,0,
            -247,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-250,
            0,-153,0,0,0,0,0,0,0,0,
            -194,-5,0,0,0,0,0,0,-11,0,
            -273,0,-228,0,-14,0,0,0,0,0,
            0,0,0,-263,0,0,-16,-50,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-240,0,0,0,0,0,0,
            0,0,-52,0,0,0,-68,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -69,0,0,0,0,0,0,0,0,0,
            0,0,0,-70,0,0,0,0,0,0,
            0,0,0,0,0,-71,0,0,0,0,
            0,0,0,-107,0,-73,0,0,0,0,
            0,0,0,0,0,-89,-111,0,0,0,
            0,0,0,0,0,-147,0,0,0,0,
            0,0,0,-166,0,0,0,0,-148,0,
            0,0,0,0,0,0,-149,0,0,0,
            0,0,0,0,0,-59,0,0,-195,0,
            0,0,0,0,0,0,-117,0,-267,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-285,0,0,0,0,0,0,0,
            0,0,-174,0,0,0,-255,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            103,1,26,21,34,34,24,24,35,35,
            19,19,2,2,2,2,3,3,3,4,
            4,5,5,5,5,5,5,5,5,67,
            67,84,84,84,6,6,6,6,6,6,
            6,6,6,6,6,7,7,8,8,8,
            8,9,9,9,10,10,10,11,11,11,
            11,11,12,12,12,13,13,14,14,15,
            15,16,16,17,17,18,18,22,22,22,
            22,22,22,22,22,22,22,22,22,36,
            27,20,104,104,105,105,56,37,37,37,
            37,37,37,37,38,38,38,30,30,86,
            86,68,68,39,39,40,40,40,62,62,
            41,41,41,41,42,42,42,42,42,48,
            48,23,23,23,23,23,49,49,49,93,
            93,88,88,88,88,89,89,89,90,90,
            90,91,91,91,92,92,92,87,87,80,
            80,81,50,53,53,53,53,53,69,70,
            70,70,70,70,70,70,70,70,70,70,
            70,79,79,25,25,25,76,76,76,76,
            77,77,77,71,71,72,72,64,64,54,
            106,106,94,95,95,95,78,78,96,96,
            97,97,82,82,28,29,29,29,51,52,
            52,43,43,43,43,31,31,32,44,44,
            45,33,33,98,98,46,108,108,107,107,
            47,47,47,47,47,47,47,47,47,99,
            55,55,55,55,73,73,65,65,65,66,
            66,57,57,109,109,75,75,74,74,74,
            58,58,58,59,60,60,60,61,61,61,
            61,63,63,85,85,85,85,83,110,111,
            111,112,112,113,113,103,103,114,114,100,
            100,100,100,115,115,101,101,101,102,102,
            772,337,1075,1138,16,21,17,748,703,47,
            784,812,798,1133,1059,1144,1134,1222,1221,1223,
            77,43,436,552,281,1295,1332,178,137,214,
            507,340,225,233,1151,310,16,21,17,748,
            43,113,89,844,129,837,625,1431,1399,139,
            136,138,98,162,1295,552,1295,1602,1351,1479,
            97,99,100,101,102,283,340,225,234,141,
            168,1296,1565,127,90,129,145,148,151,154,
            308,1352,345,837,1116,284,625,1538,1373,1587,
            1899,1905,1917,1548,1210,232,1296,2044,491,1075,
            1138,16,21,17,748,703,47,784,812,798,
            1133,1059,1144,1134,1222,1221,1223,77,107,493,
            232,281,987,1138,16,21,17,748,703,47,
            784,812,798,1133,1059,1144,1134,1222,1221,1223,
            77,104,310,966,281,16,21,17,748,703,
            47,784,812,798,1133,1059,1144,1134,1222,1221,
            1223,77,283,1211,1170,281,16,21,17,748,
            45,47,784,812,798,1133,1059,1144,1134,1222,
            1830,583,284,628,1659,285,920,1666,16,21,
            17,748,703,47,784,812,798,1133,1059,1144,
            1134,1222,1221,1223,77,286,160,1170,1271,16,
            21,17,748,45,47,784,812,798,1133,1753,
            240,1113,1843,16,21,17,748,703,47,784,
            812,798,1133,1059,1144,1134,1222,1221,1223,77,
            104,1326,1170,1306,16,21,17,748,703,47,
            784,812,798,1133,1059,1144,1134,1222,1221,1223,
            77,104,1918,945,94,16,21,17,748,703,
            47,784,812,798,1133,1059,1144,1134,1222,1221,
            1223,77,667,306,1170,1403,16,21,17,748,
            45,47,784,812,798,1669,966,241,16,21,
            17,748,703,47,784,812,798,1133,1059,1144,
            1134,1222,1221,1223,77,184,552,1170,281,16,
            21,17,748,45,47,784,812,798,1133,1059,
            1144,1134,1766,899,113,89,977,56,366,165,
            1431,1399,1220,1316,178,98,1228,1497,423,1,
            552,1351,111,97,99,100,101,102,977,287,
            1298,1295,1619,112,977,381,1298,592,113,89,
            977,643,366,583,1431,1399,1301,552,165,98,
            198,1296,2079,109,309,1351,111,97,99,100,
            101,102,1944,309,259,229,92,112,1249,1711,
            260,659,1745,1549,406,278,1170,827,16,21,
            17,748,45,47,784,1559,1170,110,16,21,
            17,748,45,47,784,812,798,1133,1059,1144,
            1134,1222,1221,1223,96,137,214,1170,1208,16,
            21,17,748,703,47,784,812,798,1133,1059,
            1144,1134,1222,1221,1223,77,139,136,138,88,
            162,1170,1232,16,21,17,748,45,47,784,
            812,1680,1533,378,1213,305,141,168,104,1953,
            1551,130,25,145,148,151,154,1012,804,16,
            21,17,748,45,38,1373,1587,1899,1905,1917,
            1548,1170,584,16,21,17,748,703,47,784,
            812,798,1133,1059,1144,1134,1222,1221,1223,77,
            228,247,1170,87,16,21,17,748,703,47,
            784,812,798,1133,1059,1144,1134,1222,1221,1223,
            77,104,1496,1170,86,16,21,17,748,703,
            47,784,812,798,1133,1059,1144,1134,1222,1221,
            1223,77,985,1494,1170,85,16,21,17,748,
            703,47,784,812,798,1133,1059,1144,1134,1222,
            1221,1223,77,104,2014,1170,84,16,21,17,
            748,703,47,784,812,798,1133,1059,1144,1134,
            1222,1221,1223,77,104,2027,1170,83,16,21,
            17,748,703,47,784,812,798,1133,1059,1144,
            1134,1222,1221,1223,77,104,1547,1170,82,16,
            21,17,748,703,47,784,812,798,1133,1059,
            1144,1134,1222,1221,1223,77,1010,2077,1170,81,
            16,21,17,748,703,47,784,812,798,1133,
            1059,1144,1134,1222,1221,1223,77,104,717,1170,
            80,16,21,17,748,703,47,784,812,798,
            1133,1059,1144,1134,1222,1221,1223,77,104,312,
            1170,79,16,21,17,748,703,47,784,812,
            798,1133,1059,1144,1134,1222,1221,1223,77,104,
            409,1170,78,16,21,17,748,45,47,784,
            812,798,1133,1059,1144,1134,1222,1221,1223,96,
            1170,178,16,21,17,748,703,47,784,812,
            798,1133,1059,1144,1134,1222,1221,1223,77,298,
            1116,1170,1718,16,21,17,748,45,47,784,
            812,798,1133,1059,1144,1768,1170,213,16,21,
            17,748,703,47,784,812,798,1133,1059,1144,
            1134,1222,1221,1223,77,187,1809,1170,1750,16,
            21,17,748,703,47,784,812,798,1133,1059,
            1144,1134,1222,1221,1223,77,243,552,1170,95,
            16,21,17,748,45,47,784,812,798,1133,
            1059,1751,1237,789,509,113,89,977,1279,366,
            1300,1431,1399,1300,776,1189,98,16,21,17,
            748,36,1351,111,97,99,100,101,102,126,
            255,214,125,1170,112,16,21,17,748,45,
            47,784,812,798,1133,1059,1144,1134,1222,1221,
            1223,96,551,1170,109,16,21,17,748,45,
            47,784,812,798,1133,1059,1144,1134,1222,1221,
            1223,96,1205,890,1242,123,552,1170,1248,16,
            21,17,748,45,47,784,812,798,1670,204,
            1249,239,338,544,113,89,977,226,366,275,
            1431,1399,255,214,809,98,255,214,1221,1825,
            108,1351,111,97,99,100,101,102,1880,1398,
            289,1062,1170,112,16,21,17,748,45,47,
            784,812,798,1133,1059,1144,1134,1222,1221,1223,
            96,797,1170,110,16,21,17,748,45,47,
            784,812,798,1133,1059,1144,1134,1222,1221,1223,
            96,1189,421,16,21,17,748,35,315,1505,
            669,1421,1238,1116,24,242,797,1170,205,16,
            21,17,748,45,47,784,812,798,1133,1059,
            1144,1134,1222,1221,1223,76,308,1420,1836,783,
            225,230,367,654,104,552,805,1914,186,276,
            244,219,658,222,224,274,709,977,809,366,
            263,1300,1300,813,90,1116,267,1292,1182,272,
            277,1484,890,783,225,396,302,783,225,230,
            114,128,264,865,303,219,658,222,473,219,
            658,222,224,274,161,301,2069,451,1203,335,
            189,1290,552,890,267,1292,1182,272,1286,754,
            226,137,214,797,1238,104,552,261,478,552,
            1738,90,157,353,300,1510,1116,18,118,772,
            1300,1116,144,136,138,90,162,113,89,1452,
            683,1277,1795,1431,1399,520,552,243,98,124,
            550,2066,143,168,1351,104,97,99,100,101,
            102,188,845,1639,113,89,206,1236,1290,552,
            1431,1399,562,552,1063,98,297,299,62,331,
            1135,1351,121,97,99,100,101,102,90,467,
            1892,113,89,890,797,118,211,1431,1399,604,
            552,977,98,199,1223,178,370,1262,1351,117,
            97,99,100,101,102,178,1034,231,113,89,
            1116,290,1290,552,1431,1399,646,552,22,98,
            1820,1452,254,214,671,1351,1901,97,99,100,
            101,102,90,1302,196,113,89,890,1312,118,
            890,1431,1399,688,552,207,98,370,827,1272,
            1944,890,1351,116,97,99,100,101,102,668,
            1641,1844,113,89,1845,900,1238,1132,1431,1399,
            730,552,1452,98,1834,23,137,214,210,1351,
            123,97,99,100,101,102,977,313,1298,113,
            89,292,1234,1457,1285,1431,1399,140,136,138,
            98,162,367,1041,1253,1614,1351,122,97,99,
            100,101,102,197,1116,137,214,142,168,751,
            1041,711,259,1300,146,149,152,155,235,210,
            1483,1549,890,783,225,230,147,136,138,1300,
            162,458,1458,1348,1457,219,658,222,224,282,
            783,225,230,1238,161,890,1435,890,1512,1312,
            367,1041,219,658,222,224,1223,1274,1280,831,
            869,1838,783,225,230,1116,751,1041,294,1462,
            1009,1489,157,353,220,658,222,224,274,772,
            1255,783,225,230,254,214,1261,104,552,269,
            1292,1182,272,219,658,222,224,783,225,230,
            28,310,161,200,202,367,1041,90,797,219,
            658,222,224,1267,1632,1594,1675,1170,1838,16,
            21,17,748,45,47,784,812,1690,890,1204,
            158,353,783,225,1251,890,783,225,230,890,
            797,1065,245,466,220,658,222,1238,219,658,
            222,224,273,501,1495,573,1306,1203,635,279,
            201,202,1170,1812,16,21,17,748,45,47,
            784,812,1696,1170,246,16,21,17,748,45,
            47,784,812,1723,1170,1307,16,21,17,748,
            45,47,784,1621,714,647,1132,552,890,310,
            274,1170,1300,16,21,17,748,45,47,1667,
            1300,267,1292,1182,272,797,90,977,277,199,
            1309,120,280,1393,890,1038,797,266,1313,2093,
            783,225,230,1223,1064,1323,1132,552,104,552,
            890,274,220,658,222,224,1132,552,1543,291,
            1763,759,267,1292,1182,272,90,977,90,199,
            293,254,214,1393,1570,1655,90,977,1738,199,
            1332,1362,1170,1393,16,21,17,748,45,47,
            1668,1012,361,16,21,17,748,45,38,403,
            1763,377,2174,1041,552,757,2174,2174,2174,2174,
            1763,301,2174,451,56,335,1204,812,1037,2174,
            2174,1537,2174,90,977,248,366,137,214,2174,
            118,1540,2174,137,214,977,2174,1298,2174,977,
            300,199,1040,2174,546,137,214,2174,150,136,
            138,1391,162,1037,153,136,138,1170,162,16,
            21,17,748,45,42,1623,156,136,138,1641,
            162,259,671,2174,977,2174,199,2174,2174,1745,
            1549,1170,195,16,21,17,748,45,41,1060,
            1470,274,298,299,1170,2174,16,21,17,748,
            45,40,269,1292,1182,272,1170,671,16,21,
            17,748,45,39,1037,2174,1170,195,16,21,
            17,748,45,37,1303,1470,1170,1037,16,21,
            17,748,45,38,2174,977,1170,199,16,21,
            17,748,45,50,790,2174,2174,2174,977,1170,
            199,16,21,17,748,45,49,1170,2174,16,
            21,17,748,45,48,977,1060,1298,671,1094,
            2174,16,21,17,748,45,46,1223,195,900,
            2174,671,2174,2174,2174,1355,1470,977,2174,366,
            2174,195,1464,1290,552,2174,307,2174,1416,1470,
            977,259,1298,104,552,254,214,104,552,1483,
            1549,2174,2174,90,304,2174,2174,2174,2174,2174,
            118,2174,2174,90,2174,2174,2174,90,2174,2174,
            1657,2174,2174,2174,1749,2174,259,2174,2174,2174,
            2174,2174,2174,2174,1808,1549,2174,2174,2174,2174,
            1208,1604,2174,2174,2174,1850,2174,0,2183,1,
            0,3,1,2359,0,3,1,0,9,11,
            0,115,1516,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,0,43,44,45,46,47,48,49,
            50,51,52,53,54,0,56,57,58,4,
            60,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,0,43,44,45,46,47,48,
            49,50,51,52,53,54,74,56,57,58,
            65,60,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,0,43,44,45,46,47,
            48,49,50,51,52,53,54,0,56,57,
            58,4,60,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,0,43,44,45,46,
            47,48,49,50,51,52,53,54,0,56,
            57,58,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,59,43,44,45,46,47,
            48,49,50,51,52,53,54,0,56,57,
            58,0,1,2,3,4,5,0,0,0,
            1,2,0,4,0,1,2,79,4,0,
            19,20,21,22,23,24,25,26,27,0,
            29,30,31,21,22,23,24,0,26,27,
            0,29,30,31,43,44,45,46,47,48,
            49,50,51,52,53,54,42,56,57,58,
            0,1,2,3,4,5,0,1,2,0,
            62,2,75,76,5,74,0,0,1,19,
            20,21,22,23,24,25,26,27,19,29,
            30,31,84,85,86,87,88,89,90,91,
            92,93,0,43,44,45,46,47,48,49,
            50,51,52,53,54,78,56,57,58,42,
            0,1,0,21,22,23,24,0,26,27,
            0,29,30,31,74,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,80,0,1,2,
            25,4,42,28,42,0,0,32,33,34,
            35,36,37,38,39,40,41,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,32,42,
            0,1,25,0,4,28,0,1,0,32,
            33,34,35,36,37,38,39,40,41,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            75,76,42,0,25,0,1,28,0,4,
            0,32,33,34,35,36,37,38,39,40,
            41,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,0,0,0,77,25,42,6,28,
            7,8,42,32,33,34,35,36,37,38,
            39,40,41,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,0,82,83,0,25,0,
            6,28,0,6,0,32,33,34,35,36,
            37,38,39,40,41,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,0,0,0,1,
            25,0,6,28,7,8,0,32,33,34,
            35,36,37,38,39,40,41,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,0,1,
            0,77,25,0,1,28,3,7,8,32,
            33,34,35,36,37,38,39,40,41,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            0,1,2,0,25,42,0,28,0,6,
            2,32,33,34,35,36,37,38,39,40,
            41,0,1,2,61,0,5,21,22,23,
            24,28,26,27,9,29,30,31,0,0,
            19,2,21,22,23,24,0,26,27,3,
            29,30,31,0,0,1,2,3,0,59,
            0,0,0,1,43,44,45,46,47,48,
            49,50,51,52,53,54,0,56,57,58,
            0,5,21,22,23,24,0,26,27,3,
            29,30,31,0,0,19,42,21,22,23,
            24,0,26,27,65,29,30,31,70,71,
            72,73,66,55,0,61,63,64,0,43,
            44,45,46,47,48,49,50,51,52,53,
            54,0,56,57,58,21,22,23,24,0,
            26,27,3,29,30,31,60,0,0,0,
            70,71,72,73,6,62,62,43,44,45,
            46,47,48,49,50,51,52,53,54,0,
            1,2,3,4,5,0,7,8,9,10,
            11,12,13,14,15,16,17,18,70,71,
            72,73,0,24,0,1,2,3,4,5,
            61,7,8,9,10,11,12,13,14,15,
            16,17,18,0,65,0,1,2,24,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,0,66,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,21,22,23,0,0,
            66,0,1,2,3,4,5,0,7,8,
            9,10,11,12,13,14,15,16,17,18,
            21,22,23,0,1,0,0,0,1,3,
            0,1,2,3,4,5,60,7,8,9,
            10,11,12,13,14,15,16,17,18,0,
            20,0,0,0,0,6,0,6,6,6,
            0,63,64,9,0,1,2,66,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,0,1,2,60,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,0,1,2,0,4,5,3,7,
            8,9,10,11,12,13,14,15,16,17,
            18,0,1,2,0,4,5,3,7,8,
            9,10,11,12,13,14,15,16,17,18,
            0,1,2,0,4,5,0,7,8,9,
            10,11,12,13,14,15,16,17,18,0,
            1,2,0,4,5,60,7,8,9,10,
            11,12,13,14,15,16,17,18,0,1,
            2,0,4,5,60,7,8,9,10,11,
            12,13,14,15,16,17,18,0,1,0,
            0,2,0,3,5,6,4,10,11,0,
            0,2,0,3,5,6,0,0,19,2,
            20,0,5,6,3,0,0,0,19,2,
            20,0,5,21,22,23,19,0,0,42,
            2,20,0,5,0,3,19,21,22,23,
            0,0,21,22,23,55,0,19,21,22,
            23,0,62,0,67,55,0,4,0,0,
            68,69,62,4,0,0,55,3,81,0,
            55,0,3,2,0,0,5,3,3,0,
            0,0,3,3,20,0,0,55,0,20,
            19,0,0,61,20,0,55,63,64,20,
            42,0,0,63,64,0,55,42,6,63,
            64,0,0,0,0,59,0,0,0,55,
            0,68,69,0,0,67,0,68,69,0,
            61,0,67,0,0,0,61,0,0,0,
            59,61,0,0,0,59,55,0,0,0,
            0,59,0,0,0,0,0,0,0,0,
            65,0,0,78,59,0,0,79,0,0,
            0,59,59,62,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            2174,1,3816,1468,1,2161,2,1,1,1,
            1,1,1,1,1,1,1,1,1,3809,
            2184,3,3,3,3,2277,3,3,2,3,
            3,3,1300,1140,726,1143,1400,332,1302,1353,
            364,1346,2174,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,872,
            2182,9,2168,2168,2168,2168,2168,2168,2168,2168,
            2168,2168,2168,2168,2168,2168,2168,2168,2168,2168,
            2168,2168,2168,2168,2168,2168,2168,2168,2168,2168,
            2168,2168,2168,2168,2168,2168,2168,2168,2168,2168,
            2168,2168,2168,1,2168,2168,2168,2168,2168,2168,
            2168,2168,2168,2168,2168,2168,2157,2168,2168,2168,
            2432,2168,2174,1,3816,1468,1,2161,2,1,
            1,1,1,1,1,1,1,1,1,1,
            1,3809,2184,3,3,3,3,2277,3,3,
            2,3,3,3,1300,1140,726,1143,1400,332,
            1302,1353,364,1346,2,3,3,3,3,3,
            3,3,3,3,3,3,3,2174,3,3,
            3,872,2182,2174,1,3816,2185,1,2161,2,
            1,1,1,1,1,1,1,1,1,1,
            1,1,3809,2184,3,3,3,3,2277,3,
            3,2,3,3,3,1300,1140,726,1143,1400,
            332,1302,1353,364,1346,2174,3,3,3,3,
            3,3,3,3,3,3,3,3,73,3,
            3,3,2174,1,3816,2185,1,2161,2,1,
            1,1,1,1,1,1,1,1,1,1,
            1,3809,2184,3,3,3,3,2277,3,3,
            2,3,3,3,1300,1140,726,1143,1400,332,
            1302,1353,364,1346,2280,3,3,3,3,3,
            3,3,3,3,3,3,3,65,3,3,
            3,2174,3,3,2185,3,3,3,45,2174,
            1715,2401,132,956,262,1336,2401,627,1,2174,
            3,2184,3,3,3,3,2476,3,3,2174,
            3,3,3,2389,2390,2391,2339,71,2340,2338,
            2174,2392,2341,2337,3,3,3,3,3,3,
            3,3,3,3,3,3,496,3,3,3,
            2174,3,3,2185,3,3,1,1715,2401,209,
            1000,2357,1207,594,2359,296,115,223,688,3,
            2184,3,3,3,3,2476,3,3,2358,3,
            3,3,979,958,937,916,895,853,874,832,
            811,747,133,3,3,3,3,3,3,3,
            3,3,3,3,3,1061,3,3,3,496,
            270,691,221,2389,2390,2391,2339,2174,2340,2338,
            2174,2392,2341,2337,295,2174,1,3816,2185,1,
            3817,2,1,1,1,1,1,1,1,1,
            1,1,1,1,2358,2184,2171,268,1336,2401,
            2277,956,496,2,496,66,2174,1300,1140,726,
            1143,1400,332,1302,1353,364,1346,2174,1,3816,
            2185,1,3817,2,1,1,1,1,1,1,
            1,1,1,1,1,1,2358,2184,1835,496,
            265,1804,2277,2174,1,2,2174,649,69,1300,
            1140,726,1143,1400,332,1302,1353,364,1346,2174,
            1,3816,2185,1,3817,2,1,1,1,1,
            1,1,1,1,1,1,1,1,2358,2184,
            1207,594,496,75,2277,268,1804,2,2174,956,
            271,1300,1140,726,1143,1400,332,1302,1353,364,
            1346,2174,1,3816,2185,1,3817,2,1,1,
            1,1,1,1,1,1,1,1,1,1,
            2358,2184,2174,54,2174,1118,2277,496,355,2,
            1882,1811,496,1300,1140,726,1143,1400,332,1302,
            1353,364,1346,2174,1,3816,2185,1,3817,2,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2358,2184,230,474,1405,191,2277,2174,
            233,2,2174,893,70,1300,1140,726,1143,1400,
            332,1302,1353,364,1346,2174,1,3816,2185,1,
            3817,2,1,1,1,1,1,1,1,1,
            1,1,1,1,2358,2184,190,56,2174,1697,
            2277,2174,914,2,1882,1811,2174,1300,1140,726,
            1143,1400,332,1302,1353,364,1346,2174,1,3816,
            2185,1,3817,2,1,1,1,1,1,1,
            1,1,1,1,1,1,2358,2184,2174,1848,
            55,1118,2277,1,1804,2,2181,1882,1811,1300,
            1140,726,1143,1400,332,1302,1353,364,1346,2174,
            1,3816,2185,1,3817,2,1,1,1,1,
            1,1,1,1,1,1,1,1,2358,2184,
            1,1715,2401,2174,2277,496,134,2,2174,393,
            2413,1300,1140,726,1143,1400,332,1302,1353,364,
            1346,1,1715,2401,2180,67,2356,2389,2390,2391,
            2339,1506,2340,2338,517,2392,2341,2337,62,3,
            2355,2412,2389,2390,2391,2339,2174,2340,2338,2179,
            2392,2341,2337,57,1,1336,2401,2181,30,1163,
            2174,135,2174,2103,2344,2349,2348,2346,2347,2345,
            2350,2351,2343,2352,2353,2354,2174,656,652,404,
            64,2356,2389,2390,2391,2339,1,2340,2338,2158,
            2392,2341,2337,159,212,2355,496,2389,2390,2391,
            2339,2174,2340,2338,2432,2392,2341,2337,1783,1772,
            1727,771,2178,2203,131,2180,716,1794,63,2344,
            2349,2348,2346,2347,2345,2350,2351,2343,2352,2353,
            2354,2174,656,652,404,2389,2390,2391,2339,2174,
            2340,2338,2181,2392,2341,2337,2182,2174,192,3,
            1783,1772,1727,771,935,453,1021,2344,2349,2348,
            2346,2347,2345,2350,2351,2343,2352,2353,2354,1,
            1806,2193,2179,797,2194,2174,2006,1994,2016,1291,
            1145,344,2186,2187,2188,2189,1981,1957,1783,1772,
            1727,771,2174,531,2174,1806,2193,2179,1891,2194,
            2180,2006,1994,2016,1291,1145,344,2186,2187,2188,
            2189,1981,1957,2174,2432,2174,1806,2193,1076,2026,
            2194,998,2006,1994,2016,1291,1145,344,2186,2187,
            2188,2189,1981,1957,250,2178,1,1806,2193,29,
            2026,2194,998,2006,1994,2016,1291,1145,344,2186,
            2187,2188,2189,1981,1957,1,1,1,61,251,
            2178,2174,1806,2193,2179,2026,2194,2174,2006,1994,
            2016,1291,1145,344,2186,2187,2188,2189,1981,1957,
            1,1,1,2174,1903,2174,3,2174,2107,194,
            3,1,1,119,1,2165,29,1,1,1,
            1,1,1,1,1,1,1,1,1,3,
            119,230,2174,44,68,2,2174,234,393,1019,
            2174,716,1794,517,1,1806,2193,2178,2026,2194,
            998,2006,1994,2016,1291,1145,344,2186,2187,2188,
            2189,1981,1957,2174,1806,2193,194,2026,2194,1019,
            2006,1994,2016,1291,1145,344,2186,2187,2188,2189,
            1981,1957,1,1806,2193,2174,2026,2194,2183,2006,
            1994,2016,1291,1145,344,2186,2187,2188,2189,1981,
            1957,3,1,1,3,1,2165,193,1,1,
            1,1,1,1,1,1,1,1,1,1,
            2174,1846,2193,2174,2026,2194,2174,2006,1994,2016,
            1291,1145,344,2186,2187,2188,2189,1981,1957,2174,
            1806,2193,2174,2026,2194,2182,2006,1994,2016,1291,
            1145,344,2186,2187,2188,2189,1981,1957,2174,1856,
            2193,2174,2026,2194,193,2006,1994,2016,1291,1145,
            344,2186,2187,2188,2189,1981,1957,34,686,2174,
            236,2357,51,224,2359,571,2057,2200,2201,2174,
            237,2357,2174,224,2359,788,2174,2174,2358,2357,
            224,2174,2359,851,2185,208,252,2174,2358,2357,
            224,249,2359,2389,2390,2391,2358,253,2174,1334,
            2205,2184,2174,2207,60,2181,2358,2389,2390,2391,
            59,91,2389,2390,2391,224,58,2206,2389,2390,
            2391,256,224,53,1220,224,2174,2057,2174,52,
            2049,2036,224,2057,2174,288,1660,2185,708,1,
            3775,208,119,1404,1,1,1404,2185,2181,2174,
            1,2174,2185,93,2184,72,2174,1861,74,119,
            1404,30,203,2180,2184,3,1097,716,1794,2184,
            1183,2174,2174,716,1794,3,653,1272,1019,716,
            1794,2174,1,1,2174,1408,2174,2174,2174,1676,
            2174,2049,2036,2174,2174,1566,2174,2049,2036,2174,
            119,2174,1653,2174,2174,2174,2180,2174,2174,2174,
            2279,93,2174,2174,2174,1307,432,2174,2174,2174,
            2174,1252,2174,2174,2174,2174,2174,2174,2174,2174,
            2431,2174,2174,1061,2358,2174,2174,627,2174,2174,
            2174,2357,2359,606
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            359,1,466,387,359,466,389,569,393,405,
            405,36,36,405,36,405,469,213,389,34,
            469,569,305,310,309,538,537,213,63,438,
            94,157,94,157,318,94,389,413,421,213,
            329,469,389,114,234,45,389,439,157,157,
            157,157,318,318,413,492,389,329,543,469,
            387,137,134,492,271,454,19,19,19,19,
            19,118,19,19,19,265,282,287,285,293,
            289,296,295,298,297,299,234,43,19,63,
            537,438,17,306,306,261,34,3,34,34,
            19,306,428,112,19,112,157,183,107,157,
            157,183,321,431,321,318,492,413,331,569,
            469,389,492,134,117,114,19,19,19,19,
            19,19,19,19,19,19,19,421,421,498,
            454,454,261,261,215,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,236,43,436,306,306,
            19,496,19,19,302,34,438,112,3,183,
            109,183,183,19,261,321,413,421,416,420,
            19,19,134,118,45,213,326,419,418,421,
            421,421,134,285,285,282,282,289,289,287,
            287,287,287,295,293,297,296,112,298,420,
            321,425,421,34,421,421,19,452,439,305,
            19,304,183,325,213,331,134,134,43,498,
            421,186,329,504,569,19,391,183,41,541,
            261,19,424,3,19,3,3,17,306,438,
            109,19,186,416,43,421,331,45,134,261,
            19,421,437,306,17,321,421,134,306,3,
            215,306,183,421,215,3,421,3
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            74,0,28,6,34,36,19,39,41,37,
            32,38,35,33,40,25,20,3,13,14,
            15,16,2,5,10,11,9,4,7,8,
            17,18,12,1,0,2,19,5,6,0,
            3,60,42,67,1,13,14,15,16,2,
            5,10,11,9,4,7,8,17,18,12,
            6,0,26,43,21,44,56,27,45,29,
            46,47,30,22,48,49,24,57,31,58,
            50,51,23,52,53,54,19,5,3,62,
            55,20,0,26,21,27,29,30,22,24,
            31,23,42,55,61,6,20,3,4,2,
            1,59,0,21,22,23,24,10,11,9,
            4,7,8,17,18,12,1,2,5,13,
            14,15,16,66,3,0,21,22,23,10,
            11,9,4,7,8,17,18,12,1,2,
            5,13,14,15,16,0,26,43,21,44,
            56,27,45,29,46,47,30,22,48,49,
            24,57,31,58,50,51,23,52,53,54,
            19,5,60,3,0,26,43,21,44,56,
            27,45,29,46,47,30,22,48,49,24,
            57,31,58,50,51,23,52,53,54,19,
            5,65,4,0,3,61,12,13,14,15,
            16,2,5,1,10,11,9,4,7,8,
            17,18,0,3,61,26,43,21,44,56,
            27,45,29,46,47,30,22,48,49,24,
            57,31,58,50,51,23,52,53,54,65,
            2,19,5,0,42,1,67,81,10,11,
            62,84,85,86,87,88,90,89,91,92,
            93,4,68,69,7,8,64,63,70,71,
            72,73,75,76,9,77,78,79,60,82,
            83,66,61,59,55,20,3,0,1,3,
            59,62,55,61,20,42,0,2,19,5,
            3,60,55,0,2,4,1,42,3,61,
            26,43,21,44,56,27,45,29,46,47,
            30,22,48,49,24,57,31,58,50,51,
            23,52,53,54,19,5,65,0,74,26,
            43,21,44,56,27,45,29,46,47,30,
            22,48,49,24,57,31,58,50,51,23,
            52,53,54,19,5,25,20,3,4,1,
            2,0,51,43,48,46,47,45,44,49,
            50,52,53,54,59,20,31,27,24,26,
            30,29,21,22,23,4,2,1,42,55,
            61,3,0,62,42,67,0,6,28,0,
            3,55,60,62,0,74,80,60,28,6,
            34,36,39,41,37,32,38,35,33,40,
            25,20,3,13,14,15,16,12,10,11,
            9,7,8,17,18,2,1,4,19,5,
            56,57,58,51,43,48,46,47,45,44,
            49,50,52,53,54,31,27,24,26,30,
            29,21,22,23,0,32,0,3,61,4,
            1,42,0,9,4,7,8,68,69,63,
            64,70,71,72,73,75,76,77,78,79,
            82,83,59,84,85,86,87,88,89,90,
            91,92,93,66,61,60,6,3,55,20,
            62,0,26,43,21,44,56,27,45,29,
            46,47,30,22,48,49,24,57,31,58,
            50,51,23,52,53,54,19,5,6,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            91,10,132,24,124,1,78,34,107,108,
            108,15,15,108,15,108,103,50,110,10,
            132,34,25,52,52,10,10,50,10,20,
            10,132,10,132,132,10,17,132,28,50,
            46,74,110,36,46,32,79,40,132,134,
            132,134,15,132,132,101,81,27,142,132,
            24,31,38,101,10,119,32,32,32,32,
            32,37,32,32,32,10,10,10,10,10,
            10,10,10,10,10,10,27,132,32,10,
            10,54,23,25,25,15,10,11,10,10,
            32,25,10,10,32,10,134,21,24,97,
            134,21,72,10,10,15,101,68,60,10,
            4,110,101,38,37,68,32,32,32,32,
            32,32,32,32,32,32,32,28,28,115,
            119,119,66,66,63,121,32,32,32,32,
            32,32,32,32,32,32,32,32,32,32,
            32,32,32,121,32,138,31,10,25,25,
            121,10,121,121,10,10,20,10,11,21,
            110,21,21,32,15,72,68,28,85,10,
            32,32,38,37,32,50,114,52,52,28,
            28,28,38,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,28,
            72,70,28,10,28,28,32,128,40,25,
            32,10,21,84,50,60,38,38,132,88,
            28,48,27,10,10,32,10,21,30,10,
            15,32,95,11,121,11,11,131,25,54,
            110,32,48,86,31,28,60,32,38,15,
            32,28,10,25,131,72,28,38,25,11,
            131,25,21,28,131,11,28,11
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            31,1,98,93,92,91,90,89,88,0,
            26,36,1,37,25,0,31,33,0,1,
            35,0,27,1,19,0,1,24,0,83,
            1,5,0,102,0,1,5,34,0,21,
            23,25,36,1,86,26,0,21,23,55,
            0,47,0,26,1,36,25,68,35,21,
            23,0,1,104,0,84,0,28,0,111,
            0,67,0,23,21,115,0,1,33,46,
            31,44,0,24,1,31,44,60,59,0,
            114,23,21,0,113,0,21,54,64,0,
            73,0,76,77,78,79,69,49,0,44,
            31,1,0,24,59,60,1,0,21,54,
            1,27,0,23,21,100,0,21,23,48,
            62,1,0,72,21,54,0,107,21,23,
            0,26,21,23,48,30,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            2,85,88,9,87,3,10,11,8,6,
            7,68,81,82,83,84,12,13,86,93,
            48,64,76,69,94,44,55,57,60,63,
            72,77,45,46,49,50,51,58,59,65,
            71,1,47,52,56,61,62,66,67,74,
            75,78,79,80,42,54,70,73,29,92,
            91,31,16,17,30,90,4,14,15,18,
            19,20,21,95,22,23,24,25,26,53,
            5,27,28,32,33,34,35,36,37,38,
            39,40,41,89
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,0,101,105,106,107,108,109,
            110,111,112,113,114,115,116,117,99,0,
            0,118,128,97,124,0,100,136,0,123,
            157,0,160,96,98,119,122,0,0,0,
            0,0,154,156,0,158,159,127,135,0,
            0,146,0,149,155,121,168,171,172,173,
            0,0,145,148,161,167,0,126,138,0,
            0,147,166,170,103,139,140,141,142,143,
            144,153,174,102,104,125,129,130,131,132,
            133,134,137,151,0,0,152,162,165,179,
            0,181,0,0,120,150,163,164,169,175,
            176,0,177,178,180,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            173,84,33,39,69,91,111,117,142,12,
            19,49,123,128,151,26,45,101,169,188,
            192,156,1,1,30,54,81,196,6,105,
            163,133,163,97,57,57,57
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            17,17,4,4,24,17,17,17,148,17,
            24,4,17,17,17,24,4,99,24,24,
            4,160,4,4,24,4,24,24,9,108,
            166,136,181,99,65,59,75
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            5,78,47,47,33,78,76,76,40,63,
            61,47,76,76,30,61,47,64,6,5,
            5,18,113,112,59,47,31,3,83,64,
            7,41,5,64,33,46,33
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            60,60,66,66,61,60,60,60,80,60,
            61,66,60,60,60,61,66,20,61,61,
            66,59,66,66,61,66,61,61,62,2,
            61,32,61,20,1,1,1
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            25,111,86,86,97,111,111,111,12,80,
            90,86,111,111,11,90,86,5,25,25,
            25,55,1,3,90,86,97,25,82,5,
            28,12,25,5,97,99,97
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            150,42,0,96,0,204,95,0,31,145,
            0,161,179,95,6,0,98,0,159,95,
            1,153,0,97,0,159,95,1,0,168,
            1,0,116,24,193,95,42,0,116,193,
            95,24,42,0,116,24,42,0,116,193,
            95,42,0,116,42,0,125,0,2,0,
            0,163,97,0,2,0,97,0,159,95,
            120,1,125,0,2,0,0,161,97,0,
            146,1,0,161,190,95,6,119,56,0,
            161,190,95,6,56,0,148,0,99,0,
            200,95,148,0,95,148,0,150,99,0,
            165,95,6,119,58,0,165,95,6,119,
            57,0,165,95,6,58,0,165,95,6,
            57,0,131,37,0,77,2,100,97,99,
            0,131,118,121,1,39,0,53,122,0,
            180,95,6,120,0,121,83,111,0,29,
            117,0,169,1,0,97,106,0,169,1,
            12,0,161,179,95,6,118,169,1,0,
            97,3,0,104,0,98,0,198,1,99,
            0,121,42,99,0,121,1,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1398,0,1138,0,2027,1470,2014,1953,1918,0,
            2066,1570,1543,1516,1205,1489,1462,1435,1116,1408,
            332,659,625,0,1291,1145,344,2069,1891,474,
            1061,627,517,1118,1783,1772,1727,771,1207,594,
            1882,1811,1794,716,2057,2049,2036,2026,2016,797,
            2006,1994,1981,1957,1272,1252,1183,1307,1163,1097,
            1076,1040,1021,1000,979,958,937,916,895,874,
            853,832,811,747,573,726,552,531,496,606,
            453,409,432,312,0,1292,1182,783,658,1641,
            1944,1336,1804,1298,1763,0,345,310,1641,1676,
            1336,1298,1619,1602,1809,1711,1660,1715,1332,0,
            717,1548,310,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,197,115,117,208,95,95,192,182,183,
            184,58,57,185,56,186,187,95,1,125,
            202,192,181,138,125,175,127,95,140,6,
            119,6,119,6,6,119,149,4,146,95,
            1,95,55,42,1,62,149,95,6,95,
            6,95,95,6,4,95,149,120,209,115,
            117,24,116,95,100,1,12,18,17,8,
            7,4,9,11,10,99,102,104,103,106,
            105,108,107,110,109,111,120,6,4,140,
            127,180,40,33,35,38,32,37,41,39,
            95,130,120,36,34,119,95,165,148,166,
            95,165,190,119,191,95,95,167,95,120,
            95,95,95,116,193,167,93,92,91,89,
            90,88,87,86,85,84,62,169,121,148,
            1,1,81,67,1,42,69,68,4,63,
            64,8,7,76,75,73,72,71,70,77,
            9,79,78,83,82,95,95,3,121,119,
            1,131,1,1,199,28,6,150,59,165,
            95,165,161,62,55,190,167,159,117,160,
            193,24,116,4,118,95,1,154,153,169,
            169,198,121,103,103,102,102,105,105,104,
            104,104,104,107,106,109,108,121,110,201,
            179,95,121,32,121,121,55,1,95,200,
            59,146,161,1,95,55,116,116,6,149,
            168,95,1,118,118,59,55,161,55,204,
            67,42,205,118,1,118,118,142,156,180,
            55,59,95,149,95,159,95,62,150,67,
            42,121,131,156,113,179,159,150,118,80,
            113,156,161,156,113,118,156,118
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "TypedefName",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_name",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_in_statement",
            "expression_list_actual",
            "constant_expression",
            "statement",
            "compound_statement",
            "identifier_or_typedefname",
            "block_item_list",
            "block_item",
            "declaration",
            "declaration_specifiers",
            "init_declarator_list",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "init_declarator",
            "complete_declarator",
            "initializer",
            "declarator",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "knr_direct_declarator",
            "array_modifier",
            "function_direct_declarator",
            "parameter_type_list",
            "function_declarator",
            "identifier_list",
            "knr_function_declarator",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "external_declaration_list",
            "external_declaration",
            "declaration_list",
            "function_body"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 25,
           SCOPE_UBOUND      = 36,
           SCOPE_SIZE        = 37,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 288,
           NT_OFFSET         = 94,
           LA_STATE_OFFSET   = 2483,
           MAX_LA            = 2147483647,
           NUM_RULES         = 309,
           NUM_NONTERMINALS  = 116,
           NUM_SYMBOLS       = 210,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1366,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 74,
           EOLT_SYMBOL       = 74,
           ACCEPT_ACTION     = 2157,
           ERROR_ACTION      = 2174;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
