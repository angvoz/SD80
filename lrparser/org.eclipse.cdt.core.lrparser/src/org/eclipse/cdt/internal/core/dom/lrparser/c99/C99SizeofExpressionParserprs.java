/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99SizeofExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, C99SizeofExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            1,4,1,3,3,3,1,3,3,1,
            3,3,1,3,3,3,3,1,3,3,
            1,3,1,3,1,3,1,3,1,3,
            1,5,1,3,3,3,3,3,3,3,
            3,3,3,3,1,1,2,1,0,1,
            3,1,1,1,1,1,1,1,1,3,
            4,3,2,4,1,2,1,1,1,2,
            5,7,5,1,0,7,5,9,8,3,
            2,2,2,3,2,4,2,2,2,2,
            2,1,1,1,1,2,1,2,2,2,
            1,2,2,1,2,2,1,2,2,1,
            2,2,1,3,1,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            6,8,0,0,1,1,3,3,3,0,
            1,0,1,2,4,2,1,1,1,3,
            1,1,2,3,7,8,0,1,0,1,
            3,1,3,1,1,1,1,1,1,3,
            1,1,1,1,1,3,1,2,2,1,
            5,3,1,3,5,1,3,1,3,2,
            4,3,5,4,6,6,3,5,1,2,
            3,4,5,0,1,2,1,3,1,1,
            3,2,1,1,1,1,2,1,2,3,
            1,1,1,3,1,2,2,2,3,4,
            5,1,7,3,0,0,1,1,3,3,
            4,1,1,2,3,2,3,2,1,0,
            1,2,1,1,1,1,1,2,4,3,
            6,2,4,1,1,-36,0,0,0,0,
            0,0,0,0,0,-2,0,0,0,0,
            0,0,0,0,0,0,0,-80,-81,-4,
            -74,-14,0,0,0,0,-121,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-16,0,
            -17,-78,-75,-209,-18,0,0,0,0,0,
            -37,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-127,-83,-138,0,0,
            -133,-19,0,0,0,0,0,0,0,0,
            0,0,0,-20,0,0,0,-21,0,-185,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-158,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-29,
            0,0,-55,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-38,
            0,0,0,0,0,0,0,0,0,-22,
            0,0,0,0,0,0,-157,-23,0,-6,
            0,0,0,0,0,0,-193,0,-72,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-181,0,0,0,0,0,0,0,
            0,0,-30,0,0,0,0,0,0,0,
            0,0,-3,0,0,0,0,0,0,0,
            0,0,-105,0,0,0,0,0,0,0,
            0,0,0,0,-24,-51,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -69,0,-108,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-33,-126,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-130,0,-142,0,-52,
            0,0,0,0,0,0,0,0,0,-123,
            0,0,0,-25,-26,0,0,0,0,0,
            -163,-86,0,0,0,0,-27,0,0,0,
            0,0,0,0,0,0,-175,0,0,0,
            0,0,0,0,0,0,0,0,-87,0,
            -210,-88,0,0,-89,0,0,0,0,0,
            -46,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-56,0,0,0,0,
            0,0,0,0,0,-90,0,0,0,0,
            0,0,0,0,0,-57,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-58,0,0,0,0,
            0,0,0,0,0,-91,0,0,0,0,
            0,0,0,0,0,-59,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-60,0,0,0,0,
            0,0,0,0,0,-92,0,0,0,0,
            0,0,0,0,0,-61,0,0,0,0,
            0,0,0,0,0,-93,0,0,0,0,
            0,0,0,0,0,-62,0,0,0,0,
            0,0,0,0,0,-94,0,0,0,0,
            0,0,0,0,0,-63,0,0,0,0,
            0,0,0,0,0,-95,0,0,0,0,
            0,0,0,0,0,-64,0,0,0,0,
            0,0,0,0,0,-96,0,0,0,0,
            0,0,0,0,0,-65,0,0,0,0,
            0,0,0,0,0,-162,0,0,0,0,
            0,0,0,0,0,-66,0,0,0,0,
            0,0,0,0,0,-97,0,0,0,0,
            0,0,0,0,0,-143,0,0,0,0,
            0,0,0,0,0,-98,0,0,0,0,
            0,0,0,0,0,-144,0,0,0,0,
            0,0,0,0,0,-99,0,0,0,0,
            0,0,0,0,0,-161,0,0,0,0,
            0,0,0,0,0,-100,0,0,0,0,
            0,0,0,0,-184,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-7,0,0,0,0,0,0,
            -101,0,-8,0,0,0,0,0,0,-102,
            -192,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-200,
            0,0,0,0,0,0,0,0,0,-103,
            0,0,0,0,0,0,0,0,-9,0,
            0,0,0,0,0,-104,0,-10,0,0,
            0,0,0,0,-107,-208,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-120,0,0,0,0,0,
            0,0,0,0,-129,0,0,0,0,0,
            0,0,0,-34,0,-5,0,0,0,0,
            0,0,-11,0,0,0,0,0,0,-165,
            0,-137,-109,-110,-147,0,-67,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-68,0,0,0,0,-122,0,-166,
            0,-131,0,-186,-115,-148,-85,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -135,0,0,0,0,0,0,-140,0,-54,
            0,0,0,0,0,0,0,0,0,-172,
            0,0,0,0,0,0,-112,-116,0,0,
            0,-189,-134,-136,-139,-117,0,0,0,0,
            0,0,0,0,0,0,-153,-159,0,-179,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-39,0,0,0,0,0,0,0,-48,
            0,0,0,0,0,0,0,0,0,-180,
            0,0,-207,-47,0,0,0,0,0,0,
            0,0,0,-42,0,0,0,0,0,0,
            0,0,0,0,0,-111,0,0,0,0,
            0,0,0,-201,-149,0,0,0,0,0,
            0,0,-12,0,0,0,0,0,0,0,
            -49,0,0,0,0,0,0,0,0,0,
            0,0,-50,0,0,0,0,0,0,0,
            0,0,-206,0,-43,0,0,0,0,0,
            0,0,0,0,0,0,-44,0,0,0,
            0,0,0,0,0,0,-45,0,0,0,
            0,0,0,0,0,0,-202,-73,-146,0,
            0,0,0,0,0,-114,0,0,-40,0,
            0,0,0,0,0,0,-35,0,0,0,
            0,0,0,0,-76,-118,0,0,-128,0,
            0,0,0,0,0,0,-113,-32,0,0,
            0,0,0,0,0,0,0,0,-125,0,
            0,0,0,0,0,0,-170,0,0,0,
            0,0,-171,-53,-119,-141,0,0,-152,-15,
            -28,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-145,
            0,0,-160,0,0,0,-41,0,0,0,
            0,0,0,0,0,0,0,-77,0,0,
            0,0,0,0,0,0,0,0,0,-70,
            0,0,0,0,0,0,-79,0,0,-167,
            -82,0,0,-155,0,0,0,0,0,-154,
            0,0,-84,0,-168,-174,0,0,-106,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-124,0,0,0,-164,-71,0,-187,0,
            0,0,0,-188,0,0,-178,0,0,0,
            0,0,0,0,-1,-132,-176,0,-156,0,
            0,0,0,0,0,0,0,0,0,-13,
            0,0,0,0,0,0,-31,-177,-169,-190,
            0,0,0,-150,-203,0,0,0,0,0,
            0,0,-173,0,0,0,-151,0,-195,0,
            0,0,0,-182,0,0,0,-191,-199,0,
            0,-183,0,-194,0,0,0,0,-196,-198,
            -204,0,0,0,0,0,0,-205,-197,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            87,10,23,23,22,22,32,32,69,69,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,51,51,70,
            70,5,5,5,5,5,5,5,5,5,
            5,6,6,7,7,7,7,8,8,8,
            9,9,9,11,11,11,11,11,12,12,
            12,13,13,14,14,15,15,16,16,17,
            17,18,18,19,19,19,19,19,19,19,
            19,19,19,19,19,101,45,40,88,88,
            73,73,46,102,102,102,102,102,102,102,
            103,103,103,104,104,109,109,110,110,105,
            105,106,106,106,112,112,107,107,107,107,
            108,108,108,108,108,111,111,25,25,25,
            25,25,27,27,27,79,79,74,74,74,
            74,75,75,75,76,76,76,77,77,77,
            78,78,78,113,113,114,114,115,28,30,
            30,30,30,30,52,54,54,54,54,54,
            54,54,54,54,54,54,54,63,63,24,
            24,60,60,89,90,64,64,61,61,61,
            65,80,80,81,81,66,66,66,48,91,
            91,82,83,83,83,62,62,92,84,84,
            85,85,67,67,20,21,21,21,29,47,
            47,33,33,33,33,36,36,38,34,34,
            35,39,39,116,116,37,117,117,93,93,
            26,26,26,26,26,26,26,26,26,86,
            49,49,49,49,31,56,56,55,55,55,
            57,57,50,50,94,94,71,71,58,58,
            58,41,41,41,42,43,43,43,44,44,
            44,44,53,53,53,59,95,72,72,72,
            72,68,96,97,97,98,98,99,99,118,
            118,119,119,120,120,120,120,122,122,121,
            121,121,123,123,87,87,1,14,19,15,
            342,655,43,371,369,402,31,375,418,414,
            498,490,654,575,73,90,133,214,360,470,
            394,323,649,135,132,134,158,441,14,19,
            15,342,655,43,371,369,402,398,375,418,
            414,498,490,654,575,73,282,276,137,413,
            164,194,97,729,628,12,141,144,147,150,
            372,513,14,19,15,342,41,43,692,340,
            1425,1508,1527,1531,1543,1177,650,518,575,277,
            287,171,30,1228,1236,1168,1208,220,1176,222,
            1325,224,225,230,741,288,256,214,63,1142,
            489,14,19,15,342,655,43,371,369,402,
            398,375,418,414,498,490,654,575,73,282,
            336,14,19,15,342,655,43,371,369,402,
            398,375,418,414,498,490,654,575,73,282,
            241,1175,1465,513,14,19,15,342,41,43,
            371,369,402,287,375,418,414,498,1060,1208,
            513,14,19,15,342,41,43,695,288,1426,
            333,1247,1629,289,1248,906,293,730,313,1208,
            513,14,19,15,342,41,39,542,290,275,
            14,19,15,342,655,43,371,369,402,1144,
            375,418,414,498,490,654,575,73,1143,26,
            23,1250,240,465,14,19,15,342,655,43,
            371,369,402,241,375,418,414,498,490,654,
            575,73,282,513,14,19,15,342,655,43,
            371,369,402,15,375,418,414,498,490,654,
            575,73,90,347,211,327,513,14,19,15,
            342,41,43,371,369,402,291,375,418,414,
            966,447,1208,561,14,19,15,342,655,43,
            371,369,402,1562,375,418,414,498,490,654,
            575,73,1449,22,20,373,299,14,19,15,
            342,655,43,371,369,402,340,375,418,414,
            498,490,654,575,73,1490,189,1520,243,241,
            513,14,19,15,342,41,43,371,369,402,
            625,375,418,986,172,566,133,214,255,214,
            638,730,585,135,132,134,158,513,14,19,
            15,342,655,43,371,369,402,569,375,418,
            414,498,490,654,575,73,91,1232,137,595,
            164,191,199,284,1170,201,141,144,147,150,
            372,513,14,19,15,342,41,43,371,846,
            1425,1508,1527,1531,1543,1177,513,14,19,15,
            342,655,43,371,369,402,110,375,418,414,
            498,490,654,575,73,84,513,14,19,15,
            342,655,43,371,369,402,196,375,418,414,
            498,490,654,575,73,83,513,14,19,15,
            342,655,43,371,369,402,117,375,418,414,
            498,490,654,575,73,82,513,14,19,15,
            342,655,43,371,369,402,283,375,418,414,
            498,490,654,575,73,81,513,14,19,15,
            342,655,43,371,369,402,448,375,418,414,
            498,490,654,575,73,80,513,14,19,15,
            342,655,43,371,369,402,520,375,418,414,
            498,490,654,575,73,79,513,14,19,15,
            342,655,43,371,369,402,699,375,418,414,
            498,490,654,575,73,78,513,14,19,15,
            342,655,43,371,369,402,733,375,418,414,
            498,490,654,575,73,77,513,14,19,15,
            342,655,43,371,369,402,200,375,418,414,
            498,490,654,575,73,76,513,14,19,15,
            342,655,43,371,369,402,738,375,418,414,
            498,490,654,575,73,75,513,14,19,15,
            342,655,43,371,369,402,57,375,418,414,
            498,490,654,575,73,74,513,14,19,15,
            342,655,43,371,369,402,104,375,418,414,
            498,490,654,575,73,1530,513,14,19,15,
            342,655,43,371,369,402,647,375,418,414,
            498,490,654,575,73,1545,513,14,19,15,
            342,41,43,371,369,402,751,375,418,414,
            498,490,654,575,92,513,14,19,15,342,
            41,43,371,369,402,294,375,418,414,498,
            490,654,575,92,513,14,19,15,342,41,
            38,6,1634,513,14,19,15,342,41,37,
            362,513,14,19,15,342,41,43,371,369,
            402,1644,375,418,414,498,490,654,575,92,
            513,14,19,15,342,41,43,371,369,402,
            524,375,418,414,498,490,654,575,92,513,
            14,19,15,342,41,36,44,213,513,14,
            19,15,342,41,35,206,513,14,19,15,
            342,41,43,371,369,402,203,375,418,414,
            498,490,654,575,92,513,14,19,15,342,
            41,43,371,369,402,105,375,418,414,498,
            490,654,575,72,373,1614,537,14,19,15,
            342,40,204,513,14,19,15,342,41,34,
            243,275,755,447,243,207,16,373,219,1176,
            222,1325,224,225,230,1457,268,373,341,273,
            255,214,264,373,255,214,242,278,472,1076,
            690,275,754,265,718,329,756,189,219,1176,
            222,1325,224,225,230,21,268,373,341,273,
            256,214,1609,497,256,214,1174,133,214,401,
            396,52,229,1227,136,132,134,158,400,262,
            513,14,19,15,342,41,43,371,369,402,
            152,375,418,414,498,490,1030,373,542,138,
            616,164,305,15,15,15,542,142,145,148,
            151,372,1615,1540,1589,661,275,634,144,274,
            151,1168,188,220,1176,222,1325,224,225,230,
            187,270,373,341,273,219,1176,222,1325,224,
            225,230,513,14,19,15,342,41,46,1324,
            513,14,19,15,342,41,43,371,369,402,
            759,375,886,305,513,14,19,15,342,41,
            43,371,866,1615,513,14,19,15,342,41,
            43,371,369,726,199,201,365,14,19,15,
            342,41,35,1639,59,734,219,1176,222,1325,
            224,225,230,537,14,19,15,342,33,247,
            1324,513,14,19,15,342,41,43,371,369,
            402,228,926,513,14,19,15,342,41,43,
            371,369,402,526,946,513,14,19,15,342,
            41,43,371,369,766,200,201,513,14,19,
            15,342,41,43,371,369,806,513,14,19,
            15,342,41,43,371,369,826,615,717,365,
            14,19,15,342,41,35,449,1615,1437,513,
            14,19,15,342,41,45,1586,60,1723,1723,
            278,1723,248,1723,275,232,604,1567,279,373,
            219,1176,222,1325,224,225,230,688,15,268,
            373,341,273,275,1609,133,214,636,553,447,
            1201,280,140,132,134,158,1227,688,268,373,
            341,273,1115,449,15,542,669,636,1085,373,
            15,15,244,1569,553,267,1140,139,86,164,
            316,316,1115,591,1723,232,1549,260,1085,189,
            447,281,1429,542,1172,198,198,513,14,19,
            15,342,41,44,86,1723,1220,260,646,1021,
            86,86,1429,243,1172,1124,1124,296,1417,1417,
            416,14,19,15,342,41,42,655,133,214,
            447,678,1723,1723,15,143,132,134,158,1723,
            48,615,1147,687,1608,447,730,133,214,324,
            636,133,214,245,146,132,134,158,149,132,
            134,158,243,133,214,198,15,50,246,282,
            152,132,134,158,142,275,420,758,181,636,
            1168,1723,255,214,636,389,502,95,677,720,
            270,373,341,273,1115,553,636,636,1085,198,
            537,14,19,15,342,32,193,281,720,373,
            758,1115,198,1250,50,50,1549,553,396,260,
            1546,1587,677,15,1649,86,1172,752,1638,755,
            314,226,1250,1574,447,677,260,636,730,727,
            193,1469,542,1172,447,1085,1085,88,936,373,
            730,730,1115,194,1650,1587,210,295,730,342,
            1723,1651,1659,1220,374,1723,298,297,1723,1723,
            205,231,326,1577,1290,210,1723,261,1723,1723,
            1658,235,182,206,1723,1723,1723,1723,1723,1723,
            691,1723,1610,1290,1723,1163,1723,1723,1723,1723,
            1723,1723,1723,1723,1723,1723,1723,1723,195,1723,
            0,17,178,0,18,177,0,1,1950,0,
            1,1961,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,0,12,13,0,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,0,
            0,31,32,33,34,35,36,37,38,39,
            40,41,42,0,44,45,46,0,1,0,
            3,0,5,6,7,8,0,14,0,0,
            13,2,0,4,59,14,55,56,57,58,
            11,24,25,26,27,28,47,48,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,0,1,0,3,51,5,
            6,7,8,0,0,1,2,13,4,0,
            80,55,56,57,58,11,0,59,24,25,
            26,27,28,61,62,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,0,1,0,3,51,5,6,7,8,
            0,0,1,2,13,4,47,48,55,56,
            57,58,11,47,48,24,25,26,27,28,
            0,0,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,0,1,
            0,3,51,0,6,7,8,4,0,0,
            0,13,4,60,4,0,0,1,2,4,
            60,5,24,25,26,27,28,11,0,31,
            32,33,34,35,36,37,38,39,40,41,
            42,0,44,45,46,29,65,6,7,8,
            0,1,0,3,13,0,53,54,6,7,
            8,53,54,53,54,24,25,26,27,28,
            61,62,31,32,33,34,35,36,37,38,
            39,40,41,42,0,1,2,3,4,5,
            0,0,1,9,10,5,12,13,0,15,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,5,0,1,2,9,10,29,
            12,13,0,15,16,17,18,19,20,21,
            22,23,0,0,50,2,0,4,0,1,
            49,3,0,11,11,0,1,2,3,4,
            5,0,14,0,9,10,5,12,50,14,
            15,16,17,18,19,20,21,22,23,0,
            1,0,3,59,0,1,2,3,4,5,
            29,30,0,9,10,63,12,5,43,15,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,0,68,69,64,9,10,0,
            12,29,0,15,16,17,18,19,20,21,
            22,23,0,14,50,0,1,2,3,4,
            0,9,10,30,9,10,65,12,0,14,
            15,16,17,18,19,20,21,22,23,51,
            0,1,2,3,4,0,0,0,0,9,
            10,5,12,5,14,15,16,17,18,19,
            20,21,22,23,0,1,2,3,4,0,
            1,0,3,9,10,4,12,29,14,15,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,0,47,48,50,9,10,0,
            12,0,14,15,16,17,18,19,20,21,
            22,23,0,1,2,3,4,0,1,0,
            3,9,10,0,12,0,1,15,16,17,
            18,19,20,21,22,23,0,1,2,3,
            4,0,1,0,3,9,10,0,12,0,
            49,15,16,17,18,19,20,21,22,23,
            0,1,2,3,4,0,47,48,0,9,
            10,0,12,5,0,15,16,17,18,19,
            20,21,22,23,0,11,2,64,4,5,
            6,7,8,0,0,11,2,13,4,5,
            6,7,8,0,1,11,3,13,24,25,
            26,27,28,29,0,1,2,14,24,25,
            26,27,28,29,0,60,52,0,1,2,
            6,7,8,0,66,70,71,72,73,74,
            75,76,77,78,79,0,0,14,0,0,
            2,6,7,8,0,6,7,8,13,11,
            6,7,8,15,16,0,0,13,0,24,
            25,26,27,28,6,7,8,0,24,25,
            26,27,28,6,7,8,0,0,0,0,
            13,4,6,7,8,6,7,8,0,13,
            52,24,25,26,27,28,0,9,10,63,
            24,25,26,27,28,67,0,0,2,0,
            1,5,3,6,7,8,0,11,0,0,
            2,5,0,0,5,2,49,0,0,11,
            0,9,10,5,11,29,0,1,11,3,
            0,0,12,0,0,0,30,0,0,0,
            0,0,12,0,0,0,11,0,0,0,
            0,0,43,14,14,14,0,0,0,0,
            0,43,0,30,30,0,0,30,30,52,
            0,0,66,0,0,0,0,0,0,0,
            49,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1723,662,1470,689,1078,1723,1938,1939,1940,1069,
            1023,58,1133,1884,1,1600,1333,1126,1733,1734,
            1735,1736,1014,500,1885,1883,1941,1886,1882,53,
            1723,1889,1894,1893,1891,1892,1890,1895,1896,1888,
            1897,1898,1899,1723,397,339,338,1723,1,254,
            1,1723,192,1,1,1,60,563,202,266,
            1,1398,61,1,1105,1534,1387,1377,1365,1304,
            509,1,1,1,1,1,701,1294,1,1,
            1,1,1,1,1,1,1,1,1,1,
            192,1,1,1,1723,1,183,1,1920,191,
            1,1,1,59,263,1950,1145,1,1,57,
            1710,1387,1377,1365,1304,509,56,1086,1,1,
            1,1,1,1353,1341,1,1,1,1,1,
            1,1,1,1,1,1,1,191,1,1,
            1,1723,1,1723,1,1920,192,1,1,1,
            212,269,1950,1145,1,254,701,1294,1387,1377,
            1365,1304,509,701,1294,1,1,1,1,1,
            184,69,1,1,1,1,1,1,1,1,
            1,1,1,1,192,1,1,1,1723,1901,
            286,1900,1920,47,1938,1939,1940,1497,49,62,
            48,1884,1497,533,1497,1723,1,1717,1145,650,
            1031,1728,1885,1883,1941,1886,1882,509,1723,1889,
            1894,1893,1891,1892,1890,1895,1896,1888,1897,1898,
            1899,127,397,339,338,1727,463,1938,1939,1940,
            1723,1752,1723,1753,1884,1723,1409,1272,1938,1939,
            1940,1409,1272,1409,1272,1885,1883,1941,1886,1882,
            1353,1341,1889,1894,1893,1891,1892,1890,1895,1896,
            1888,1897,1898,1899,1,1740,1470,1741,1316,1726,
            1,1,1720,1069,1023,89,1133,593,1723,1600,
            1333,1126,1733,1734,1735,1736,1014,500,1723,1740,
            1470,1741,1399,1726,1,1950,1397,1069,1023,89,
            1133,956,65,1600,1333,1126,1733,1734,1735,1736,
            1014,500,272,269,1725,1398,71,254,1723,1902,
            1982,1903,67,509,509,1,1740,1470,1741,1078,
            27,1723,1233,1723,1069,1023,1728,1133,1725,2777,
            1600,1333,1126,1733,1734,1735,1736,1014,500,186,
            2798,70,2798,1050,1723,1740,1470,1741,1078,1726,
            1727,1363,1723,1069,1023,640,1133,1728,27,1600,
            1333,1126,1733,1734,1735,1736,1014,500,1723,1,
            1,1,1,87,1210,1464,576,1,1,1723,
            1,1727,1723,1,1,1,1,1,1,1,
            1,1,50,1566,1725,1723,1740,1470,1741,1078,
            1723,480,381,667,1069,1023,463,1133,1723,563,
            1600,1333,1126,1733,1734,1735,1736,1014,500,2038,
            1,1740,1470,1741,1078,1723,1723,55,1,1069,
            1023,1726,1133,1728,2777,1600,1333,1126,1733,1734,
            1735,1736,1014,500,1723,1740,1470,1741,1078,185,
            2799,1723,2799,1069,1023,1466,1133,1727,2777,1600,
            1333,1126,1733,1734,1735,1736,1014,500,1,1740,
            1470,1741,1078,1723,701,1294,1725,1069,1023,1723,
            1133,1,2777,1600,1333,1126,1733,1734,1735,1736,
            1014,500,1723,1740,1470,1741,1078,207,2800,54,
            2800,1069,1023,68,1133,1723,1962,1600,1333,1126,
            1733,1734,1735,1736,1014,500,1723,1740,1471,1741,
            1078,1723,1902,1723,1903,1069,1023,1723,1133,1723,
            1982,1600,1333,1126,1733,1734,1735,1736,1014,500,
            1,1740,1470,1741,1078,41,701,1294,1,1069,
            1023,1723,1133,1732,1723,1600,1333,1126,1733,1734,
            1735,1736,1014,500,17,976,1711,576,1711,1711,
            178,178,178,1723,18,1711,1714,178,1714,1714,
            177,177,177,1723,1902,1714,1903,177,178,178,
            178,178,178,1711,1,1950,1397,1234,177,177,
            177,177,177,1714,250,916,1493,254,1950,1397,
            1,1,1,1723,1731,896,876,856,836,816,
            776,796,756,736,716,128,66,1623,31,249,
            1607,1938,1939,1940,129,1938,1939,1940,1884,1438,
            1938,1939,1940,1747,1748,1723,1723,1884,251,1885,
            1883,1941,1886,1882,1,1,1,130,1885,1883,
            1941,1886,1882,1938,1939,1940,131,1,1723,252,
            1884,254,1938,1939,1940,1938,1939,1940,52,1884,
            543,1885,1883,1941,1886,1882,1723,480,381,640,
            1885,1883,1941,1886,1882,460,1,253,1398,209,
            1902,1728,1903,1938,1939,1940,1723,509,271,1723,
            1406,1732,51,223,1730,1463,1982,292,285,509,
            63,480,381,1235,509,1727,208,507,995,507,
            64,1,1280,257,28,221,1293,28,208,190,
            190,190,1280,1723,1723,1723,509,1723,1723,1723,
            1723,1723,1729,186,185,207,1723,1723,1723,1723,
            1723,1235,1723,1627,440,1723,1723,1750,2785,1642,
            1723,1723,1731,1723,1723,1723,1723,1723,1723,1723,
            1981
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            384,1,104,41,104,104,104,104,104,104,
            104,104,104,3,343,51,48,55,53,61,
            59,63,62,65,64,10,104,343,280,280,
            402,104,187,187,308,343,104,104,104,104,
            104,104,104,104,104,104,104,104,104,104,
            104,104,104,104,104,104,104,104,104,104,
            104,104,104,104,104,104,187,187,45,80,
            312,98,250,185,184,283,295,94,295,94,
            94,295,94,295,357,141,141,48,48,53,
            53,53,53,51,51,59,55,55,62,61,
            248,64,63,96,78,308,312,121,45,380,
            102,187,314,253,94,280,280,94,280,104,
            78,312,303,380,45,101,98,187,306,357,
            186,255,96,201,96,231,233,198,228,96,
            303,380,104,104,45,102,250,243,242,312,
            255,187,96,201,231,231,228,76,240,280,
            104,197,228,78,380,303,45,45,187,314,
            253,306,201,228,190,201,231,233,237,233,
            80,45,280,104,78,303,255,201,192,233,
            228,104,280,45,233,187,186,228,72,104,
            71,117,312,228,228,281,192,104,117,233
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,66,11,2,52,67,15,16,12,
            4,9,10,53,54,47,48,55,56,57,
            58,61,62,63,64,65,68,69,43,60,
            70,71,72,73,74,76,75,77,78,79,
            59,29,80,30,50,5,0,4,53,54,
            9,10,48,47,55,56,57,58,61,62,
            12,63,64,65,50,29,43,80,68,69,
            59,66,5,30,0,5,43,11,52,15,
            16,12,4,9,10,22,23,17,2,18,
            19,20,21,1,3,14,0,6,7,8,
            13,50,5,18,19,20,21,3,15,16,
            12,9,10,22,23,17,4,2,1,0,
            6,7,8,2,18,19,20,21,1,3,
            15,16,12,4,9,10,22,23,17,0,
            7,13,28,8,27,26,25,6,24,52,
            67,15,16,12,9,10,53,54,47,48,
            55,56,57,58,61,62,63,64,65,68,
            69,60,70,71,72,73,74,75,76,77,
            78,79,4,2,11,30,29,5,0,66,
            5,4,1,2,59,0,60,11,52,0,
            24,31,6,32,44,25,33,26,34,35,
            27,7,36,37,13,45,28,46,38,39,
            8,40,41,42,1,3,51,5,43,0,
            1,3,5,43,30,0,5,30,43,60,
            0,2,5,30,29,66,11,59,0,4,
            2,11,29,5,24,31,6,32,44,25,
            33,26,34,35,27,7,36,37,13,45,
            28,46,38,39,8,40,41,42,49,3,
            1,0,39,31,36,34,35,33,32,37,
            38,40,41,42,59,66,28,25,13,24,
            27,26,6,7,8,30,1,5,29,2,
            11,4,0,4,24,31,6,32,44,25,
            33,26,34,35,27,7,36,37,13,45,
            28,46,38,39,8,40,41,42,1,3,
            49,0,17,18,19,20,21,2,15,16,
            12,4,9,10,22,23,3,1,44,45,
            46,39,31,36,34,35,33,32,37,38,
            40,41,42,28,25,13,24,27,26,6,
            7,8,0,17,18,19,20,21,1,3,
            2,15,16,12,4,9,10,22,23,51,
            0,5,29,17,18,19,20,21,1,3,
            2,15,16,12,4,9,10,22,23,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            105,9,26,9,26,26,26,26,26,26,
            26,26,26,9,86,9,9,9,9,9,
            9,9,9,9,9,9,26,86,28,28,
            112,87,79,79,74,1,26,26,26,26,
            26,26,26,26,26,26,26,26,26,26,
            26,26,87,26,26,26,26,26,26,26,
            26,26,26,26,26,26,79,79,34,26,
            98,32,73,10,10,64,65,12,65,17,
            17,65,16,65,59,9,9,9,9,9,
            9,9,9,9,9,9,9,9,9,9,
            9,9,9,9,55,94,9,36,34,48,
            33,79,81,78,57,57,57,57,57,26,
            24,9,55,48,34,33,14,79,51,2,
            9,83,21,55,9,55,46,19,55,9,
            55,48,26,26,34,33,50,10,10,98,
            83,79,9,90,55,57,30,23,9,57,
            26,44,30,55,48,14,34,34,79,81,
            78,67,55,30,39,108,57,46,9,9,
            25,34,57,26,24,14,101,90,53,46,
            30,26,57,34,46,79,79,30,40,26,
            9,53,98,30,30,9,53,26,69,42
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,79,78,77,76,64,75,74,0,26,
            0,89,0,20,0,92,65,0,97,0,
            90,0,68,10,59,4,0,70,0,32,
            0,10,4,23,0,4,10,0,10,69,
            0,95,0,99,0,51,0,56,0,22,
            43,42,36,34,10,0,24,0,64,60,
            61,62,63,52,27,0,43,42,36,34,
            31,0,22,42,43,10,0,10,22,0,
            31,49,10,25,0,48,10,45,0,81,
            10,48,0,43,42,31,0,31,49,0,
            93,10,25,0,10,87,0,10,48,66,
            0,10,88,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,10,11,
            1,8,69,3,6,7,68,81,82,83,
            84,12,13,44,55,60,63,72,90,42,
            47,52,56,61,62,66,67,74,75,78,
            79,80,91,54,70,73,16,17,30,89,
            93,4,14,15,18,19,20,21,29,31,
            22,23,24,25,26,92,5,27,28,32,
            33,34,35,36,37,38,39,40,41,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,101,105,106,107,108,109,0,
            110,111,112,113,114,115,116,117,118,129,
            0,97,96,121,122,150,128,0,0,0,
            0,98,146,148,0,149,0,0,0,0,
            159,160,161,0,100,120,137,141,147,156,
            0,131,136,0,151,154,155,158,0,132,
            133,134,135,138,0,140,145,162,99,102,
            103,104,119,123,124,125,126,127,130,0,
            139,143,0,0,144,153,95,0,0,0,
            142,0,152,157,0,163,164,0,165,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            82,113,158,92,35,41,121,12,136,21,
            51,69,28,47,103,173,177,145,1,1,
            32,56,79,181,6,107,152,127,152,99,
            59,59,59
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            90,90,90,90,4,4,90,18,142,26,
            4,26,26,4,101,26,4,149,4,4,
            26,4,26,26,9,110,155,130,166,101,
            66,61,74
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            62,60,4,62,26,26,60,53,106,44,
            26,39,44,26,66,4,4,18,99,98,
            42,26,36,2,68,66,6,107,4,66,
            39,37,39
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            43,43,43,43,50,50,43,43,86,29,
            50,29,29,50,66,29,50,59,50,50,
            29,50,29,29,60,1,29,92,29,66,
            2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            17,17,32,17,21,21,17,87,-1,25,
            21,9,25,21,3,32,32,62,1,7,
            25,21,9,32,88,3,35,-1,32,3,
            9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            139,11,0,96,0,189,103,0,31,136,
            0,144,165,103,14,152,0,98,0,0,
            148,103,2,135,0,97,0,148,103,2,
            0,151,2,0,112,13,179,103,11,0,
            112,179,103,13,11,0,112,13,11,0,
            112,179,103,11,0,112,11,0,129,0,
            2,0,152,97,0,2,97,0,148,103,
            2,129,0,2,0,151,97,0,140,2,
            0,144,177,103,14,117,185,44,0,98,
            0,144,177,103,14,185,44,0,141,0,
            99,0,184,103,141,0,103,141,0,142,
            99,0,173,103,14,183,117,182,157,0,
            173,103,14,182,157,0,195,85,0,77,
            2,100,97,99,0,195,115,138,2,89,
            0,53,0,0,138,69,110,0,29,117,
            0,164,2,0,97,106,0,144,165,103,
            14,115,164,2,0,97,3,0,104,0,
            98,0,181,2,97,0,138,11,97,0,
            138,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            906,0,1574,1587,1540,0,398,0,374,1293,
            1397,1232,1220,1145,1115,0,636,1177,316,0,
            1325,1176,373,341,1220,1145,1115,1549,1398,1417,
            0,1600,1333,1126,1399,1316,1520,463,1210,640,
            576,1353,1341,1280,1294,701,1387,1377,1365,1304,
            1497,1409,1272,480,381,1133,1078,1069,1023,1014,
            500,1086,1050,1031,995,976,956,936,616,1105,
            593,509,916,896,876,856,836,816,796,776,
            756,736,716,316,667,553,533,420,440,347,
            0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,180,103,166,17,23,22,10,9,4,
            12,16,15,97,2,101,100,104,102,106,
            105,108,107,110,109,98,30,2,67,52,
            2,11,164,138,141,103,10,9,54,53,
            4,58,57,56,55,47,48,12,62,61,
            64,63,69,68,65,79,78,77,75,76,
            74,73,72,71,70,60,164,181,138,115,
            103,11,2,136,135,167,168,157,169,46,
            45,170,44,171,172,1,3,100,100,102,
            102,102,102,101,101,105,104,104,107,106,
            138,109,108,115,14,142,124,13,112,103,
            4,151,103,2,182,158,158,185,158,59,
            103,124,4,103,112,179,149,148,118,103,
            150,103,117,14,117,14,165,103,14,152,
            4,103,179,13,112,4,2,127,129,103,
            30,148,183,103,14,103,144,30,189,52,
            11,190,103,14,103,149,112,112,140,103,
            2,142,14,173,141,174,103,177,117,178,
            60,139,52,11,103,149,103,103,103,177,
            144,60,30,139,165,148,186,173,184,59,
            140,2,103,144,144,30,30,59,142,125
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_sizeof_type_name_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_name",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_token",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 51,
           SCOPE_UBOUND      = 32,
           SCOPE_SIZE        = 33,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 210,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2038,
           MAX_LA            = 2,
           NUM_RULES         = 315,
           NUM_NONTERMINALS  = 123,
           NUM_SYMBOLS       = 216,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1585,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1710,
           ERROR_ACTION      = 1723;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
