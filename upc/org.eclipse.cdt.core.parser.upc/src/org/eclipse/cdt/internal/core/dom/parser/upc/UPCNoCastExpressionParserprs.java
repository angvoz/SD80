/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.upc;

public class UPCNoCastExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, UPCNoCastExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            4,1,1,3,3,3,1,3,3,1,
            3,3,1,3,3,3,3,1,3,3,
            1,3,1,3,1,3,1,3,1,3,
            1,5,1,3,3,3,3,3,3,3,
            3,3,3,3,1,1,2,1,0,1,
            3,1,1,1,1,1,1,1,1,3,
            4,3,2,4,1,2,1,1,1,2,
            5,7,5,1,0,7,5,9,8,3,
            2,2,2,3,2,4,2,2,2,2,
            2,1,1,1,1,2,1,2,2,2,
            1,2,2,1,2,2,1,2,2,1,
            2,2,1,3,1,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            6,8,0,0,1,1,3,3,3,0,
            1,0,1,2,4,2,1,1,1,3,
            1,1,2,3,7,8,0,1,0,1,
            3,1,3,1,1,1,1,1,1,3,
            1,1,1,1,1,3,1,2,2,1,
            5,3,1,3,5,1,3,1,3,2,
            4,3,5,4,6,6,3,5,1,2,
            3,4,5,0,1,2,1,3,1,1,
            3,2,1,1,1,1,2,1,2,3,
            1,1,1,3,1,2,2,2,3,4,
            5,1,7,3,0,0,1,1,3,3,
            4,1,1,2,3,2,3,2,1,0,
            1,2,1,1,1,1,1,2,4,3,
            6,2,4,1,1,1,1,1,2,4,
            2,4,2,4,1,1,2,1,1,1,
            3,3,2,1,3,2,3,2,3,2,
            2,11,10,10,9,10,9,9,8,10,
            9,9,8,9,8,8,7,10,9,9,
            8,9,8,8,7,1,1,-38,0,0,
            0,0,0,0,0,0,-35,0,0,0,
            0,0,0,0,0,0,0,-2,-4,0,
            0,0,0,-18,-19,-81,0,-82,0,0,
            0,0,-135,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-20,-21,-22,-84,
            0,0,0,0,0,-9,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-57,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-43,0,0,0,0,
            0,0,0,0,-23,-24,0,-201,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-174,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-58,0,0,
            0,0,0,0,0,0,-78,0,0,0,
            0,0,-144,0,-39,-25,-153,-194,-36,0,
            -44,0,0,0,0,0,0,0,0,-173,
            -26,0,-27,0,0,0,0,0,0,0,
            -28,-40,0,0,0,0,0,-97,0,-60,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-178,-29,-86,0,0,0,0,0,
            -10,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-79,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-197,0,0,0,
            0,0,0,0,0,-73,0,0,0,0,
            0,0,0,0,0,0,-3,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-61,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-209,-77,-94,-95,0,-121,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-98,
            -122,0,-128,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-99,0,-140,0,0,0,0,0,
            0,0,0,-100,0,0,0,0,0,0,
            0,0,0,0,0,0,-101,0,-30,0,
            0,0,0,0,0,0,0,-74,0,0,
            0,0,0,0,0,0,0,0,-62,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-63,0,
            0,0,0,0,0,0,0,-75,0,0,
            0,0,0,0,0,0,0,0,-64,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-65,0,
            0,0,0,0,0,0,0,-76,0,0,
            0,0,0,0,0,0,0,0,-66,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-67,0,
            0,0,0,0,0,0,0,-96,0,0,
            0,0,0,0,0,0,0,0,-68,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-69,0,
            0,0,0,0,0,0,0,-125,0,0,
            0,0,0,0,0,0,0,0,-70,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-71,0,
            0,0,0,0,0,0,0,-142,0,0,
            0,0,0,0,0,0,0,0,-72,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-159,0,
            0,0,0,0,0,0,0,-168,0,0,
            0,0,0,0,0,0,0,0,-160,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-177,0,
            0,0,0,0,0,0,0,-102,0,0,
            0,0,0,0,0,0,0,-200,0,0,
            0,0,0,0,0,0,-103,0,0,0,
            0,0,0,0,0,0,-11,0,0,0,
            0,0,0,0,-52,0,0,0,0,0,
            0,0,0,-208,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-216,0,0,0,0,0,0,0,
            0,-104,0,0,0,0,0,0,0,0,
            0,-12,0,0,0,0,0,0,0,-53,
            0,0,0,0,0,0,0,0,-224,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-134,0,0,
            0,0,0,0,0,0,-88,0,0,0,
            0,0,0,0,0,0,-143,-5,0,0,
            0,0,0,0,-141,0,-54,0,0,0,
            0,0,0,0,0,-105,0,0,0,-206,
            -164,-163,-41,-89,0,-106,0,0,0,0,
            0,0,-139,-107,0,0,0,0,0,0,
            0,0,0,0,0,0,-127,0,0,0,
            -147,0,-93,0,0,0,-83,0,-226,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-188,-48,0,0,0,0,0,
            0,0,0,-154,0,-205,-108,0,-149,0,
            -165,0,0,0,0,0,0,0,0,0,
            -91,0,-13,0,0,0,0,0,0,0,
            -129,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -118,-109,-187,-223,-110,0,0,0,-111,0,
            -130,0,0,-55,0,0,0,0,0,0,
            0,0,0,0,0,-56,0,0,0,0,
            0,0,0,0,-112,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-179,
            0,0,0,0,0,-49,0,0,0,0,
            0,0,0,0,0,0,-50,0,0,0,
            0,0,0,0,0,-218,0,-124,0,0,
            0,0,0,0,0,-166,0,0,0,-51,
            0,0,0,0,0,0,0,0,0,0,
            -80,-6,0,0,0,0,0,-85,-113,0,
            -114,-87,-115,0,0,0,0,0,0,0,
            0,0,-190,-116,-225,-131,0,-117,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -90,-120,0,-136,-92,-145,-211,-151,-215,0,
            0,0,0,0,0,0,0,0,0,-156,
            -132,-37,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-126,
            -148,0,0,0,0,0,0,0,0,0,
            -162,0,0,0,0,0,0,-186,-185,-219,
            0,0,-169,-175,-195,0,0,0,0,0,
            0,0,-17,-172,-196,0,-212,-207,0,-133,
            0,0,0,0,-14,0,0,0,0,0,
            0,0,0,0,-31,0,0,0,0,0,
            0,0,0,0,-32,-193,0,0,-217,0,
            0,0,-33,0,0,0,-1,0,-137,-222,
            0,0,0,0,0,0,-34,0,-42,0,
            0,-150,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-123,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-45,0,0,0,0,0,0,
            -119,0,0,0,0,0,0,-46,0,0,
            0,0,0,0,-47,0,0,0,0,0,
            0,0,0,-161,-170,0,0,0,0,-138,
            -204,-203,-146,0,-59,0,0,0,0,0,
            0,0,0,0,0,-183,0,0,0,0,
            0,0,0,0,0,-176,0,0,0,0,
            -184,-214,-198,0,0,0,0,0,-7,0,
            0,0,0,0,-8,0,0,0,0,0,
            0,0,0,0,0,0,-158,-191,0,0,
            0,0,0,0,-210,0,0,0,0,0,
            -15,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-181,0,-192,0,-16,0,
            0,0,0,0,-182,0,0,-220,0,-221,
            -202,-167,-152,0,-155,-157,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -199,0,0,0,0,0,-171,0,-180,0,
            -189,-213,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            89,9,21,21,20,20,37,37,72,72,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,54,54,73,
            73,5,5,5,5,5,5,5,5,5,
            5,5,6,7,7,7,7,8,8,8,
            10,10,10,11,11,11,11,11,12,12,
            12,13,13,14,14,15,15,16,16,17,
            17,18,18,19,19,19,19,19,19,19,
            19,19,19,19,19,104,30,29,90,90,
            75,75,45,105,105,105,105,105,105,105,
            106,106,106,107,107,112,112,113,113,108,
            108,109,109,109,115,115,110,110,110,110,
            111,111,111,111,111,114,114,26,26,26,
            26,26,31,31,31,81,81,76,76,76,
            76,77,77,77,78,78,78,79,79,79,
            80,80,80,116,116,117,117,118,32,34,
            34,34,34,34,55,57,57,57,57,57,
            57,57,57,57,57,57,57,66,66,27,
            27,63,63,91,92,67,67,64,64,64,
            68,82,82,83,83,69,69,69,35,93,
            93,84,85,85,85,65,65,94,86,86,
            87,87,70,70,22,23,23,23,33,51,
            51,38,38,38,38,41,41,43,39,39,
            40,44,44,119,119,42,120,120,95,95,
            28,28,28,28,28,28,28,28,28,88,
            52,52,52,52,36,59,59,58,58,58,
            60,60,53,53,96,96,50,50,61,61,
            61,46,46,46,47,48,48,48,49,49,
            49,49,56,56,56,62,97,74,74,74,
            74,71,98,99,99,100,100,101,101,121,
            121,122,122,123,123,123,123,125,125,124,
            124,124,126,126,89,89,1,1,1,5,
            5,5,5,5,5,22,22,24,24,25,
            25,102,102,102,105,127,127,127,127,127,
            127,127,110,110,110,110,110,110,110,110,
            110,110,110,110,110,110,110,110,110,110,
            110,110,110,110,110,110,128,128,1,14,
            19,15,394,594,43,427,395,480,429,428,
            476,475,551,536,561,553,73,90,458,40,
            133,214,325,326,59,78,556,696,808,135,
            132,134,158,542,14,19,15,394,594,43,
            427,395,1304,429,428,476,475,551,536,561,
            553,73,282,137,276,164,277,193,64,139,
            693,141,144,147,150,595,638,14,19,15,
            394,42,39,389,1257,1458,1462,1501,1505,1253,
            638,14,19,15,394,42,43,427,395,287,
            429,428,476,475,1352,1520,638,14,19,15,
            394,42,43,720,288,304,16,537,606,14,
            19,15,394,594,43,427,395,1304,429,428,
            476,475,551,536,561,553,73,282,351,14,
            19,15,394,594,43,427,395,1304,429,428,
            476,475,551,536,561,553,73,282,638,14,
            19,15,394,42,43,427,395,39,429,428,
            476,1355,327,225,287,191,277,907,917,480,
            1520,638,14,19,15,394,42,43,743,288,
            63,24,1507,171,289,133,214,325,326,16,
            1520,250,191,1502,135,132,134,158,775,290,
            638,14,19,15,394,42,43,427,395,1671,
            429,428,476,475,551,536,1385,26,137,20,
            164,550,1578,934,325,53,141,144,147,150,
            595,638,14,19,15,394,42,38,23,1257,
            1458,1462,1501,1505,1253,281,14,19,15,394,
            594,43,427,395,1650,429,428,476,475,551,
            536,561,553,73,721,22,240,574,14,19,
            15,394,594,43,427,395,480,429,428,476,
            475,551,536,561,553,73,282,638,14,19,
            15,394,594,43,427,395,1461,429,428,476,
            475,551,536,561,553,73,90,638,14,19,
            15,394,42,43,427,395,1331,429,428,476,
            475,551,1459,291,294,647,386,830,846,1520,
            798,14,19,15,394,594,43,427,395,1700,
            429,428,476,475,551,536,561,553,73,1233,
            227,775,1565,470,14,19,15,394,42,43,
            427,395,389,429,428,476,475,551,536,561,
            553,92,242,385,333,316,14,19,15,394,
            594,43,427,395,151,429,428,476,475,551,
            536,561,553,73,1694,211,241,422,1251,638,
            14,19,15,394,594,43,427,395,480,429,
            428,476,475,551,536,561,553,73,91,638,
            14,19,15,394,594,43,427,395,1463,429,
            428,476,475,551,536,561,553,73,84,638,
            14,19,15,394,594,43,427,395,480,429,
            428,476,475,551,536,561,553,73,83,638,
            14,19,15,394,594,43,427,395,1474,429,
            428,476,475,551,536,561,553,73,82,638,
            14,19,15,394,594,43,427,395,480,429,
            428,476,475,551,536,561,553,73,81,638,
            14,19,15,394,594,43,427,395,1478,429,
            428,476,475,551,536,561,553,73,80,638,
            14,19,15,394,594,43,427,395,480,429,
            428,476,475,551,536,561,553,73,79,638,
            14,19,15,394,594,43,427,395,21,429,
            428,476,475,551,536,561,553,73,78,638,
            14,19,15,394,594,43,427,395,480,429,
            428,476,475,551,536,561,553,73,77,638,
            14,19,15,394,594,43,427,395,274,429,
            428,476,475,551,536,561,553,73,76,638,
            14,19,15,394,594,43,427,395,480,429,
            428,476,475,551,536,561,553,73,75,638,
            14,19,15,394,594,43,427,395,280,429,
            428,476,475,551,536,561,553,73,74,638,
            14,19,15,394,594,43,427,395,480,429,
            428,476,475,551,536,561,553,73,1716,638,
            14,19,15,394,594,43,427,395,281,429,
            428,476,475,551,536,561,553,73,1731,638,
            14,19,15,394,42,43,427,395,847,429,
            428,476,475,551,536,561,553,92,638,14,
            19,15,394,42,43,427,395,849,429,428,
            476,475,551,536,561,553,92,638,14,19,
            15,394,42,37,1733,638,14,19,15,394,
            42,43,427,1132,638,14,19,15,394,42,
            43,427,395,1765,429,428,476,475,551,536,
            561,553,92,638,14,19,15,394,42,43,
            427,395,646,429,428,476,475,551,536,561,
            553,92,638,14,19,15,394,42,36,213,
            638,14,19,15,394,42,43,427,1216,638,
            14,19,15,394,42,43,427,395,203,429,
            428,476,475,551,536,561,553,92,638,14,
            19,15,394,42,43,427,395,387,429,428,
            476,475,551,536,561,553,72,398,670,14,
            19,15,394,323,204,232,1436,638,14,19,
            15,394,42,43,427,395,678,429,428,1226,
            917,974,870,550,514,275,742,256,214,325,
            326,1558,657,775,77,219,1221,222,1311,224,
            225,230,278,268,398,396,273,710,264,229,
            275,775,88,225,244,1361,1703,383,265,119,
            219,1221,222,1311,224,225,230,279,268,398,
            396,273,331,1559,1798,133,214,325,326,133,
            214,325,326,938,136,132,134,158,140,132,
            134,158,1476,262,992,638,14,19,15,394,
            42,43,427,395,175,754,72,187,138,88,
            164,892,139,898,164,1560,142,145,148,151,
            595,583,275,638,14,19,15,394,42,35,
            1504,80,220,1221,222,1311,224,225,230,228,
            270,398,396,273,219,1221,222,1311,224,225,
            230,6,510,710,72,618,283,1609,1309,263,
            403,647,1702,1560,638,14,19,15,394,42,
            43,427,395,232,429,1234,638,14,19,15,
            394,42,43,427,395,513,429,1307,188,1580,
            199,201,219,1221,222,1311,224,225,230,1509,
            63,1563,1564,593,293,1609,638,14,19,15,
            394,42,43,427,395,1521,767,638,14,19,
            15,394,42,43,427,395,467,1058,435,14,
            19,15,394,42,35,1560,39,284,200,201,
            638,14,19,15,394,42,43,427,395,247,
            1077,291,702,14,19,15,394,321,877,541,
            1540,539,888,774,219,1221,222,1311,224,225,
            230,278,1502,63,806,502,647,1559,861,275,
            133,214,325,326,133,214,325,326,1294,143,
            132,134,158,146,132,134,158,268,398,396,
            273,918,243,187,360,929,707,907,933,445,
            181,1504,938,220,1221,222,1311,224,225,230,
            945,537,326,133,214,325,326,133,214,325,
            326,527,149,132,134,158,152,132,134,158,
            616,435,14,19,15,394,42,35,1508,533,
            275,435,14,19,15,394,42,35,616,480,
            39,1800,332,988,936,944,1197,533,268,398,
            396,273,248,6,679,919,1502,480,63,226,
            647,195,368,267,1197,638,14,19,15,394,
            42,34,1671,260,1502,6,1502,231,978,198,
            1506,1565,86,539,368,6,679,189,1522,551,
            1294,260,1475,6,368,205,978,505,1506,176,
            199,198,368,377,86,539,657,6,1757,6,
            1522,198,6,1565,86,539,368,1874,657,198,
            1522,1695,86,539,210,646,86,314,1522,1874,
            124,1874,1874,198,1874,778,86,539,86,568,
            538,1575,1522,818,638,14,19,15,394,42,
            46,361,255,214,325,326,210,858,638,14,
            19,15,394,42,45,638,14,19,15,394,
            42,44,1220,1575,775,57,1874,1874,1874,275,
            124,169,778,717,533,6,388,1504,1874,1205,
            533,533,533,1874,657,243,775,270,398,396,
            273,198,255,214,325,326,647,198,1197,1197,
            1758,775,63,775,86,1359,1758,245,745,734,
            14,19,15,394,319,766,14,19,15,394,
            40,1874,246,296,295,260,260,124,935,1205,
            1577,1018,1506,1506,193,775,1874,1306,1874,182,
            193,638,14,19,15,394,33,1473,1787,255,
            214,325,326,1732,1787,124,297,113,1009,638,
            14,19,15,394,32,970,533,1832,63,1874,
            63,977,744,6,1874,6,959,255,214,325,
            326,533,1574,198,1400,1785,1795,256,214,325,
            326,647,1758,256,214,325,326,6,1197,6,
            196,6,444,1874,1874,206,1606,1259,478,1874,
            1701,1874,1874,1874,1801,1874,1874,1874,298,1874,
            1874,1874,235,1874,1874,261,194,1874,0,328,
            723,0,17,178,0,18,177,0,1,2101,
            0,1,2112,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,12,13,14,0,16,17,18,19,
            20,21,22,0,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,0,0,
            40,41,42,43,44,45,46,47,48,49,
            50,51,0,53,54,55,0,1,0,3,
            2,5,0,0,8,9,10,5,12,13,
            14,0,1,2,16,17,0,0,39,0,
            1,23,3,6,7,70,71,0,32,33,
            34,35,36,37,15,72,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,0,1,52,3,60,5,0,61,
            8,9,10,0,12,13,14,64,65,66,
            67,8,9,10,76,12,13,14,0,68,
            64,65,66,67,32,33,34,35,36,37,
            0,0,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,0,1,
            0,3,60,5,0,0,8,9,10,0,
            12,13,14,8,9,10,0,12,13,14,
            0,1,0,3,56,57,4,23,0,1,
            32,33,34,35,36,37,56,57,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,0,1,0,3,60,0,
            4,0,8,9,10,61,12,13,14,8,
            9,10,0,12,13,14,4,77,78,0,
            64,65,66,67,62,63,32,33,34,35,
            36,37,0,0,40,41,42,43,44,45,
            46,47,48,49,50,51,0,53,54,55,
            0,1,2,3,4,5,6,7,62,63,
            0,11,2,0,0,5,16,17,18,19,
            20,21,22,0,24,25,26,27,28,29,
            30,31,32,23,11,0,1,2,3,4,
            5,6,7,74,0,0,11,2,38,4,
            68,16,17,18,19,20,21,22,58,24,
            25,26,27,28,29,30,31,32,23,73,
            0,1,2,3,4,5,6,7,0,0,
            0,11,2,4,4,15,16,17,18,19,
            20,21,22,58,24,25,26,27,28,29,
            30,31,0,23,0,0,0,1,4,3,
            8,9,10,69,12,13,14,0,1,2,
            15,4,52,79,80,81,82,83,84,85,
            86,87,88,0,32,33,34,35,36,37,
            23,0,40,41,42,43,44,45,46,47,
            48,49,50,51,0,1,2,3,4,5,
            6,7,0,0,0,11,62,63,5,5,
            16,17,18,19,20,21,22,0,24,25,
            26,27,28,29,30,31,0,1,2,0,
            1,2,3,4,5,6,7,56,57,0,
            11,38,39,39,5,16,17,18,19,20,
            21,22,58,24,25,26,27,28,29,30,
            31,0,1,2,0,1,2,3,4,0,
            6,7,0,0,1,11,3,38,0,75,
            16,17,18,19,20,21,22,58,24,25,
            26,27,28,29,30,31,0,1,0,3,
            0,0,1,2,3,4,89,6,7,0,
            0,15,11,15,5,0,15,16,17,18,
            19,20,21,22,60,24,25,26,27,28,
            29,30,31,0,1,2,3,4,23,6,
            7,72,0,1,11,3,74,38,15,16,
            17,18,19,20,21,22,0,24,25,26,
            27,28,29,30,31,0,1,2,3,4,
            0,6,7,73,0,0,11,0,68,4,
            15,16,17,18,19,20,21,22,11,24,
            25,26,27,28,29,30,31,0,1,2,
            3,4,0,6,7,0,0,1,11,3,
            0,6,7,16,17,18,19,20,21,22,
            0,24,25,26,27,28,29,30,31,0,
            1,2,3,4,59,6,7,0,0,1,
            11,3,0,6,7,16,17,18,19,20,
            21,22,0,24,25,26,27,28,29,30,
            31,0,1,2,3,4,0,6,7,0,
            0,1,11,3,5,23,0,16,17,18,
            19,20,21,22,0,24,25,26,27,28,
            29,30,31,0,1,2,3,4,0,6,
            7,0,0,0,11,39,0,38,0,16,
            17,18,19,20,21,22,0,24,25,26,
            27,28,29,30,31,0,1,2,3,4,
            0,6,7,0,0,59,11,0,1,5,
            0,16,17,18,19,20,21,22,15,24,
            25,26,27,28,29,30,31,0,1,2,
            3,4,59,6,7,0,0,0,11,2,
            0,70,71,16,17,18,19,20,21,22,
            15,24,25,26,27,28,29,30,31,0,
            23,2,58,4,5,0,59,8,9,10,
            0,12,13,14,0,0,0,2,0,4,
            5,0,23,8,9,10,0,12,13,14,
            0,32,33,34,35,36,37,38,23,0,
            1,2,0,0,5,15,0,32,33,34,
            35,36,37,38,8,9,10,0,12,13,
            14,0,23,2,0,8,9,10,0,12,
            13,14,56,57,56,57,0,38,32,33,
            34,35,36,37,23,0,0,0,0,32,
            33,34,35,36,37,8,9,10,0,12,
            13,14,0,0,0,0,8,9,10,5,
            12,13,14,0,0,39,0,15,0,32,
            33,34,35,36,37,39,23,39,0,15,
            32,33,34,35,36,37,8,9,10,0,
            12,13,14,0,0,0,0,8,9,10,
            5,12,13,14,8,9,10,0,12,13,
            14,0,1,2,61,4,23,0,0,0,
            0,0,15,0,69,0,0,0,0,75,
            0,0,69,15,23,15,15,0,0,0,
            0,0,0,0,0,0,0,52,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1874,697,1573,698,1323,1,1142,1087,2089,2090,
            2091,1585,2203,430,2204,61,1789,1771,1745,1884,
            1885,1886,1887,65,601,436,2190,2191,2192,1739,
            1452,1198,2035,2036,2034,2092,2037,2033,254,87,
            2040,2045,2044,2042,2043,2041,2046,2047,2039,2048,
            2049,2050,183,1321,1224,1187,1874,1,31,1,
            1223,192,1874,58,1,1,1,1881,1,1,
            1,1,2101,1426,1898,1899,60,50,769,1874,
            2053,1629,2054,541,466,1376,1364,184,1,1,
            1,1,1,1,1632,518,1,1,1,1,
            1,1,1,1,1,1,1,1,192,1,
            1,1,1874,1,1880,1,2071,191,286,562,
            1,1,1,1874,1,1,1,1440,1417,1406,
            1295,2089,2090,2091,535,2203,430,2204,53,1123,
            1440,1417,1406,1295,1,1,1,1,1,1,
            57,1874,1,1,1,1,1,1,1,1,
            1,1,1,1,191,1,1,1,1874,1,
            71,1,2071,192,1874,250,1,1,1,1874,
            1,1,1,1,1,1,59,1,1,1,
            1874,1903,47,1904,1095,1150,1685,1049,1874,2113,
            1,1,1,1,1,1,1095,1150,1,1,
            1,1,1,1,1,1,1,1,1,1,
            192,1,1,1,1874,2052,49,2051,2071,1874,
            1685,249,2089,2090,2091,1726,2203,430,2204,2089,
            2090,2091,1874,2203,430,2204,1619,570,1705,69,
            1440,1417,1406,1295,1678,1664,2035,2036,2034,2092,
            2037,2033,1874,1874,2040,2045,2044,2042,2043,2041,
            2046,2047,2039,2048,2049,2050,67,1321,1224,1187,
            1,1891,1573,1892,1428,1877,1142,1087,1678,1664,
            1,1585,1451,1874,1874,1879,1789,1771,1745,1884,
            1885,1886,1887,63,601,436,2190,2191,2192,1739,
            1452,1198,700,615,1207,1874,1891,1573,1892,1551,
            1877,1142,1087,677,42,266,1585,1451,1878,1,
            1178,1789,1771,1745,1884,1885,1886,1887,1876,601,
            436,2190,2191,2192,1739,1452,1198,1029,615,450,
            1,1891,1573,1892,1323,27,1142,1087,1874,1874,
            269,1585,1451,1806,254,3217,1789,1771,1745,1884,
            1885,1886,1887,1876,601,436,2190,2191,2192,1739,
            1452,1198,127,615,48,1874,186,3240,1685,3240,
            2089,2090,2091,989,2203,430,2204,263,2101,1222,
            1351,1,27,969,949,929,909,889,849,869,
            829,809,789,1874,2035,2036,2034,2092,2037,2033,
            615,56,2040,2045,2044,2042,2043,2041,2046,2047,
            2039,2048,2049,2050,1874,1891,1573,1892,1323,1877,
            1142,1087,1874,1874,1874,1585,1678,1664,1879,1883,
            1789,1771,1745,1884,1885,1886,1887,1874,601,436,
            2190,2191,2192,1739,1452,1198,1,2101,1426,1874,
            1891,1573,1892,1541,1877,1142,1087,1095,1150,1874,
            1585,1878,1620,1354,1879,1789,1771,1745,1884,1885,
            1886,1887,1876,601,436,2190,2191,2192,1739,1452,
            1198,254,2101,1426,1874,1,1,1,1,66,
            1,1,70,185,3242,1,3242,1878,1874,1882,
            1,1,1,1,1,1,1,1876,1,1,
            1,1,1,1,1,1,1874,2053,324,2054,
            68,1,1891,1573,1892,1323,1858,1142,1087,1,
            202,1803,1585,1351,89,272,3217,1789,1771,1745,
            1884,1885,1886,1887,2189,601,436,2190,2191,2192,
            1739,1452,1198,1874,1891,1573,1892,1323,615,1142,
            1087,518,207,3243,1585,3243,677,89,3217,1789,
            1771,1745,1884,1885,1886,1887,1874,601,436,2190,
            2191,2192,1739,1452,1198,1,1891,1573,1892,1323,
            1874,1142,1087,450,1874,1,1585,64,1159,254,
            3217,1789,1771,1745,1884,1885,1886,1887,1207,601,
            436,2190,2191,2192,1739,1452,1198,1874,1891,1573,
            1892,1323,1874,1142,1087,52,1874,2053,1585,2054,
            1874,541,466,1789,1771,1745,1884,1885,1886,1887,
            1874,601,436,2190,2191,2192,1739,1452,1198,1874,
            1891,1595,1892,1323,2133,1142,1087,51,209,2053,
            1585,2054,1874,541,466,1789,1771,1745,1884,1885,
            1886,1887,328,601,436,2190,2191,2192,1739,1452,
            1198,1874,1891,1605,1892,1323,257,1142,1087,1,
            208,695,1585,695,1879,1859,1,1789,1771,1745,
            1884,1885,1886,1887,1874,601,436,2190,2191,2192,
            1739,1452,1198,1874,1891,1613,1892,1323,1874,1142,
            1087,62,1874,1,1585,1802,1874,1878,1874,1789,
            1771,1745,1884,1885,1886,1887,1874,601,436,2190,
            2191,2192,1739,1452,1198,1874,1891,1627,1892,1323,
            1874,1142,1087,322,1874,2133,1585,1,1871,1877,
            1874,1789,1771,1745,1884,1885,1886,1887,1351,601,
            436,2190,2191,2192,1739,1452,1198,1,1891,1573,
            1892,1323,2132,1142,1087,320,1874,271,1585,1247,
            1874,1376,1364,1789,1771,1745,1884,1885,1886,1887,
            1351,601,436,2190,2191,2192,1739,1452,1198,17,
            615,1862,1876,1862,1862,1874,2133,178,178,178,
            1874,178,178,178,1874,18,55,1865,54,1865,
            1865,1874,1862,177,177,177,1874,177,177,177,
            41,178,178,178,178,178,178,1862,1865,1,
            1868,1222,1874,1874,1879,1351,128,177,177,177,
            177,177,177,1865,2089,2090,2091,129,2203,430,
            2204,223,615,1353,1874,2089,2090,2091,1874,2203,
            430,2204,1095,1150,1095,1150,28,1878,2035,2036,
            2034,2092,2037,2033,615,1874,28,130,208,2035,
            2036,2034,2092,2037,2033,2089,2090,2091,131,2203,
            430,2204,1874,292,1,1874,2089,2090,2091,1883,
            2203,430,2204,212,1874,498,1874,1827,1874,2035,
            2036,2034,2092,2037,2033,1901,1068,2952,251,1829,
            2035,2036,2034,2092,2037,2033,1,1,1,252,
            1,1,1,221,1874,285,253,2089,2090,2091,
            1805,2203,430,2204,2089,2090,2091,1874,2203,430,
            2204,269,2101,1222,1821,254,615,1874,190,1874,
            190,190,1831,1874,637,1874,1874,1874,1874,1882,
            1874,1874,1104,186,615,185,207,1874,1874,1874,
            1874,1874,1874,1874,1874,1874,1874,1805
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            427,1,146,41,146,146,146,146,146,146,
            146,146,146,146,146,146,55,3,365,362,
            369,367,375,373,377,376,379,378,10,146,
            55,55,55,55,218,218,300,55,347,347,
            247,146,146,146,146,146,146,146,146,146,
            146,146,146,146,146,146,146,146,146,146,
            146,146,146,146,146,146,146,146,146,146,
            146,146,218,218,218,218,131,304,137,314,
            216,215,272,48,284,129,284,129,129,284,
            129,284,75,169,169,218,45,362,362,367,
            367,367,367,365,365,373,369,369,376,375,
            312,378,377,350,350,350,350,107,300,304,
            140,45,98,222,218,390,317,222,129,347,
            347,129,347,146,107,304,292,98,45,221,
            137,218,298,75,217,319,45,222,131,451,
            131,491,493,134,481,131,292,98,146,146,
            45,222,314,307,306,304,319,218,131,451,
            491,491,481,105,425,347,146,133,481,107,
            98,292,45,45,218,390,317,298,451,481,
            484,451,491,493,422,493,109,45,347,146,
            107,292,319,451,486,493,481,146,347,45,
            493,218,217,481,386,146,385,165,304,481,
            481,348,486,146,165,493
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            89,0,75,23,2,61,76,16,17,11,
            4,6,7,62,63,56,57,64,65,66,
            67,70,71,72,73,74,77,78,52,69,
            79,80,81,82,83,85,84,86,87,88,
            68,38,89,39,58,5,0,5,68,39,
            58,38,75,23,18,19,20,21,22,2,
            16,17,11,4,6,7,24,25,26,27,
            28,29,30,31,3,1,53,54,55,48,
            40,45,43,44,42,41,46,47,49,50,
            51,37,34,32,33,36,35,8,9,10,
            13,12,14,0,5,52,23,61,16,17,
            11,4,6,7,24,25,18,29,30,31,
            2,19,20,21,22,26,27,28,1,3,
            15,0,69,23,61,0,58,5,32,8,
            9,10,12,13,14,19,20,21,22,26,
            27,28,3,16,17,11,6,7,24,25,
            18,29,30,31,4,2,1,0,9,32,
            37,10,36,35,34,8,33,12,13,14,
            61,76,16,17,11,6,7,62,63,56,
            57,64,65,66,67,70,71,72,73,74,
            77,78,69,79,80,81,82,83,84,85,
            86,87,88,4,2,23,39,38,5,0,
            32,58,5,16,17,11,4,6,7,24,
            25,18,29,30,31,2,1,3,19,20,
            21,22,26,27,28,0,5,38,18,19,
            20,21,22,1,3,2,16,17,11,4,
            6,7,24,25,26,27,28,29,30,31,
            0,48,40,45,43,44,42,41,46,47,
            49,50,51,68,75,37,34,32,33,36,
            35,8,9,10,12,13,14,39,1,5,
            38,2,23,4,0,2,5,39,38,75,
            23,68,0,4,2,23,38,5,33,40,
            8,41,53,34,42,35,43,44,36,9,
            45,46,32,54,37,55,47,48,10,49,
            50,51,12,13,14,59,3,1,0,69,
            79,80,81,82,83,84,85,86,87,88,
            15,4,62,63,6,7,57,56,64,65,
            66,67,70,71,11,72,73,74,58,38,
            52,89,77,78,68,75,5,39,0,4,
            33,40,8,41,53,34,42,35,43,44,
            36,9,45,46,32,54,37,55,47,48,
            10,49,50,51,1,3,12,13,14,59,
            0,5,39,52,69,0,18,19,20,21,
            22,1,3,2,16,17,11,4,6,7,
            24,25,26,27,28,29,30,31,60,0,
            33,40,8,41,53,34,42,35,43,44,
            36,9,45,46,32,54,37,55,47,48,
            10,49,50,51,1,3,12,13,14,60,
            5,52,0,75,5,4,1,2,68,0,
            1,3,5,52,39,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            93,9,17,9,17,17,17,17,17,17,
            17,17,17,17,17,17,89,9,9,9,
            9,9,9,9,9,9,9,9,9,17,
            89,89,89,89,52,52,80,1,22,22,
            48,90,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,90,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,52,52,52,52,9,19,32,79,
            10,10,59,12,60,30,60,75,75,60,
            74,60,54,9,9,52,34,9,9,9,
            9,9,9,9,9,9,9,9,9,9,
            9,9,9,9,9,9,9,46,98,9,
            36,34,96,33,52,84,51,33,77,77,
            77,77,77,17,15,9,46,96,34,33,
            39,52,42,2,9,86,34,33,72,46,
            9,46,24,70,46,9,46,96,17,17,
            34,33,41,10,10,19,86,52,9,102,
            46,77,26,14,9,77,17,28,26,46,
            96,39,34,34,52,84,51,64,46,26,
            110,113,77,24,9,9,16,34,77,17,
            15,39,106,102,44,24,26,17,77,34,
            24,52,52,26,111,17,9,44,19,26,
            26,9,44,17,66,62
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,81,80,79,78,67,77,76,0,28,
            0,102,0,71,9,62,4,0,36,52,
            0,73,0,54,0,37,0,101,0,91,
            0,9,4,21,0,4,9,0,22,0,
            20,48,47,41,39,9,0,9,90,0,
            9,20,0,67,63,64,65,66,55,31,
            0,97,0,48,47,41,39,36,0,99,
            0,92,0,94,68,0,27,0,20,47,
            48,9,0,36,52,9,26,0,35,9,
            30,0,9,89,0,59,0,48,47,36,
            0,83,9,35,0,95,9,26,0,9,
            72,0,9,35,69,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,10,11,48,64,76,
            8,96,97,98,3,6,7,68,81,82,
            83,84,1,12,13,93,94,95,100,101,
            102,69,44,55,60,63,72,90,42,47,
            52,56,61,62,66,67,74,75,78,79,
            80,91,54,70,73,16,17,89,30,107,
            4,14,15,18,19,20,21,29,31,22,
            23,24,25,26,92,5,27,28,32,33,
            34,35,36,37,38,39,40,41,108,45,
            46,49,50,51,53,57,58,59,65,71,
            77,88,99,103,104,105,106
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,115,119,120,121,122,0,123,
            124,125,126,127,128,129,130,131,132,111,
            110,143,0,0,0,136,135,164,0,114,
            142,0,0,0,155,0,112,160,162,0,
            163,0,0,0,134,173,174,175,0,117,
            151,161,170,0,145,150,0,165,168,169,
            172,0,146,147,148,149,152,0,154,159,
            176,113,116,118,133,137,138,139,140,141,
            144,0,153,157,0,0,158,167,109,0,
            0,0,156,0,166,171,0,177,178,0,
            179,180,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            120,151,206,130,59,69,159,26,186,35,
            87,105,75,6,12,16,40,83,52,141,
            202,224,228,52,52,195,52,1,1,1,
            44,47,92,115,47,232,20,145,177,214,
            137,165,165,165,165,165,95,95,95
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            128,128,128,128,4,4,128,32,192,10,
            4,10,80,10,10,10,10,4,4,139,
            10,10,4,56,80,199,65,4,4,4,
            10,50,4,10,118,10,23,148,180,217,
            139,167,169,171,173,175,102,97,110
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            65,63,4,65,28,28,63,56,109,49,
            28,44,28,5,5,5,49,28,28,69,
            5,4,4,28,28,18,28,102,101,100,
            47,61,28,41,51,2,71,69,110,4,
            69,80,79,78,77,76,44,42,44
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            52,52,52,52,58,58,52,52,95,38,
            58,38,19,38,38,38,38,58,58,75,
            38,38,58,4,19,68,32,58,58,58,
            38,2,58,38,1,38,69,1,101,38,
            75,3,53,54,54,48,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            19,19,34,19,23,23,19,93,-1,27,
            23,9,23,34,34,34,27,23,23,3,
            34,34,34,23,23,67,23,17,1,7,
            27,29,23,9,11,34,94,3,-1,34,
            3,20,20,20,20,20,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            152,23,0,110,0,157,2,31,0,111,
            0,157,2,30,0,157,2,29,0,205,
            116,0,31,150,0,161,181,116,15,169,
            0,112,0,0,165,116,2,154,0,165,
            116,2,0,168,2,0,159,116,0,173,
            0,195,116,23,0,9,110,0,126,32,
            195,116,23,0,69,132,110,0,126,195,
            116,32,23,0,195,116,32,23,0,132,
            110,0,126,32,23,0,126,195,116,23,
            0,126,23,0,148,0,2,0,166,111,
            0,2,111,0,165,116,2,148,0,2,
            0,165,111,0,158,2,0,160,0,161,
            193,116,15,134,201,53,0,112,0,161,
            193,116,15,201,53,0,142,0,113,0,
            200,116,142,0,116,142,0,156,113,0,
            189,116,15,199,134,198,174,0,189,116,
            15,198,174,0,188,0,149,0,148,0,
            147,0,146,0,145,0,212,94,0,77,
            2,114,111,113,0,212,127,137,2,98,
            0,53,0,0,137,78,124,0,29,131,
            0,157,2,18,0,161,181,116,15,127,
            157,2,0,157,2,0,111,3,0,118,
            0,112,0,197,2,111,0,137,23,111,
            0,137,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            593,0,1701,1787,1695,0,1304,0,1475,1294,
            1354,1426,1306,1222,1197,0,430,0,1253,533,
            368,0,1311,1221,398,396,1294,1671,1222,1197,
            1451,1522,0,1551,1541,1428,677,570,518,450,
            1376,1364,1207,1150,1095,1440,1417,1406,1295,1685,
            1678,1664,541,466,1789,1771,1585,1323,1142,1087,
            601,436,1745,1739,1452,1198,1159,1123,1104,1068,
            1049,1029,1009,745,1178,723,700,615,989,969,
            949,929,909,889,869,849,829,809,789,368,
            769,657,637,478,498,403,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,196,116,182,31,30,29,18,25,24,
            7,6,4,11,17,16,2,111,115,114,
            118,117,120,119,122,121,124,123,112,39,
            2,2,2,2,157,137,142,116,76,61,
            2,23,7,6,63,62,4,67,66,65,
            64,56,57,11,71,70,73,72,78,77,
            74,88,87,86,84,85,83,82,81,80,
            79,69,157,157,157,157,127,116,23,2,
            155,154,183,13,184,174,185,55,54,186,
            53,187,188,1,3,197,137,114,114,117,
            117,117,117,115,115,119,118,118,121,120,
            137,123,122,127,127,127,127,15,159,143,
            32,126,116,4,168,116,2,23,198,175,
            175,201,175,68,116,143,4,116,126,195,
            166,165,133,116,167,116,152,4,134,15,
            134,15,181,116,15,169,4,116,195,32,
            126,4,2,146,148,116,39,165,199,116,
            15,116,161,39,205,61,23,206,116,15,
            116,166,126,126,158,116,2,159,15,189,
            142,190,116,193,134,194,69,152,61,23,
            116,166,116,116,116,193,161,69,39,152,
            181,165,202,189,200,68,158,2,116,161,
            161,39,39,68,159,144
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "MYTHREAD",
            "THREADS",
            "UPC_MAX_BLOCKSIZE",
            "relaxed",
            "shared",
            "strict",
            "upc_barrier",
            "upc_localsizeof",
            "upc_blocksizeof",
            "upc_elemsizeof",
            "upc_notify",
            "upc_fence",
            "upc_wait",
            "upc_forall",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_cast_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_token",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "layout_qualifier"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 60,
           SCOPE_UBOUND      = 48,
           SCOPE_SIZE        = 49,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 226,
           NT_OFFSET         = 107,
           LA_STATE_OFFSET   = 2241,
           MAX_LA            = 2,
           NUM_RULES         = 367,
           NUM_NONTERMINALS  = 128,
           NUM_SYMBOLS       = 235,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1617,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 89,
           EOLT_SYMBOL       = 89,
           ACCEPT_ACTION     = 1858,
           ERROR_ACTION      = 1874;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
