//!HideMethodSimple
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    /*$*/void method2();/*$$*/
    std::string toString();
private:
	int i;
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    std::string toString();
private:
    int i;
    void method2();
};

#endif /*A_H_*/

//!HideMethodLineComment
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    //Kommentar
    /*$*/void method2();/*$$*/
    std::string toString();
private:
    int i;
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    std::string toString();
private:
    int i;
    //Kommentar
    void method2();
};

#endif /*A_H_*/

//!HideMethodBlockComment
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    /*Kommentar*/
    /*$*/void method2();/*$$*/
    std::string toString();

private:
    int i;
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    std::string toString();
private:
    int i;
    /*Kommentar*/
    void method2();
};

#endif /*A_H_*/

//!HideMethodLineCommentBehind
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    /*$*/void method2();/*$$*///Kommentar
    std::string toString();
private:
    int i;
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    std::string toString();
private:
    int i;
    void method2(); //Kommentar
};

#endif /*A_H_*/

//!HideMethodBlockCommentBehind
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    /*$*/void method2();/*$$*//*Kommentar*/
    std::string toString();
private:
    int i;
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    std::string toString();
private:
    int i;
    void method2(); /*Kommentar*/
};

#endif /*A_H_*/

//!HideMethodLineCommentWithSpace
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
		
    //Kommentar
    /*$*/void method2();/*$$*/
    std::string toString();
private:
    int i;
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    std::string toString();
private:
    int i;
    //Kommentar
    void method2();
};

#endif /*A_H_*/

//!HideMethodBlockCommentWithSpace
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();

    /*Kommentar*/
    /*$*/void method2();/*$$*/
    std::string toString();
private:
    int i;
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    std::string toString();
private:
    int i;
    /*Kommentar*/
    void method2();
};

#endif /*A_H_*/

//!HideMethodLineCommentWithSpaceBehind
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    /*$*/void method2();/*$$*///Kommentar
    std::string toString();
private:
    int i;
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    std::string toString();
private:
    int i;
    void method2(); //Kommentar
};

#endif /*A_H_*/

//!HideMethodBlockCommentWithSpaceBehind
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    /*$*/void method2();/*$$*//*Kommentar*/

    std::string toString();
private:
    int i;
};
#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    std::string toString();
private:
    int i;
    void method2(); /*Kommentar*/
};
#endif /*A_H_*/

//!HideMethodBigBlockComment
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    /*
         * Kommentar
         */
    /*$*/void method2();/*$$*/
    std::string toString();
private:
    int i;
};
#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    std::string toString();
private:
    int i;
    /*
         * Kommentar
         */
    void method2();
};
#endif /*A_H_*/

//!HideMethodBigBlockCommentBehind
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
	/*$*/void method2();/*$$*/		/*
							 * Kommentar
							 */
    std::string toString();
private:
    int i;
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    std::string toString();
private:
    int i;
    void method2(); /*
							 * Kommentar
							 */
};

#endif /*A_H_*/

//!HideMethodBigBlockCommentBeforeAndBehind
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    /*
     * Davor
     */
    /*$*/void method2();/*$$*/		/*
							 * Kommentar
							 */
    std::string toString();
private:
    int i;
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    std::string toString();
private:
    int i;
    /*
     * Davor
     */
    void method2(); /*
							 * Kommentar
							 */
};

#endif /*A_H_*/

//!HideMethodMixedCommentBeforeAndAfter
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    /*123*/
    /*$*/void method2();/*$$*///TEST
    std::string toString();
private:
    int i;
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    std::string toString();
private:
    int i;
    /*123*/
    void method2(); //TEST
};

#endif /*A_H_*/

//!HideMethodBlockCommentBeforeAndBehind
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    /*123*/
    /*$*/void method2();/*$$*//*TEST*/
    std::string toString();
private:
    int i;
};
#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    std::string toString();
private:
    int i;
    /*123*/
    void method2(); /*TEST*/
};
#endif /*A_H_*/

//!HideMethodNoChange
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
errors=1
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
private:
    /*$*/void method2();/*$$*/
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
private:
    void method2();
};

#endif /*A_H_*/

//!HideMethod2MethodsDifferentLine
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    /*$*/void method1();/*$$*/
    void method2();
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    void method2();
private:
    void method1();
};

#endif /*A_H_*/

//!HideMethod2MethodsSameLine
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    /*$*/void method1();/*$$*/void method2();
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    void method2();
private:
    void method1();
};

#endif /*A_H_*/

//!HideMethod2MethodsDifferentLineWithComment
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    //Kommentar
    /*$*/void method1();/*$$*/
    void method2();
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    void method2();
private:
    //Kommentar
    void method1();
};

#endif /*A_H_*/

//!HideMethod2MethodsSameLineWithComment
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    //Kommentar
    /*$*/void method1();/*$$*/void method2();
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    void method2();
private:
    //Kommentar
    void method1();
};

#endif /*A_H_*/

//!HideMethodSimple ImplementationFile
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    void method2();
    std::string toString();
private:
    int i;
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    std::string toString();
private:
    int i;
    void method2();
};

#endif /*A_H_*/

//@A.cpp
#include "A.h"

void A::/*$*/method2/*$$*/()
{
}

//!HideMethodSimple ImplementationFile with Comments BUG #60
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    //TEST 1
    void method2(); //TEST 2
    std::string toString();
private:
    int i;
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
    A();
    std::string toString();
private:
    int i;
    //TEST 1
    void method2(); //TEST 2
};

#endif /*A_H_*/

//@A.cpp
#include "A.h"

void A::/*$*/method2/*$$*/()
{
}

//!HideMethod with References 1
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=HideMethod.h
//@HideMethod.h
#ifndef HIDEMETHOD_H_
#define HIDEMETHOD_H_

class HideMethod {
public:
    HideMethod();
    virtual ~HideMethod();
    void /*$*/methode2/*$$*/();
    void methode3()
    {
        methode2();
    }

};

#endif /* HIDEMETHOD_H_ */

//=
#ifndef HIDEMETHOD_H_
#define HIDEMETHOD_H_

class HideMethod {
public:
    HideMethod();
    virtual ~HideMethod();
    void methode3()
    {
        methode2();
    }

private:
    void methode2();
};

#endif /* HIDEMETHOD_H_ */

//!HideMethod with References 2
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=HideMethod.h
//@HideMethod.h
#ifndef HIDEMETHOD_H_
#define HIDEMETHOD_H_

class HideMethod {
public:
    HideMethod();
    virtual ~HideMethod();
    void /*$*/methode2/*$$*/();
    void methode3();
};

#endif /* HIDEMETHOD_H_ */

//=
#ifndef HIDEMETHOD_H_
#define HIDEMETHOD_H_

class HideMethod {
public:
    HideMethod();
    virtual ~HideMethod();
    void methode3();
private:
    void methode2();
};

#endif /* HIDEMETHOD_H_ */

//@HideMethod.cpp
#include "HideMethod.h"

HideMethod::HideMethod() {
	// TODO Auto-generated constructor stub
}

HideMethod::~HideMethod() {
	// TODO Auto-generated destructor stub
}

void HideMethod::methode2() {
	//do nothing
}

void HideMethod::methode3()
{
	methode2();
}

//=
#include "HideMethod.h"

HideMethod::HideMethod() {
	// TODO Auto-generated constructor stub
}

HideMethod::~HideMethod() {
	// TODO Auto-generated destructor stub
}

void HideMethod::methode2() {
	//do nothing
}

void HideMethod::methode3()
{
	methode2();
}

//!HideMethod with References 3
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=HideMethod.h
warnings=1
//@HideMethod.h
#ifndef HIDEMETHOD_H_
#define HIDEMETHOD_H_

class HideMethod {
public:
	HideMethod();
	virtual ~HideMethod();
	void /*$*/methode2/*$$*/();
	void methode3();
};

class test{
public:
	void call(){
		HideMethod hm;
		hm.methode2();
	}
};

#endif /* HIDEMETHOD_H_ */

//=
#ifndef HIDEMETHOD_H_
#define HIDEMETHOD_H_

class HideMethod {
public:
	HideMethod();
	virtual ~HideMethod();
	void methode3();
private:
    void methode2();
};

class test{
public:
	void call(){
		HideMethod hm;
		hm.methode2();
	}
};

#endif /* HIDEMETHOD_H_ */

//!HideMethod with References 4
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=HideMethod.h
warnings=1
//@HideMethod.h
#ifndef HIDEMETHOD_H_
#define HIDEMETHOD_H_

class HideMethod {
public:
    HideMethod();
    virtual ~HideMethod();
    void /*$*/methode2/*$$*/();
    void methode3();
};

#endif /* HIDEMETHOD_H_ */

//=
#ifndef HIDEMETHOD_H_
#define HIDEMETHOD_H_

class HideMethod {
public:
    HideMethod();
    virtual ~HideMethod();
    void methode3();
private:
    void methode2();
};

#endif /* HIDEMETHOD_H_ */

//@HideMethod.cpp
#include "HideMethod.h"

HideMethod::HideMethod() {
	// TODO Auto-generated constructor stub

}

HideMethod::~HideMethod() {
	// TODO Auto-generated destructor stub
}

void HideMethod::methode2() {
	//do nothing
}

void HideMethod::methode3() {
	//do nothing
}

int main(){
	HideMethod hm;
	hm.methode2();
}

//=
//@HideMethod.cpp
#include "HideMethod.h"

HideMethod::HideMethod() {
	// TODO Auto-generated constructor stub

}

HideMethod::~HideMethod() {
	// TODO Auto-generated destructor stub
}

void HideMethod::methode2() {
	//do nothing
}

void HideMethod::methode3() {
	//do nothing
}

int main(){
	HideMethod hm;
	hm.methode2();
}

//!HideMethod with CPP File selection
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=HideMethod.h
//@HideMethod.h
#ifndef HIDEMETHOD_H_
#define HIDEMETHOD_H_

class HideMethod {
public:
    HideMethod();
    virtual ~HideMethod();
    void methode2();
    void methode3();
};

#endif /* HIDEMETHOD_H_ */

//=
#ifndef HIDEMETHOD_H_
#define HIDEMETHOD_H_

class HideMethod {
public:
    HideMethod();
    virtual ~HideMethod();
    void methode3();
private:
    void methode2();
};

#endif /* HIDEMETHOD_H_ */

//@HideMethod.cpp
#include "HideMethod.h"

HideMethod::HideMethod() {
	// TODO Auto-generated constructor stub
}

HideMethod::~HideMethod() {
	// TODO Auto-generated destructor stub
}

void HideMethod::/*$*/methode2/*$$*/() {
	//do nothing
}

void HideMethod::methode3()
{
	methode2();
}

//=
#include "HideMethod.h"

HideMethod::HideMethod() {
	// TODO Auto-generated constructor stub
}

HideMethod::~HideMethod() {
	// TODO Auto-generated destructor stub
}

void HideMethod::methode2() {
	//do nothing
}

void HideMethod::methode3()
{
	methode2();
}

//!HideMethodChangeToDefaultVisibility Class1
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
	/*$*/void method2();/*$$*/
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
public:
private:
	void method2();
};

#endif /*A_H_*/

//!HideMethodChangeToDefaultVisibility Class2
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
errors=1
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
	/*$*/void method2();/*$$*/
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

class A{
	void method2();
};

#endif /*A_H_*/

//!HideMethodChangeToDefaultVisibility Struct
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
#ifndef A_H_
#define A_H_

#include <iostream>

struct A{
	/*$*/void method2();/*$$*/
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include <iostream>

struct A{
private:
    void method2();
};

#endif /*A_H_*/

//!HideMethod CheckIfPrivateBug 1
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.cpp
//@A.cpp
struct other
{
  bool value() {return true;}
};

class Klass
{
public:
	void /*$*/set/*$$*/(bool b){}
	void test()
	{
	  other o;
	  this->set(o.value());
	}
};

//=
struct other
{
  bool value() {return true;}
};

class Klass
{
public:
	void test()
    {
        other o;
        this->set(o.value());
    }

private:
    void set(bool b)
    {
    }
};

//!HideMethod CheckIfPrivateBug 2
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.cpp
//@A.cpp
struct other
{
  bool value() {return true;}
};

class Klass
{
public:
	void set(bool b){}
	void test()
	{
	  other o;
	  this->/*$*/set/*$$*/(o.value());
	}
};

//=
struct other
{
  bool value() {return true;}
};

class Klass
{
public:
	void test()
    {
        other o;
        this->set(o.value());
    }

private:
    void set(bool b)
    {
    }
};

//!HideMethod CheckIfPrivateBug 3
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.cpp
warnings=1
//@A.cpp
struct other
{
  bool /*$*/value/*$$*/() {return true;}
};

class Klass
{
public:
	void set(bool b){}
	void test()
	{
	  other o;
	  this->set(o.value());
	}
};

//=
struct other
{
private:
    bool value() {return true;}
};

class Klass
{
public:
	void set(bool b){}
	void test()
	{
	  other o;
	  this->set(o.value());
	}
};

//!HideMethod CheckIfPrivateBug 4
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.cpp
//@A.cpp
struct other
{
  bool value() {return true;}
};

class Klass
{
public:
	void set(bool b){}
	void /*$*/test/*$$*/()
	{
	  other o;
	  this->set(o.value());
	}
};

//=
struct other
{
  bool value() {return true;}
};

class Klass
{
public:
	void set(bool b){}

private:
    void test()
	{
	  other o;
	  this->set(o.value());
	}
};

//!HideMethod Main
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.cpp
fatalerrors=1
//@A.cpp
int /*$*/main/*$$*/(){
	int i = 2;
	i++;
	return 0;
}

//=
int main(){
	int i = 2;
	i++;
	return 0;
}

//!HideMethod empty public sections
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
class Klass
{
public:
    void /*$*/to_move()/*$$*/;

private:
    void just_private();
};

//=
class Klass
{
public:
private:
    void just_private();
    void to_move();
};

//!HideMethod several private sections
//#org.eclipse.cdt.ui.tests.refactoring.hidemethod.HideMethodRefactoringTest
//@.config
filename=A.h
//@A.h
class Klass
{
public:
    void /*$*/to_move()/*$$*/;

private:
    void just_private();
private:
};

//=
class Klass
{
public:
private:
    void just_private();
    void to_move();
private:
};

