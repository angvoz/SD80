/*******************************************************************************
* Copyright (c) 2006, 2007 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.c99;

public class C99Parserprs implements lpg.lpgjavaruntime.ParseTable, C99Parsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,3,1,4,
            3,4,3,3,2,2,7,8,1,3,
            1,2,2,2,2,2,2,2,2,2,
            4,1,4,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,1,3,1,
            1,1,1,1,1,1,1,3,3,2,
            1,2,4,1,2,1,1,1,2,5,
            7,5,7,5,9,8,8,7,8,7,
            7,6,8,7,7,6,3,2,2,2,
            3,1,2,4,2,2,2,2,1,2,
            1,2,1,2,3,2,1,1,2,3,
            2,2,1,3,2,2,1,3,2,2,
            1,1,3,1,3,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,5,5,6,6,2,2,1,
            1,0,1,2,4,2,1,1,3,1,
            2,3,1,5,6,6,7,2,1,0,
            1,3,1,3,1,1,1,1,1,3,
            1,3,1,1,2,5,3,1,3,5,
            1,3,2,4,3,5,4,6,6,3,
            5,1,2,3,4,1,2,1,3,1,
            1,3,2,1,2,1,3,1,2,2,
            1,3,3,1,2,2,3,4,5,1,
            4,5,1,1,3,3,3,2,1,2,
            3,2,1,0,1,2,1,1,1,1,
            4,6,1,2,-69,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-35,-116,0,0,
            -2,0,0,0,0,0,0,0,0,-153,
            0,0,0,0,0,0,0,0,0,0,
            0,-8,-113,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-11,-58,-17,0,-74,
            0,0,0,0,0,0,0,-112,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-50,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-36,0,0,-141,0,0,0,0,
            0,0,0,0,0,-119,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-9,0,
            0,-19,0,0,0,0,0,0,0,0,
            -194,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-51,
            0,0,-22,-97,0,-133,0,0,0,0,
            0,0,0,0,0,-262,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-128,0,0,0,-62,0,
            0,0,0,0,0,0,0,0,0,0,
            -264,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-101,
            0,0,0,-64,0,0,-33,0,0,0,
            0,0,0,0,0,-265,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-34,0,0,-65,0,0,
            0,-66,0,0,0,0,0,0,0,0,
            -271,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-82,
            0,0,-178,-104,0,-134,0,0,0,0,
            0,0,0,0,0,-274,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-203,0,0,-200,-106,0,
            0,0,0,0,0,0,0,0,0,0,
            -283,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-84,
            0,0,0,-107,0,0,0,0,0,0,
            0,0,0,0,0,-284,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-243,0,0,-228,-108,0,
            0,-85,0,0,0,0,0,0,0,0,
            -286,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-86,
            0,0,-87,-183,0,0,0,0,0,0,
            0,0,0,0,0,-287,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-255,0,0,-256,-195,0,
            0,0,0,0,0,0,0,0,0,0,
            -289,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-266,
            0,0,-268,0,0,0,0,0,0,0,
            0,0,0,0,0,-293,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-88,0,0,-89,0,0,
            0,-90,0,0,0,0,0,0,0,0,
            -295,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-91,
            0,0,-92,-281,0,-93,-94,0,0,0,
            0,0,0,0,0,-296,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-96,0,0,-117,-118,0,
            0,-120,0,0,0,0,0,0,0,0,
            -297,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-121,
            0,0,-122,-124,0,-125,-127,0,0,0,
            0,0,0,0,0,-298,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-139,0,0,-175,-182,0,
            -184,-189,0,0,0,0,0,0,0,0,
            -300,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-193,
            0,0,-205,-206,0,-207,-208,0,0,0,
            0,0,0,0,0,-83,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-209,0,-210,-211,-212,
            0,0,-252,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-158,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-30,0,-131,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-70,
            0,0,-4,-31,0,0,-159,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-155,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-132,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-213,0,-47,-59,-114,0,0,
            -156,0,0,0,0,0,0,0,0,0,
            0,0,0,-49,0,0,0,0,0,-152,
            0,0,0,0,0,0,0,0,0,0,
            0,-214,0,-215,-216,0,0,-187,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-217,
            -218,-219,0,0,-160,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-130,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-239,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-103,0,0,0,0,0,
            0,0,-150,0,0,0,0,0,0,0,
            0,0,-220,-225,-236,-68,0,-241,-244,-245,
            0,0,-154,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-267,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-294,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-229,0,0,
            0,0,0,0,0,-151,0,0,0,0,
            0,0,0,0,0,-202,-55,-222,-18,0,
            -280,0,0,0,0,-146,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -232,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-137,0,0,-233,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-138,-173,0,-257,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-172,0,-176,
            0,-259,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-197,0,0,-261,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-198,-199,0,-273,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-221,0,
            -235,0,-276,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-237,-238,0,-277,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-250,-270,0,-291,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-56,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-135,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-98,0,0,-136,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -272,-275,0,-157,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-179,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-20,0,0,0,0,-147,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-279,0,0,-188,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-282,
            -285,0,-190,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-288,-290,0,-191,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-299,0,0,-263,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-52,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-100,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-142,0,0,0,0,0,0,0,
            0,-226,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-240,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-109,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-148,0,0,0,0,0,0,0,
            0,0,0,-126,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-161,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-75,0,0,0,0,
            0,0,0,0,0,-162,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-163,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-164,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-165,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-166,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -167,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-168,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-169,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-170,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-181,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-192,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-149,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-227,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-231,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-242,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-76,0,0,0,0,0,0,
            -77,0,0,0,0,0,0,0,0,-78,
            0,0,0,0,0,0,-79,0,0,0,
            0,0,0,-3,0,0,0,-246,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-143,0,0,
            0,0,0,0,0,-14,0,-23,0,0,
            -174,0,-29,0,0,-129,0,-144,0,0,
            0,0,0,0,0,0,0,-248,0,0,
            -102,0,-13,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-223,0,0,0,
            0,0,0,-1,0,0,0,0,0,0,
            0,0,-105,0,0,0,0,0,0,0,
            -111,0,0,0,0,-5,0,-115,0,-71,
            0,0,-53,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-6,0,0,-110,-123,
            0,0,0,0,0,-37,-28,-38,0,0,
            -196,0,0,0,0,-46,0,0,0,0,
            0,0,0,0,0,0,0,-48,0,0,
            0,0,0,0,0,-32,0,-40,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-57,0,-61,0,0,0,0,
            0,0,0,0,0,0,-99,0,0,0,
            0,0,0,-39,0,0,0,0,0,0,
            0,0,0,0,-41,0,-54,0,-72,0,
            0,0,0,0,0,0,0,-230,0,-95,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-251,0,0,
            0,0,-145,0,0,0,0,0,0,-201,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-254,-73,0,0,0,0,0,
            0,0,0,0,0,0,-80,0,0,0,
            0,0,0,-204,-253,0,0,-171,0,-180,
            0,0,0,-81,0,0,0,0,0,-185,
            0,0,0,0,-269,0,0,-7,0,0,
            0,0,0,-10,0,0,-60,0,0,0,
            -42,0,0,0,0,0,0,-63,-12,0,
            0,-15,-186,0,0,0,0,-25,-140,-26,
            0,0,0,0,0,0,-249,0,0,0,
            0,0,0,0,0,-27,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-234,0,0,
            0,-67,0,0,-16,0,0,-21,0,-24,
            0,0,0,-43,0,0,-224,0,0,0,
            0,0,0,-44,0,0,0,0,-45,-177,
            0,-247,0,-258,-260,0,0,-278,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-292,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            80,19,1,1,39,39,22,22,37,37,
            20,20,2,2,2,2,3,3,3,4,
            4,4,4,4,4,4,4,4,4,81,
            81,5,5,5,5,5,5,5,5,5,
            5,5,6,6,7,7,7,7,8,8,
            8,9,9,9,10,10,10,10,10,11,
            11,11,12,12,13,13,14,14,15,15,
            16,16,17,17,18,18,18,18,18,18,
            18,18,18,18,18,18,27,26,21,21,
            51,28,28,28,28,28,28,28,29,29,
            29,34,24,24,82,82,67,67,30,30,
            31,31,31,32,32,32,32,32,32,32,
            32,32,32,32,32,32,32,33,33,33,
            33,33,83,46,46,25,25,25,25,43,
            43,43,43,43,43,64,64,64,64,64,
            84,84,84,84,85,85,85,85,86,86,
            86,86,68,68,56,56,35,35,35,35,
            35,52,52,52,52,52,52,52,52,52,
            52,52,52,71,69,69,69,69,69,69,
            72,57,57,58,58,53,53,45,87,87,
            73,73,73,59,70,70,70,70,70,74,
            74,75,75,65,65,23,23,23,36,44,
            44,40,40,40,40,41,42,42,88,88,
            76,90,90,38,38,38,38,38,38,38,
            38,38,48,48,48,48,60,60,54,54,
            54,55,55,49,49,49,89,89,63,63,
            61,61,61,50,50,50,50,50,50,50,
            47,47,47,66,66,66,66,62,91,92,
            92,77,77,80,80,93,93,78,78,78,
            78,79,79,94,94,127,17,16,19,620,
            907,44,732,690,763,760,868,865,900,872,
            906,903,74,88,2434,108,973,49,800,92,
            1356,156,2580,106,91,93,94,95,96,977,
            931,17,16,19,620,42,44,732,690,763,
            1242,107,455,725,17,16,19,620,907,44,
            732,690,763,760,868,865,900,872,906,903,
            74,88,104,130,1005,2553,529,850,221,2760,
            931,17,16,19,620,42,39,378,1,17,
            16,19,620,907,44,732,690,763,760,868,
            865,900,872,906,903,74,88,2434,108,973,
            49,2793,92,1356,185,2580,106,91,93,94,
            95,96,977,399,368,103,931,17,16,19,
            620,42,44,1043,107,483,190,17,16,19,
            620,907,44,732,690,763,760,868,865,900,
            872,906,903,74,88,105,108,973,1140,473,
            92,225,573,2580,1012,91,93,94,95,96,
            977,190,17,16,19,620,907,44,732,690,
            763,760,868,865,900,872,906,903,74,88,
            495,108,973,772,524,92,413,24,2580,98,
            91,93,94,95,96,977,190,17,16,19,
            620,907,44,732,690,763,760,868,865,900,
            872,906,903,74,88,794,108,973,225,850,
            92,452,225,2580,114,91,93,94,95,96,
            977,190,17,16,19,620,907,44,732,690,
            763,760,868,865,900,872,906,903,74,88,
            906,108,973,225,456,92,184,29,2580,112,
            91,93,94,95,96,977,190,17,16,19,
            620,907,44,732,690,763,760,868,865,900,
            872,906,903,74,88,891,108,973,174,235,
            92,204,918,2580,1441,91,93,94,95,96,
            977,190,17,16,19,620,907,44,732,690,
            763,760,868,865,900,872,906,903,74,88,
            652,108,973,906,850,92,413,23,2580,126,
            91,93,94,95,96,977,190,17,16,19,
            620,907,44,732,690,763,760,868,865,900,
            872,906,903,74,88,860,108,973,906,850,
            92,187,237,2580,122,91,93,94,95,96,
            977,190,17,16,19,620,907,44,732,690,
            763,760,868,865,900,872,906,903,74,88,
            311,108,973,265,585,92,186,20,2580,125,
            91,93,94,95,96,977,190,17,16,19,
            620,907,44,732,690,763,760,868,865,900,
            872,906,903,74,88,737,108,973,906,850,
            92,205,48,2580,124,91,93,94,95,96,
            977,190,17,16,19,620,907,44,732,690,
            763,760,868,865,900,872,906,903,74,88,
            348,108,973,219,850,92,206,236,2580,121,
            91,93,94,95,96,977,190,17,16,19,
            620,907,44,732,690,763,760,868,865,900,
            872,906,903,74,88,906,108,973,906,593,
            92,207,280,2580,120,91,93,94,95,96,
            977,190,17,16,19,620,907,44,732,690,
            763,760,868,865,900,872,906,903,74,88,
            906,108,973,889,238,92,271,239,2580,118,
            91,93,94,95,96,977,190,17,16,19,
            620,907,44,732,690,763,760,868,865,900,
            872,906,903,74,88,263,108,973,711,281,
            92,265,241,2580,111,91,93,94,95,96,
            977,190,17,16,19,620,907,44,732,690,
            763,760,868,865,900,872,906,903,74,88,
            549,108,973,30,709,92,488,414,2580,123,
            91,93,94,95,96,977,190,17,16,19,
            620,907,44,732,690,763,760,868,865,900,
            872,906,903,74,88,919,108,973,359,694,
            92,27,753,2580,119,91,93,94,95,96,
            977,190,17,16,19,620,907,44,732,690,
            763,760,868,865,900,872,906,903,74,88,
            964,108,973,943,332,92,568,576,2580,117,
            91,93,94,95,96,977,190,17,16,19,
            620,907,44,732,690,763,760,868,865,900,
            872,906,903,74,88,974,108,973,992,730,
            92,64,472,2580,116,91,93,94,95,96,
            977,190,17,16,19,620,907,44,732,690,
            763,760,868,865,900,872,906,903,74,88,
            835,108,973,582,702,92,993,1002,2580,115,
            91,93,94,95,96,977,987,17,16,19,
            620,907,44,732,690,763,760,868,865,900,
            872,906,903,74,88,2434,1027,1005,1029,693,
            934,197,1512,931,17,16,19,620,42,44,
            732,690,763,760,868,865,900,872,906,903,
            73,2799,931,17,16,19,620,42,44,732,
            690,763,760,868,865,900,872,1272,833,1485,
            987,17,16,19,620,907,44,732,690,763,
            760,868,865,900,872,906,903,74,88,2434,
            195,1005,291,254,175,197,1512,931,17,16,
            19,620,42,44,732,690,763,760,868,865,
            900,1353,2466,133,134,2799,931,17,16,19,
            620,42,44,732,690,763,760,868,865,1245,
            515,223,224,1566,987,17,16,19,620,907,
            44,732,690,763,760,868,865,900,872,906,
            903,74,88,2434,863,1005,831,254,731,197,
            1512,931,17,16,19,620,42,44,732,690,
            763,760,868,1270,155,295,2533,196,129,2799,
            931,17,16,19,620,42,44,732,690,763,
            760,1204,353,102,471,924,222,1593,788,17,
            16,19,620,907,44,732,690,763,760,868,
            865,900,872,906,903,74,88,2434,1488,1005,
            746,952,739,1356,2838,931,17,16,19,620,
            907,44,732,690,763,760,868,865,900,872,
            906,903,74,85,1461,847,17,16,19,620,
            907,44,732,690,763,760,868,865,900,872,
            906,903,74,270,2591,665,17,16,19,620,
            907,44,732,690,763,760,868,865,900,872,
            906,903,74,270,2591,697,17,16,19,620,
            42,35,273,931,17,16,19,620,42,44,
            732,1079,272,994,966,1030,254,274,1018,975,
            980,799,275,931,17,16,19,620,42,44,
            732,690,763,1244,240,2541,133,276,847,17,
            16,19,620,907,44,732,690,763,760,868,
            865,900,872,906,903,74,270,2591,665,17,
            16,19,620,907,44,732,690,763,760,868,
            865,900,872,906,903,74,270,2591,697,17,
            16,19,620,42,35,273,931,17,16,19,
            620,42,44,732,1080,28,49,784,49,92,
            274,1008,2960,2960,904,275,931,17,16,19,
            620,42,44,732,690,1046,2647,241,2588,227,
            276,725,17,16,19,620,907,44,732,690,
            763,760,868,865,900,872,906,903,74,88,
            2960,1515,1005,2960,2488,155,2745,2874,725,17,
            16,19,620,907,44,732,690,763,760,868,
            865,900,872,906,903,74,88,2710,1542,1005,
            2960,2960,155,155,2875,756,17,16,19,620,
            907,44,732,690,763,760,868,865,900,872,
            906,903,74,88,18,226,1005,601,584,2960,
            592,1771,756,17,16,19,620,907,44,732,
            690,763,760,868,865,900,872,906,903,74,
            88,247,230,1005,636,2960,155,2960,1772,725,
            17,16,19,620,907,44,732,690,763,760,
            868,865,900,872,906,903,74,88,1359,1650,
            1005,2960,2960,155,768,2878,756,17,16,19,
            620,907,44,732,690,763,760,868,865,900,
            872,906,903,74,88,1360,22,1005,706,672,
            2960,155,1871,756,17,16,19,620,907,44,
            732,690,763,760,868,865,900,872,906,903,
            74,88,247,496,1005,776,2960,155,155,1897,
            756,17,16,19,620,907,44,732,690,763,
            760,868,865,900,872,906,903,74,88,531,
            566,1005,811,2960,155,155,1898,756,17,16,
            19,620,907,44,732,690,763,760,868,865,
            900,872,906,903,74,88,263,268,1005,986,
            2960,2960,2960,1924,609,17,16,19,620,907,
            44,732,690,763,760,868,865,900,872,906,
            903,74,550,2491,756,17,16,19,620,907,
            44,732,690,763,760,868,865,900,872,906,
            903,74,29,233,539,2960,21,931,17,16,
            19,620,907,44,732,690,763,760,868,865,
            900,872,906,903,74,88,2960,246,1005,2960,
            2960,155,155,658,931,17,16,19,620,907,
            44,732,690,763,760,868,865,900,872,906,
            903,74,88,671,741,1005,2960,2960,2960,2960,
            1271,2960,2960,2960,1538,1594,443,17,16,19,
            620,907,44,732,690,763,760,868,865,900,
            872,906,903,74,728,92,2960,2960,2960,247,
            931,17,16,19,620,42,44,732,690,1047,
            2960,2960,2960,155,2618,234,931,17,16,19,
            620,907,44,732,690,763,760,868,865,900,
            872,906,903,74,88,2896,2960,1005,2960,2960,
            155,155,1621,931,17,16,19,620,907,44,
            732,690,763,760,868,865,900,872,906,903,
            74,88,269,881,1005,2960,2960,155,155,1647,
            931,17,16,19,620,907,44,732,690,763,
            760,868,865,900,872,906,903,74,88,916,
            951,1005,2960,2960,155,2960,1648,931,17,16,
            19,620,907,44,732,690,763,760,868,865,
            900,872,906,903,74,88,1021,2960,1005,2960,
            2960,2960,2960,1843,819,17,16,19,620,907,
            44,732,690,763,760,868,865,900,872,906,
            903,74,270,1015,17,16,19,620,907,44,
            732,690,763,760,868,865,900,872,906,903,
            74,623,2870,931,17,16,19,620,42,44,
            1044,165,637,17,16,19,620,907,44,732,
            690,763,760,868,865,900,872,906,903,74,
            795,2960,2960,2960,2960,247,819,17,16,19,
            620,907,44,732,690,763,760,868,865,900,
            872,906,903,74,270,931,17,16,19,620,
            42,44,732,690,763,760,868,865,900,872,
            906,903,90,931,17,16,19,620,42,44,
            732,690,1076,277,931,17,16,19,620,42,
            44,732,690,763,760,868,865,900,872,906,
            903,90,2960,2960,2960,2960,214,931,17,16,
            19,620,907,44,732,690,763,760,868,865,
            900,872,906,903,74,84,931,17,16,19,
            620,42,38,2960,2960,1040,931,17,16,19,
            620,907,44,732,690,763,760,868,865,900,
            872,906,903,74,83,931,17,16,19,620,
            907,44,732,690,763,760,868,865,900,872,
            906,903,74,82,931,17,16,19,620,907,
            44,732,690,763,760,868,865,900,872,906,
            903,74,81,931,17,16,19,620,907,44,
            732,690,763,760,868,865,900,872,906,903,
            74,80,931,17,16,19,620,907,44,732,
            690,763,760,868,865,900,872,906,903,74,
            79,931,17,16,19,620,907,44,732,690,
            763,760,868,865,900,872,906,903,74,78,
            931,17,16,19,620,907,44,732,690,763,
            760,868,865,900,872,906,903,74,77,931,
            17,16,19,620,907,44,732,690,763,760,
            868,865,900,872,906,903,74,76,931,17,
            16,19,620,907,44,732,690,763,760,868,
            865,900,872,906,903,74,75,931,17,16,
            19,620,42,44,732,690,763,760,868,865,
            900,872,906,903,90,931,17,16,19,620,
            907,44,732,690,763,760,868,865,900,872,
            906,903,74,89,931,17,16,19,620,42,
            44,732,690,1078,2960,2960,2960,2960,201,931,
            17,16,19,620,907,44,732,690,763,760,
            868,865,900,872,906,903,74,798,931,17,
            16,19,620,42,44,732,690,763,760,868,
            865,900,872,906,903,90,931,17,16,19,
            620,42,44,732,690,763,760,868,865,900,
            872,906,903,90,931,17,16,19,620,42,
            37,931,17,16,19,620,42,36,2960,202,
            931,17,16,19,620,42,35,931,17,16,
            19,620,42,34,349,183,2960,830,931,17,
            16,19,620,907,44,732,690,763,760,868,
            865,900,872,906,903,74,30,141,931,17,
            16,19,620,42,47,2960,366,2960,92,139,
            143,277,2960,92,2960,2960,312,2493,931,17,
            16,19,620,42,46,317,2576,2781,824,2960,
            1438,539,2596,396,183,2434,2960,2960,135,2960,
            2960,2471,2960,2768,2774,2789,413,223,585,264,
            557,480,223,224,246,557,142,272,136,137,
            138,655,162,2960,253,251,264,253,140,144,
            1513,1008,255,235,1144,2960,2724,2960,833,266,
            2960,366,231,2434,289,2587,301,2960,731,1143,
            784,1806,400,195,1118,264,2473,480,223,224,
            400,1224,2816,2800,2798,2434,289,655,128,2476,
            288,1143,227,480,223,224,477,1009,1674,376,
            731,480,223,224,2960,557,92,565,710,2960,
            2960,880,288,484,223,935,92,162,2960,141,
            109,2960,285,287,321,2634,198,2434,366,1144,
            141,139,143,197,2960,2434,366,2546,710,2792,
            2750,1356,139,143,286,287,2960,400,2576,232,
            2792,2960,2960,1207,710,400,710,2434,588,2576,
            146,193,293,197,212,367,2777,567,480,223,
            224,145,557,2434,92,2434,480,223,224,197,
            1224,197,2960,1207,163,92,2434,323,279,92,
            2960,193,2471,2636,2960,519,2777,2960,235,1207,
            474,1207,2026,725,2788,2960,1744,193,1295,193,
            2842,624,2777,659,2777,2960,251,400,583,2748,
            2960,1513,1008,931,17,16,19,620,42,45,
            875,17,16,19,620,42,43,2434,480,223,
            224,2960,1009,2471,583,903,17,16,19,620,
            40,2960,2960,2960,2960,2960,1540,959,17,16,
            19,620,33,2434,324,369,2488,251,539,2471,
            377,199,1675,1008,959,17,16,19,620,32,
            731,2960,2960,2698,2960,312,266,2960,218,2960,
            195,246,2745,251,1043,2960,2960,856,1675,1008,
            131,226,264,264,2434,515,223,224,226,1060,
            2471,141,521,731,655,833,2434,141,1128,547,
            1145,2960,197,139,143,1674,2960,784,1619,139,
            143,2845,141,127,251,142,1162,2848,1436,1870,
            1008,141,1207,141,139,143,2765,140,144,267,
            194,2960,2850,139,143,139,143,264,731,141,
            588,2854,915,2864,2587,1077,211,588,1094,655,
            1111,139,143,211,1179,554,592,910,1569,2869,
            259,2434,694,592,1196,2960,292,1356,142,1213,
            539,142,92,142,731,731,2434,142,731,2960,
            140,144,2471,140,144,140,144,142,294,140,
            144,1378,142,246,1596,1623,731,2960,1677,140,
            144,2960,2960,2960,140,144,252,2960,2960,2960,
            2960,2960,2960,2960,2960,2960,113,2960,2960,2960,
            2960,2960,2960,2960,2960,2960,2960,2960,2960,2960,
            2002,2960,0,148,2962,0,2969,1,0,1,
            2963,0,1,974,0,1,2962,0,1,3216,
            0,9,11,0,1,3181,0,110,846,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,0,0,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,0,0,49,
            50,4,4,53,54,55,56,57,58,59,
            60,61,62,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,23,24,25,26,
            27,0,64,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            81,82,49,50,67,68,53,54,55,56,
            57,58,59,60,61,62,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,0,0,30,3,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,0,0,49,50,3,0,53,
            54,55,56,57,58,59,60,61,62,0,
            1,2,3,4,0,1,2,8,4,10,
            11,0,48,29,30,0,17,18,19,20,
            21,22,23,24,25,26,27,0,0,30,
            0,0,5,6,7,0,9,2,73,12,
            13,14,15,16,0,1,2,64,49,50,
            0,21,53,54,55,56,57,58,59,60,
            61,62,0,0,2,3,3,5,6,7,
            8,9,0,0,12,13,14,15,16,51,
            52,0,1,2,3,0,0,1,2,17,
            4,47,30,30,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,28,
            0,49,2,3,28,5,6,7,8,9,
            0,0,12,13,14,15,16,77,0,48,
            10,11,0,0,1,73,3,5,6,7,
            30,0,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,0,0,49,
            2,28,0,5,6,7,8,9,0,1,
            12,13,14,15,16,0,1,2,0,1,
            2,48,4,73,63,0,0,2,47,3,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,0,28,2,0,1,
            5,6,7,8,9,29,30,12,13,14,
            15,16,0,0,2,0,69,70,71,72,
            8,69,70,71,72,0,28,32,33,34,
            35,36,37,38,39,40,41,42,43,44,
            45,46,0,1,2,3,4,5,6,7,
            8,9,10,11,0,0,2,0,3,17,
            18,19,20,0,22,23,24,25,26,27,
            0,0,0,0,2,21,0,64,5,6,
            7,5,6,7,29,9,31,0,12,13,
            14,15,16,21,0,1,83,84,85,86,
            87,88,89,90,91,92,0,65,32,33,
            34,35,36,37,38,39,40,41,42,43,
            0,50,28,0,1,5,6,7,0,9,
            2,0,12,13,14,15,16,0,0,69,
            70,71,72,5,6,7,0,1,0,21,
            4,28,32,33,34,35,36,37,38,39,
            40,41,42,43,0,78,0,0,2,5,
            6,7,0,9,28,0,12,13,14,15,
            16,0,0,0,0,4,4,3,5,6,
            7,0,0,21,3,3,32,33,34,35,
            36,37,38,39,40,41,42,43,0,1,
            2,3,4,29,47,31,8,9,10,11,
            29,29,47,31,76,17,18,19,20,63,
            22,23,24,25,26,27,0,1,2,48,
            4,5,6,7,8,63,10,11,67,68,
            0,0,1,17,18,19,20,0,22,23,
            24,25,26,27,0,1,2,3,4,18,
            19,0,8,65,10,11,5,6,7,28,
            0,17,18,19,20,21,22,23,24,25,
            26,27,0,0,1,31,0,1,2,3,
            4,0,10,11,8,4,10,11,0,0,
            0,3,3,17,18,19,20,66,22,23,
            24,25,26,27,0,1,2,3,4,0,
            0,80,8,3,10,11,0,29,0,31,
            31,17,18,19,20,0,22,23,24,25,
            26,27,0,1,30,0,1,2,3,4,
            30,65,17,8,28,10,11,0,67,68,
            3,0,17,18,19,20,47,22,23,24,
            25,26,27,0,74,75,3,0,1,2,
            3,4,21,0,1,8,29,10,11,0,
            64,2,66,48,17,18,19,20,0,22,
            23,24,25,26,27,48,78,30,0,1,
            2,28,4,0,1,0,8,4,10,11,
            0,48,0,3,0,17,18,19,20,21,
            22,23,24,25,26,27,0,1,2,0,
            4,28,3,21,8,0,10,11,3,0,
            1,31,0,17,18,19,20,21,22,23,
            24,25,26,27,0,1,2,0,4,0,
            31,47,8,0,10,11,31,28,0,1,
            0,17,18,19,20,21,22,23,24,25,
            26,27,0,1,2,0,4,28,3,0,
            8,21,10,11,0,0,28,0,0,17,
            18,19,20,0,22,23,24,25,26,27,
            0,1,2,0,4,21,74,75,8,21,
            10,11,0,10,11,66,29,17,18,19,
            20,0,22,23,24,25,26,27,0,1,
            2,0,4,0,1,0,8,2,10,11,
            65,29,63,0,0,17,18,19,20,0,
            22,23,24,25,26,27,0,1,2,0,
            4,0,0,0,8,21,10,11,47,76,
            21,0,29,17,18,19,20,0,22,23,
            24,25,26,27,0,1,2,0,4,2,
            29,0,8,2,10,11,0,0,0,0,
            1,17,18,19,20,0,22,23,24,25,
            26,27,0,51,52,0,0,5,6,7,
            0,9,51,52,12,13,14,15,16,0,
            0,0,0,0,5,6,7,0,9,0,
            77,12,13,14,15,16,0,51,52,51,
            52,5,6,7,0,9,79,0,12,13,
            14,15,16,0,0,0,0,0,5,6,
            7,0,9,0,0,12,13,14,15,16,
            0,0,0,0,0,5,6,7,0,9,
            0,0,12,13,14,15,16,0,0,0,
            0,0,5,6,7,0,9,0,0,12,
            13,14,15,16,0,0,0,0,0,5,
            6,7,0,9,0,0,12,13,14,15,
            16,0,0,0,0,0,5,6,7,0,
            9,0,0,12,13,14,15,16,0,0,
            0,0,0,5,6,7,0,9,0,0,
            12,13,14,15,16,0,0,0,0,0,
            5,6,7,0,9,0,0,12,13,14,
            15,16,0,0,0,0,0,5,6,7,
            0,9,0,0,12,13,14,15,16,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            2960,1056,2942,1011,2420,1,1,1,2939,1,
            2411,2404,1,1,1,1,1,2427,2754,2737,
            2725,1206,2116,370,2972,2973,2974,2975,164,72,
            2970,2968,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,48,2960,3057,
            939,2703,2667,1208,2074,2548,976,426,938,318,
            970,343,942,9,2951,2951,2951,2951,2951,2951,
            2951,2951,2951,2951,2951,2951,2951,2951,2951,2951,
            2951,2951,2951,2951,2951,2951,2951,2951,2951,2951,
            2951,1,1954,2951,2951,2951,2951,2951,2951,2951,
            2951,2951,2951,2951,2951,2951,2951,2951,2951,2951,
            1102,1774,2951,2951,2478,2458,2951,2951,2951,2951,
            2951,2951,2951,2951,2951,2951,2960,1056,2942,2971,
            2420,1,1,1,2939,1,2411,2404,1,1,
            1,1,1,2427,2754,2737,2725,1206,2116,370,
            2972,2973,2974,2975,2960,2960,2970,2967,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,213,2960,3057,939,2971,2960,1208,
            2074,2548,976,426,938,318,970,343,942,2960,
            1056,974,2971,2420,2960,2616,3181,2963,2680,2411,
            2404,2960,2966,2608,2970,2960,2427,2754,2737,2725,
            1206,2116,370,2972,2973,2974,2975,153,54,2970,
            189,2960,3175,3176,3177,210,3128,3163,2932,3129,
            3127,3178,3130,3126,1,2616,3181,2045,3057,939,
            68,2586,1208,2074,2548,976,426,938,318,970,
            343,942,2960,1,1,2971,2971,1,1,1,
            1,1,64,2960,1,1,1,1,1,1343,
            1426,1,2517,2954,2967,2960,254,2517,3181,1230,
            1,2297,2970,2970,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1704,
            2960,3250,1,2971,1704,1,1,1,1,1,
            51,1,1,1,1,1,1,1166,2960,2966,
            1993,416,242,1,2744,284,2967,1,1,1,
            2970,2,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,59,2960,3250,
            2962,1704,61,3175,3176,3177,2963,3128,2960,1248,
            3129,3127,3178,3130,3126,1,2616,3181,260,2517,
            3181,2966,2680,283,3210,2960,2960,3163,101,2971,
            3132,3137,3136,3134,3135,3133,3138,3139,3131,3140,
            3141,3142,366,449,342,148,1704,2933,219,1437,
            3175,3176,3177,2963,3128,2678,2970,3129,3127,3178,
            3130,3126,2960,42,2962,2960,2334,2063,1830,1446,
            2963,2334,2063,1830,1446,2960,1704,3132,3137,3136,
            3134,3135,3133,3138,3139,3131,3140,3141,3142,366,
            449,342,2960,1056,2962,2965,1418,3175,3176,3177,
            2963,2349,2411,2404,2960,2960,3150,2960,2969,2427,
            2754,2737,2725,2960,2116,370,2972,2973,2974,2975,
            60,2960,2960,243,3150,1439,147,2278,1,1,
            1,3175,3176,3177,729,3128,2968,70,3129,3127,
            3178,3130,3126,1825,219,2550,2259,2240,2221,2202,
            2183,2145,2164,2126,2097,1275,2960,2964,3132,3137,
            3136,3134,3135,3133,3138,3139,3131,3140,3141,3142,
            148,1355,1704,220,1437,3175,3176,3177,2960,3128,
            3163,2960,3129,3127,3178,3130,3126,2960,2960,2334,
            2063,1830,1446,3175,3176,3177,258,2744,66,2468,
            1,1704,3132,3137,3136,3134,3135,3133,3138,3139,
            3131,3140,3141,3142,149,1147,1,2960,2948,3175,
            3176,3177,188,3128,1704,2960,3129,3127,3178,3130,
            3126,50,1,244,2960,2703,2667,2969,3175,3176,
            3177,2960,2960,2654,2967,2969,3132,3137,3136,3134,
            3135,3133,3138,3139,3131,3140,3141,3142,1,1056,
            2962,2965,1335,764,3060,2968,2963,1973,2411,2404,
            1354,1315,461,2968,1211,2427,2754,2737,2725,3210,
            2116,370,2972,2973,2974,2975,2960,1056,2962,2966,
            2420,3175,3176,3177,2963,3210,2411,2404,2478,2458,
            2960,31,1724,2427,2754,2737,2725,2960,2116,370,
            2972,2973,2974,2975,1,1056,2962,2969,2420,2985,
            2986,245,2963,2964,2411,2404,3175,3176,3177,1747,
            2960,2427,2754,2737,2725,2669,2116,370,2972,2973,
            2974,2975,53,2960,1846,2968,2960,1056,2962,2965,
            2420,49,1993,416,2963,2703,2411,2404,2960,1,
            62,2969,192,2427,2754,2737,2725,626,2116,370,
            2972,2973,2974,2975,2960,1056,2962,2971,2420,200,
            2960,486,2963,2971,2411,2404,2960,1398,71,2968,
            192,2427,2754,2737,2725,65,2116,370,2972,2973,
            2974,2975,2960,1873,2970,2960,1056,2962,2967,2420,
            2970,2964,1230,2963,2386,2411,2404,2960,2478,2458,
            2967,208,2427,2754,2737,2725,2368,2116,370,2972,
            2973,2974,2975,1,1363,330,2967,1,1056,2945,
            2971,2420,2665,220,2550,2939,2438,2411,2404,2960,
            3238,3092,1358,2966,2427,2754,2737,2725,2960,2116,
            370,2972,2973,2974,2975,2966,1147,2970,2960,1056,
            2962,1704,2420,260,2744,2960,2963,2680,2411,2404,
            1,2966,2960,2936,2960,2427,2754,2737,2725,2669,
            2116,370,2972,2973,2974,2975,1,1056,2962,2960,
            2420,1704,2969,1206,2963,1,2411,2404,191,261,
            2807,2968,63,2427,2754,2737,2725,2669,2116,370,
            2972,2973,2974,2975,2960,1056,2962,2960,2420,2960,
            2968,3059,2963,2960,2411,2404,191,1704,262,2807,
            224,2427,2754,2737,2725,2872,2116,370,2972,2973,
            2974,2975,2960,1120,2962,2960,2420,2386,2965,1,
            2963,228,2411,2404,1,2960,1704,209,224,2427,
            2754,2737,2725,67,2116,370,2972,2973,2974,2975,
            2960,1056,2962,52,2420,1206,1363,330,2963,229,
            2411,2404,86,1993,416,1358,4276,2427,2754,2737,
            2725,2960,2116,370,2972,2973,2974,2975,2960,1184,
            2962,2960,2420,2960,1900,2960,2963,3217,2411,2404,
            2964,2315,3209,87,41,2427,2754,2737,2725,2960,
            2116,370,2972,2973,2974,2975,1,1056,2945,2960,
            2420,248,58,69,2939,2872,2411,2404,1083,1211,
            2872,57,2315,2427,2754,2737,2725,110,2116,370,
            2972,2973,2974,2975,1,1056,2962,2960,2420,3242,
            2857,209,2963,2579,2411,2404,56,2960,55,2960,
            1927,2427,2754,2737,2725,2960,2116,370,2972,2973,
            2974,2975,157,1343,1426,2960,2960,3175,3176,3177,
            2960,3128,1343,1426,3129,3127,3178,3130,3126,161,
            2960,2960,2960,2960,3175,3176,3177,2960,3128,2960,
            1166,3129,3127,3178,3130,3126,151,1343,1426,1343,
            1426,3175,3176,3177,2960,3128,2957,2960,3129,3127,
            3178,3130,3126,155,2960,2960,2960,2960,3175,3176,
            3177,2960,3128,2960,2960,3129,3127,3178,3130,3126,
            159,2960,2960,2960,2960,3175,3176,3177,2960,3128,
            2960,2960,3129,3127,3178,3130,3126,160,2960,2960,
            2960,2960,3175,3176,3177,2960,3128,2960,2960,3129,
            3127,3178,3130,3126,156,2960,2960,2960,2960,3175,
            3176,3177,2960,3128,2960,2960,3129,3127,3178,3130,
            3126,152,2960,2960,2960,2960,3175,3176,3177,2960,
            3128,2960,2960,3129,3127,3178,3130,3126,158,2960,
            2960,2960,2960,3175,3176,3177,2960,3128,2960,2960,
            3129,3127,3178,3130,3126,154,2960,2960,2960,2960,
            3175,3176,3177,2960,3128,2960,2960,3129,3127,3178,
            3130,3126,150,2960,2960,2960,2960,3175,3176,3177,
            2960,3128,2960,2960,3129,3127,3178,3130,3126
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            375,404,155,15,375,344,356,504,504,356,
            504,356,340,49,344,356,1,264,1,264,
            356,1,335,356,356,356,356,344,155,505,
            115,49,56,62,438,112,264,264,264,264,
            335,335,356,356,356,155,125,49,372,438,
            53,188,49,364,443,293,264,290,14,264,
            264,290,335,71,70,71,479,15,126,49,
            443,186,36,36,36,36,36,36,36,36,
            36,75,141,240,237,244,242,250,248,252,
            251,254,253,226,364,62,112,178,445,296,
            222,178,206,290,406,290,71,290,36,471,
            49,125,34,116,116,471,51,51,21,51,
            51,115,116,78,262,36,262,53,445,186,
            141,141,470,470,316,36,372,372,257,473,
            36,36,36,36,36,36,36,36,36,36,
            36,36,36,36,36,36,36,36,36,36,
            36,36,36,36,36,36,36,36,36,36,
            178,364,372,367,371,371,178,222,293,115,
            36,259,290,123,116,116,139,36,182,36,
            36,36,262,21,71,120,372,372,371,222,
            188,438,369,440,237,237,242,242,242,242,
            240,240,248,244,244,251,250,262,253,252,
            364,438,440,445,471,296,36,222,206,406,
            36,34,34,116,372,51,372,372,184,188,
            471,36,119,225,505,36,186,473,443,372,
            411,36,367,411,222,222,316,116,316,116,
            34,21,36,21,21,222,186,369,445,372,
            21,372,316,21,372,316,316,116,372,124,
            71,372,21,21,372,21,21,372,21,372,
            316,116,21,184,21,21,21,21,372,21
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            12,5,13,14,15,6,9,16,7,28,
            29,48,21,47,1,4,2,30,3,0,
            54,56,21,60,62,57,50,58,59,55,
            53,61,49,30,3,24,25,26,27,8,
            18,19,17,10,11,22,23,20,4,2,
            1,0,47,28,1,29,48,30,3,64,
            0,21,28,1,64,29,30,3,0,64,
            31,3,29,0,65,48,31,47,66,80,
            18,19,17,4,10,11,67,68,51,52,
            69,70,71,72,74,75,76,77,78,81,
            82,83,84,85,86,87,88,89,90,91,
            92,64,28,1,29,30,3,0,64,28,
            66,0,73,79,31,54,56,21,60,62,
            57,50,58,59,55,53,61,49,30,3,
            18,19,17,4,10,11,22,23,20,1,
            24,25,26,27,2,8,44,45,46,14,
            16,13,9,12,15,40,32,37,35,36,
            34,33,38,39,41,42,43,5,6,7,
            0,50,0,31,3,28,66,1,24,25,
            26,27,2,8,18,19,17,4,10,11,
            22,23,20,21,0,18,19,17,4,10,
            11,22,23,20,1,2,8,24,25,26,
            27,65,3,0,21,64,83,84,85,86,
            87,89,88,90,91,92,4,67,68,10,
            11,52,51,69,70,71,72,74,75,17,
            76,77,78,31,81,82,65,48,29,30,
            3,47,0,12,32,5,33,44,13,34,
            14,35,36,15,6,37,38,9,45,16,
            46,39,40,7,41,42,43,2,8,31,
            3,0,65,3,9,5,6,7,18,19,
            17,4,10,11,22,23,20,1,2,8,
            24,25,26,27,0,1,24,25,26,27,
            2,8,18,19,17,4,10,11,22,23,
            20,48,3,0,29,2,31,3,0,8,
            44,45,46,40,32,37,35,36,34,33,
            38,39,41,42,43,47,30,16,13,9,
            12,15,14,5,6,7,4,2,28,1,
            29,48,3,0,12,32,5,33,44,13,
            34,14,35,36,15,6,37,38,9,45,
            16,46,39,40,7,41,42,43,2,8,
            30,3,49,73,0,4,47,2,1,0,
            12,32,5,33,44,13,34,14,35,36,
            15,6,37,38,9,45,16,46,39,40,
            7,41,42,43,2,8,63,4,0,4,
            1,28,48,3,12,32,5,33,44,13,
            34,14,35,36,15,6,37,38,9,45,
            16,46,39,40,7,41,42,43,63,8,
            2,0,48,3,4,1,28,0,12,32,
            5,33,44,13,34,14,35,36,15,6,
            37,38,9,45,16,46,39,40,7,41,
            42,43,8,2,21,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            91,85,64,34,95,67,68,9,9,68,
            11,68,78,70,81,82,85,18,85,18,
            82,85,18,82,68,68,68,67,18,131,
            35,113,85,85,122,20,18,102,18,102,
            18,11,82,82,82,109,45,113,56,122,
            20,41,99,18,48,51,102,46,34,124,
            102,46,11,46,85,85,128,34,1,76,
            48,18,41,41,41,41,41,41,41,41,
            41,85,30,85,85,85,85,85,85,85,
            85,85,85,85,18,85,20,58,116,4,
            53,58,52,46,113,46,46,46,41,11,
            113,13,40,35,35,7,85,85,22,85,
            85,85,35,85,85,41,85,20,17,4,
            30,30,26,26,55,41,56,56,85,88,
            41,41,41,41,41,41,41,41,41,41,
            41,41,41,41,41,41,41,41,41,41,
            41,41,41,41,41,41,41,41,41,41,
            58,84,56,74,85,56,58,53,60,35,
            41,85,46,85,35,35,37,41,85,41,
            41,41,85,22,46,106,56,56,56,53,
            41,122,20,87,85,85,85,85,85,85,
            85,85,85,85,85,85,85,85,85,85,
            84,122,86,17,85,61,41,53,52,113,
            41,40,40,35,56,85,56,56,43,41,
            85,41,28,85,85,41,18,89,48,56,
            120,41,75,120,53,53,55,35,55,35,
            40,22,41,22,22,53,4,20,17,56,
            22,56,55,22,56,55,55,35,56,85,
            46,56,22,22,56,22,22,56,22,56,
            55,35,22,43,22,22,22,22,56,22
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            25,34,82,4,19,0,83,0,72,0,
            59,0,4,34,37,67,25,19,0,38,
            0,34,4,28,0,1,0,77,0,19,
            45,4,0,19,20,0,19,25,46,20,
            4,0,4,62,19,37,0,19,22,0,
            19,4,39,0,4,22,0,60,0,39,
            4,23,0,71,70,69,52,43,0,19,
            42,90,0,19,50,40,0,69,70,71,
            52,35,36,23,0,40,22,19,50,0,
            93,25,19,0,25,19,78,0,42,76,
            0,58,19,45,0,92,91,0,25,19,
            94,0,40,19,0,89,19,25,0,19,
            25,48,0,19,45,53,0,19,25,46,
            24,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            2,85,99,9,51,67,79,98,72,10,
            11,47,58,63,66,75,8,6,7,71,
            3,12,13,86,87,88,89,1,42,93,
            92,50,55,59,64,65,69,70,77,78,
            81,82,83,57,73,76,29,91,102,80,
            16,17,48,49,52,53,54,60,61,62,
            68,74,30,31,90,4,14,15,18,19,
            20,21,84,22,23,24,25,26,56,5,
            27,28,32,33,34,35,36,37,38,39,
            40,41,43,44,45,94,95,96,97,100,
            101
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            103,0,0,109,114,115,116,117,118,119,
            120,121,122,123,124,125,126,113,0,107,
            128,105,145,131,137,108,127,130,0,0,
            0,0,0,132,144,146,106,166,104,163,
            0,165,143,152,157,135,153,164,174,176,
            129,147,156,167,173,151,0,155,160,172,
            175,177,111,139,162,112,134,138,148,149,
            150,154,159,0,161,169,180,182,0,0,
            110,133,136,140,141,142,158,168,170,171,
            178,179,181,183,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            164,164,38,44,70,95,101,70,134,24,
            54,62,76,107,112,76,15,31,50,85,
            143,160,184,188,15,147,1,10,35,59,
            67,117,122,192,89,154,125,154,154,6,
            81
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            22,19,4,4,22,22,22,19,140,29,
            4,29,22,22,22,19,22,29,4,83,
            22,29,29,4,19,151,4,13,29,4,
            29,120,120,29,92,157,128,178,171,8,
            83
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            4,4,38,38,70,69,69,70,31,50,
            38,42,70,69,69,70,47,50,38,53,
            24,5,4,4,47,17,77,62,50,38,
            40,85,84,3,53,6,32,4,4,91,
            53
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            31,29,65,65,31,31,31,29,79,48,
            65,48,31,31,31,29,31,48,65,30,
            31,48,48,65,29,47,65,24,48,65,
            48,16,16,48,2,48,50,48,48,64,
            30
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static char scopeStateSet[] = {
            4,4,119,119,167,167,167,167,85,125,
            119,155,167,167,167,167,106,125,119,113,
            132,4,4,4,106,34,1,108,125,119,
            155,168,168,4,113,7,85,4,4,2,
            113
        };
    };
    public final static char scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            152,28,0,104,0,193,0,31,0,192,
            120,0,153,0,167,120,21,0,42,106,
            0,106,0,155,120,1,151,0,105,0,
            155,120,1,0,162,1,0,119,9,161,
            120,28,0,119,161,120,9,28,0,119,
            9,28,0,119,161,120,28,0,119,28,
            0,155,120,1,141,0,145,1,0,175,
            120,21,160,44,0,175,120,21,44,0,
            146,0,107,0,188,120,146,0,120,146,
            0,158,107,0,158,120,21,173,46,0,
            158,120,21,173,45,0,158,120,21,46,
            0,158,120,21,45,0,171,144,0,143,
            0,170,144,0,129,57,0,80,2,108,
            105,107,0,129,123,127,1,60,0,56,
            130,0,183,120,21,0,127,82,117,0,
            29,126,0,164,1,0,105,115,0,164,
            1,20,0,167,120,21,123,164,1,0,
            105,3,0,112,42,106,0,105,3,0,
            112,106,0,182,1,105,0,127,28,105,
            0,127,1,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            725,2591,0,2754,2737,2725,1418,2710,1147,1102,
            1211,1166,1363,330,1230,1426,1343,2334,2063,1830,
            1446,2703,2478,2458,1993,416,1335,2427,2420,2411,
            2404,2116,370,1398,1677,1650,1623,1596,1378,1927,
            1569,1542,1515,1083,2438,2386,2026,1315,1488,1461,
            2368,2349,2002,2315,1900,1873,1846,1248,2297,1806,
            2278,2259,2240,2221,2202,2183,2164,2145,2126,2097,
            1275,1774,1747,1724,1184,1120,1295,2074,343,2045,
            1973,1056,1704,1954,1021,986,951,916,881,846,
            811,776,741,706,671,636,601,566,531,496,
            461,426,378,295,0,2026,1954,1398,1378,1315,
            1295,0,2636,2777,2634,2618,2588,0,833,655,
            515,484,480,413,2745,2488,2517,2744,2471,2799,
            0,1021,986,951,916,881,846,811,776,741,
            706,671,636,601,566,531,496,461,426,378,
            295,2842,1118,0,2745,2678,2517,2471,2541,2533,
            1140,2553,2608,2616,2466,0,2493,2434,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,181,120,126,194,153,170,46,45,171,
            44,172,144,120,144,144,173,21,173,21,
            144,160,21,144,172,171,170,153,191,189,
            169,1,145,143,120,141,21,120,21,120,
            21,120,144,144,144,120,21,29,145,120,
            141,64,149,4,1,28,120,158,146,159,
            120,158,120,175,160,176,195,126,120,149,
            1,21,20,23,22,11,10,4,17,19,
            18,105,1,109,108,111,110,113,112,115,
            114,117,116,106,4,143,141,120,120,9,
            119,120,4,158,120,158,175,29,64,29,
            120,183,61,53,55,59,58,50,57,62,
            60,122,128,2,56,54,135,141,120,120,
            1,1,80,66,1,28,164,127,122,146,
            11,10,68,67,4,72,71,70,69,51,
            52,17,75,74,77,76,82,81,78,92,
            91,90,88,89,87,86,85,84,83,64,
            120,161,155,126,156,190,120,119,161,188,
            47,145,29,3,127,184,1,1,129,1,
            1,29,152,47,167,120,164,164,182,127,
            123,120,151,1,108,108,110,110,110,110,
            109,109,112,111,111,114,113,127,116,115,
            161,120,1,29,29,161,9,119,4,29,
            47,147,121,127,127,50,127,127,29,192,
            66,28,193,123,123,29,21,149,1,162,
            120,47,149,120,119,119,121,127,121,127,
            121,123,1,123,123,152,120,151,120,155,
            123,127,121,123,127,121,121,127,127,129,
            167,155,123,123,127,123,123,127,123,127,
            121,123,79,29,123,123,123,123,127,123
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "#",
            "##",
            "nl",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "EOF_TOKEN",
            "identifier",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "Invalid",
            "PlaceMarker",
            "Parameter",
            "DisabledMacroName",
            "Completion",
            "EndOfCompletion",
            "SingleLineComment",
            "MultiLineComment",
            "ERROR_TOKEN",
            "ident",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "argument_expression_list",
            "type_name",
            "initializer_list",
            "assignment_expression",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "expression_in_statement",
            "expression_list",
            "constant_expression",
            "statement",
            "compound_statement",
            "label_identifier",
            "block_item_list",
            "block_item",
            "declaration",
            "goto_identifier",
            "declaration_specifiers",
            "init_declarator_list",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifiers",
            "storage_class_specifier",
            "type_qualifier",
            "function_specifier",
            "type_specifier",
            "struct_or_union_specifier",
            "enum_specifier",
            "typedef_name",
            "init_declarator",
            "declarator",
            "initializer",
            "struct_or_union_identifier",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "struct_declarator",
            "enum_identifier",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer",
            "function_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "function_declarator",
            "knr_direct_declarator",
            "identifier_list",
            "knr_function_declarator",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "abstract_declarator",
            "direct_abstract_declarator",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "external_declaration_list",
            "external_declaration",
            "declaration_list"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 49,
           SCOPE_UBOUND      = 40,
           SCOPE_SIZE        = 41,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 300,
           NT_OFFSET         = 101,
           LA_STATE_OFFSET   = 3254,
           MAX_LA            = 2147483647,
           NUM_RULES         = 294,
           NUM_NONTERMINALS  = 95,
           NUM_SYMBOLS       = 196,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 2524,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 73,
           EOLT_SYMBOL       = 73,
           ACCEPT_ACTION     = 2932,
           ERROR_ACTION      = 2960;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
