/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.upc;

public class UPCExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, UPCExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            4,1,4,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,5,9,8,
            3,2,2,2,3,2,4,2,2,2,
            2,2,1,1,1,1,2,1,2,2,
            2,1,2,2,1,2,2,1,2,2,
            1,2,2,1,3,1,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,6,8,0,0,1,1,3,3,3,
            0,1,0,1,2,4,2,1,1,1,
            3,1,1,2,3,7,8,0,1,0,
            1,3,1,3,1,1,1,1,1,1,
            3,1,1,1,1,1,3,1,2,2,
            1,5,3,1,3,5,1,3,1,3,
            2,4,3,5,4,6,6,3,5,1,
            2,3,4,5,0,1,2,1,3,1,
            1,3,2,1,1,1,1,2,1,2,
            3,1,1,1,3,1,2,2,2,3,
            4,5,1,7,3,0,0,1,1,3,
            3,4,1,1,2,3,2,3,2,1,
            0,1,2,1,1,1,1,1,2,4,
            3,6,2,4,1,1,1,1,1,2,
            4,2,4,2,4,1,1,2,1,1,
            1,3,3,2,1,3,2,3,2,3,
            2,2,11,10,10,9,10,9,9,8,
            10,9,9,8,9,8,8,7,10,9,
            9,8,9,8,8,7,1,1,-43,0,
            0,0,0,0,0,0,0,-2,0,0,
            0,0,0,0,0,0,0,0,-4,-17,
            0,0,0,0,-5,0,0,0,0,0,
            0,0,0,0,-137,0,0,0,0,0,
            0,0,0,-229,0,0,0,0,0,0,
            0,0,0,0,-19,0,-36,-20,-21,-157,
            -22,0,0,0,0,0,-9,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -138,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -204,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -62,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-23,-24,-25,
            0,-26,0,-44,0,0,0,0,0,0,
            0,0,-130,-40,0,-152,0,0,0,0,
            -37,0,0,-45,0,0,0,0,0,0,
            0,0,0,0,0,-177,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-147,-124,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-156,0,0,0,
            0,-6,0,0,0,0,0,0,0,0,
            0,0,-89,0,-85,-27,-194,0,-10,0,
            0,0,0,0,0,0,0,0,-41,-74,
            0,-28,0,-29,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-83,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-98,0,-200,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-3,
            0,0,0,0,0,0,0,0,-75,0,
            0,0,0,0,0,0,0,0,0,-58,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-132,0,-99,-100,-101,-102,
            -80,0,-131,0,0,0,0,0,0,0,
            0,-103,0,0,0,0,0,0,0,0,
            0,0,0,0,-125,-143,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-104,0,-30,
            0,0,0,0,0,0,0,0,-76,0,
            0,0,0,0,0,0,0,0,0,-63,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-64,
            0,0,0,0,0,0,0,0,-77,0,
            0,0,0,0,0,0,0,0,0,-65,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-66,
            0,0,0,0,0,0,0,0,-78,0,
            0,0,0,0,0,0,0,0,0,-67,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-68,
            0,0,0,0,0,0,0,0,-79,0,
            0,0,0,0,0,0,0,0,0,-69,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-70,
            0,0,0,0,0,0,0,0,-128,0,
            0,0,0,0,0,0,0,0,0,-71,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-72,
            0,0,0,0,0,0,0,0,-145,0,
            0,0,0,0,0,0,0,0,0,-73,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-162,
            0,0,0,0,0,0,0,0,-171,0,
            0,0,0,0,0,0,0,0,0,-163,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-180,
            0,0,0,0,0,0,0,0,-105,0,
            0,0,0,0,0,0,0,0,-203,0,
            0,0,0,0,0,0,0,-106,0,0,
            0,0,0,0,0,0,0,-11,0,0,
            0,0,0,0,-107,0,-53,0,0,0,
            0,0,0,0,0,-211,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-219,0,0,0,0,0,
            0,0,0,-108,0,0,0,0,0,0,
            0,0,0,-12,0,0,0,0,0,0,
            -121,0,-13,0,0,0,0,0,0,0,
            -87,-227,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -146,-109,0,0,0,0,-133,-142,-144,0,
            -82,-88,0,0,0,0,-166,-14,0,0,
            0,0,0,0,-86,0,-110,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-111,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-61,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-97,-191,-59,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-7,0,0,0,0,0,0,0,0,
            0,-134,-112,0,-90,0,-150,0,0,0,
            0,-91,0,-208,0,0,0,0,0,0,
            0,-167,0,0,0,0,0,0,-188,0,
            0,-92,0,0,0,0,0,-161,0,0,
            0,0,0,0,0,0,0,-197,0,-226,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-93,0,-55,0,0,0,0,
            0,0,0,0,-212,0,0,0,-54,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-140,0,0,0,0,0,
            0,0,0,0,-135,-113,0,-56,0,0,
            0,0,0,0,0,0,-95,0,0,-57,
            0,0,0,0,0,0,0,0,-218,0,
            0,0,0,0,0,-49,0,0,0,0,
            0,0,0,0,0,0,-50,0,0,0,
            0,0,0,0,0,-136,0,-51,0,0,
            0,0,0,0,0,0,-164,0,-52,0,
            0,0,0,0,0,0,0,-221,0,-190,
            -153,-155,-84,0,0,-168,0,0,0,0,
            0,0,-127,0,0,0,0,0,0,0,
            0,-94,0,-46,0,0,0,0,0,0,
            0,0,-169,0,0,0,0,0,0,0,
            0,0,-96,0,0,0,0,-228,0,0,
            0,0,0,0,0,0,0,-8,0,0,
            0,0,0,0,0,0,0,0,0,-42,
            -185,-129,-158,-222,0,0,0,0,0,-114,
            0,0,-115,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-181,0,0,-151,
            0,0,0,0,0,0,-160,0,-209,0,
            -176,-116,-174,-189,-182,0,0,0,0,0,
            0,0,0,0,0,0,-179,-117,-202,0,
            0,0,-165,0,0,0,0,0,0,0,
            -47,0,0,0,0,0,0,0,-18,0,
            -31,0,-183,0,0,-192,0,0,-32,0,
            -33,0,0,-193,0,0,0,0,-118,0,
            -210,0,-119,0,0,0,0,0,0,0,
            0,0,-120,-34,0,0,0,0,0,0,
            0,0,0,0,-123,0,-139,0,-148,-35,
            0,-186,-187,0,-154,0,-217,0,0,0,
            0,-122,-159,0,0,-48,0,0,0,0,
            0,0,0,0,-214,0,0,-126,0,0,
            0,-81,0,0,0,0,0,0,-223,-175,
            0,-141,-215,0,0,-173,-206,0,-207,0,
            0,0,0,-172,0,0,-178,0,0,0,
            0,0,0,0,0,0,0,0,-198,-199,
            -220,0,0,-184,0,0,0,-196,0,0,
            -15,0,0,0,0,0,0,-16,0,0,
            0,0,0,-149,-1,0,0,0,0,0,
            0,-225,0,0,0,0,0,-195,0,0,
            0,0,-205,-38,0,0,0,0,-224,0,
            0,0,0,-201,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-39,
            0,0,-216,-60,0,-170,0,0,0,0,
            0,0,0,0,0,0,-213,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            89,9,21,21,20,20,37,37,72,72,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,54,54,73,
            73,5,5,5,5,5,5,5,5,5,
            5,5,6,6,7,7,7,7,8,8,
            8,10,10,10,11,11,11,11,11,12,
            12,12,13,13,14,14,15,15,16,16,
            17,17,18,18,19,19,19,19,19,19,
            19,19,19,19,19,19,104,30,27,90,
            90,75,75,46,105,105,105,105,105,105,
            105,106,106,106,107,107,112,112,113,113,
            108,108,109,109,109,115,115,110,110,110,
            110,111,111,111,111,111,114,114,26,26,
            26,26,26,32,32,32,81,81,76,76,
            76,76,77,77,77,78,78,78,79,79,
            79,80,80,80,116,116,117,117,118,33,
            35,35,35,35,35,55,57,57,57,57,
            57,57,57,57,57,57,57,57,66,66,
            28,28,63,63,91,92,67,67,64,64,
            64,68,82,82,83,83,69,69,69,31,
            93,93,84,85,85,85,65,65,94,86,
            86,87,87,70,70,22,23,23,23,34,
            51,51,38,38,38,38,41,41,43,39,
            39,40,44,44,119,119,42,120,120,95,
            95,29,29,29,29,29,29,29,29,29,
            88,52,52,52,52,36,59,59,58,58,
            58,60,60,53,53,96,96,45,45,61,
            61,61,47,47,47,48,49,49,49,50,
            50,50,50,56,56,56,62,97,74,74,
            74,74,71,98,99,99,100,100,101,101,
            121,121,122,122,123,123,123,123,125,125,
            124,124,124,126,126,89,89,1,1,1,
            5,5,5,5,5,5,22,22,24,24,
            25,25,102,102,102,105,127,127,127,127,
            127,127,127,110,110,110,110,110,110,110,
            110,110,110,110,110,110,110,110,110,110,
            110,110,110,110,110,110,110,128,128,1,
            14,19,15,390,624,44,428,425,472,431,
            429,509,508,512,510,622,606,74,91,39,
            65,134,215,326,327,680,14,19,15,390,
            324,136,133,135,159,649,14,19,15,390,
            42,44,428,425,152,431,429,509,508,512,
            510,622,606,73,138,66,165,243,59,64,
            551,142,142,145,148,151,1305,649,14,19,
            15,390,42,39,389,1171,603,1312,1502,1523,
            1276,556,14,19,15,390,624,44,428,425,
            430,431,429,509,508,512,510,622,606,74,
            283,618,14,19,15,390,624,44,428,425,
            430,431,429,509,508,512,510,622,606,74,
            283,649,14,19,15,390,42,44,428,425,
            23,431,429,509,508,512,1563,288,32,171,
            333,284,61,1693,649,14,19,15,390,42,
            44,728,289,884,379,587,132,288,1737,1577,
            294,243,1774,1693,649,14,19,15,390,42,
            44,729,289,280,1712,1705,347,14,19,15,
            390,624,44,428,425,430,431,429,509,508,
            512,510,622,606,74,283,225,835,14,19,
            15,390,624,44,428,425,1722,431,429,509,
            508,512,510,622,606,74,1198,691,134,215,
            326,327,711,14,19,15,390,322,136,133,
            135,159,290,933,22,151,176,663,1693,649,
            14,19,15,390,42,38,1314,291,1734,379,
            379,138,539,165,954,134,215,326,327,142,
            145,148,151,1305,277,144,133,135,159,16,
            1592,1591,1171,603,1312,1502,1523,1276,281,14,
            19,15,390,624,44,428,425,1708,431,429,
            509,508,512,510,622,606,74,755,866,241,
            587,14,19,15,390,624,44,428,425,197,
            431,429,509,508,512,510,622,606,74,283,
            649,14,19,15,390,624,44,428,425,379,
            431,429,509,508,512,510,622,606,74,91,
            649,14,19,15,390,42,44,428,425,1608,
            431,429,509,508,1243,76,292,905,81,115,
            341,235,1693,461,14,19,15,390,42,44,
            428,425,400,431,429,509,508,512,510,622,
            606,93,20,526,334,235,314,14,19,15,
            390,624,44,428,425,389,431,429,509,508,
            512,510,622,606,74,1467,243,242,480,1307,
            649,14,19,15,390,624,44,428,425,379,
            431,429,509,508,512,510,622,606,74,92,
            649,14,19,15,390,624,44,428,425,1649,
            431,429,509,508,512,510,622,606,74,85,
            649,14,19,15,390,624,44,428,425,379,
            431,429,509,508,512,510,622,606,74,84,
            649,14,19,15,390,624,44,428,425,1653,
            431,429,509,508,512,510,622,606,74,83,
            649,14,19,15,390,624,44,428,425,379,
            431,429,509,508,512,510,622,606,74,82,
            649,14,19,15,390,624,44,428,425,1663,
            431,429,509,508,512,510,622,606,74,81,
            649,14,19,15,390,624,44,428,425,379,
            431,429,509,508,512,510,622,606,74,80,
            649,14,19,15,390,624,44,428,425,21,
            431,429,509,508,512,510,622,606,74,79,
            649,14,19,15,390,624,44,428,425,379,
            431,429,509,508,512,510,622,606,74,78,
            649,14,19,15,390,624,44,428,425,275,
            431,429,509,508,512,510,622,606,74,77,
            649,14,19,15,390,624,44,428,425,379,
            431,429,509,508,512,510,622,606,74,76,
            649,14,19,15,390,624,44,428,425,281,
            431,429,509,508,512,510,622,606,74,75,
            649,14,19,15,390,624,44,428,425,379,
            431,429,509,508,512,510,622,606,74,1682,
            649,14,19,15,390,624,44,428,425,282,
            431,429,509,508,512,510,622,606,74,1683,
            649,14,19,15,390,42,44,428,425,511,
            431,429,509,508,512,510,622,606,93,649,
            14,19,15,390,42,44,428,425,80,431,
            429,509,508,512,510,622,606,93,649,14,
            19,15,390,42,37,249,1804,649,14,19,
            15,390,42,44,428,1088,649,14,19,15,
            390,42,44,428,425,1837,431,429,509,508,
            512,510,622,606,93,649,14,19,15,390,
            42,44,428,425,193,431,429,509,508,512,
            510,622,606,93,649,14,19,15,390,42,
            36,6,214,649,14,19,15,390,42,35,
            451,378,649,14,19,15,390,42,44,428,
            425,204,431,429,509,508,512,510,622,606,
            93,881,70,134,215,326,327,441,235,1043,
            1513,53,277,141,133,135,159,1048,649,14,
            19,15,390,42,34,385,1594,120,205,245,
            276,257,215,326,327,189,140,279,165,220,
            1322,223,1486,225,226,231,276,1675,269,1215,
            605,274,265,737,278,220,1322,223,1486,225,
            226,231,266,1692,269,1215,605,274,1329,649,
            14,19,15,390,42,44,428,425,949,431,
            429,509,508,512,510,1560,225,924,649,14,
            19,15,390,42,44,428,425,263,431,429,
            509,1303,742,14,19,15,390,320,134,215,
            326,327,441,200,328,123,276,235,137,133,
            135,159,950,1677,232,221,1322,223,1486,225,
            226,231,455,1554,271,1215,605,274,332,379,
            188,139,325,165,134,215,326,327,382,143,
            146,149,152,1305,147,133,135,159,722,227,
            232,230,220,1322,223,1486,225,226,231,1554,
            256,215,326,327,358,1751,649,14,19,15,
            390,42,44,428,425,441,431,429,1144,649,
            14,19,15,390,42,44,428,1105,220,1322,
            223,1486,225,226,231,861,725,1551,200,202,
            1197,1751,1651,1749,1338,188,20,1429,649,14,
            19,15,390,42,44,428,425,380,431,1192,
            649,14,19,15,390,42,44,428,425,1075,
            431,1217,1302,1685,201,202,649,14,19,15,
            390,42,44,428,425,212,730,649,14,19,
            15,390,42,44,428,425,441,742,649,14,
            19,15,390,42,44,428,425,235,778,649,
            14,19,15,390,42,44,428,425,674,1069,
            884,6,6,918,190,1456,473,1554,244,1727,
            1726,1720,1552,430,14,19,15,390,42,35,
            233,196,978,279,649,14,19,15,390,42,
            47,1405,276,53,248,229,220,1322,223,1486,
            225,226,231,995,134,215,326,327,705,1329,
            269,1215,605,274,150,133,135,159,773,14,
            19,15,390,40,949,134,215,326,327,1675,
            994,1051,993,6,53,153,133,135,159,1201,
            694,566,1595,550,1677,1277,221,1322,223,1486,
            225,226,231,257,215,326,327,583,1191,276,
            430,14,19,15,390,42,35,1047,1675,722,
            1675,518,487,6,993,518,1754,269,1215,605,
            274,333,1758,566,1692,261,1528,441,799,441,
            989,268,1679,430,14,19,15,390,42,35,
            1191,649,14,19,15,390,42,46,26,6,
            1675,6,285,6,249,297,6,299,369,6,
            369,6,471,1719,518,1729,1277,261,369,830,
            369,518,989,860,1679,199,87,199,87,619,
            1550,619,1550,876,6,199,87,199,87,619,
            1550,619,1550,369,524,175,620,391,295,660,
            6,182,235,235,699,894,789,518,206,369,
            199,87,1087,896,619,1550,649,14,19,15,
            390,42,45,246,247,691,199,87,382,829,
            619,1550,525,14,19,15,390,42,43,518,
            598,276,382,379,183,869,57,247,1677,169,
            256,215,326,327,908,566,566,592,566,271,
            1215,605,274,232,256,215,326,327,1749,654,
            753,227,199,1191,382,199,207,607,598,1799,
            607,804,14,19,15,390,33,1199,804,14,
            19,15,390,32,725,492,256,215,326,327,
            261,1199,373,566,690,1723,1749,1679,113,1902,
            211,1902,1902,1071,307,194,756,566,194,518,
            1191,1902,87,690,235,315,1348,1750,1644,1788,
            1020,1687,1788,1793,199,257,215,326,327,607,
            6,89,1823,192,6,296,756,261,211,690,
            1902,1902,1029,690,1679,566,414,235,1902,1902,
            1902,1902,1902,236,1589,1750,1902,87,1902,1902,
            731,87,1191,1902,1406,1902,1902,195,298,1902,
            1902,1902,1902,1902,378,1902,1902,1902,1902,1902,
            1902,1902,1902,1902,1902,1902,1902,1902,1902,262,
            1902,1902,1902,1902,909,1902,0,329,733,0,
            17,179,0,18,178,0,1,2130,0,1,
            2141,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,12,13,14,15,16,17,18,0,
            20,21,22,23,24,25,26,27,28,29,
            30,0,32,33,34,35,36,37,0,8,
            40,41,42,43,44,45,46,47,48,49,
            50,51,0,53,54,55,0,1,0,3,
            0,5,4,0,0,0,2,11,12,0,
            14,6,7,9,10,0,1,39,3,0,
            0,25,26,27,4,6,7,68,32,33,
            34,35,36,37,19,31,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,0,1,0,3,60,5,4,0,
            62,63,0,11,12,61,14,64,65,66,
            67,0,72,64,65,66,67,25,26,27,
            76,0,62,63,32,33,34,35,36,37,
            0,0,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,0,1,
            0,3,60,5,0,0,62,63,4,11,
            12,31,14,64,65,66,67,0,1,0,
            3,0,0,25,26,27,5,56,57,0,
            32,33,34,35,36,37,19,8,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,0,1,0,3,60,38,
            39,0,1,2,0,11,12,0,14,5,
            70,71,0,1,0,3,0,1,0,25,
            26,27,77,78,6,7,32,33,34,35,
            36,37,70,71,40,41,42,43,44,45,
            46,47,48,49,50,51,0,53,54,55,
            0,1,2,3,4,5,6,7,8,9,
            10,0,58,13,68,15,16,17,18,68,
            20,21,22,23,24,59,0,31,28,29,
            30,5,32,0,1,2,3,4,5,6,
            7,8,9,10,0,1,13,3,15,16,
            17,18,0,20,21,22,23,24,58,0,
            0,28,29,30,38,32,0,1,2,3,
            4,5,6,7,8,9,10,0,1,13,
            3,15,16,17,18,19,20,21,22,23,
            24,58,0,1,28,29,30,0,0,0,
            1,0,3,5,0,0,2,0,11,12,
            0,14,11,12,4,14,56,57,52,0,
            0,0,25,26,27,73,25,26,27,32,
            33,34,35,36,37,31,38,40,41,42,
            43,44,45,46,47,48,49,50,51,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,13,3,15,16,17,18,0,20,
            21,22,23,24,0,56,57,28,29,30,
            0,1,2,3,4,5,6,7,8,9,
            10,0,0,13,2,15,16,17,18,0,
            20,21,22,23,24,31,0,58,28,29,
            30,0,1,2,3,4,0,6,7,8,
            9,10,0,31,13,19,15,16,17,18,
            0,20,21,22,23,24,0,0,58,28,
            29,30,5,0,0,1,2,3,4,0,
            6,7,8,9,10,56,57,13,0,15,
            16,17,18,19,20,21,22,23,24,0,
            0,60,28,29,30,0,1,2,3,4,
            89,6,7,8,9,10,56,57,13,52,
            15,16,17,18,19,20,21,22,23,24,
            0,31,0,28,29,30,0,1,2,3,
            4,0,6,7,8,9,10,0,1,13,
            3,15,16,17,18,19,20,21,22,23,
            24,61,74,31,28,29,30,0,1,2,
            3,4,73,6,7,8,9,10,0,1,
            13,3,15,16,17,18,19,20,21,22,
            23,24,0,61,0,28,29,30,0,1,
            2,3,4,0,6,7,8,9,10,0,
            69,13,0,15,16,17,18,5,20,21,
            22,23,24,0,1,2,28,29,30,0,
            1,2,3,4,0,6,7,8,9,10,
            0,0,13,0,15,16,17,18,39,20,
            21,22,23,24,0,1,2,28,29,30,
            0,1,2,3,4,0,6,7,8,9,
            10,0,69,13,0,15,16,17,18,39,
            20,21,22,23,24,0,0,75,28,29,
            30,0,1,2,3,4,0,6,7,8,
            9,10,0,0,13,0,15,16,17,18,
            39,20,21,22,23,24,0,74,0,28,
            29,30,0,1,2,3,4,0,6,7,
            8,9,10,59,0,13,0,15,16,17,
            18,39,20,21,22,23,24,0,0,0,
            28,29,30,0,1,2,3,4,72,6,
            7,8,9,10,59,0,13,19,15,16,
            17,18,0,20,21,22,23,24,0,0,
            0,28,29,30,0,1,2,3,4,0,
            6,7,8,9,10,0,0,13,19,15,
            16,17,18,0,20,21,22,23,24,0,
            0,0,28,29,30,0,5,2,0,4,
            5,11,12,0,14,0,11,12,19,14,
            0,1,2,0,4,25,26,27,5,0,
            25,26,27,0,19,0,31,32,33,34,
            35,36,37,38,0,0,2,0,4,5,
            0,31,19,52,19,11,12,0,14,2,
            0,38,5,0,1,2,19,4,0,25,
            26,27,0,0,0,31,32,33,34,35,
            36,37,38,11,12,0,14,19,31,0,
            0,0,19,0,31,38,0,25,26,27,
            11,12,0,14,32,33,34,35,36,37,
            19,0,0,0,25,26,27,0,0,0,
            0,32,33,34,35,36,37,0,11,12,
            0,14,0,0,0,2,4,4,0,0,
            0,0,25,26,27,11,12,0,14,32,
            33,34,35,36,37,0,0,0,0,25,
            26,27,69,0,31,0,32,33,34,35,
            36,37,79,80,81,82,83,84,85,86,
            87,88,0,0,0,0,0,0,1,2,
            0,59,5,11,12,0,14,11,12,0,
            14,11,12,0,14,0,0,25,26,27,
            0,25,26,27,0,25,26,27,31,5,
            0,11,12,0,14,38,0,0,2,0,
            4,0,0,0,0,25,26,27,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,39,0,0,0,31,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,75,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1902,668,1629,727,1163,1,1154,1098,1208,1768,
            1761,2118,2119,1538,2120,1912,1913,1914,1915,1902,
            609,437,2219,2220,2221,2232,1202,2233,1292,592,
            395,64,2064,2065,2063,2121,2066,2062,88,1366,
            2069,2074,2073,2071,2072,2070,2075,2076,2068,2077,
            2078,2079,255,1417,1364,1332,1902,1,48,1,
            66,193,1696,59,31,51,1794,1,1,61,
            1,534,514,1926,1927,1902,2082,780,2083,53,
            50,1,1,1,1696,534,514,405,1,1,
            1,1,1,1,1481,1820,1,1,1,1,
            1,1,1,1,1,1,1,1,193,1,
            1,1,1902,1,49,1,2100,192,1696,60,
            1621,1504,184,1,1,531,1,1469,1458,1447,
            1436,185,1278,1469,1458,1447,1436,1,1,1,
            427,54,1621,1504,1,1,1,1,1,1,
            273,287,1,1,1,1,1,1,1,1,
            1,1,1,1,192,1,1,1,1902,1,
            62,1,2100,193,1902,72,1621,1504,1395,1,
            1,648,1,1469,1458,1447,1436,1902,2082,1902,
            2083,1902,63,1,1,1,1907,1107,1379,65,
            1,1,1,1,1,1,1482,1366,1,1,
            1,1,1,1,1,1,1,1,1,1,
            193,1,1,1,1902,2081,203,2080,2100,1906,
            1782,1,2130,1478,1902,2118,2119,1902,2120,1905,
            1420,1408,1902,1931,1902,1932,1,1899,52,2232,
            1202,2233,1259,1824,534,514,2064,2065,2063,2121,
            2066,2062,1420,1408,2069,2074,2073,2071,2072,2070,
            2075,2076,2068,2077,2078,2079,329,1417,1364,1332,
            1,1919,1629,1920,1493,1905,1154,1098,1208,1768,
            1761,1902,1904,1538,1172,1912,1913,1914,1915,1135,
            609,437,2219,2220,2221,2162,1,1887,1292,592,
            395,90,567,1902,1919,1629,1920,1613,1905,1154,
            1098,1208,1768,1761,187,3199,1538,3199,1912,1913,
            1914,1915,68,609,437,2219,2220,2221,1904,1902,
            58,1292,592,395,90,1040,1,1919,1629,1920,
            1163,27,1154,1098,1208,1768,1761,186,3204,1538,
            3204,1912,1913,1914,1915,3132,609,437,2219,2220,
            2221,1904,1902,2142,1292,592,395,128,1902,208,
            3222,1902,3222,1907,272,1902,523,1902,2118,2119,
            1902,2120,2118,2119,1587,2120,1107,1379,27,57,
            1902,1902,2232,1202,2233,710,2232,1202,2233,2064,
            2065,2063,2121,2066,2062,648,1906,2069,2074,2073,
            2071,2072,2070,2075,2076,2068,2077,2078,2079,1902,
            1919,1629,1920,1163,1905,1154,1098,1208,1768,1761,
            1902,2082,1538,2083,1912,1913,1914,1915,1902,609,
            437,2219,2220,2221,222,1107,1379,1292,592,395,
            1902,1919,1629,1920,1580,1905,1154,1098,1208,1768,
            1761,1902,224,1538,1480,1912,1913,1914,1915,56,
            609,437,2219,2220,2221,648,325,1904,1292,592,
            395,1902,1,1,1,1,1902,1,1,1,
            1,1,1902,648,1,1161,1,1,1,1,
            55,1,1,1,1,1,1902,1902,1904,1,
            1,1,1909,1902,1902,1919,1629,1920,1163,1902,
            1154,1098,1208,1768,1761,1107,1379,1538,70,1912,
            1913,1914,1915,1161,609,437,2219,2220,2221,69,
            1902,2218,1292,592,395,1,1919,1629,1920,1163,
            1886,1154,1098,1208,1768,1761,1107,1379,1538,1908,
            1912,1913,1914,1915,3132,609,437,2219,2220,2221,
            1902,1060,293,1292,592,395,1902,1919,1629,1920,
            1163,1902,1154,1098,1208,1768,1761,210,2082,1538,
            2083,1912,1913,1914,1915,3132,609,437,2219,2220,
            2221,1607,491,1079,1292,592,395,1,1919,1629,
            1920,1163,710,1154,1098,1208,1768,1761,209,1375,
            1538,1375,1912,1913,1914,1915,3132,609,437,2219,
            2220,2221,1902,1609,1902,1292,592,395,1902,1919,
            1629,1920,1163,213,1154,1098,1208,1768,1761,258,
            670,1538,1,1912,1913,1914,1915,1911,609,437,
            2219,2220,2221,1,2130,1478,1292,592,395,1902,
            1919,1631,1920,1163,1902,1154,1098,1208,1768,1761,
            28,1902,1538,71,1912,1913,1914,1915,1826,609,
            437,2219,2220,2221,255,2130,1478,1292,592,395,
            1902,1919,1639,1920,1163,1902,1154,1098,1208,1768,
            1761,28,1116,1538,1,1912,1913,1914,1915,546,
            609,437,2219,2220,2221,1902,67,1910,1292,592,
            395,1902,1919,1641,1920,1163,1902,1154,1098,1208,
            1768,1761,209,1902,1538,1,1912,1913,1914,1915,
            1929,609,437,2219,2220,2221,1902,491,1902,1292,
            592,395,1902,1919,1664,1920,1163,1902,1154,1098,
            1208,1768,1761,2162,1902,1538,1902,1912,1913,1914,
            1915,2899,609,437,2219,2220,2221,1902,323,1902,
            1292,592,395,1902,1919,1680,1920,1163,1278,1154,
            1098,1208,1768,1761,2161,1902,1538,1161,1912,1913,
            1914,1915,1902,609,437,2219,2220,2221,1902,321,
            1902,1292,592,395,1,1919,1629,1920,1163,1902,
            1154,1098,1208,1768,1761,1902,1902,1538,1161,1912,
            1913,1914,1915,1902,609,437,2219,2220,2221,41,
            251,286,1292,592,395,17,1553,1890,1902,1890,
            1890,1,1,1902,1,1902,179,179,1161,179,
            264,2130,1207,1,1,1,1,1,1907,1902,
            179,179,179,1902,1161,1902,1890,179,179,179,
            179,179,179,1890,18,1902,1893,1902,1893,1893,
            1902,648,1593,1553,1633,178,178,1,178,1483,
            1902,1906,1907,270,2130,1207,1636,255,191,178,
            178,178,129,191,1902,1893,178,178,178,178,
            178,178,1893,2118,2119,1902,2120,187,648,130,
            1902,191,186,42,648,1906,1902,2232,1202,2233,
            2118,2119,1902,2120,2064,2065,2063,2121,2066,2062,
            208,1902,1902,1902,2232,1202,2233,131,1902,1902,
            1902,2064,2065,2063,2121,2066,2062,1902,2118,2119,
            1902,2120,1,267,132,1483,255,1,1902,1902,
            1902,1902,2232,1202,2233,2118,2119,1902,2120,2064,
            2065,2063,2121,2066,2062,1902,1902,1902,1902,2232,
            1202,2233,1000,1902,648,1902,2064,2065,2063,2121,
            2066,2062,980,960,940,920,900,860,880,840,
            820,800,250,1902,1902,1902,252,1,1896,1207,
            253,2162,1907,2118,2119,1902,2120,1,1,1902,
            1,2118,2119,1902,2120,1902,1902,2232,1202,2233,
            254,1,1,1,1902,2232,1202,2233,648,1911,
            1902,2118,2119,1902,2120,1906,270,1902,1483,1902,
            255,1902,1902,1902,1902,2232,1202,2233,1902,1902,
            1902,1902,1902,1902,1902,1902,1902,1902,1902,1902,
            1902,1902,1902,1350,1902,1902,1902,648,1902,1902,
            1902,1902,1902,1902,1902,1902,1902,1902,1902,1902,
            1902,1902,1902,1902,1902,1902,1902,1902,1902,1902,
            1902,1902,1902,1902,1902,1902,1902,1902,1902,1910
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            448,1,92,41,92,92,92,92,92,92,
            92,92,92,92,92,92,3,234,418,415,
            422,420,428,426,430,429,432,431,10,92,
            234,234,234,234,234,356,356,472,92,164,
            164,221,234,92,92,92,92,92,92,92,
            92,92,92,92,92,92,92,92,92,92,
            92,92,92,92,92,92,92,92,92,92,
            92,92,92,164,164,164,164,164,164,45,
            52,225,83,323,162,161,193,227,205,72,
            205,72,72,205,72,205,254,115,115,415,
            415,420,420,420,420,418,418,426,422,422,
            429,428,365,431,430,403,403,403,403,74,
            50,221,225,86,45,277,168,164,367,326,
            168,72,356,356,72,356,92,50,225,213,
            277,45,167,83,164,219,254,163,328,45,
            168,74,284,74,317,319,400,314,74,213,
            277,92,92,45,168,323,360,359,225,328,
            164,74,284,317,317,314,48,446,356,92,
            399,314,50,277,213,45,45,164,367,326,
            219,284,314,76,284,317,319,443,319,52,
            45,356,92,50,213,328,284,78,319,314,
            92,356,45,319,164,163,314,439,92,438,
            111,225,314,314,357,78,92,111,319
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            89,0,75,31,2,61,76,9,10,8,
            4,6,7,62,63,56,57,64,65,66,
            67,70,71,72,73,74,77,78,52,69,
            79,80,81,82,83,85,84,86,87,88,
            68,38,89,39,58,5,0,5,52,31,
            61,9,10,8,4,6,7,20,21,13,
            28,29,30,2,15,16,17,18,22,23,
            24,1,3,19,0,75,5,4,1,2,
            68,0,58,5,32,11,12,14,25,26,
            27,15,16,17,18,22,23,24,3,9,
            10,8,6,7,20,21,13,28,29,30,
            4,2,1,0,12,32,37,14,36,35,
            34,11,33,25,26,27,61,76,9,10,
            8,6,7,62,63,56,57,64,65,66,
            67,70,71,72,73,74,77,78,69,79,
            80,81,82,83,84,85,86,87,88,4,
            2,31,39,38,5,0,32,58,5,9,
            10,8,4,6,7,20,21,13,28,29,
            30,2,1,3,15,16,17,18,22,23,
            24,0,48,40,45,43,44,42,41,46,
            47,49,50,51,68,75,37,34,32,33,
            36,35,11,12,14,25,26,27,39,1,
            5,38,2,31,4,0,5,68,39,58,
            38,75,31,13,15,16,17,18,2,9,
            10,8,4,6,7,20,21,22,23,24,
            28,29,30,3,1,53,54,55,48,40,
            45,43,44,42,41,46,47,49,50,51,
            37,34,32,33,36,35,11,12,14,26,
            25,27,0,33,40,11,41,53,34,42,
            35,43,44,36,12,45,46,32,54,37,
            55,47,48,14,49,50,51,1,3,25,
            26,27,60,5,52,0,1,3,5,52,
            39,0,4,2,31,38,5,33,40,11,
            41,53,34,42,35,43,44,36,12,45,
            46,32,54,37,55,47,48,14,49,50,
            51,25,26,27,59,3,1,0,2,5,
            39,38,75,31,68,0,4,33,40,11,
            41,53,34,42,35,43,44,36,12,45,
            46,32,54,37,55,47,48,14,49,50,
            51,1,3,25,26,27,59,0,69,31,
            61,0,69,79,80,81,82,83,84,85,
            86,87,88,19,4,62,63,6,7,57,
            56,64,65,66,67,70,71,8,72,73,
            74,58,38,52,89,77,78,68,75,5,
            39,0,5,39,52,69,0,13,15,16,
            17,18,1,3,2,9,10,8,4,6,
            7,20,21,22,23,24,28,29,30,60,
            0,5,38,13,15,16,17,18,1,3,
            2,9,10,8,4,6,7,20,21,22,
            23,24,28,29,30,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            107,9,24,9,24,24,24,24,24,24,
            24,24,24,24,24,24,9,89,9,9,
            9,9,9,9,9,9,9,9,9,24,
            89,89,89,89,89,12,12,114,90,17,
            17,76,1,24,24,24,24,24,24,24,
            24,24,24,24,24,24,24,24,24,90,
            24,24,24,24,24,24,24,24,24,24,
            24,24,24,17,17,17,17,17,17,38,
            24,44,36,75,31,31,61,47,62,70,
            62,73,73,62,72,62,56,9,9,9,
            9,9,9,9,9,9,9,9,9,9,
            9,9,9,9,9,9,9,9,9,9,
            54,93,9,26,38,97,37,17,80,16,
            37,40,40,40,40,40,24,22,9,54,
            97,38,37,42,17,50,2,9,82,38,
            37,19,54,9,54,29,14,54,9,54,
            97,24,24,38,37,49,31,31,44,82,
            17,9,99,54,40,87,21,9,40,24,
            85,87,54,97,42,38,38,17,80,16,
            64,54,87,33,110,40,29,9,9,23,
            38,40,24,22,42,103,99,52,29,87,
            24,40,38,29,17,17,87,34,24,9,
            52,44,87,87,9,52,24,66,10
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,81,80,79,78,67,77,76,0,97,
            0,73,0,99,0,9,20,0,92,0,
            71,9,62,4,0,4,9,0,54,0,
            29,0,9,72,0,9,4,21,0,28,
            0,22,0,36,52,0,102,0,20,49,
            48,41,39,9,0,67,63,64,65,66,
            55,32,0,49,48,41,39,36,0,91,
            0,94,68,0,20,48,49,9,0,36,
            52,9,26,0,101,0,37,0,31,9,
            30,0,49,48,36,0,59,0,83,9,
            31,0,95,9,26,0,9,89,0,9,
            31,69,0,9,90,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,10,11,8,6,7,
            48,64,68,76,81,82,83,84,3,12,
            13,93,94,95,96,97,98,100,101,102,
            1,69,44,55,60,63,72,90,42,47,
            52,56,61,62,66,67,74,75,78,79,
            80,91,54,70,73,16,17,89,30,107,
            4,14,15,18,19,20,21,29,31,22,
            23,24,25,26,92,5,27,28,32,33,
            34,35,36,37,38,39,40,41,108,45,
            46,49,50,51,53,57,58,59,65,71,
            77,88,99,103,104,105,106
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,115,119,120,121,122,0,123,
            124,125,126,127,128,129,130,131,132,111,
            110,143,0,0,0,136,0,135,164,114,
            155,142,0,0,0,0,112,160,162,0,
            163,0,0,0,117,134,173,174,175,0,
            151,161,170,0,145,150,0,165,168,169,
            172,0,146,147,148,149,152,0,154,159,
            176,113,116,118,133,137,138,139,140,141,
            144,0,153,157,0,0,158,167,109,0,
            0,0,156,0,166,171,0,177,178,0,
            179,180,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            120,151,212,130,59,69,159,26,186,35,
            87,105,75,6,12,16,40,83,52,141,
            208,227,231,52,52,195,52,1,1,1,
            44,47,92,115,47,235,20,145,202,177,
            202,137,165,165,165,165,165,95,95,95
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            128,128,128,128,4,4,128,32,192,10,
            4,10,80,10,10,10,10,4,4,139,
            10,10,4,56,80,199,65,4,4,4,
            10,50,4,10,118,10,23,148,205,180,
            220,139,167,169,171,173,175,102,97,110
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            65,63,4,65,29,29,63,56,109,50,
            29,44,29,5,5,5,50,29,29,69,
            5,4,4,29,29,18,29,102,101,100,
            48,61,29,41,51,2,71,69,6,110,
            4,69,80,79,78,77,76,44,42,44
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            52,52,52,52,58,58,52,52,95,38,
            58,38,15,38,38,38,38,58,58,75,
            38,38,58,4,15,68,32,58,58,58,
            38,2,58,38,1,38,69,1,38,101,
            38,75,3,53,54,54,48,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            19,19,34,19,23,23,19,94,-1,27,
            23,9,23,34,34,34,27,23,23,3,
            34,34,34,23,23,68,23,17,1,7,
            27,29,23,9,11,34,95,3,40,-1,
            34,3,20,20,20,20,20,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            153,31,0,110,0,152,2,30,0,111,
            0,152,2,29,0,152,2,28,0,205,
            116,0,31,150,0,161,181,116,19,169,
            0,112,0,0,165,116,2,155,0,165,
            116,2,0,168,2,0,159,116,0,173,
            0,195,116,31,0,9,110,0,126,32,
            195,116,31,0,69,132,110,0,126,195,
            116,32,31,0,195,116,32,31,0,132,
            110,0,126,32,31,0,126,195,116,31,
            0,126,31,0,148,0,2,0,166,111,
            0,2,111,0,165,116,2,148,0,2,
            0,165,111,0,158,2,0,160,0,161,
            193,116,19,135,201,53,0,112,0,161,
            193,116,19,201,53,0,138,0,113,0,
            200,116,138,0,116,138,0,156,113,0,
            189,116,19,199,135,198,174,0,189,116,
            19,198,174,0,188,0,149,0,148,0,
            147,0,146,0,145,0,212,94,0,77,
            2,114,111,113,0,212,127,137,2,98,
            0,53,0,0,137,78,124,0,29,131,
            0,152,2,0,111,120,0,152,2,13,
            0,161,181,116,19,127,152,2,0,111,
            3,0,118,0,112,0,197,2,111,0,
            137,31,111,0,137,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1577,0,1729,1788,1726,0,430,0,1528,1277,
            1350,1478,1314,1207,1191,0,1202,0,1276,566,
            369,0,1486,1322,1215,605,1277,1692,1207,1191,
            1483,1550,0,1768,1761,1538,1292,592,395,1613,
            1580,1493,1712,491,1259,1278,710,1420,1408,1366,
            1379,1107,1469,1458,1447,1436,1696,1621,1504,534,
            514,1208,1163,1154,1098,609,437,1172,1135,1116,
            1079,1060,1040,1020,756,405,733,567,648,1000,
            980,960,940,920,900,880,860,840,820,800,
            369,780,690,670,471,546,451,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,196,116,182,30,29,28,13,21,20,
            7,6,4,8,10,9,111,2,115,114,
            118,117,120,119,122,121,124,123,112,39,
            2,2,2,2,2,76,61,2,31,152,
            137,138,116,7,6,63,62,4,67,66,
            65,64,56,57,8,71,70,73,72,78,
            77,74,88,87,86,84,85,83,82,81,
            80,79,69,152,152,152,152,152,197,137,
            127,116,31,2,156,155,183,26,184,174,
            185,55,54,186,53,187,188,1,3,114,
            114,117,117,117,117,115,115,119,118,118,
            121,120,137,123,122,127,127,127,127,127,
            19,159,143,32,126,116,4,168,116,2,
            31,198,175,175,201,175,68,116,143,4,
            116,126,195,166,165,133,116,167,116,153,
            4,135,19,135,19,181,116,19,169,4,
            116,195,32,126,4,2,146,148,116,39,
            165,199,116,19,116,161,39,205,61,31,
            206,116,19,116,166,126,126,158,116,2,
            159,19,189,138,190,116,193,135,194,69,
            153,61,31,116,166,116,116,116,193,161,
            69,39,153,181,165,202,189,200,68,158,
            2,116,161,161,39,39,68,159,144
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "MYTHREAD",
            "THREADS",
            "UPC_MAX_BLOCKSIZE",
            "relaxed",
            "shared",
            "strict",
            "upc_barrier",
            "upc_localsizeof",
            "upc_blocksizeof",
            "upc_elemsizeof",
            "upc_notify",
            "upc_fence",
            "upc_wait",
            "upc_forall",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "expression_parser_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_name",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_token",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "layout_qualifier"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 60,
           SCOPE_UBOUND      = 49,
           SCOPE_SIZE        = 50,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 229,
           NT_OFFSET         = 107,
           LA_STATE_OFFSET   = 2270,
           MAX_LA            = 2,
           NUM_RULES         = 368,
           NUM_NONTERMINALS  = 128,
           NUM_SYMBOLS       = 235,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1775,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 89,
           EOLT_SYMBOL       = 89,
           ACCEPT_ACTION     = 1886,
           ERROR_ACTION      = 1902;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
