/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99NoCastExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, C99NoCastExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,8,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,4,1,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,5,9,8,
            3,2,2,2,3,2,4,2,2,2,
            2,2,1,1,1,1,2,1,2,2,
            2,1,2,2,1,2,2,1,2,2,
            1,2,2,1,3,1,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,6,8,
            0,0,1,1,3,3,3,0,1,0,
            1,2,4,2,1,1,1,3,1,1,
            2,3,7,8,0,1,0,1,3,1,
            3,1,1,1,1,1,1,3,1,1,
            1,1,1,3,1,2,2,1,5,3,
            1,3,5,1,3,1,3,2,4,3,
            5,4,6,6,3,5,1,3,4,5,
            6,0,1,2,1,3,1,1,3,2,
            1,1,1,1,2,1,2,3,1,1,
            1,3,1,2,2,2,3,4,5,1,
            7,3,0,0,1,1,3,3,4,1,
            1,2,3,2,3,2,1,0,1,2,
            1,1,1,1,1,2,4,3,6,2,
            4,1,1,-32,0,0,0,0,0,0,
            0,0,0,0,-156,0,0,0,0,0,
            0,0,0,0,0,0,-114,0,-72,-2,
            -29,0,0,0,0,-54,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-137,0,-115,0,
            -116,0,-4,0,0,0,0,0,-6,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-120,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-184,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-55,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-110,0,0,0,0,0,0,
            0,0,0,0,0,0,-78,0,-15,-104,
            -133,-33,0,0,-34,0,-16,0,-193,0,
            0,0,0,-117,0,-17,0,-157,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-70,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-118,
            0,0,0,-5,0,0,0,0,0,0,
            0,0,-18,-86,0,0,0,-7,0,0,
            0,0,0,0,0,0,-180,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-3,0,0,
            0,0,0,0,0,0,0,0,-132,0,
            0,0,0,0,0,0,0,0,-51,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-30,0,-107,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-73,-125,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -129,0,-165,0,0,-83,0,-48,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-67,0,0,0,0,
            0,0,-85,0,0,0,0,-52,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-19,0,0,-20,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -159,0,-182,0,0,0,0,0,0,0,
            -27,0,0,0,0,0,0,0,0,0,
            0,-21,0,0,0,0,0,0,0,0,
            0,-56,0,0,0,0,0,0,0,0,
            0,0,-22,0,0,0,0,0,0,0,
            0,0,-57,0,0,0,0,0,0,0,
            0,0,0,-23,0,0,0,0,0,0,
            0,0,0,-58,0,0,0,0,0,0,
            0,0,0,0,-24,0,0,0,0,0,
            0,0,0,0,-59,0,0,0,0,0,
            0,0,0,0,0,-25,0,0,0,0,
            0,0,0,0,0,-60,0,0,0,0,
            0,0,0,0,0,0,-26,0,0,0,
            0,0,0,0,0,0,-61,0,0,0,
            0,0,0,0,0,0,0,-68,0,0,
            0,0,0,0,0,0,0,-62,0,0,
            0,0,0,0,0,0,0,0,-84,0,
            0,0,0,0,0,0,0,0,-63,0,
            0,0,0,0,0,0,0,0,0,-87,
            0,0,0,0,0,0,0,0,0,-64,
            0,0,0,0,0,0,0,0,0,0,
            -88,0,0,0,0,0,0,0,0,0,
            -65,0,0,0,0,0,0,0,0,0,
            0,-89,0,0,0,0,0,0,0,0,
            0,-66,0,0,0,0,0,0,0,0,
            0,0,-90,0,0,0,0,0,0,0,
            0,0,-119,0,0,0,0,0,0,0,
            0,0,0,-91,0,0,0,0,0,0,
            0,0,0,-142,0,0,0,0,0,0,
            0,0,0,0,-92,0,0,0,0,0,
            0,0,0,0,-143,0,0,0,0,0,
            0,0,0,0,0,-93,0,0,0,0,
            0,0,0,0,0,-160,0,0,0,0,
            0,0,0,0,0,0,-162,0,0,0,
            0,0,0,0,0,-183,0,0,0,0,
            0,0,0,0,0,0,-174,0,0,0,
            0,0,0,0,0,-94,-76,0,0,-136,
            -95,0,-8,0,0,0,0,0,0,0,
            -192,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -201,0,0,0,0,0,0,0,0,0,
            0,-96,0,0,0,0,0,0,0,0,
            0,-155,0,-97,-98,0,0,-9,0,0,
            0,0,0,0,0,-209,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-128,-46,0,0,
            0,0,0,0,0,0,0,0,-49,0,
            0,0,0,0,0,0,0,0,0,-111,
            0,0,0,-108,-173,-146,-122,-127,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-189,0,0,-1,0,0,0,0,-99,
            0,0,0,0,0,0,0,-100,0,0,
            0,0,0,0,0,-171,0,0,0,0,
            -113,-131,0,-185,0,0,0,0,0,0,
            0,0,0,0,0,-101,-135,-102,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-103,0,0,0,0,
            -50,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-208,0,-106,0,0,
            -121,0,0,-130,-134,-139,0,-42,0,0,
            0,0,0,0,0,0,0,0,-47,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-12,0,0,0,0,
            0,0,0,-43,0,0,0,0,0,0,
            0,0,0,0,-44,0,0,0,0,0,
            0,0,0,0,0,-45,0,0,0,0,
            0,0,0,0,0,0,-203,0,0,-10,
            0,0,0,0,0,0,0,0,-37,0,
            0,0,0,0,0,0,0,-38,0,0,
            0,0,0,0,0,0,-71,-170,-138,0,
            0,0,0,0,0,0,-152,0,0,0,
            -126,-79,-186,0,-74,-158,-178,-124,-177,0,
            0,-140,0,-145,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-210,0,0,-109,
            -211,-147,-31,-123,0,-11,0,0,0,0,
            0,0,0,0,-161,-179,0,-81,0,0,
            0,0,-202,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-13,0,0,0,
            0,0,0,0,0,0,0,-39,0,0,
            0,0,0,0,0,0,-207,-196,-148,0,
            0,-40,0,0,0,0,0,0,0,-41,
            0,0,0,0,0,0,0,-112,0,0,
            -169,-141,0,-14,0,0,-154,0,0,0,
            -75,0,0,0,0,0,0,0,-144,-28,
            0,-166,0,-163,0,0,-35,0,0,0,
            0,0,0,0,0,-176,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-151,0,0,-77,0,-187,0,
            -164,-172,0,0,0,-167,0,0,-105,0,
            -80,0,0,-190,0,-82,0,0,0,0,
            0,-200,-153,0,0,0,0,0,-195,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-188,-175,-69,0,
            0,-36,-150,-168,0,-181,-149,0,0,-53,
            0,-204,0,0,-197,-194,-191,-198,-199,0,
            0,0,0,0,-205,0,0,0,0,0,
            0,0,-206,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            87,11,101,24,24,23,23,32,32,69,
            69,1,1,2,2,2,2,3,3,3,
            4,5,5,5,5,5,5,5,5,51,
            51,70,6,6,6,6,6,6,6,6,
            6,6,6,7,8,8,8,8,9,9,
            9,10,10,10,12,12,12,12,12,13,
            13,13,14,14,15,15,16,16,17,17,
            18,18,19,19,20,20,20,20,20,20,
            20,20,20,20,20,20,102,45,40,88,
            88,73,73,46,103,103,103,103,103,103,
            103,104,104,104,105,105,110,110,111,111,
            106,106,107,107,107,113,113,108,108,108,
            108,109,109,109,109,109,112,112,25,25,
            25,25,25,28,28,28,79,79,74,74,
            74,74,75,75,75,76,76,76,77,77,
            77,78,78,78,114,114,115,115,116,29,
            31,31,31,31,31,52,54,54,54,54,
            54,54,54,54,54,54,54,54,63,60,
            60,89,90,64,64,61,61,61,65,80,
            80,81,81,66,66,66,48,91,91,82,
            83,83,83,62,62,92,84,84,85,85,
            67,67,21,22,22,22,30,47,47,33,
            33,33,33,36,36,38,34,34,35,39,
            39,117,117,37,118,118,93,93,26,26,
            26,26,26,26,26,26,26,86,49,49,
            49,49,27,56,56,55,55,55,57,57,
            50,50,94,94,71,71,58,58,58,41,
            41,41,42,43,43,43,44,44,44,44,
            53,53,53,59,95,72,72,72,72,68,
            96,97,97,98,98,99,99,119,119,120,
            120,121,121,121,121,123,123,122,122,122,
            124,124,87,87,1,899,17,21,18,469,
            857,44,486,477,714,244,543,752,717,794,
            773,836,815,74,91,134,212,250,589,199,
            502,281,136,133,135,159,488,20,17,21,
            18,469,43,44,486,477,714,28,543,752,
            717,794,773,1276,878,274,138,679,165,157,
            186,157,185,541,142,145,148,151,1097,488,
            20,17,21,18,469,43,40,373,1445,1571,
            1617,1631,1636,666,415,20,17,21,18,469,
            857,44,486,477,714,367,543,752,717,794,
            773,836,815,74,280,464,20,17,21,18,
            469,857,44,486,477,714,367,543,752,717,
            794,773,836,815,74,280,488,20,17,21,
            18,469,43,44,486,477,714,285,543,752,
            717,794,1278,1326,364,20,17,21,18,469,
            43,36,286,1446,1495,291,1100,445,285,671,
            13,13,157,31,1326,157,31,324,245,157,
            1447,394,1643,286,329,1325,194,1649,335,20,
            17,21,18,469,857,44,486,477,714,367,
            543,752,717,794,773,836,815,74,280,275,
            20,17,21,18,469,857,44,486,477,714,
            1480,543,752,717,794,773,836,815,74,1214,
            157,187,369,238,512,20,17,21,18,469,
            41,287,25,12,61,24,209,1326,488,20,
            17,21,18,469,43,39,288,440,20,17,
            21,18,469,857,44,486,477,714,22,543,
            752,717,794,773,836,815,74,280,488,20,
            17,21,18,469,857,44,486,477,714,254,
            543,752,717,794,773,836,815,74,91,488,
            20,17,21,18,469,43,44,486,477,714,
            289,543,752,717,1155,281,1326,536,20,17,
            21,18,469,857,44,486,477,714,1484,543,
            752,717,794,773,836,815,74,1448,19,678,
            299,20,17,21,18,469,857,44,486,477,
            714,373,543,752,717,794,773,836,815,74,
            1579,189,178,52,239,275,189,178,488,20,
            17,21,18,469,43,44,486,477,714,1437,
            543,1101,134,212,253,212,281,134,212,136,
            133,135,159,281,137,133,135,159,488,20,
            17,21,18,469,43,44,486,477,714,1296,
            543,752,1240,138,30,165,23,31,139,1443,
            165,142,145,148,151,1097,143,146,149,152,
            1097,157,294,157,296,1445,1571,1617,1631,1636,
            666,488,20,17,21,18,469,857,44,486,
            477,714,63,543,752,717,794,773,836,815,
            74,92,488,20,17,21,18,469,857,44,
            486,477,714,191,543,752,717,794,773,836,
            815,74,85,488,20,17,21,18,469,857,
            44,486,477,714,242,543,752,717,794,773,
            836,815,74,84,488,20,17,21,18,469,
            857,44,486,477,714,402,543,752,717,794,
            773,836,815,74,83,488,20,17,21,18,
            469,857,44,486,477,714,6,543,752,717,
            794,773,836,815,74,82,488,20,17,21,
            18,469,857,44,486,477,714,523,543,752,
            717,794,773,836,815,74,81,488,20,17,
            21,18,469,857,44,486,477,714,159,543,
            752,717,794,773,836,815,74,80,488,20,
            17,21,18,469,857,44,486,477,714,560,
            543,752,717,794,773,836,815,74,79,488,
            20,17,21,18,469,857,44,486,477,714,
            306,543,752,717,794,773,836,815,74,78,
            488,20,17,21,18,469,857,44,486,477,
            714,342,543,752,717,794,773,836,815,74,
            77,488,20,17,21,18,469,857,44,486,
            477,714,544,543,752,717,794,773,836,815,
            74,76,488,20,17,21,18,469,857,44,
            486,477,714,647,543,752,717,794,773,836,
            815,74,75,488,20,17,21,18,469,857,
            44,486,477,714,657,543,752,717,794,773,
            836,815,74,73,488,20,17,21,18,469,
            857,44,486,477,714,659,543,752,717,794,
            773,836,815,74,1582,488,20,17,21,18,
            469,857,44,486,477,714,413,543,752,717,
            794,773,836,815,74,1626,488,20,17,21,
            18,469,43,44,486,477,714,244,543,752,
            717,794,773,836,815,93,488,20,17,21,
            18,469,43,44,486,477,714,655,543,752,
            717,794,773,836,815,93,675,236,1232,282,
            698,144,1686,488,20,17,21,18,469,43,
            38,488,20,17,21,18,469,43,44,486,
            477,714,1696,543,752,717,794,773,836,815,
            93,488,20,17,21,18,469,43,44,486,
            477,714,50,543,752,717,794,773,836,815,
            93,325,604,1447,57,412,194,211,488,20,
            17,21,18,469,43,37,488,20,17,21,
            18,469,43,44,486,477,714,201,543,752,
            717,794,773,836,815,93,337,151,488,20,
            17,21,18,469,43,44,486,1046,1687,488,
            20,17,21,18,469,43,44,486,477,714,
            281,1142,202,273,61,244,207,97,281,208,
            217,1482,220,1539,222,223,228,1561,266,639,
            339,271,361,272,262,388,1449,1496,240,276,
            550,278,273,1692,1562,263,578,179,547,217,
            1482,220,1539,222,223,228,200,266,639,339,
            271,543,429,1684,52,217,1482,220,1539,222,
            223,228,1262,661,1210,87,154,13,307,1503,
            312,260,273,1321,277,253,212,1187,1152,218,
            1482,220,1539,222,223,228,676,268,639,339,
            271,488,20,17,21,18,469,43,44,486,
            477,714,258,1154,197,199,361,1614,709,1324,
            1538,710,340,1642,693,712,716,1692,488,20,
            17,21,18,469,43,44,486,477,962,488,
            20,17,21,18,469,43,44,486,1096,217,
            1482,220,1539,222,223,228,488,20,17,21,
            18,469,34,1503,488,20,17,21,18,469,
            43,44,486,477,983,488,20,17,21,18,
            469,43,44,486,477,1004,488,20,17,21,
            18,469,43,44,486,477,1025,623,198,199,
            488,20,17,21,18,469,43,36,1692,488,
            20,17,21,18,469,43,44,920,488,20,
            17,21,18,469,43,44,941,672,543,13,
            217,1482,220,1539,222,223,228,717,1558,1619,
            1067,110,493,612,1684,232,104,394,61,718,
            276,230,97,273,364,20,17,21,18,469,
            43,36,254,212,254,212,134,212,266,639,
            339,271,242,141,133,135,159,638,246,1621,
            52,261,715,161,52,1210,488,20,17,21,
            18,469,43,35,1679,681,719,140,517,165,
            1697,253,212,720,1321,253,212,371,227,273,
            218,1482,220,1539,222,223,228,488,20,17,
            21,18,469,33,266,639,339,271,488,20,
            17,21,18,469,43,47,1441,64,646,697,
            1441,265,488,20,17,21,18,469,43,46,
            488,20,17,21,18,469,43,45,323,254,
            212,323,569,530,13,226,640,13,1770,661,
            1014,603,661,663,1770,314,281,1770,1596,61,
            13,1770,61,1187,13,1318,1187,421,1318,196,
            484,314,134,212,292,415,604,1447,578,144,
            133,135,159,241,87,196,243,1629,258,615,
            1256,258,1483,1218,281,1324,1218,608,1324,282,
            87,572,13,1770,1770,615,61,89,1483,241,
            661,637,1264,1677,718,341,642,279,134,212,
            1770,1770,495,48,1187,147,133,135,159,698,
            244,686,134,212,661,273,1321,134,212,150,
            133,135,159,208,153,133,135,159,196,258,
            268,639,339,271,1695,693,1324,142,95,97,
            1634,1496,13,711,281,1705,61,97,661,661,
            13,1087,97,578,661,281,61,244,370,244,
            1713,578,196,196,1770,244,1318,224,1187,191,
            293,193,1698,244,1318,1770,1770,1770,229,1318,
            295,233,87,1215,1678,1087,1087,544,1629,203,
            87,180,1770,259,1770,1248,1256,204,1770,1770,
            1770,1477,1770,191,192,1481,1770,1770,1770,1770,
            1770,1770,1770,1770,1770,1770,1770,1699,1678,1770,
            0,20,178,0,1,1995,0,1,2006,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,0,0,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,0,
            0,31,32,33,34,35,36,37,38,39,
            40,41,42,13,44,45,46,0,1,0,
            3,0,5,6,7,8,0,6,7,8,
            0,14,0,0,1,5,55,56,57,58,
            65,24,25,26,27,28,47,48,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,0,1,0,3,51,5,
            6,7,8,0,55,56,57,58,14,0,
            50,55,56,57,58,6,7,8,24,25,
            26,27,28,61,62,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,0,1,0,3,51,5,6,7,8,
            0,1,2,0,4,14,0,1,0,3,
            0,11,2,60,4,24,25,26,27,28,
            12,11,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,0,1,
            0,3,51,0,6,7,8,4,0,0,
            1,2,14,4,61,62,0,1,2,11,
            11,5,24,25,26,27,28,11,65,31,
            32,33,34,35,36,37,38,39,40,41,
            42,0,44,45,46,0,30,6,7,8,
            0,0,2,0,4,14,53,54,5,0,
            1,11,3,0,64,24,25,26,27,28,
            0,12,31,32,33,34,35,36,37,38,
            39,40,41,42,0,1,2,3,4,5,
            0,0,1,9,10,5,43,13,14,15,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,5,63,0,0,9,10,4,
            30,13,14,15,16,17,18,19,20,21,
            22,23,0,0,50,0,4,0,0,1,
            49,3,9,10,0,1,2,3,4,5,
            12,0,0,9,10,4,12,13,50,15,
            16,17,18,19,20,21,22,23,53,54,
            0,1,2,0,1,2,3,4,5,0,
            64,49,9,10,5,0,13,43,15,16,
            17,18,19,20,21,22,23,0,1,2,
            3,4,0,0,53,54,9,10,29,30,
            13,0,15,16,17,18,19,20,21,22,
            23,0,0,50,0,1,2,3,4,59,
            0,9,10,9,10,5,12,13,0,15,
            16,17,18,19,20,21,22,23,51,0,
            1,2,3,4,0,1,0,3,9,10,
            30,12,13,60,15,16,17,18,19,20,
            21,22,23,0,1,2,3,4,0,68,
            69,0,9,10,63,12,13,49,15,16,
            17,18,19,20,21,22,23,0,1,2,
            3,4,0,1,0,3,9,10,0,5,
            13,0,15,16,17,18,19,20,21,22,
            23,0,1,2,3,4,0,1,0,3,
            9,10,0,29,13,0,15,16,17,18,
            19,20,21,22,23,0,1,2,3,4,
            0,0,0,0,9,10,0,5,13,0,
            15,16,17,18,19,20,21,22,23,0,
            66,2,13,4,5,6,7,8,0,29,
            11,0,30,14,6,7,8,6,7,8,
            0,80,60,24,25,26,27,28,0,30,
            47,48,70,71,72,73,74,75,76,77,
            78,79,0,0,1,59,3,0,6,7,
            8,0,0,6,7,8,14,6,7,8,
            0,14,0,1,2,0,24,25,26,27,
            28,24,25,26,27,28,0,0,1,2,
            0,0,6,7,8,0,0,6,7,8,
            14,6,7,8,0,14,0,0,0,5,
            24,25,26,27,28,24,25,26,27,28,
            0,0,2,2,0,0,5,0,0,2,
            0,11,11,9,10,15,16,12,11,11,
            0,11,0,47,48,5,0,0,2,0,
            1,30,3,47,48,47,48,11,0,0,
            0,0,4,4,0,0,0,0,0,0,
            66,29,52,12,0,11,29,12,12,0,
            52,0,52,43,0,0,12,67,0,0,
            0,12,0,12,0,0,29,29,0,0,
            0,0,0,0,0,0,0,0,0,49,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,59,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1770,1781,1564,1782,1400,70,1983,1984,1985,1158,
            1103,59,1,1486,1932,1517,1356,534,1783,1784,
            1785,1786,548,379,1933,1931,1986,1934,1930,54,
            64,1937,1942,1941,1939,1940,1938,1943,1944,1936,
            1945,1946,1947,668,1498,1442,467,1770,1,61,
            1,1770,190,1,1,1,60,1983,1984,1985,
            1770,1,62,1770,2007,1774,1386,1375,1364,1328,
            436,1,1,1,1,1,1188,1339,1,1,
            1,1,1,1,1,1,1,1,1,1,
            190,1,1,1,1770,1,252,1,1965,189,
            1,1,1,1770,1386,1375,1364,1328,1,247,
            1773,1386,1375,1364,1328,1983,1984,1985,1,1,
            1,1,1,1301,1199,1,1,1,1,1,
            1,1,1,1,1,1,1,189,1,1,
            1,1770,1,63,1,1965,190,1,1,1,
            261,1995,1216,71,1,1,1770,1781,1770,1782,
            264,509,1427,557,1,1,1,1,1,1,
            470,509,1,1,1,1,1,1,1,1,
            1,1,1,1,190,1,1,1,1770,1781,
            68,1782,1965,48,1983,1984,1985,1550,270,267,
            1995,1216,1932,252,1301,1199,1,1764,1216,509,
            509,1776,1933,1931,1986,1934,1930,509,436,1937,
            1942,1941,1939,1940,1938,1943,1944,1936,1945,1946,
            1947,128,1498,1442,467,181,1775,1983,1984,1985,
            267,66,1427,1770,252,1932,1542,1528,1778,1770,
            1781,509,1782,182,599,1933,1931,1986,1934,1930,
            284,471,1937,1942,1941,1939,1940,1938,1943,1944,
            1936,1945,1946,1947,1,1781,1564,1782,454,1774,
            1770,1,1767,1158,1103,1776,1777,1486,617,1517,
            1356,534,1783,1784,1785,1786,548,379,1770,1781,
            1564,1782,1454,1774,698,50,69,1158,1103,1550,
            1775,1486,1035,1517,1356,534,1783,1784,1785,1786,
            548,379,1,51,1773,1770,252,1770,1770,1781,
            2027,1782,1418,1409,1,1781,1564,1782,1400,29,
            1277,49,1770,1158,1103,1550,2774,1486,1773,1517,
            1356,534,1783,1784,1785,1786,548,379,1542,1528,
            1,1995,1397,1770,1781,1564,1782,1400,1774,1770,
            599,2027,1158,1103,1776,1770,1486,29,1517,1356,
            534,1783,1784,1785,1786,548,379,1770,1,1,
            1,1,1770,210,1542,1528,1,1,1537,1775,
            1,72,1,1,1,1,1,1,1,1,
            1,67,53,1773,1,1781,1564,1782,1400,1131,
            1,1418,1409,1158,1103,90,2774,1486,1,1517,
            1356,534,1783,1784,1785,1786,548,379,2083,1770,
            1781,1564,1782,1400,184,2808,1770,2808,1158,1103,
            90,2774,1486,1111,1517,1356,534,1783,1784,1785,
            1786,548,379,1,1781,1564,1782,1400,1770,346,
            1690,1770,1158,1103,698,2774,1486,2027,1517,1356,
            534,1783,1784,1785,1786,548,379,1770,1781,1564,
            1782,1400,183,2813,1770,2813,1158,1103,1770,1780,
            1486,1770,1517,1356,534,1783,1784,1785,1786,548,
            379,1770,1781,1580,1782,1400,205,2815,1770,2815,
            1158,1103,43,1316,1486,1770,1517,1356,534,1783,
            1784,1785,1786,548,379,1,1781,1564,1782,1400,
            88,1770,1,58,1158,1103,1770,1776,1486,65,
            1517,1356,534,1783,1784,1785,1786,548,379,20,
            1779,1761,668,1761,1761,178,178,178,248,741,
            1761,249,1775,178,1,1,1,1,1,1,
            1770,1760,972,178,178,178,178,178,1770,1761,
            1188,1339,951,930,909,888,867,825,846,804,
            783,762,129,207,1781,993,1782,130,1983,1984,
            1985,250,1770,1983,1984,1985,1932,1983,1984,1985,
            1770,1932,1,1995,1397,1770,1933,1931,1986,1934,
            1930,1933,1931,1986,1934,1930,131,252,1995,1397,
            1770,132,1983,1984,1985,251,57,1983,1984,1985,
            1932,1983,1984,1985,1,1932,56,1770,55,1780,
            1933,1931,1986,1934,1930,1933,1931,1986,1934,1930,
            32,1,1587,1427,52,42,1776,269,1770,1261,
            290,1682,509,1418,1409,1796,1797,470,509,1056,
            283,1076,255,1188,1339,1429,221,30,1428,206,
            479,1775,479,1188,1339,1188,1339,509,1770,1770,
            1,1770,1217,1452,219,1770,1770,30,206,200,
            1779,1683,475,1567,188,509,488,1584,1622,188,
            731,188,733,1429,1770,1770,184,472,1770,1770,
            1770,183,1770,205,1770,1770,1799,2783,1770,1770,
            1770,1770,1770,1770,1770,1770,1770,1770,1770,2026,
            1770,1770,1770,1770,1770,1770,1770,1770,1770,1770,
            1770,1770,1770,1770,1770,1770,1770,1770,1166
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            199,1,106,41,106,106,106,106,106,106,
            106,106,106,373,3,23,20,27,25,33,
            31,35,34,37,36,9,106,373,189,189,
            321,373,293,293,414,106,106,106,106,106,
            106,106,106,106,106,106,106,106,106,106,
            106,106,106,106,106,106,106,106,106,106,
            106,106,106,106,106,106,189,98,325,100,
            263,187,186,296,308,96,308,96,96,308,
            96,308,387,143,189,45,20,20,25,25,
            25,25,23,23,31,27,27,34,33,342,
            36,35,223,80,321,325,123,45,410,104,
            189,344,266,96,293,293,96,293,106,80,
            325,316,410,45,103,100,189,319,387,188,
            268,98,48,98,217,219,333,75,98,316,
            316,106,106,45,104,263,337,336,325,268,
            189,98,48,217,217,75,78,330,293,106,
            332,75,80,316,410,45,45,189,344,266,
            319,48,75,192,48,217,219,327,219,82,
            45,293,106,80,410,316,268,48,194,219,
            75,106,293,45,219,316,189,188,75,259,
            106,258,119,325,75,75,294,194,106,119,
            219
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,11,2,52,67,15,16,60,70,
            71,72,73,74,76,75,77,78,79,4,
            53,54,9,10,48,47,55,56,57,58,
            61,62,13,63,64,65,43,66,68,69,
            59,30,80,29,50,5,0,24,31,6,
            32,44,25,33,26,34,35,27,7,36,
            37,14,45,28,46,38,39,8,40,41,
            42,1,3,51,5,43,0,5,43,11,
            52,15,16,13,4,9,10,22,23,17,
            2,18,19,20,21,1,3,12,0,6,
            7,8,14,50,5,18,19,20,21,3,
            15,16,13,9,10,22,23,17,4,2,
            1,0,6,7,8,2,18,19,20,21,
            1,3,15,16,13,4,9,10,22,23,
            17,0,7,14,28,8,27,26,25,6,
            24,52,67,15,16,13,9,10,53,54,
            47,48,55,56,57,58,61,62,63,64,
            65,68,69,60,70,71,72,73,74,75,
            76,77,78,79,4,2,11,29,30,5,
            0,66,5,4,1,2,59,0,17,18,
            19,20,21,1,3,2,15,16,13,4,
            9,10,22,23,51,0,1,3,5,43,
            29,0,13,4,9,10,53,54,47,48,
            55,56,57,58,61,62,63,64,65,68,
            69,60,70,71,72,73,74,75,76,77,
            78,79,50,30,43,80,12,59,66,5,
            29,0,4,2,11,30,5,24,31,6,
            32,44,25,33,26,34,35,27,7,36,
            37,14,45,28,46,38,39,8,40,41,
            42,49,3,1,0,39,31,36,34,35,
            33,32,37,38,40,41,42,59,66,28,
            25,14,24,27,26,6,7,8,29,1,
            5,30,2,11,4,0,5,29,43,60,
            0,60,11,52,0,2,5,29,30,66,
            11,59,0,4,24,31,6,32,44,25,
            33,26,34,35,27,7,36,37,14,45,
            28,46,38,39,8,40,41,42,1,3,
            49,0,17,18,19,20,21,2,15,16,
            13,4,9,10,22,23,1,3,44,45,
            46,39,31,36,34,35,33,32,37,38,
            40,41,42,28,25,14,24,27,26,6,
            7,8,0,5,30,17,18,19,20,21,
            1,3,2,15,16,13,4,9,10,22,
            23,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            61,38,20,38,20,20,20,20,20,20,
            20,20,20,94,38,38,38,38,38,38,
            38,38,38,38,38,38,20,94,71,71,
            74,1,15,15,98,95,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,95,20,20,20,20,20,20,20,
            20,20,20,20,20,20,71,38,117,22,
            73,11,11,44,45,50,45,87,87,45,
            86,45,39,38,71,24,38,38,38,38,
            38,38,38,38,38,38,38,38,38,38,
            38,38,38,59,105,38,28,24,80,23,
            71,89,70,7,7,7,7,7,20,18,
            38,68,80,24,23,78,71,55,31,38,
            91,26,59,38,59,52,13,59,38,68,
            59,20,20,24,23,54,11,11,117,91,
            71,38,109,59,7,9,17,38,7,20,
            84,9,59,59,80,24,24,71,89,70,
            64,59,9,47,113,7,52,38,38,19,
            24,7,20,18,80,78,101,109,57,52,
            9,20,7,24,52,78,71,71,9,48,
            20,38,57,117,9,9,38,57,20,66,
            82
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            79,77,76,64,75,74,1,0,32,0,
            26,0,97,0,70,0,68,11,59,5,
            0,11,5,24,0,90,0,5,11,0,
            79,78,77,76,64,75,74,0,64,60,
            61,62,63,52,28,0,11,69,0,89,
            0,51,0,23,43,42,36,34,11,0,
            11,87,0,43,42,36,34,27,0,11,
            23,0,23,42,43,11,0,21,0,56,
            0,95,0,99,0,92,65,0,27,49,
            11,25,0,48,11,45,0,11,88,0,
            93,11,25,0,43,42,27,0,81,11,
            48,0,11,48,66,0,27,49,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,10,11,
            1,3,8,69,6,7,68,81,82,83,
            84,12,13,44,55,60,63,72,42,90,
            47,52,56,61,62,66,67,74,75,78,
            79,80,91,54,70,73,16,17,30,89,
            93,4,14,15,18,19,20,21,29,31,
            22,23,24,25,26,92,5,27,28,32,
            33,34,35,36,37,38,39,40,41,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            100,0,0,0,102,106,107,108,109,110,
            0,111,112,113,114,115,116,117,0,118,
            128,0,97,96,121,149,0,127,0,0,
            0,98,145,147,0,148,0,0,0,0,
            158,159,160,0,101,120,136,140,146,155,
            0,130,135,0,150,153,154,157,0,131,
            132,133,134,137,0,139,144,161,99,103,
            104,105,119,122,123,124,125,126,129,0,
            138,142,0,0,143,152,95,0,0,0,
            141,0,151,156,0,162,163,0,164,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            82,113,156,92,35,41,121,12,136,21,
            51,69,28,47,103,152,174,178,145,1,
            1,32,56,79,182,6,107,127,164,99,
            59,59,59
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            90,90,90,90,4,4,90,18,142,26,
            4,26,26,4,101,26,26,4,149,4,
            4,26,4,26,26,9,110,130,167,101,
            66,61,74
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            62,60,5,62,26,26,60,53,107,44,
            26,39,44,26,66,6,5,5,19,99,
            98,42,26,36,3,68,66,108,5,66,
            39,37,39
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            43,43,43,43,50,50,43,43,86,30,
            50,30,30,50,66,30,30,50,59,50,
            50,30,50,30,30,60,1,92,30,66,
            2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            17,17,32,17,21,21,17,86,-1,25,
            21,9,25,21,3,32,32,32,61,1,
            7,25,21,9,32,87,3,-1,32,3,
            9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            139,11,0,96,0,189,104,0,31,135,
            0,144,165,104,12,152,0,98,0,0,
            148,104,2,135,0,97,0,148,104,2,
            0,151,2,0,113,14,179,104,11,0,
            113,179,104,14,11,0,113,14,11,0,
            113,179,104,11,0,113,11,0,129,0,
            2,0,151,97,0,2,97,0,148,104,
            2,129,0,2,0,150,97,0,140,2,
            0,144,177,104,12,94,185,44,0,98,
            0,144,177,104,12,185,44,0,141,0,
            99,0,184,104,141,0,104,141,0,141,
            99,0,173,104,12,183,94,182,157,0,
            173,104,12,182,157,0,196,85,0,77,
            2,101,97,99,0,196,116,138,2,89,
            0,53,0,0,138,69,111,0,29,118,
            0,164,2,17,0,144,165,104,12,116,
            164,2,0,164,2,0,97,3,0,105,
            0,98,0,181,2,98,0,138,11,98,
            0,138,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1495,0,1677,1678,1643,0,367,0,1477,1316,
            1397,1232,1256,1216,1187,0,661,666,314,0,
            1539,1482,639,339,1256,1216,1187,1629,1427,1483,
            0,1454,454,436,346,698,599,1301,1199,668,
            1339,1188,1386,1375,1364,1328,1550,1542,1528,1418,
            1409,1517,1356,1486,1400,1158,1103,548,379,534,
            1166,1131,1111,1076,1056,1035,1014,640,993,617,
            509,972,951,930,909,888,867,846,825,804,
            783,762,314,741,578,557,415,488,394,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,180,104,166,17,23,22,10,9,4,
            13,16,15,2,98,102,101,105,103,107,
            106,109,108,111,110,99,29,2,164,138,
            141,104,67,52,2,11,10,9,54,53,
            4,58,57,56,55,47,48,13,62,61,
            64,63,69,68,65,79,78,77,75,76,
            74,73,72,71,70,60,164,116,104,11,
            2,136,135,167,168,157,169,46,45,170,
            44,171,172,94,181,138,101,101,103,103,
            103,103,102,102,106,105,105,108,107,138,
            110,109,116,12,142,120,14,113,104,4,
            151,104,2,182,158,158,185,158,59,104,
            120,4,104,113,179,149,148,118,104,150,
            104,94,12,94,12,165,104,12,152,4,
            120,179,14,113,4,2,127,129,104,29,
            148,183,104,12,104,144,29,189,52,11,
            190,104,12,120,104,113,113,140,104,2,
            142,12,173,141,174,104,177,94,178,60,
            139,52,11,104,104,149,104,104,104,177,
            144,60,29,139,165,149,148,186,173,184,
            59,140,2,104,144,144,29,29,59,142,
            125
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_cast_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 51,
           SCOPE_UBOUND      = 32,
           SCOPE_SIZE        = 33,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 211,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2083,
           MAX_LA            = 2,
           NUM_RULES         = 313,
           NUM_NONTERMINALS  = 124,
           NUM_SYMBOLS       = 217,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1235,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1760,
           ERROR_ACTION      = 1770;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
