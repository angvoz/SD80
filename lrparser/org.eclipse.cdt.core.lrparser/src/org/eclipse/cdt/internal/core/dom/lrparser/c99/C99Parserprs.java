/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99Parserprs implements lpg.lpgjavaruntime.ParseTable, C99Parsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            4,1,4,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,5,9,8,
            3,2,2,2,3,2,4,2,2,2,
            2,2,1,1,1,1,2,1,2,2,
            2,1,2,2,1,2,2,1,2,2,
            1,2,2,1,3,1,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,5,5,6,6,2,2,2,1,0,
            1,2,4,2,1,1,1,3,1,1,
            2,3,6,7,1,0,1,3,1,3,
            1,1,1,1,1,1,3,1,1,1,
            1,1,3,1,2,2,1,5,3,1,
            3,5,1,3,1,3,2,4,3,5,
            4,6,6,3,5,1,1,2,3,4,
            1,2,1,3,1,1,3,2,1,1,
            1,1,2,1,2,3,1,1,1,3,
            1,2,2,2,3,4,5,1,7,3,
            0,0,1,1,3,3,4,1,1,2,
            3,2,3,2,1,0,1,2,1,1,
            1,1,1,2,4,3,6,2,4,-75,
            -2,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-32,0,0,-18,
            0,-19,-118,0,0,0,-3,0,-192,-22,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-95,-28,0,0,0,0,0,
            0,0,0,0,0,0,-21,0,0,0,
            0,0,0,0,0,0,0,-24,0,0,
            0,0,0,0,-4,0,-27,0,-6,0,
            0,0,0,0,-23,0,0,0,0,0,
            -38,0,0,-25,0,0,0,0,0,0,
            0,-188,-39,0,0,0,0,0,0,0,
            0,0,0,0,0,-245,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-10,0,0,-11,0,-270,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-41,
            -53,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-189,-64,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-146,-13,0,0,0,-190,-65,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-34,0,0,0,0,-67,0,-273,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-57,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-16,0,0,-284,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-30,0,0,0,0,
            0,-66,0,-115,-187,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-37,0,-68,0,0,0,0,0,
            0,0,0,0,0,0,0,-26,0,0,
            0,-29,0,-172,0,0,-90,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-126,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-71,0,0,-152,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-79,0,0,-72,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-36,0,0,0,-31,0,0,
            -261,-283,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-197,0,-73,0,-35,0,
            0,-74,0,-84,0,-100,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-85,
            0,-93,0,0,0,0,0,0,-145,-104,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-154,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-181,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-155,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-91,0,
            0,-156,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-151,0,
            0,-157,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-158,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-159,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-216,0,
            0,-160,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-224,0,
            0,-161,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-162,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-163,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-105,0,
            0,-164,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-106,0,
            0,-208,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-149,0,
            0,-210,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-40,0,
            0,-214,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-107,0,
            0,-182,0,0,0,0,0,0,0,0,
            0,0,0,-108,-215,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-253,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-165,0,0,-276,-109,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-257,0,0,-96,0,0,0,0,0,
            0,0,-142,0,-43,0,-77,-287,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-170,0,0,-102,0,0,
            0,0,0,0,-42,0,0,-110,-33,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-88,0,0,-61,0,0,-62,-59,
            0,0,0,0,0,0,0,0,0,0,
            -70,0,0,-116,0,0,0,0,0,0,
            0,0,0,0,-52,0,-111,0,0,0,
            0,0,0,0,0,0,0,0,-241,0,
            -112,-47,-244,0,-69,0,0,0,0,-113,
            0,0,0,0,0,0,0,0,0,-78,
            0,0,0,0,0,-125,0,-148,0,0,
            0,0,0,-63,-133,0,0,-45,0,0,
            0,0,0,0,0,0,0,0,-195,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -171,-179,0,0,0,0,0,0,0,0,
            0,0,-200,0,-166,0,0,0,0,0,
            0,0,0,0,-129,0,-114,0,0,0,
            -206,0,0,0,0,0,0,0,0,0,
            -20,0,-48,0,0,-15,-117,0,-50,-120,
            0,0,0,0,-122,0,0,-277,0,0,
            0,0,0,0,0,0,0,-80,0,-127,
            0,0,0,0,0,-123,0,0,0,0,
            -124,0,0,0,0,-87,0,-131,0,0,
            0,0,0,0,0,0,-83,-153,-97,0,
            0,0,0,0,0,0,0,0,0,-8,
            0,0,-60,0,0,0,0,0,0,0,
            -134,0,0,0,0,0,0,-49,0,0,
            -82,0,0,0,0,0,-130,0,0,0,
            0,-196,0,-136,0,-137,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-141,0,0,0,0,-265,-44,0,
            0,0,0,0,0,0,0,0,0,-135,
            -207,0,0,0,0,-138,0,0,0,0,
            -139,0,-119,0,0,-140,0,0,0,-147,
            0,-103,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-193,-248,0,-183,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-203,0,-243,0,0,0,0,
            -250,0,0,0,-254,0,0,0,0,0,
            0,0,0,-55,0,-199,0,0,0,-275,
            0,0,0,-251,0,-201,-143,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-281,0,0,-144,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-54,0,0,-211,0,-288,
            0,-198,-202,-194,0,0,0,0,0,0,
            0,0,-256,0,-204,0,0,0,-213,0,
            -225,0,-292,0,-56,0,0,0,0,0,
            0,0,0,0,0,-252,0,0,0,0,
            -205,-255,0,-226,0,-9,-17,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-219,
            0,0,0,0,0,0,0,0,0,0,
            -227,0,-228,0,0,0,0,0,0,0,
            0,-209,0,0,0,0,-184,0,0,0,
            0,0,0,0,0,0,0,-212,0,0,
            0,-185,-229,0,0,0,0,0,0,0,
            0,0,0,-221,-230,-1,0,-7,-272,0,
            0,-186,-231,0,0,0,0,0,0,0,
            0,0,0,0,-220,0,-222,0,0,-5,
            0,-264,0,0,-177,-51,0,0,0,0,
            0,0,0,0,0,-232,0,-58,0,-233,
            0,0,0,-234,0,0,0,0,-178,-290,
            0,0,0,0,0,0,0,0,0,0,
            0,-92,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-235,0,0,
            0,0,-167,0,-236,0,0,0,-237,0,
            -246,0,-238,-285,-86,0,0,-180,0,0,
            0,0,0,0,0,0,-12,0,-217,0,
            0,0,0,0,0,0,0,-14,-239,0,
            0,-46,0,-76,0,-132,0,0,-81,0,
            -291,0,0,0,-89,0,-240,0,0,0,
            0,0,0,0,0,0,0,-223,0,-94,
            0,0,0,0,0,0,0,0,-242,0,
            0,-267,-263,-259,0,0,0,0,-260,0,
            0,0,0,0,-269,0,0,-274,0,0,
            0,0,0,0,0,0,0,0,-280,0,
            0,0,0,-247,0,0,0,0,0,0,
            0,0,0,0,-98,0,0,0,0,0,
            0,0,-99,0,0,0,0,0,0,0,
            0,0,-282,0,0,-268,-101,0,0,0,
            0,0,0,0,-128,0,-168,0,-271,-121,
            0,0,0,0,0,0,0,-169,0,0,
            -150,-173,0,0,0,-286,0,0,0,0,
            0,0,0,0,0,-278,0,0,-289,0,
            0,0,-262,0,0,0,0,0,0,-174,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-175,0,
            0,0,0,0,0,0,-176,0,0,0,
            0,0,0,0,0,-218,0,0,0,0,
            0,0,0,-258,0,0,0,0,-191,0,
            -266,0,-279,0,-249,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            103,1,40,40,24,24,36,36,17,17,
            2,2,2,2,3,3,3,4,4,5,
            5,5,5,5,5,5,5,68,68,89,
            89,6,6,6,6,6,6,6,6,6,
            6,6,7,7,8,8,8,8,9,9,
            9,10,10,10,11,11,11,11,11,12,
            12,12,13,13,14,14,15,15,16,16,
            18,18,19,19,21,21,21,21,21,21,
            21,21,21,21,21,21,29,27,20,104,
            104,91,91,54,30,30,30,30,30,30,
            30,31,31,31,28,28,92,92,69,69,
            32,32,33,33,33,60,60,34,34,34,
            34,35,35,35,35,35,46,46,23,23,
            23,23,23,47,47,47,84,84,79,79,
            79,79,80,80,80,81,81,81,82,82,
            82,83,83,83,93,93,85,85,86,48,
            50,50,50,50,50,61,63,63,63,63,
            63,63,63,63,63,63,63,63,73,73,
            22,22,70,70,70,70,71,71,71,74,
            74,75,75,64,64,64,52,105,105,94,
            95,95,95,72,72,96,96,97,97,87,
            87,25,26,26,26,49,51,51,41,41,
            41,41,37,37,38,42,42,43,39,39,
            98,98,44,107,107,106,106,45,45,45,
            45,45,45,45,45,45,99,53,53,53,
            53,76,76,65,65,65,66,66,55,55,
            108,108,78,78,77,77,77,56,56,56,
            57,58,58,58,59,59,59,59,62,62,
            62,67,109,90,90,90,90,88,110,111,
            111,112,112,113,113,103,103,114,114,100,
            100,100,100,115,115,101,101,101,102,102,
            287,397,14,19,15,800,792,44,1029,1109,
            1049,1166,1124,1277,1228,1300,1291,415,1387,74,
            291,91,839,1130,714,134,211,1220,586,448,
            553,14,19,15,800,42,44,1029,1109,1049,
            1166,1124,1277,1228,1300,1937,772,136,133,135,
            159,307,134,211,1572,724,14,19,15,800,
            40,138,225,165,332,222,230,826,1225,304,
            142,145,148,151,136,133,135,159,735,1798,
            1470,1716,1907,1918,1406,774,1401,823,138,504,
            165,1546,332,222,231,173,1529,142,145,148,
            151,560,126,308,173,1922,1798,1470,1716,1907,
            1918,1406,448,1010,14,19,15,800,42,44,
            1029,1109,1049,1166,1885,399,1496,1528,14,19,
            15,800,792,44,1029,1109,1049,1166,1124,1277,
            1228,1300,1291,508,1387,74,713,278,1515,1528,
            14,19,15,800,792,44,1029,1109,1049,1166,
            1124,1277,1228,1300,1291,340,1387,74,388,278,
            493,1345,1862,14,19,15,800,792,44,1029,
            1109,1049,1166,1124,1277,1228,1300,1291,283,1387,
            74,306,869,1410,448,949,14,19,15,800,
            42,44,1029,1109,1049,1166,1124,1277,1228,1889,
            283,237,891,717,284,1410,1822,448,1059,14,
            19,15,800,42,44,1029,1109,1049,1166,1124,
            1277,1893,834,1665,774,397,284,1140,2023,1411,
            1528,14,19,15,800,792,44,1029,1109,1049,
            1166,1124,1277,1228,1300,1291,229,1387,74,1388,
            278,14,19,15,800,792,44,1029,1109,1049,
            1166,1124,1277,1228,1300,1291,334,1387,74,1534,
            278,14,19,15,800,792,44,1029,1109,1049,
            1166,1124,1277,1228,1300,1291,727,1387,74,208,
            278,285,473,677,727,448,1410,14,19,15,
            800,42,44,1029,1109,1049,1166,1124,1878,110,
            223,157,86,337,767,1141,1410,286,228,365,
            95,1295,1497,94,96,97,98,99,173,1292,
            127,287,549,1409,937,677,1410,1553,2051,14,
            19,15,800,792,44,1029,1109,1049,1166,1124,
            1277,1228,1300,1291,89,1387,74,448,889,14,
            19,15,800,792,44,1029,1109,1049,1166,1124,
            1277,1228,1300,1291,521,1387,74,1369,91,14,
            19,15,800,792,44,1029,1109,1049,1166,1124,
            1277,1228,1300,1291,1263,1387,74,448,949,14,
            19,15,800,42,44,1029,1109,1049,1166,1124,
            1277,1228,1300,1291,504,1387,93,238,334,134,
            211,448,309,14,19,15,800,42,44,1029,
            1109,1049,1166,1124,1277,1228,1300,1291,1948,1387,
            73,136,133,135,159,1195,714,686,1546,173,
            1614,1540,774,1506,966,138,1435,165,14,19,
            15,800,42,35,142,145,148,151,1264,126,
            676,1826,1597,1798,1470,1716,1907,1918,1406,448,
            496,14,19,15,800,42,44,1029,1109,1049,
            1166,1124,1277,1228,1300,1291,244,1387,93,448,
            257,14,19,15,800,792,44,1029,1109,1049,
            1166,1124,1277,1228,1300,1291,305,1387,74,448,
            85,14,19,15,800,42,44,1029,1109,1049,
            1783,279,448,210,14,19,15,800,792,44,
            1029,1109,1049,1166,1124,1277,1228,1300,1291,878,
            1387,74,448,84,14,19,15,800,792,44,
            1029,1109,1049,1166,1124,1277,1228,1300,1291,878,
            1387,74,448,83,14,19,15,800,792,44,
            1029,1109,1049,1166,1124,1277,1228,1300,1291,239,
            1387,74,448,82,14,19,15,800,792,44,
            1029,1109,1049,1166,1124,1277,1228,1300,1291,241,
            1387,74,448,81,14,19,15,800,792,44,
            1029,1109,1049,1166,1124,1277,1228,1300,1291,878,
            1387,74,448,80,14,19,15,800,792,44,
            1029,1109,1049,1166,1124,1277,1228,1300,1291,878,
            1387,74,448,79,14,19,15,800,792,44,
            1029,1109,1049,1166,1124,1277,1228,1300,1291,240,
            1387,74,448,78,14,19,15,800,792,44,
            1029,1109,1049,1166,1124,1277,1228,1300,1291,20,
            1387,74,448,77,14,19,15,800,792,44,
            1029,1109,1049,1166,1124,1277,1228,1300,1291,556,
            1387,74,448,76,14,19,15,800,792,44,
            1029,1109,1049,1166,1124,1277,1228,1300,1291,877,
            1387,74,448,75,14,19,15,800,792,44,
            1029,1109,1049,1166,1124,1277,1228,1300,1291,611,
            1387,74,448,92,14,19,15,800,42,44,
            1029,1109,1049,1166,1124,1277,1228,1300,1291,334,
            1387,93,448,232,14,19,15,800,792,44,
            1029,1109,1049,1166,1124,1277,1228,1300,1291,768,
            1387,74,448,1605,14,19,15,800,42,44,
            1029,1109,1049,1795,989,448,201,14,19,15,
            800,792,44,1029,1109,1049,1166,1124,1277,1228,
            1300,1291,1838,1387,74,448,1712,14,19,15,
            800,42,44,1029,1109,1049,1166,1124,1277,1228,
            1300,1291,727,1387,93,448,494,14,19,15,
            800,42,44,1029,1109,1049,1166,1124,1277,1228,
            1300,1291,780,1387,93,448,2116,14,19,15,
            800,42,39,771,738,173,1924,881,448,202,
            14,19,15,800,42,44,1029,1109,1049,1166,
            1124,1277,1228,1300,1291,944,1387,93,1591,1894,
            14,19,15,800,33,175,310,271,636,338,
            327,222,227,183,216,1229,219,221,266,1577,
            1674,269,110,824,1668,86,884,767,772,884,
            1,310,1931,95,1295,108,94,96,97,98,
            99,826,1325,123,331,1502,122,110,252,211,
            86,109,767,772,226,834,1935,352,95,1295,
            108,94,96,97,98,99,309,197,199,834,
            2073,360,442,388,106,884,109,104,1762,229,
            911,327,222,227,23,216,1229,219,221,271,
            774,1193,111,275,774,260,884,1250,879,107,
            264,1577,1674,269,891,231,310,194,173,1929,
            327,222,227,125,217,1229,219,221,271,499,
            1596,261,110,252,211,86,1430,767,772,266,
            1577,1674,269,95,1295,108,94,96,97,98,
            99,944,448,274,14,19,15,800,42,44,
            1751,109,258,609,677,727,327,222,227,207,
            216,1229,219,221,271,173,677,851,1457,790,
            606,117,310,87,106,264,1577,1674,269,16,
            115,467,1089,173,1895,87,1263,1050,110,769,
            1145,86,1673,767,772,603,1959,1391,548,95,
            1295,108,94,96,97,98,99,105,1134,714,
            884,134,211,1891,251,211,1173,109,327,222,
            423,59,216,1229,219,480,769,121,173,677,
            22,196,158,137,133,135,159,57,934,448,
            107,14,19,15,800,42,38,139,87,165,
            330,251,211,774,677,1685,143,146,149,152,
            1310,528,677,252,211,1243,154,411,659,1446,
            124,881,192,87,633,134,211,1070,110,734,
            1316,86,334,767,583,677,467,738,769,95,
            1295,103,94,96,97,98,99,144,133,135,
            159,110,1318,881,86,1650,767,182,326,1005,
            714,290,95,1295,101,94,96,97,98,99,
            961,638,677,327,222,227,1184,216,1229,219,
            221,1610,196,173,1672,1293,1620,158,110,185,
            57,86,1591,767,14,19,15,800,32,95,
            1295,102,94,96,97,98,99,946,693,677,
            448,1310,14,19,15,800,42,44,1029,1109,
            1803,154,411,191,1186,110,1185,714,86,633,
            767,748,677,1197,1428,878,95,1295,118,94,
            96,97,98,99,173,714,173,436,110,1264,
            891,86,273,767,803,677,884,881,1778,95,
            1295,114,94,96,97,98,99,772,1978,1418,
            289,110,292,1994,86,242,767,858,677,1293,
            881,256,95,1295,1975,94,96,97,98,99,
            303,1963,1407,184,110,886,714,86,1271,767,
            913,677,881,727,1216,95,1295,113,94,96,
            97,98,99,173,458,727,203,110,1264,1192,
            86,987,767,968,677,467,738,1578,95,1295,
            120,94,96,97,98,99,771,738,280,1601,
            110,727,878,86,991,767,386,467,738,272,
            256,95,1295,119,94,96,97,98,99,333,
            614,1407,327,222,227,1624,216,1229,219,221,
            334,134,211,327,222,227,158,216,1229,219,
            221,822,243,828,327,222,227,1668,216,1229,
            219,221,779,147,133,135,159,448,606,14,
            19,15,800,42,44,1029,1109,1836,881,193,
            155,411,448,547,14,19,15,800,42,44,
            1029,1109,1840,1182,727,602,343,337,1302,881,
            198,199,448,992,14,19,15,800,42,44,
            1029,1109,1844,301,204,606,2124,727,1964,395,
            399,337,1306,134,211,448,724,14,19,15,
            800,42,44,1029,1691,742,1003,301,724,274,
            1044,1969,300,395,1087,141,133,135,159,448,
            881,14,19,15,800,42,44,1029,1714,140,
            271,165,769,327,222,227,300,217,1229,219,
            221,264,1577,1674,269,327,222,1436,666,217,
            1229,219,1415,728,1740,1023,26,251,211,1147,
            1799,884,1959,691,878,442,297,299,448,311,
            14,19,15,800,42,44,1753,1671,2131,1435,
            1820,14,19,15,800,42,35,774,1693,1281,
            298,299,1048,714,1091,714,173,677,271,1177,
            714,878,134,211,291,657,714,1199,1458,264,
            1577,1674,269,134,211,196,87,196,727,245,
            173,310,196,1711,150,133,135,159,1264,727,
            263,697,884,727,1227,153,133,135,159,1229,
            87,293,21,196,1310,1104,1310,1375,1231,2133,
            2220,1310,207,270,2220,2220,191,276,191,884,
            256,1560,790,191,609,677,1491,1428,1523,1428,
            614,1407,1883,1627,1428,448,117,14,19,15,
            800,42,37,448,87,14,19,15,800,42,
            36,115,2220,1306,2220,2220,727,448,1162,14,
            19,15,800,42,34,609,310,173,310,727,
            448,1069,14,19,15,800,42,35,173,310,
            1989,769,173,677,1962,87,891,87,772,2220,
            196,2220,115,277,1375,2220,727,2220,87,727,
            2220,196,87,886,714,1375,251,211,294,969,
            448,1373,14,19,15,800,42,47,2220,1883,
            1670,1850,2220,1693,2220,1626,1264,2220,2220,448,
            1883,14,19,15,800,42,46,448,2220,14,
            19,15,800,42,45,1794,1464,2220,14,19,
            15,800,42,43,1185,714,1817,1458,256,173,
            677,609,677,609,677,173,677,2220,2039,1407,
            2220,2220,2220,2220,2220,2220,2220,1264,2220,87,
            1092,87,2220,87,2220,87,1919,2220,115,2220,
            115,2220,2026,2220,2220,2220,2220,2220,2220,2220,
            2220,2220,2220,2220,2220,2220,2220,1182,2220,256,
            2220,2220,2220,2220,2220,2220,2220,2220,2220,1963,
            1407,2066,2220,2069,2220,0,179,224,0,2227,
            1,0,1,2455,0,7,9,0,179,17,
            0,178,18,0,1,2444,0,112,1647,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,0,57,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,58,57,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,0,57,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,0,1,2,3,
            0,5,2,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,0,23,
            24,25,26,27,28,0,30,31,32,33,
            34,35,36,37,38,0,40,41,42,0,
            0,1,2,0,48,5,0,0,5,53,
            4,55,0,1,2,3,4,5,19,20,
            21,0,23,24,25,26,27,28,22,0,
            9,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,56,40,41,42,0,56,0,1,2,
            48,66,5,56,58,53,0,55,0,1,
            2,3,4,5,19,20,21,0,23,24,
            25,26,27,28,0,73,2,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,78,40,41,
            42,0,1,56,3,0,48,0,1,2,
            3,53,5,55,7,8,9,10,11,12,
            13,14,15,16,17,18,0,1,2,73,
            56,73,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,0,0,0,22,0,4,2,0,1,
            2,29,4,0,0,10,11,0,1,6,
            3,39,0,6,22,43,44,45,46,47,
            0,49,50,51,52,0,54,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,0,0,0,22,
            58,56,0,61,56,0,29,59,6,0,
            5,66,69,70,71,72,39,19,20,21,
            43,44,45,46,47,80,49,50,51,52,
            60,54,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,0,0,56,22,0,4,2,0,4,
            0,29,4,66,4,69,70,71,72,0,
            61,39,67,68,22,43,44,45,46,47,
            22,49,50,51,52,0,54,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,0,1,0,22,
            58,56,0,61,59,0,29,59,58,59,
            69,70,71,72,9,0,39,19,20,21,
            43,44,45,46,47,0,49,50,51,52,
            0,54,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,76,0,1,22,3,0,1,6,3,
            64,29,6,0,1,2,0,0,5,2,
            4,39,5,58,0,43,44,45,46,47,
            6,49,50,51,52,60,54,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,76,0,0,22,
            0,1,2,0,7,8,29,4,0,0,
            0,2,4,56,5,59,39,19,20,21,
            43,44,45,46,47,22,49,50,51,52,
            22,54,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,0,0,0,22,0,5,0,6,4,
            60,29,5,0,0,56,58,4,0,0,
            2,39,19,20,21,43,44,45,46,47,
            0,49,50,51,52,0,54,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,0,0,0,22,
            0,4,57,0,4,0,29,4,67,68,
            0,1,59,3,67,68,39,19,20,21,
            43,44,45,46,47,22,49,50,51,52,
            0,54,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,81,82,0,22,0,0,57,62,63,
            4,29,65,0,1,0,3,2,0,64,
            2,39,19,20,21,43,44,45,46,47,
            0,49,50,51,52,0,54,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,0,77,0,22,
            0,0,0,7,8,59,29,7,8,0,
            0,56,0,4,0,1,39,3,4,0,
            43,44,45,46,47,6,49,50,51,52,
            60,54,0,19,20,21,61,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,0,40,41,42,0,1,0,
            3,4,48,62,63,0,57,53,0,55,
            2,57,74,75,62,63,19,20,21,0,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,0,40,41,42,
            0,1,0,3,4,48,74,75,0,1,
            53,3,55,0,57,62,63,58,39,19,
            20,21,0,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,0,
            40,41,42,0,1,6,3,4,48,0,
            0,2,2,53,0,55,0,57,62,63,
            6,0,19,20,21,0,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,0,40,41,42,0,1,6,3,
            4,48,79,0,0,0,53,2,55,5,
            57,0,1,0,0,19,20,21,0,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,0,40,41,42,0,
            1,2,3,77,48,0,0,0,0,53,
            0,55,6,57,6,0,0,0,19,20,
            21,58,23,24,25,26,27,28,64,30,
            31,32,33,34,35,36,37,38,64,40,
            41,42,0,1,0,3,0,48,0,0,
            0,56,53,0,55,0,78,0,0,0,
            0,19,20,21,0,23,24,25,26,27,
            28,61,30,31,32,33,34,35,36,37,
            38,0,40,41,42,0,0,0,0,0,
            48,0,0,0,0,53,0,55,0,0,
            19,20,21,0,23,24,25,26,27,28,
            60,30,31,32,33,34,35,36,37,38,
            60,40,41,42,0,1,2,3,4,5,
            0,7,8,9,10,11,12,13,14,15,
            16,17,18,58,0,0,60,23,0,1,
            2,3,4,5,60,7,8,9,10,11,
            12,13,14,15,16,17,18,0,1,2,
            3,23,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,0,0,0,65,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,0,
            0,0,0,65,0,1,2,3,4,5,
            0,7,8,9,10,11,12,13,14,15,
            16,17,18,0,0,0,0,0,0,0,
            0,0,0,0,1,2,3,57,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,1,2,3,65,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,0,1,2,3,0,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,0,1,2,3,0,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,0,1,2,3,0,5,0,7,
            8,9,10,11,12,13,14,15,16,17,
            18,0,1,2,3,0,5,0,7,8,
            9,10,11,12,13,14,15,16,17,18,
            0,1,2,3,0,5,0,7,8,9,
            10,11,12,13,14,15,16,17,18,0,
            1,2,0,4,5,0,0,0,0,0,
            1,2,0,4,5,0,0,0,19,20,
            21,22,23,24,25,26,27,28,19,20,
            21,22,23,24,25,26,27,28,0,0,
            0,0,0,0,0,0,0,61,0,0,
            0,0,0,0,0,56,0,0,59,0,
            0,0,0,0,0,56,0,0,59,83,
            84,85,86,87,88,89,90,91,92,19,
            20,21,0,23,24,25,26,27,28,0,
            0,0,0,0,0,0,0,0,0,0,
            0,19,20,21,0,23,24,25,26,27,
            28,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            2220,3844,1,3836,1441,1,1261,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2228,1,1,1,1,1,1,2320,
            1,1,1,1,1,1,1,1,1,528,
            1,1,1,1246,717,1249,694,612,1,505,
            1324,635,1473,1,547,1,28,2226,7,2205,
            2205,2205,2205,2205,2205,2205,2205,2205,2205,2205,
            2205,2205,2205,2205,2205,2205,2205,2205,2205,2205,
            2205,2205,2205,2205,2205,2205,2205,2205,2205,2205,
            2205,2205,2205,2205,2205,2205,2205,2205,2205,2205,
            2205,2205,2205,2205,2205,2205,2205,2205,2205,2205,
            2205,2205,2205,2205,2247,2205,2220,3844,1,3836,
            1441,1,1261,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,2228,1,
            1,1,1,1,1,2320,1,1,1,1,
            1,1,1,1,1,528,1,1,1,1246,
            717,1249,694,612,1,505,1324,635,1473,1,
            547,1,1,2226,2220,3844,1,3836,2229,1,
            1261,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,2228,1,1,1,
            1,1,1,2320,1,1,1,1,1,1,
            1,1,1,528,1,1,1,1246,717,1249,
            694,612,1,505,1324,635,1473,1,547,1,
            2220,3844,1,3836,2229,1,1261,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2228,1,1,1,1,1,1,2320,
            1,1,1,1,1,1,1,1,1,528,
            1,1,1,1246,717,1249,694,612,1,505,
            1324,635,1473,1,547,1,2220,1551,1950,1556,
            179,2040,2196,2013,2005,2027,1562,1218,364,2230,
            2231,2232,2233,1459,1185,2432,2433,2434,282,2382,
            2383,2381,2435,2384,2380,2220,2387,2392,2391,2389,
            2390,2388,2393,2394,2386,2220,2395,2396,2397,129,
            259,2444,1339,2220,523,1,2220,218,652,456,
            2229,453,2220,1,1,1,2229,1,2432,2433,
            2434,64,2382,2383,2381,2435,2384,2380,2228,70,
            422,1,1,1,2228,1,1,1,1,1,
            1,2522,1,1,1,1,1,1,1,1,
            1,1165,1,1,1,130,481,265,2444,1339,
            1,1620,1488,481,1695,1,2220,1,2220,1,
            1,1,2229,1,2432,2433,2434,2220,2382,2383,
            2381,2435,2384,2380,220,296,1275,1,1,1,
            2228,1,1,1,1,1,1,2522,1,1,
            1,1,1,1,1,1,1,504,1,1,
            1,206,2400,481,2401,2220,1,2220,2237,1950,
            2238,1,2040,1,2013,2005,2027,1562,1218,364,
            2230,2231,2232,2233,1459,1185,1,2444,1717,2195,
            481,295,2220,3844,1,3836,2229,1,1261,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2220,233,59,2228,31,221,654,1,2214,
            1339,2320,2225,2220,2220,2244,2245,2220,2400,377,
            2401,528,2220,405,221,1246,717,1249,694,612,
            2220,505,1324,635,1473,2220,547,2220,3844,1,
            3836,2229,1,1261,1,1,1,1,1,1,
            1,1,1,1,1,1,61,288,247,2228,
            221,2052,187,221,481,48,2320,2224,1195,156,
            2107,1361,1802,1782,1767,1580,528,1,1,1,
            1246,717,1249,694,612,1215,505,1324,635,1473,
            1481,547,2220,3844,1,3836,2229,1,1261,1,
            1,1,1,1,1,1,1,1,1,1,
            1,60,234,1198,2228,1,221,1815,1,2225,
            2220,2320,116,2056,2225,1802,1782,1767,1580,2220,
            569,528,2099,2080,221,1246,717,1249,694,612,
            116,505,1324,635,1473,66,547,2220,3844,1,
            3836,2229,1,1261,1,1,1,1,1,1,
            1,1,1,1,1,1,1,2202,248,2228,
            221,481,2220,221,2224,65,2320,116,1689,2224,
            1802,1782,1767,1580,422,205,528,1,1,1,
            1246,717,1249,694,612,2220,505,1324,635,1473,
            67,547,2220,3844,1,3836,2229,1,1261,1,
            1,1,1,1,1,1,1,1,1,1,
            1,615,2220,2400,2228,2401,2220,2400,414,2401,
            2475,2320,648,2220,2444,1717,2220,262,1488,1815,
            2225,528,1,3628,186,1246,717,1249,694,612,
            1328,505,1324,635,1473,1504,547,2220,3844,1,
            3836,2229,1,1261,1,1,1,1,1,1,
            1,1,1,1,1,1,615,51,2220,2228,
            1,2444,1717,1,1898,1362,2320,2229,2220,265,
            2220,1815,2229,481,1488,2224,528,2432,2433,2434,
            1246,717,1249,694,612,2228,505,1324,635,1473,
            2228,547,2220,3844,1,3836,2229,1,1261,1,
            1,1,1,1,1,1,1,1,1,1,
            1,50,188,249,2228,1,2107,49,1403,2199,
            1072,2320,2107,1,2220,481,1706,2225,2220,2220,
            542,528,2432,2433,2434,1246,717,1249,694,612,
            72,505,1324,635,1473,2220,547,2220,3844,1,
            3836,2229,1,1261,1,1,1,1,1,1,
            1,1,1,1,1,1,54,2220,250,2228,
            2220,2223,2226,2220,2227,1,2320,2229,2099,2080,
            2220,2400,2224,2401,2099,2080,528,2432,2433,2434,
            1246,717,1249,694,612,2228,505,1324,635,1473,
            68,547,2220,3844,1,3836,2229,1,1261,1,
            1,1,1,1,1,1,1,1,1,1,
            1,339,2129,246,2228,2220,1,2226,1825,1849,
            90,2320,2222,2220,2249,267,2250,1289,2220,2475,
            2035,528,2432,2433,2434,1246,717,1249,694,612,
            2220,505,1324,635,1473,209,547,2220,3844,1,
            3836,2229,1,1261,1,1,1,1,1,1,
            1,1,1,1,1,1,53,527,62,2228,
            52,58,2220,1898,1362,90,2320,1898,1362,281,
            2220,481,57,1553,2220,1,528,1,190,227,
            1246,717,1249,694,612,230,505,1324,635,1473,
            1541,547,63,1,1,1,799,1,1,1,
            1,1,1,2415,1,1,1,1,1,1,
            1,1,1,56,1,1,1,2220,1,253,
            1,190,1,1825,1849,2220,1553,1,2220,1,
            1385,190,1112,839,1825,1849,1,1,1,2220,
            1,1,1,1,1,1,2415,1,1,1,
            1,1,1,1,1,1,55,1,1,1,
            2220,1,2220,1,190,1,1112,839,205,522,
            1,522,1,112,190,1825,1849,765,1594,1,
            1,1,2220,1,1,1,1,1,1,2415,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,2220,1,1261,1,189,1,2220,
            2220,1448,1926,1,2220,1,69,190,1825,1849,
            1616,2220,1,1,1,2220,1,1,1,1,
            1,1,2415,1,1,1,1,1,1,1,
            1,1,227,1,1,1,2220,1,231,1,
            190,1,2217,88,1,2220,1,2135,1,652,
            189,2220,2456,2220,1,1,1,1,71,1,
            1,1,1,1,1,2415,1,1,1,1,
            1,1,1,1,1,268,1,1,1,1,
            330,1717,2398,527,1,2220,41,2220,2220,1,
            2220,1,1683,190,1683,2220,2220,2220,2432,2433,
            2434,1052,2382,2383,2381,2435,2384,2380,2475,2387,
            2392,2391,2389,2390,2388,2393,2394,2386,2474,2395,
            2396,2397,2220,2399,2220,2398,2220,523,2220,2220,
            200,481,456,2220,453,2220,504,2220,2220,2220,
            2220,2432,2433,2434,2220,2382,2383,2381,2435,2384,
            2380,589,2387,2392,2391,2389,2390,2388,2393,2394,
            2386,128,2395,2396,2397,28,1,2220,2220,2220,
            523,2220,2220,2220,1,456,2220,453,2220,2220,
            2432,2433,2434,2220,2382,2383,2381,2435,2384,2380,
            1145,2387,2392,2391,2389,2390,2388,2393,2394,2386,
            741,2395,2396,2397,1,2237,1950,2238,2223,776,
            2220,2013,2005,2027,1562,1218,364,2230,2231,2232,
            2233,1459,1185,549,2220,2220,2401,657,2220,2237,
            1950,2238,2223,1909,2400,2013,2005,2027,1562,1218,
            364,2230,2231,2232,2233,1459,1185,2220,2237,1950,
            2238,1125,2040,3529,2013,2005,2027,1562,1218,364,
            2230,2231,2232,2233,1459,1185,2220,2220,2220,2222,
            1,2237,1950,2238,27,2040,3529,2013,2005,2027,
            1562,1218,364,2230,2231,2232,2233,1459,1185,2220,
            2220,2220,2220,2222,2220,2237,1950,2238,2223,2040,
            2220,2013,2005,2027,1562,1218,364,2230,2231,2232,
            2233,1459,1185,2220,2220,2220,2220,2220,2220,2220,
            2220,2220,2220,2220,2237,1950,2238,27,2040,1683,
            2013,2005,2027,1562,1218,364,2230,2231,2232,2233,
            1459,1185,2220,2220,2220,2220,2220,2220,2220,2220,
            2220,2220,2220,2220,2220,1,2237,1950,2238,2222,
            2040,3529,2013,2005,2027,1562,1218,364,2230,2231,
            2232,2233,1459,1185,1,2237,1950,2238,2220,2040,
            3529,2013,2005,2027,1562,1218,364,2230,2231,2232,
            2233,1459,1185,2220,2237,1950,2238,2220,2040,3529,
            2013,2005,2027,1562,1218,364,2230,2231,2232,2233,
            1459,1185,1,2237,1950,2238,2220,2040,2220,2013,
            2005,2027,1562,1218,364,2230,2231,2232,2233,1459,
            1185,2220,2237,2037,2238,2220,2040,2220,2013,2005,
            2027,1562,1218,364,2230,2231,2232,2233,1459,1185,
            2220,2237,2048,2238,2220,2040,42,2013,2005,2027,
            1562,1218,364,2230,2231,2232,2233,1459,1185,17,
            179,2208,2220,2208,2208,2220,2220,2220,2220,18,
            178,2211,2220,2211,2211,2220,2220,2220,179,179,
            179,2208,179,179,179,179,179,179,178,178,
            178,2211,178,178,178,178,178,178,2220,2220,
            2220,2220,2220,2220,2220,2220,2220,1032,2220,2220,
            2220,2220,2220,2220,2220,2208,2220,2220,2208,2220,
            131,2220,2220,2220,2220,2211,2220,2220,2211,1012,
            992,972,952,932,892,912,872,852,819,2432,
            2433,2434,132,2382,2383,2381,2435,2384,2380,2220,
            2220,2220,2220,2220,2220,2220,2220,2220,2220,2220,
            2220,2432,2433,2434,2220,2382,2383,2381,2435,2384,
            2380
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            475,1,364,440,475,38,508,520,520,36,
            36,520,36,520,366,196,442,431,506,442,
            336,40,60,40,60,198,40,442,528,536,
            196,3,4,300,366,38,293,579,578,196,
            90,337,60,60,60,60,198,198,528,389,
            442,300,121,302,366,442,148,442,336,179,
            294,294,327,506,506,166,506,506,294,336,
            58,181,58,440,352,60,87,53,366,60,
            60,87,200,248,200,198,389,528,302,223,
            141,389,259,352,181,181,181,181,181,125,
            181,181,181,253,270,275,273,281,277,284,
            283,286,285,287,536,531,535,12,87,38,
            181,90,578,334,294,181,294,350,181,393,
            181,181,337,166,58,166,442,290,395,395,
            87,55,87,87,181,327,200,528,535,389,
            141,124,121,181,181,181,181,181,181,181,
            181,181,181,181,536,536,539,352,352,327,
            327,204,181,181,181,181,181,181,181,181,
            181,181,181,181,181,181,181,181,181,181,
            181,181,533,534,297,196,302,87,146,179,
            294,536,506,536,536,336,166,181,293,181,
            292,87,444,181,181,141,125,148,196,297,
            536,536,536,141,273,273,270,270,277,277,
            275,275,275,275,283,281,285,284,58,286,
            300,536,446,531,146,294,179,166,181,166,
            166,55,181,141,141,146,539,446,545,38,
            181,302,536,200,331,204,294,536,335,146,
            536,87,144,582,327,181,330,536,204,294,
            166,200,243,148,141,327,181,166,536,87,
            141,166
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            73,0,2,4,60,61,58,59,22,56,
            0,24,30,19,31,48,25,32,26,33,
            34,27,20,35,36,23,53,28,55,37,
            38,21,40,41,42,1,3,6,0,24,
            19,25,26,27,20,23,28,21,56,58,
            59,6,22,4,5,1,2,60,0,24,
            30,19,31,48,25,32,26,33,34,27,
            20,35,36,23,53,28,55,37,38,21,
            40,41,42,1,3,29,57,4,0,24,
            30,19,31,48,25,32,26,33,34,27,
            20,35,36,23,53,28,55,37,38,21,
            40,41,42,1,3,4,61,58,22,0,
            19,20,21,23,10,11,9,5,7,8,
            17,18,12,2,1,3,13,14,15,16,
            65,4,0,4,57,56,66,2,13,14,
            15,16,1,3,10,11,9,5,7,8,
            17,18,12,6,0,44,46,6,51,54,
            47,39,49,50,45,43,52,29,22,4,
            10,11,9,7,8,17,18,12,2,1,
            3,13,14,15,16,5,0,1,3,4,
            57,58,0,4,59,12,13,14,15,16,
            1,3,2,10,11,9,5,7,8,17,
            18,0,19,20,21,10,11,9,5,7,
            8,17,18,12,2,1,3,13,14,15,
            16,0,4,58,57,22,0,4,58,57,
            61,0,56,2,66,80,10,11,61,83,
            84,85,86,87,89,88,90,91,92,5,
            67,68,7,8,63,62,69,70,71,72,
            74,75,9,76,77,78,57,81,82,65,
            59,60,58,22,4,0,5,2,56,59,
            4,24,30,19,31,48,25,32,26,33,
            34,27,20,35,36,23,53,28,55,37,
            38,21,40,41,42,64,1,3,0,61,
            56,66,0,73,79,57,44,46,6,51,
            54,47,39,49,50,45,43,52,29,4,
            22,13,14,15,16,10,11,9,7,8,
            17,18,12,5,2,3,1,48,53,55,
            38,30,35,33,34,32,31,36,37,40,
            41,42,28,25,23,24,27,26,19,20,
            21,0,39,0,66,80,10,11,9,7,
            8,67,68,62,63,69,70,71,72,74,
            75,76,77,78,81,82,61,83,84,85,
            86,87,88,89,90,91,92,58,56,59,
            24,19,25,26,27,20,23,28,21,22,
            4,5,2,1,0,24,30,19,31,48,
            25,32,26,33,34,27,20,35,36,23,
            53,28,55,37,38,21,40,41,42,1,
            3,64,5,0,73,24,30,19,31,48,
            25,32,26,33,34,27,20,35,36,23,
            53,28,55,37,38,21,40,41,42,1,
            3,5,22,4,29,2,0,38,30,35,
            33,34,32,31,36,37,40,41,42,60,
            22,28,25,23,24,27,26,19,20,21,
            5,1,2,56,58,59,4,0,4,59,
            5,2,56,0,9,5,7,8,67,68,
            62,63,69,70,71,72,74,75,76,77,
            78,81,82,60,83,84,85,86,87,88,
            89,90,91,92,65,59,57,6,4,58,
            22,61,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            128,25,16,107,137,32,93,94,94,65,
            65,94,65,94,89,118,124,25,25,83,
            29,25,74,25,74,74,25,26,74,39,
            118,9,9,38,74,32,108,25,25,118,
            25,61,74,112,74,112,65,74,74,96,
            86,38,34,73,120,124,46,84,69,106,
            108,108,65,25,25,49,25,25,108,29,
            25,7,25,107,1,112,30,107,19,100,
            112,30,104,25,25,65,96,67,141,43,
            36,96,25,145,7,7,7,7,7,35,
            7,7,7,25,25,25,25,25,25,25,
            25,25,25,25,39,77,25,11,74,25,
            7,25,25,25,108,7,108,149,146,25,
            146,146,61,49,25,49,124,25,25,25,
            30,124,30,30,7,65,104,67,39,96,
            36,35,67,7,7,7,7,7,7,7,
            7,7,7,7,39,39,133,145,145,59,
            59,54,146,7,7,7,7,7,7,7,
            7,7,7,7,7,7,7,7,7,7,
            146,7,9,9,76,118,73,30,74,151,
            108,39,25,39,39,69,49,7,108,7,
            25,30,25,7,7,36,35,7,118,132,
            39,39,39,36,25,25,25,25,25,25,
            25,25,25,25,25,25,25,25,25,25,
            38,39,116,78,42,108,151,49,146,49,
            49,124,7,36,36,74,80,116,25,25,
            7,73,39,104,110,151,108,39,25,42,
            39,30,41,25,65,7,98,39,151,108,
            49,104,57,46,36,65,7,49,39,30,
            36,49
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            84,83,82,81,80,79,5,0,45,0,
            1,23,46,28,0,37,1,98,84,83,
            82,81,80,79,0,37,39,0,1,36,
            0,102,0,1,5,40,0,1,24,0,
            88,67,5,1,0,5,67,0,22,29,
            1,30,0,1,104,0,109,0,89,0,
            1,23,29,92,22,0,25,0,29,22,
            69,36,23,1,0,24,1,37,42,58,
            57,0,1,39,44,37,42,0,70,71,
            72,73,61,47,0,76,0,113,0,1,
            52,64,0,68,0,27,1,17,0,111,
            0,75,1,52,0,1,23,53,0,23,
            1,115,0,42,37,1,0,114,23,1,
            0,24,57,58,1,0,23,1,100,0,
            106,1,23,0,52,1,27,0,23,46,
            1,60,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,87,9,3,10,11,8,6,
            7,68,81,82,83,84,12,13,48,64,
            76,92,69,44,55,60,63,72,93,47,
            52,56,61,62,66,67,74,75,77,78,
            79,80,45,46,49,50,51,54,57,58,
            59,65,70,71,73,1,91,42,90,29,
            31,16,17,30,89,4,14,15,18,19,
            20,21,94,22,23,24,25,26,53,5,
            27,28,32,33,34,35,36,37,38,39,
            40,41,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,0,100,104,105,106,107,108,
            109,110,111,112,113,114,98,115,116,0,
            117,123,127,96,135,0,99,122,118,121,
            0,0,0,0,0,97,156,0,159,95,
            153,155,0,157,158,126,134,0,0,0,
            145,148,154,120,167,170,171,172,0,0,
            137,144,0,147,160,166,0,0,125,138,
            139,140,141,0,146,165,169,102,129,130,
            131,132,133,136,142,143,152,173,101,103,
            119,124,128,150,0,0,151,161,164,178,
            0,180,0,0,149,162,163,168,0,174,
            175,0,176,177,179,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            172,82,35,41,91,111,117,12,142,21,
            51,69,123,128,28,47,101,151,168,187,
            191,155,1,1,32,56,79,195,6,105,
            162,133,162,97,59,59,59
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            89,89,4,4,89,89,89,18,148,26,
            4,26,89,89,26,4,99,89,26,26,
            4,159,4,4,26,4,26,26,9,108,
            165,136,180,99,66,61,74
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            5,72,45,45,72,70,70,62,33,59,
            45,39,70,70,59,45,64,28,6,5,
            5,19,113,112,57,45,37,3,88,64,
            7,34,5,64,39,44,39
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            57,57,65,65,57,57,57,57,79,59,
            65,59,57,57,59,65,22,57,59,59,
            65,60,65,65,59,65,59,59,61,1,
            59,39,59,22,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            5,114,89,89,114,114,114,61,74,93,
            89,100,114,114,93,89,67,73,5,5,
            5,35,1,3,93,89,100,5,63,67,
            8,74,5,67,100,102,100
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            147,56,0,95,0,203,94,0,31,144,
            0,161,183,94,6,160,0,97,0,0,
            158,94,2,150,0,96,0,158,94,2,
            0,170,2,0,114,23,192,94,56,0,
            114,192,94,23,56,0,114,23,56,0,
            114,192,94,56,0,114,56,0,130,0,
            2,0,162,96,0,2,96,0,158,94,
            2,130,0,2,0,160,96,0,144,2,
            0,161,189,94,6,115,48,0,97,0,
            161,189,94,6,48,0,145,0,98,0,
            198,94,145,0,94,145,0,149,98,0,
            167,94,6,115,55,0,167,94,6,115,
            53,0,167,94,6,55,0,167,94,6,
            53,0,123,47,0,77,2,99,96,98,
            0,123,117,120,2,51,0,53,121,0,
            185,94,6,0,120,82,111,0,29,116,
            0,171,2,0,96,105,0,171,2,12,
            0,161,183,94,6,117,171,2,0,96,
            3,0,103,0,97,0,197,2,98,0,
            120,56,98,0,120,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1418,0,1528,0,1562,1218,364,2116,1909,339,
            527,504,422,615,1802,1782,1767,1580,1112,839,
            1898,1362,1849,1825,2107,2099,2080,2040,2027,776,
            2013,2005,1459,1185,1198,1165,741,1145,1125,1092,
            1072,1052,1032,1012,992,972,952,932,912,892,
            872,852,819,697,799,677,657,310,717,481,
            589,569,549,458,436,0,1929,1428,1924,1922,
            1529,0,333,1693,1670,1647,1624,1601,1578,1541,
            1391,1504,1481,1325,612,1250,1225,0,1674,1577,
            1229,327,1182,1293,1815,1339,1883,1264,0,365,
            337,1706,1293,1339,1193,1506,1264,1838,1695,1826,
            1401,1717,0,714,310,1406,337,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,196,94,116,207,191,172,173,174,55,
            53,175,48,176,177,94,2,1,130,94,
            6,115,6,115,6,6,115,146,5,144,
            94,130,135,2,200,191,186,179,132,94,
            137,94,6,94,6,94,94,6,5,94,
            146,2,56,94,94,58,61,146,185,52,
            43,45,50,49,39,47,54,51,122,6,
            46,44,115,116,94,94,167,145,94,168,
            94,167,189,115,190,94,94,169,94,23,
            114,94,99,2,12,18,17,8,7,5,
            9,11,10,98,101,103,102,105,104,107,
            106,109,108,111,158,116,159,208,6,160,
            5,137,132,4,120,94,115,2,2,123,
            2,2,94,60,147,60,94,184,1,3,
            167,94,167,161,61,58,189,169,199,94,
            114,192,169,92,91,90,88,89,87,86,
            85,84,83,61,171,120,145,2,2,80,
            66,2,56,68,67,5,62,63,8,7,
            75,74,72,71,70,69,76,9,78,77,
            82,81,150,151,2,94,58,94,6,139,
            153,120,39,120,120,185,60,58,198,60,
            144,161,58,192,23,114,5,117,94,2,
            171,171,197,120,102,102,101,101,104,104,
            103,103,103,103,106,105,108,107,120,109,
            2,170,94,146,94,153,110,117,2,117,
            117,58,60,114,114,6,146,94,117,117,
            60,94,158,183,94,110,153,120,123,94,
            158,161,58,203,66,56,204,153,110,117,
            79,183,129,61,147,66,56,117,153,161,
            147,117
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_name",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_in_statement",
            "expression_list_actual",
            "constant_expression",
            "statement",
            "compound_statement",
            "identifier_or_typedefname",
            "block_item_list",
            "block_item",
            "declaration",
            "declaration_specifiers",
            "init_declarator_list",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "init_declarator",
            "complete_declarator",
            "initializer",
            "declarator",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "knr_direct_declarator",
            "array_modifier",
            "function_direct_declarator",
            "parameter_type_list",
            "function_declarator",
            "identifier_list",
            "knr_function_declarator",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "external_declaration_list",
            "external_declaration",
            "declaration_list",
            "function_body"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 29,
           SCOPE_UBOUND      = 36,
           SCOPE_SIZE        = 37,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 292,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2529,
           MAX_LA            = 2147483647,
           NUM_RULES         = 309,
           NUM_NONTERMINALS  = 116,
           NUM_SYMBOLS       = 209,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1796,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 73,
           EOLT_SYMBOL       = 73,
           ACCEPT_ACTION     = 2195,
           ERROR_ACTION      = 2220;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
