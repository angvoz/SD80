/*******************************************************************************
* Copyright (c) 2006, 2007 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.c99;

public class C99Parserprs implements lpg.lpgjavaruntime.ParseTable, C99Parsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,3,1,4,
            3,4,3,3,2,2,7,8,1,1,
            3,1,2,2,2,2,2,2,2,2,
            2,4,1,4,1,3,3,3,1,3,
            3,1,3,3,1,3,3,3,3,1,
            3,3,1,3,1,3,1,3,1,3,
            1,3,1,5,1,3,3,3,3,3,
            3,3,3,3,3,3,1,1,1,3,
            1,1,1,1,1,1,1,1,3,3,
            2,1,2,4,1,2,1,1,1,2,
            5,7,5,7,5,9,8,8,7,8,
            7,7,6,8,7,7,6,3,2,2,
            2,3,1,2,4,2,2,2,2,1,
            1,1,1,2,1,2,2,2,1,2,
            2,1,2,2,1,2,2,1,3,1,
            3,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,5,
            5,6,6,2,2,1,1,0,1,2,
            4,2,1,1,3,1,2,3,1,5,
            6,6,7,2,1,0,1,3,1,3,
            1,1,1,1,1,3,1,3,1,1,
            2,5,3,1,3,5,1,3,2,4,
            3,5,4,6,6,3,5,1,2,3,
            4,1,2,1,3,1,1,3,2,1,
            2,1,3,1,2,2,1,3,3,1,
            2,2,3,4,5,1,4,5,1,1,
            3,3,3,2,1,2,3,2,1,0,
            1,2,1,1,1,1,4,6,2,1,
            2,-63,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-131,0,0,-8,0,0,0,
            0,0,0,0,0,-111,0,0,0,0,
            0,0,0,0,0,0,0,-127,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-7,
            0,0,0,0,0,0,0,0,0,0,
            0,-77,0,-43,0,0,0,0,0,0,
            0,-2,0,-134,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-4,0,0,
            0,0,0,0,0,0,0,-201,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-27,0,0,-159,
            0,-104,0,0,0,0,0,0,0,0,
            0,-249,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -6,0,0,0,0,-105,0,0,0,0,
            0,0,0,0,0,-251,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-22,0,0,-29,0,0,
            0,0,0,0,0,0,0,0,0,-252,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-39,0,
            0,-31,0,0,0,0,0,0,0,0,
            0,0,0,-260,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-69,0,0,-34,0,-150,0,0,
            0,0,0,0,0,0,0,-263,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-78,0,0,-41,
            0,0,0,0,0,0,0,0,0,0,
            0,-276,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -84,0,0,-52,0,0,-53,0,0,0,
            0,0,0,0,0,-277,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-54,0,0,-55,0,-154,
            0,0,0,0,0,0,0,0,0,-279,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-161,0,
            0,-56,0,-156,0,0,0,0,0,0,
            0,0,0,-280,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-166,0,0,-57,0,0,0,0,
            0,0,0,0,0,0,0,-282,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-175,0,0,-58,
            0,-59,0,0,0,0,0,0,0,0,
            0,-286,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -205,0,0,-60,0,-207,0,0,0,0,
            0,0,0,0,0,-288,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-218,0,0,-61,0,0,
            0,0,0,0,0,0,0,0,0,-289,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-62,0,
            0,-67,0,-209,0,0,0,0,0,0,
            0,0,0,-290,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-82,0,0,-100,0,-210,0,0,
            0,0,0,0,0,0,0,-291,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-240,0,0,-132,
            0,-211,0,0,0,0,0,0,0,0,
            0,-293,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -239,0,0,-12,0,0,0,0,0,0,
            0,0,0,0,0,-42,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-133,-135,0,
            0,-126,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-102,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -19,0,0,0,-123,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-103,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-28,-136,0,0,-124,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-137,0,0,-234,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-195,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-20,-23,0,
            0,-66,0,-121,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-139,-140,0,-243,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-270,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-113,0,0,0,0,
            0,0,0,0,-50,0,0,0,0,0,
            0,-51,0,0,0,0,0,0,-142,-13,
            -157,-158,-176,0,-21,0,-115,0,0,0,
            0,0,0,0,0,0,0,0,-275,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-122,0,
            0,0,0,0,0,0,0,0,0,0,
            -177,0,-178,0,-116,0,0,0,0,0,
            0,0,0,0,0,-179,0,-117,0,0,
            0,0,0,0,0,0,0,0,-79,-180,
            0,-128,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-65,-181,-68,0,-227,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-182,
            -183,-184,0,-228,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-185,-98,-99,0,-244,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-172,-160,0,-246,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-186,0,0,-187,-170,
            0,-248,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-188,-189,-173,0,-262,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -174,-216,0,-265,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-230,-232,0,-266,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-190,-233,0,-284,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-15,0,0,0,-274,-191,
            0,-24,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-86,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -143,0,-118,0,0,0,0,0,0,0,
            0,0,-192,0,-197,0,-200,-223,-224,0,
            0,0,-106,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-235,-242,0,-107,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-219,-258,-261,
            0,-125,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-287,-231,-35,0,-119,0,0,
            0,0,0,0,0,0,0,0,-264,0,
            -196,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-238,0,-268,0,-198,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-255,-278,
            -281,0,-199,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-269,-283,-292,0,-250,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -272,0,0,0,-38,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-146,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-164,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-120,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-271,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-87,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-112,0,0,0,
            0,0,0,0,0,0,0,-88,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-89,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-90,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-91,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-92,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-93,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-94,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -95,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-96,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-97,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-141,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-165,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-114,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-169,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-212,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-225,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-44,0,0,0,0,
            0,0,-45,0,0,0,0,0,0,0,
            -237,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-257,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-46,0,0,0,
            0,0,0,-47,0,0,0,0,0,0,
            0,0,-49,0,0,0,0,0,0,-85,
            0,0,0,0,0,0,0,0,0,0,
            -273,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-226,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-3,0,0,0,
            0,-81,0,-253,-48,0,0,0,0,0,
            0,0,-1,-167,0,0,0,0,0,0,
            -108,0,0,0,0,0,0,0,0,-259,
            0,0,0,-25,-129,0,0,0,0,-151,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-147,0,0,
            0,0,0,-9,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-214,
            0,0,0,0,-26,-30,-32,0,0,-17,
            0,0,-11,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-109,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-80,0,0,-148,0,0,
            -75,0,-202,0,0,0,0,0,0,0,
            0,0,0,0,0,-162,0,0,0,0,
            0,0,0,0,0,0,0,-130,-40,-76,
            0,0,0,0,0,0,0,0,0,0,
            0,-208,-71,0,0,-73,0,0,0,-152,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-33,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-145,-149,0,-153,-138,0,-14,0,
            0,0,0,0,-110,0,0,0,0,0,
            0,0,0,0,0,-206,0,0,0,0,
            0,-168,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-217,0,-256,0,
            0,-193,0,0,0,0,-222,0,0,0,
            0,0,0,0,-64,0,0,0,0,-171,
            0,0,-194,-221,0,0,-254,-5,0,0,
            0,0,-155,0,0,0,0,-10,0,0,
            -16,0,0,0,0,0,0,0,-37,0,
            0,-241,-18,0,0,0,0,-101,0,0,
            0,-83,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-36,-144,
            0,0,0,0,0,0,0,-203,0,0,
            0,0,0,-213,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-163,0,
            0,0,0,0,0,0,0,-215,0,0,
            0,0,0,-70,-72,-74,-204,0,-220,-229,
            0,-236,0,-245,-247,-267,0,0,-285,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            86,19,1,1,40,40,22,22,35,35,
            20,20,2,2,2,2,3,3,3,4,
            4,4,4,4,4,4,4,4,4,69,
            87,87,5,5,5,5,5,5,5,5,
            5,5,5,6,6,7,7,7,7,8,
            8,8,9,9,9,10,10,10,10,10,
            11,11,11,12,12,13,13,14,14,15,
            15,16,16,17,17,18,18,18,18,18,
            18,18,18,18,18,18,18,26,25,21,
            21,51,27,27,27,27,27,27,27,28,
            28,28,33,23,23,88,88,71,71,29,
            29,30,30,30,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,32,32,
            32,32,32,89,43,43,24,24,24,24,
            44,44,44,77,77,73,73,73,73,74,
            74,74,75,75,75,76,76,76,72,72,
            56,56,45,45,45,45,45,55,55,55,
            55,55,55,55,55,55,55,55,55,66,
            64,64,64,64,64,64,78,57,57,58,
            58,52,52,42,90,90,79,79,79,59,
            65,65,65,65,65,80,80,81,81,67,
            67,34,34,34,46,41,41,36,36,36,
            36,37,38,38,68,68,82,92,92,39,
            39,39,39,39,39,39,39,39,47,47,
            47,47,60,60,53,53,53,54,54,49,
            49,49,91,91,63,63,61,61,61,50,
            50,50,50,50,50,50,48,48,48,70,
            70,70,70,62,93,94,94,83,83,86,
            86,95,95,84,84,84,84,85,85,85,
            96,96,127,17,16,19,644,610,45,647,
            678,675,746,712,782,780,848,814,879,75,
            89,2402,109,1122,376,93,1641,612,2627,107,
            92,94,95,96,97,1259,753,17,16,19,
            644,43,45,647,1263,108,2485,134,1,17,
            16,19,644,610,45,647,678,675,746,712,
            782,780,848,814,879,75,89,2402,109,1122,
            957,93,1641,105,2627,107,92,94,95,96,
            97,1259,839,104,734,17,16,19,644,41,
            338,108,508,289,291,17,16,19,644,610,
            45,647,678,675,746,712,782,780,848,814,
            879,75,89,2693,109,1122,243,93,953,106,
            2627,1655,92,94,95,96,97,1259,291,17,
            16,19,644,610,45,647,678,675,746,712,
            782,780,848,814,879,75,89,960,109,1122,
            857,93,940,29,2627,99,92,94,95,96,
            97,1259,291,17,16,19,644,610,45,647,
            678,675,746,712,782,780,848,814,879,75,
            89,793,109,1122,243,93,940,29,2627,115,
            92,94,95,96,97,1259,291,17,16,19,
            644,610,45,647,678,675,746,712,782,780,
            848,814,879,75,89,807,109,1122,966,93,
            221,24,2627,113,92,94,95,96,97,1259,
            291,17,16,19,644,610,45,647,678,675,
            746,712,782,780,848,814,879,75,89,914,
            109,1122,970,93,221,23,2627,1825,92,94,
            95,96,97,1259,291,17,16,19,644,610,
            45,647,678,675,746,712,782,780,848,814,
            879,75,89,902,109,1122,971,93,930,231,
            2627,127,92,94,95,96,97,1259,291,17,
            16,19,644,610,45,647,678,675,746,712,
            782,780,848,814,879,75,89,919,109,1122,
            115,93,221,181,2627,123,92,94,95,96,
            97,1259,291,17,16,19,644,610,45,647,
            678,675,746,712,782,780,848,814,879,75,
            89,914,109,1122,404,93,221,798,2627,126,
            92,94,95,96,97,1259,291,17,16,19,
            644,610,45,647,678,675,746,712,782,780,
            848,814,879,75,89,315,109,1122,412,93,
            930,233,2627,125,92,94,95,96,97,1259,
            291,17,16,19,644,610,45,647,678,675,
            746,712,782,780,848,814,879,75,89,932,
            109,1122,214,93,809,180,2627,122,92,94,
            95,96,97,1259,291,17,16,19,644,610,
            45,647,678,675,746,712,782,780,848,814,
            879,75,89,914,109,1122,178,93,261,200,
            2627,121,92,94,95,96,97,1259,291,17,
            16,19,644,610,45,647,678,675,746,712,
            782,780,848,814,879,75,89,914,109,1122,
            402,93,700,232,2627,119,92,94,95,96,
            97,1259,291,17,16,19,644,610,45,647,
            678,675,746,712,782,780,848,814,879,75,
            89,958,109,1122,738,93,930,20,2627,112,
            92,94,95,96,97,1259,291,17,16,19,
            644,610,45,647,678,675,746,712,782,780,
            848,814,879,75,89,914,109,1122,927,93,
            221,183,2627,124,92,94,95,96,97,1259,
            291,17,16,19,644,610,45,647,678,675,
            746,712,782,780,848,814,879,75,89,856,
            109,1122,208,93,930,234,2627,120,92,94,
            95,96,97,1259,291,17,16,19,644,610,
            45,647,678,675,746,712,782,780,848,814,
            879,75,89,197,109,1122,614,93,869,182,
            2627,118,92,94,95,96,97,1259,291,17,
            16,19,644,610,45,647,678,675,746,712,
            782,780,848,814,879,75,89,962,109,1122,
            967,93,930,201,2627,117,92,94,95,96,
            97,1259,291,17,16,19,644,610,45,647,
            678,675,746,712,782,780,848,814,879,75,
            89,930,109,1122,892,93,261,202,2627,116,
            92,94,95,96,97,1259,715,17,16,19,
            644,610,45,647,678,675,746,712,782,780,
            848,814,879,75,89,2402,203,916,973,976,
            193,1418,753,17,16,19,644,43,45,647,
            678,675,746,712,782,780,848,1600,2728,715,
            17,16,19,644,610,45,647,678,675,746,
            712,782,780,848,814,879,75,89,2402,1417,
            916,237,437,193,1418,753,17,16,19,644,
            43,45,647,678,675,746,712,782,780,1494,
            1736,2728,715,17,16,19,644,610,45,647,
            678,675,746,712,782,780,848,814,879,75,
            89,2402,1443,916,88,987,193,1418,753,17,
            16,19,644,43,45,647,678,675,746,712,
            782,1495,981,2573,2728,677,17,16,19,644,
            610,45,647,678,675,746,712,782,780,848,
            814,879,75,266,2697,1496,618,17,16,19,
            644,610,45,647,678,675,746,712,782,780,
            848,814,879,75,89,2402,1394,916,473,843,
            1641,2800,838,269,753,17,16,19,644,43,
            45,647,678,675,746,712,1466,270,2719,1368,
            218,223,135,212,360,2404,677,17,16,19,
            644,610,45,647,678,675,746,712,782,780,
            848,814,879,75,266,2697,531,17,16,19,
            644,610,45,647,678,675,746,712,782,780,
            848,814,879,75,266,2697,753,17,16,19,
            644,43,45,1313,269,772,17,16,19,644,
            34,268,772,17,16,19,644,33,270,425,
            897,985,989,889,271,355,2430,753,17,16,
            19,644,43,45,647,678,675,1340,272,531,
            17,16,19,644,610,45,647,678,675,746,
            712,782,780,848,814,879,75,266,2697,753,
            17,16,19,644,43,45,647,678,675,746,
            1469,949,2749,861,28,753,17,16,19,644,
            43,45,647,678,675,1365,868,271,753,17,
            16,19,644,43,45,647,678,1390,508,473,
            339,272,588,17,16,19,644,610,45,647,
            678,675,746,712,782,780,848,814,879,75,
            89,222,131,916,957,765,355,2672,588,17,
            16,19,644,610,45,647,678,675,746,712,
            782,780,848,814,879,75,89,287,1420,916,
            423,939,946,2804,588,17,16,19,644,610,
            45,647,678,675,746,712,782,780,848,814,
            879,75,89,2458,1446,916,950,473,473,2805,
            569,17,16,19,644,610,45,647,678,675,
            746,712,782,780,848,814,879,75,89,2652,
            18,916,554,473,355,1710,569,17,16,19,
            644,610,45,647,678,675,746,712,782,780,
            848,814,879,75,89,1658,719,916,588,951,
            355,1749,588,17,16,19,644,610,45,647,
            678,675,746,712,782,780,848,814,879,75,
            89,2480,1550,916,992,681,473,2806,569,17,
            16,19,644,610,45,647,678,675,746,712,
            782,780,848,814,879,75,89,2694,1659,916,
            656,850,473,1800,569,17,16,19,644,610,
            45,647,678,675,746,712,782,780,848,814,
            879,75,89,22,259,916,724,473,473,1801,
            569,17,16,19,644,610,45,647,678,675,
            746,712,782,780,848,814,879,75,89,452,
            486,916,758,825,473,1826,569,17,16,19,
            644,610,45,647,678,675,746,712,782,780,
            848,814,879,75,89,911,520,916,928,174,
            993,1827,320,17,16,19,644,610,45,647,
            678,675,746,712,782,780,848,814,879,75,
            539,2559,448,17,16,19,644,610,45,647,
            678,675,746,712,782,780,848,814,879,75,
            743,612,229,753,17,16,19,644,43,45,
            647,678,1391,64,542,432,243,994,999,1000,
            2533,134,230,569,17,16,19,644,610,45,
            647,678,675,746,712,782,780,848,814,879,
            75,30,276,883,473,21,753,17,16,19,
            644,610,45,647,678,675,746,712,782,780,
            848,814,879,75,89,226,264,916,914,473,
            473,777,753,17,16,19,644,610,45,647,
            678,675,746,712,782,780,848,814,879,75,
            89,265,622,916,914,1009,832,1573,753,17,
            16,19,644,43,45,647,678,1392,235,473,
            1521,753,17,16,19,644,610,45,647,678,
            675,746,712,782,780,848,814,879,75,89,
            242,690,916,996,277,473,1547,753,17,16,
            19,644,610,45,647,678,675,746,712,782,
            780,848,814,879,75,89,372,2809,916,1014,
            473,473,1548,753,17,16,19,644,610,45,
            647,678,675,746,712,782,780,848,814,879,
            75,89,826,860,916,1003,473,473,1574,753,
            17,16,19,644,610,45,647,678,675,746,
            712,782,780,848,814,879,75,89,894,962,
            916,1015,2873,2873,1775,696,17,16,19,644,
            610,45,647,678,675,746,712,782,780,848,
            814,879,75,641,2732,639,17,16,19,644,
            610,45,647,678,675,746,712,782,780,848,
            814,879,75,266,509,17,16,19,644,610,
            45,647,678,675,746,712,782,780,848,814,
            879,75,845,753,17,16,19,644,43,45,
            647,678,1416,161,2873,2873,2873,2873,243,639,
            17,16,19,644,610,45,647,678,675,746,
            712,782,780,848,814,879,75,266,753,17,
            16,19,644,610,45,647,678,675,746,712,
            782,780,848,814,879,75,86,753,17,16,
            19,644,43,45,647,1311,2873,273,753,17,
            16,19,644,610,45,647,678,675,746,712,
            782,780,848,814,879,75,85,753,17,16,
            19,644,610,45,647,678,675,746,712,782,
            780,848,814,879,75,84,753,17,16,19,
            644,610,45,647,678,675,746,712,782,780,
            848,814,879,75,83,753,17,16,19,644,
            610,45,647,678,675,746,712,782,780,848,
            814,879,75,82,753,17,16,19,644,610,
            45,647,678,675,746,712,782,780,848,814,
            879,75,81,753,17,16,19,644,610,45,
            647,678,675,746,712,782,780,848,814,879,
            75,80,753,17,16,19,644,610,45,647,
            678,675,746,712,782,780,848,814,879,75,
            79,753,17,16,19,644,610,45,647,678,
            675,746,712,782,780,848,814,879,75,78,
            753,17,16,19,644,610,45,647,678,675,
            746,712,782,780,848,814,879,75,77,753,
            17,16,19,644,610,45,647,678,675,746,
            712,782,780,848,814,879,75,76,753,17,
            16,19,644,43,45,647,678,675,746,712,
            782,780,848,814,879,91,753,17,16,19,
            644,610,45,647,678,675,746,712,782,780,
            848,814,879,75,1708,753,17,16,19,644,
            43,45,1326,2873,2873,2873,2873,2873,2873,1657,
            753,17,16,19,644,610,45,647,678,675,
            746,712,782,780,848,814,879,75,90,753,
            17,16,19,644,43,45,647,678,675,746,
            712,782,780,848,814,879,91,753,17,16,
            19,644,610,45,647,678,675,746,712,782,
            780,848,814,879,75,31,753,17,16,19,
            644,43,40,753,17,16,19,644,43,39,
            210,753,17,16,19,644,43,45,647,678,
            675,746,712,782,780,848,814,879,91,753,
            17,16,19,644,43,45,647,678,675,746,
            712,782,780,848,814,879,91,753,17,16,
            19,644,43,38,753,17,16,19,644,43,
            37,2873,197,753,17,16,19,644,43,35,
            753,17,16,19,644,43,36,2873,2873,2873,
            198,753,17,16,19,644,43,45,647,678,
            675,746,712,782,780,848,814,879,91,753,
            17,16,19,644,43,45,647,678,675,746,
            712,782,780,848,814,879,74,354,179,2873,
            2873,2873,401,179,884,550,17,16,19,644,
            43,36,1734,190,550,17,16,19,644,43,
            36,753,17,16,19,644,43,48,2873,2873,
            886,141,2397,285,912,922,141,317,2873,267,
            612,143,140,142,2723,236,143,140,142,471,
            219,408,145,292,237,130,284,145,251,2572,
            192,149,152,155,241,27,149,152,155,103,
            2708,2493,2629,2711,2490,2708,2493,2629,2711,2490,
            608,360,2873,2397,285,415,88,88,317,2873,
            401,179,2873,342,811,219,576,281,283,382,
            471,219,408,2873,1366,2576,2531,284,2464,753,
            17,16,19,644,43,47,607,219,220,260,
            2873,573,219,408,141,310,882,141,843,2873,
            947,149,360,415,144,140,142,151,140,142,
            228,158,2873,2873,1444,146,822,2646,282,283,
            223,2873,1265,1364,150,153,156,1172,922,832,
            832,505,219,220,260,2667,882,227,262,505,
            219,220,317,921,882,709,921,2685,129,2873,
            944,249,505,219,220,260,251,1168,2873,158,
            1261,1265,2402,242,242,2402,709,193,207,2402,
            193,2873,485,2873,193,1172,2873,1522,505,219,
            220,714,1262,1773,2873,2440,2873,2873,2440,1622,
            440,2560,2440,415,921,189,921,922,189,776,
            578,2580,190,680,2580,753,17,16,19,644,
            43,46,1265,2402,2873,2402,23,110,193,2873,
            193,194,658,17,16,19,644,43,44,505,
            219,220,2802,141,882,2402,2440,49,2440,317,
            2525,2873,922,154,140,142,189,49,189,159,
            2873,816,2580,884,2580,88,2402,2873,1265,2873,
            827,2525,132,922,879,247,2402,964,415,1339,
            913,2525,2873,149,2750,505,219,220,460,2677,
            1773,791,262,128,2480,2873,247,1265,2873,48,
            1684,913,48,251,2694,2873,247,2873,845,260,
            1684,913,832,260,505,219,220,1683,2402,1168,
            709,2402,141,2525,947,141,2525,1470,195,251,
            88,1522,148,140,142,157,140,142,995,471,
            219,576,1261,147,1006,2873,242,260,247,2402,
            207,247,1339,913,1641,1709,913,2402,709,53,
            275,288,1641,918,1262,607,219,220,843,255,
            1929,1599,1894,290,88,88,88,88,2402,88,
            922,291,881,2525,922,922,922,2722,2873,922,
            263,2873,2873,2624,2626,2703,1125,2873,1196,2873,
            1472,2873,191,1261,1498,1524,1576,2873,248,114,
            2873,208,2873,2873,2873,2873,2873,2873,2873,2873,
            2873,2873,2873,2873,2873,2873,2758,2873,0,1,
            3090,0,2882,1,0,1,2876,0,1,2875,
            0,1,1193,0,9,11,0,1,3125,0,
            111,792,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,0,23,2,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,0,0,49,
            50,3,0,53,54,55,56,57,58,59,
            60,61,62,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,21,63,23,0,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            63,63,49,50,0,63,53,54,55,56,
            57,58,59,60,61,62,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,0,23,
            2,25,26,27,28,29,30,0,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,0,0,49,50,0,64,53,
            54,55,56,57,58,59,60,61,62,0,
            1,2,3,4,5,22,0,83,84,85,
            86,87,88,89,90,91,92,0,19,20,
            21,0,23,0,25,26,27,28,29,30,
            24,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,0,64,49,66,
            0,1,2,3,4,5,69,70,71,72,
            0,1,2,3,0,19,20,21,47,19,
            20,21,73,23,0,25,26,27,28,29,
            30,64,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,74,75,49,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,0,
            1,2,3,73,0,25,0,1,2,0,
            1,2,3,4,5,6,7,8,9,10,
            11,22,13,14,15,16,17,18,0,49,
            50,0,23,53,54,55,56,57,58,59,
            60,61,62,0,0,2,3,3,5,0,
            19,20,21,47,23,51,52,26,27,28,
            29,30,19,20,21,0,23,2,0,26,
            27,28,29,30,65,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            0,0,2,0,1,5,47,69,70,71,
            72,0,9,10,0,1,2,6,7,19,
            20,21,0,23,0,22,26,27,28,29,
            30,0,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,0,1,2,
            3,4,5,6,7,8,9,10,11,0,
            13,14,15,16,17,18,19,20,21,66,
            23,47,0,51,52,0,4,76,19,20,
            21,50,23,80,0,26,27,28,29,30,
            0,32,33,34,35,36,37,38,39,40,
            41,42,43,19,20,21,0,0,0,1,
            2,3,65,5,6,7,8,9,10,11,
            48,13,14,15,16,17,18,19,20,21,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,0,
            1,2,3,4,5,6,7,8,9,10,
            11,31,13,14,15,16,17,18,0,1,
            2,3,4,5,6,7,8,9,10,11,
            73,13,14,15,16,17,18,0,1,2,
            3,4,5,6,7,8,9,10,11,0,
            13,14,15,16,17,18,0,0,1,2,
            3,0,25,0,65,4,48,0,1,2,
            3,4,5,6,7,8,9,10,11,22,
            13,14,15,16,17,18,25,24,0,1,
            2,3,25,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,0,1,2,
            3,0,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,0,1,2,3,
            0,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,0,1,2,3,0,
            5,6,7,8,9,10,11,8,13,14,
            15,16,17,18,0,1,2,3,0,5,
            6,7,8,9,10,11,8,13,14,15,
            16,17,18,0,1,2,3,0,5,6,
            7,8,9,10,11,0,13,14,15,16,
            17,18,0,1,2,3,76,5,6,7,
            8,9,10,11,0,13,14,15,16,17,
            18,0,1,2,3,0,5,6,7,8,
            9,10,11,0,13,14,15,16,17,18,
            0,0,0,1,19,20,21,0,23,0,
            3,26,27,28,29,30,0,1,0,19,
            20,21,4,23,22,78,26,27,28,29,
            30,0,1,2,0,4,0,1,22,0,
            4,0,24,69,70,71,72,0,0,31,
            0,4,0,22,0,1,4,3,22,0,
            19,20,21,4,0,0,0,19,20,21,
            0,24,25,3,67,68,22,0,0,48,
            3,47,4,24,48,19,20,21,0,1,
            0,3,0,0,4,0,4,4,0,4,
            48,0,24,2,6,7,0,48,2,31,
            22,0,1,12,24,25,24,24,12,24,
            0,0,2,0,31,4,31,4,0,1,
            0,0,12,22,4,4,0,67,68,0,
            48,0,1,4,67,68,81,82,0,0,
            22,2,31,0,5,0,25,4,0,0,
            0,31,0,22,6,7,0,0,1,0,
            31,0,1,0,12,0,0,1,12,0,
            0,12,0,1,31,0,1,12,65,22,
            0,12,12,22,0,22,0,1,0,51,
            52,0,0,0,0,0,51,52,0,0,
            51,52,0,77,24,0,12,2,0,1,
            12,12,24,0,0,2,2,0,0,2,
            0,0,0,0,74,75,0,0,0,66,
            0,0,0,0,0,0,0,0,0,0,
            47,0,47,0,0,0,0,0,64,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,77,0,
            78,0,0,0,0,0,0,0,0,0,
            0,79,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            2873,996,2861,2350,1653,2855,2334,2327,2343,1252,
            1245,374,2434,2283,2276,2885,2886,2887,2888,1,
            1,1,1,1,2867,2883,1,1,1,1,
            1,2881,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2971,
            1018,1061,1,2435,2168,2558,1194,384,950,314,
            1105,1342,1019,9,2864,2864,2864,2864,2864,2864,
            2864,2864,2864,2864,2864,2864,2864,2864,2864,2864,
            2864,2864,2864,2864,2864,3119,2864,1,2864,2864,
            2864,2864,2864,2864,2864,2864,2864,2864,2864,2864,
            2864,2864,2864,2864,2864,2864,2864,2864,2864,2864,
            3119,3119,2864,2864,43,3118,2864,2864,2864,2864,
            2864,2864,2864,2864,2864,2864,2873,996,2861,2350,
            2884,2855,2334,2327,2343,1252,1245,374,2434,2283,
            2276,2885,2886,2887,2888,1,1,1,206,1,
            3072,2883,1,1,1,1,1,2873,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,2873,2873,2971,1018,60,2149,2435,
            2168,2558,1194,384,950,314,1105,1342,1019,2873,
            2698,2849,1,2884,1,2361,244,2130,2111,2092,
            2073,2054,2016,2035,1997,1978,1948,160,1,1,
            1,2,1,63,2883,1,1,1,1,1,
            2779,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,238,3147,3159,1851,
            2873,2698,2849,1,2884,1,1913,1738,1643,1328,
            2873,2698,3090,2602,2873,1,1,1,102,1,
            1,1,280,1,2873,2883,1,1,1,1,
            1,1875,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1315,1267,3159,
            2873,996,1193,2350,2884,2876,2334,2327,2343,1252,
            1245,374,2434,2283,2276,2885,2886,2887,2888,250,
            2546,3090,1,279,55,2883,1,2698,3090,1,
            996,2875,2405,2878,2876,2334,2327,2343,1252,1245,
            374,1602,2283,2276,2885,2886,2887,2888,62,2971,
            1018,137,1855,2435,2168,2558,1194,384,950,314,
            1105,1342,1019,2873,2873,2875,1061,1061,2876,2873,
            3084,3085,3086,2291,3037,326,1967,3038,3036,3087,
            3039,3035,3084,3085,3086,2873,3037,3006,2873,3038,
            3036,3087,3039,3035,2877,3041,3046,3045,3043,3044,
            3042,3047,3048,3040,3049,3050,3051,1595,1260,984,
            2873,67,2875,32,1663,2876,2974,1913,1738,1643,
            1328,52,2898,2899,1,2698,3090,2205,1236,3084,
            3085,3086,59,3037,2873,1686,3038,3036,3087,3039,
            3035,2873,3041,3046,3045,3043,3044,3042,3047,3048,
            3040,3049,3050,3051,1595,1260,984,2873,996,2875,
            2414,2878,2876,2334,2327,2343,1252,1245,374,136,
            2283,2276,2885,2886,2887,2888,3084,3085,3086,476,
            2186,418,2873,326,1967,2873,2880,1174,3084,3085,
            3086,1735,3037,442,239,3038,3036,3087,3039,3035,
            2873,3041,3046,3045,3043,3044,3042,3047,3048,3040,
            3049,3050,3051,1,1,1,2873,2873,2873,996,
            2875,2350,2877,2876,2334,2327,2343,1252,1245,374,
            2879,2283,2276,2885,2886,2887,2888,3084,3085,3086,
            1,996,2875,2350,2882,2876,2334,2327,2343,1252,
            1245,374,2797,2283,2276,2885,2886,2887,2888,2873,
            996,2875,2350,2878,2876,2334,2327,2343,1252,1245,
            374,2881,2283,2276,2885,2886,2887,2888,2873,996,
            2875,2350,2880,2876,2334,2327,2343,1252,1245,374,
            2848,2283,2276,2885,2886,2887,2888,2873,996,2875,
            2350,2884,2876,2334,2327,2343,1252,1245,374,2873,
            2283,2276,2885,2886,2887,2888,2873,256,2546,3090,
            2602,1,2883,88,2877,2884,2879,1,996,2858,
            2350,2884,2855,2334,2327,2343,1252,1245,374,1602,
            2283,2276,2885,2886,2887,2888,2883,2220,2873,996,
            2875,2350,2883,2876,2334,2327,2343,1252,1245,374,
            2797,2283,2276,2885,2886,2887,2888,2873,996,2875,
            2350,2873,2876,2334,2327,2343,1252,1245,374,2799,
            2283,2276,2885,2886,2887,2888,1,996,2875,2350,
            68,2876,2334,2327,2343,1252,1245,374,2797,2283,
            2276,2885,2886,2887,2888,1,996,2875,2350,65,
            2876,2334,2327,2343,1252,1245,374,1299,2283,2276,
            2885,2886,2887,2888,1,996,2858,2350,66,2855,
            2334,2327,2343,1252,1245,374,1299,2283,2276,2885,
            2886,2887,2888,2873,1039,2875,2350,71,2876,2334,
            2327,2343,1252,1245,374,2873,2283,2276,2885,2886,
            2887,2888,2873,996,2875,2350,1174,2876,2334,2327,
            2343,1252,1245,374,61,2283,2276,2885,2886,2887,
            2888,2873,1082,2875,2350,138,2876,2334,2327,2343,
            1252,1245,374,2873,2283,2276,2885,2886,2887,2888,
            139,2873,2873,1169,3084,3085,3086,49,3037,2873,
            2635,3038,3036,3087,3039,3035,215,1169,2873,3084,
            3085,3086,2882,3037,1602,1065,3038,3036,3087,3039,
            3035,1,2546,2849,2873,2880,1,2690,1602,2873,
            2880,2873,952,1913,1738,1643,1328,2873,240,2881,
            2873,2884,1,1602,254,2690,2880,1,1602,2873,
            3084,3085,3086,2880,2873,73,241,3084,3085,3086,
            51,2623,2883,2635,2509,2421,1602,50,2873,2879,
            2635,2379,2882,2257,2879,3084,3085,3086,256,2690,
            2873,2602,2873,2873,2884,2873,2880,2882,54,2882,
            2879,2873,981,3059,2205,1236,2873,2879,3059,2881,
            1602,215,2528,1104,2669,2883,1799,1216,2486,1279,
            2873,1,3072,2873,2881,2852,2881,2878,216,1169,
            1,2873,2487,1602,188,2884,69,2509,2421,2873,
            2879,257,2788,2882,2509,2421,1022,1712,58,2873,
            1602,2875,2881,1,2876,57,2883,187,53,56,
            64,188,220,1602,2205,1236,2873,216,2528,185,
            2881,258,2788,2873,224,184,2873,1146,2434,204,
            220,2794,2873,1751,187,2873,1777,2795,2877,1602,
            87,2796,225,1602,209,2361,2873,1803,205,326,
            1967,70,72,2873,1,196,326,1967,42,2873,
            326,1967,111,1108,2220,2873,2434,3072,2873,1829,
            2799,2799,4182,2873,2873,3126,3151,205,2873,2764,
            2873,2873,2873,2873,1315,1267,2873,2873,2873,1851,
            2873,2873,2873,2873,2873,2873,2873,2873,2873,2873,
            2973,2873,2309,2873,2873,2873,2873,2873,2239,2873,
            2873,2873,2873,2873,2873,2873,2873,2873,2873,2873,
            2873,2873,2873,2873,2873,2873,2873,2873,1108,2873,
            1065,2873,2873,2873,2873,2873,2873,2873,2873,2873,
            2873,2870
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            337,1,230,35,366,40,500,364,337,437,
            449,499,499,449,499,449,231,366,457,465,
            33,63,378,176,201,366,43,116,43,116,
            43,370,457,35,254,366,380,179,334,254,
            261,217,18,18,18,18,18,318,18,18,
            18,72,272,277,275,283,279,286,285,288,
            287,289,202,231,500,112,66,33,109,116,
            116,116,116,370,370,254,457,63,465,460,
            231,464,254,334,18,176,18,18,18,18,
            18,18,18,18,18,18,18,465,465,292,
            468,217,217,405,405,299,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,201,16,113,113,
            406,368,368,3,368,368,112,113,75,297,
            18,297,364,231,366,149,366,378,116,142,
            56,116,116,142,370,168,167,168,457,33,
            462,375,380,179,18,334,318,149,18,33,
            375,465,465,464,334,275,275,272,272,279,
            279,277,277,277,277,285,283,287,286,297,
            288,199,113,113,215,18,258,18,18,297,
            3,366,474,147,109,380,142,58,142,168,
            142,18,406,460,378,465,408,334,334,147,
            468,408,260,500,18,18,16,16,113,465,
            368,465,465,147,464,112,18,294,142,462,
            380,465,147,299,113,299,113,16,3,18,
            3,3,168,173,406,58,18,465,168,3,
            465,299,3,465,299,299,113,465,200,145,
            149,406,18,172,145,3,3,465,3,3,
            465,3,465,299,113,3,334,3,3,3,
            3,465,3
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            73,0,54,56,12,60,62,57,50,58,
            59,55,53,61,49,25,4,1,15,16,
            17,18,2,5,9,10,8,6,7,13,
            14,11,3,0,12,64,24,25,4,22,
            1,0,26,19,27,28,29,20,23,30,
            21,22,24,48,12,25,4,3,47,2,
            1,0,47,22,1,24,48,25,4,64,
            0,65,48,31,47,66,80,9,10,8,
            3,6,7,67,68,51,52,69,70,71,
            72,74,75,76,77,78,81,82,83,84,
            85,86,87,88,89,90,91,92,64,22,
            1,24,25,4,0,26,32,19,33,44,
            27,34,28,35,36,29,20,37,38,23,
            45,30,46,39,40,21,41,42,43,2,
            5,31,4,0,31,4,22,66,1,15,
            16,17,18,2,5,9,10,8,3,6,
            7,13,14,11,12,0,64,31,4,24,
            0,64,22,66,0,65,4,23,19,20,
            21,9,10,8,3,6,7,13,14,11,
            1,2,5,15,16,17,18,0,73,79,
            31,54,56,12,60,62,57,50,58,59,
            55,53,61,49,25,4,9,10,8,6,
            7,13,14,11,1,15,16,17,18,3,
            2,5,44,45,46,40,32,37,35,36,
            34,33,38,39,41,42,43,30,27,23,
            26,29,28,19,20,21,0,50,0,12,
            64,83,84,85,86,87,89,88,90,91,
            92,3,67,68,6,7,52,51,69,70,
            71,72,74,75,8,76,77,78,31,81,
            82,65,48,24,25,4,47,0,1,15,
            16,17,18,2,5,9,10,8,3,6,
            7,13,14,11,48,4,0,9,10,8,
            3,6,7,13,14,11,1,2,5,15,
            16,17,18,65,4,0,73,26,32,19,
            33,44,27,34,28,35,36,29,20,37,
            38,23,45,30,46,39,40,21,41,42,
            43,5,49,25,4,3,2,1,0,24,
            2,31,4,0,3,1,22,48,4,26,
            32,19,33,44,27,34,28,35,36,29,
            20,37,38,23,45,30,46,39,40,21,
            41,42,43,63,5,2,0,26,32,19,
            33,44,27,34,28,35,36,29,20,37,
            38,23,45,30,46,39,40,21,41,42,
            43,2,5,63,3,0,40,32,37,35,
            36,34,33,38,39,41,42,43,47,25,
            30,27,23,26,29,28,19,20,21,3,
            2,22,1,24,48,4,0,48,4,3,
            1,22,0,26,32,19,33,44,27,34,
            28,35,36,29,20,37,38,23,45,30,
            46,39,40,21,41,42,43,5,2,12,
            0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            71,18,64,18,122,25,132,9,79,91,
            92,27,27,92,47,92,88,82,5,60,
            117,25,39,51,44,84,18,5,18,5,
            18,5,5,18,62,96,4,16,53,62,
            18,29,17,17,17,17,17,52,17,17,
            17,18,18,18,18,18,18,18,18,18,
            18,18,1,5,132,37,18,117,25,5,
            103,5,103,5,47,62,57,25,60,94,
            65,18,62,53,17,55,17,17,17,17,
            17,17,17,17,17,17,17,60,60,18,
            100,29,29,23,23,59,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,12,36,37,37,
            7,18,18,19,18,18,18,37,18,18,
            17,18,9,125,122,17,76,39,103,45,
            9,107,103,45,47,45,18,18,57,117,
            25,98,4,56,17,53,52,17,17,117,
            99,60,60,60,53,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,37,37,33,17,18,17,17,18,
            19,122,129,5,25,111,45,122,45,45,
            45,17,47,95,39,60,115,53,53,5,
            101,115,18,18,17,17,36,36,37,60,
            18,60,60,16,60,37,17,18,45,25,
            4,60,16,59,37,59,37,36,19,17,
            19,19,45,119,18,122,17,60,45,19,
            60,59,19,60,59,59,37,60,18,42,
            17,18,17,49,42,19,19,60,19,19,
            60,19,60,59,37,19,53,19,19,19,
            19,60,19
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            33,4,88,24,19,0,89,0,20,19,
            0,33,24,35,71,19,4,0,33,4,
            27,0,69,0,39,0,78,0,19,42,
            4,0,19,24,43,4,20,0,19,22,
            0,4,62,19,35,0,59,0,83,0,
            19,4,40,0,40,4,34,0,4,22,
            0,60,0,47,77,76,75,74,73,0,
            95,24,38,19,0,38,82,0,24,19,
            84,38,0,19,38,92,0,64,65,66,
            55,44,0,19,50,36,0,36,22,19,
            50,0,58,19,42,0,19,42,52,0,
            91,19,24,0,19,24,47,0,94,93,
            0,36,19,0,24,19,96,0,19,24,
            43,23,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            2,85,9,96,95,10,11,8,6,7,
            71,3,12,13,86,87,88,89,51,67,
            79,1,72,42,93,47,58,63,66,75,
            92,50,55,59,64,65,69,70,77,78,
            81,82,83,57,73,76,29,91,99,80,
            16,17,48,49,52,53,54,60,61,62,
            68,74,30,31,90,4,14,15,18,19,
            20,21,84,22,23,24,25,26,56,5,
            27,28,32,33,34,35,36,37,38,39,
            40,41,43,44,45,94,97,98
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,105,111,112,113,114,115,116,
            117,118,119,120,121,122,123,110,0,103,
            125,101,128,134,104,124,127,0,0,0,
            0,0,129,141,102,159,0,161,162,100,
            148,153,132,140,0,0,160,149,170,172,
            126,152,163,169,143,147,0,151,156,168,
            171,173,108,144,145,146,158,164,107,109,
            131,135,136,137,138,139,142,150,155,0,
            157,165,176,178,0,0,106,130,133,154,
            166,167,174,175,177,179,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            156,156,38,44,70,95,101,70,126,24,
            54,62,76,107,112,76,15,31,50,85,
            135,152,176,180,15,139,1,10,35,59,
            67,184,89,146,117,146,146,6,81
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            22,19,4,4,22,22,22,19,132,29,
            4,29,22,22,22,19,22,29,4,83,
            22,29,29,4,19,143,4,13,29,4,
            29,29,92,149,120,170,163,8,83
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            4,4,39,39,65,64,64,65,30,50,
            39,38,65,64,64,65,48,50,39,52,
            23,5,4,4,48,17,83,62,50,39,
            36,3,52,6,31,4,4,93,52
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            31,24,65,65,31,31,31,24,79,48,
            65,48,31,31,31,24,31,48,65,25,
            31,48,48,65,24,47,65,15,48,65,
            48,48,2,48,50,48,48,64,25
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static char scopeStateSet[] = {
            17,17,143,143,157,157,157,157,98,150,
            143,161,157,157,157,157,4,150,143,11,
            119,17,17,17,4,47,1,6,150,143,
            161,17,11,20,98,17,17,2,11
        };
    };
    public final static char scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            149,22,0,100,0,192,0,31,0,191,
            117,0,149,0,168,117,12,0,42,102,
            0,102,0,151,117,1,148,0,101,0,
            151,117,1,0,159,1,0,116,23,158,
            117,22,0,116,158,117,23,22,0,116,
            23,22,0,116,158,117,22,0,116,22,
            0,151,117,1,134,0,139,1,0,178,
            117,12,157,44,0,178,117,12,44,0,
            140,0,103,0,188,117,140,0,117,140,
            0,154,103,0,155,117,12,176,46,0,
            155,117,12,176,45,0,155,117,12,46,
            0,155,117,12,45,0,125,57,0,80,
            2,104,101,103,0,125,120,123,1,60,
            0,56,127,0,186,117,12,0,123,82,
            114,0,29,123,0,161,1,0,101,112,
            0,161,1,11,0,168,117,12,120,161,
            1,0,101,3,0,109,42,102,0,101,
            3,0,109,102,0,185,1,102,0,123,
            22,102,0,123,1,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1599,2697,0,1929,1875,1279,1216,1196,1125,0,
            2626,2580,2624,2576,2573,0,1252,1245,374,2652,
            2414,1022,1108,1065,1299,1174,1913,1738,1643,1328,
            1315,1267,2205,1236,1967,326,2635,2509,2421,2350,
            2343,2405,2334,2327,2283,2276,1576,1279,2361,1929,
            1216,1550,1524,1498,2309,1829,1472,1446,1420,1196,
            2291,1125,1394,1368,2379,2257,2239,1803,1777,1751,
            1146,2220,2186,1894,1875,2168,1342,1712,1686,1663,
            1082,1039,2149,2130,2111,2092,2073,2054,2035,2016,
            1997,1978,1948,1622,996,1855,1602,962,928,894,
            860,826,792,758,724,690,656,622,588,554,
            520,486,452,418,384,338,292,0,962,928,
            894,860,826,792,758,724,690,656,622,588,
            554,520,486,452,2758,418,384,338,1364,292,
            360,0,947,811,709,607,573,505,471,2694,
            2480,2690,2546,2728,2525,0,2402,2490,2397,0,
            2669,2480,2572,2533,2546,2458,2623,2525,2749,2485,
            2723,2464,2698,2413,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,184,117,136,1,134,166,122,193,171,
            172,46,45,173,44,174,175,145,3,139,
            117,134,1,22,12,117,176,12,176,12,
            157,12,3,136,117,145,117,23,116,117,
            103,1,11,14,13,7,6,3,8,10,
            9,102,105,107,106,109,108,111,110,113,
            112,114,117,190,166,170,139,117,134,12,
            117,12,117,12,117,117,158,134,151,122,
            117,152,117,116,3,158,92,91,90,88,
            89,87,86,85,84,83,64,161,123,119,
            140,1,1,80,66,1,22,68,67,3,
            51,52,7,6,75,74,72,71,70,69,
            76,8,78,77,82,81,186,61,53,55,
            59,58,50,57,62,60,119,124,2,56,
            54,131,122,117,24,64,145,1,117,155,
            140,156,117,155,117,178,157,179,158,117,
            148,1,24,158,23,116,3,120,24,117,
            1,161,161,185,123,106,106,105,105,108,
            108,107,107,107,107,110,109,112,111,123,
            113,4,123,187,1,1,125,1,1,149,
            47,117,194,12,134,117,155,117,155,178,
            24,64,24,145,1,159,117,116,116,12,
            145,117,120,120,24,47,141,118,123,123,
            50,123,123,117,189,188,47,139,24,148,
            117,151,117,118,123,118,123,118,120,1,
            120,120,168,117,24,24,47,151,168,120,
            123,118,120,123,118,118,123,123,125,24,
            191,66,22,192,24,120,120,123,120,120,
            123,120,123,118,120,79,149,120,120,120,
            120,123,120
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",//$NON-NLS-1$
            "[",//$NON-NLS-1$
            "(",//$NON-NLS-1$
            "{",//$NON-NLS-1$
            ".",//$NON-NLS-1$
            "->",//$NON-NLS-1$
            "++",//$NON-NLS-1$
            "--",//$NON-NLS-1$
            "&",//$NON-NLS-1$
            "*",//$NON-NLS-1$
            "+",//$NON-NLS-1$
            "-",//$NON-NLS-1$
            "~",//$NON-NLS-1$
            "!",//$NON-NLS-1$
            "/",//$NON-NLS-1$
            "%",//$NON-NLS-1$
            ">>",//$NON-NLS-1$
            "<<",//$NON-NLS-1$
            "<",//$NON-NLS-1$
            ">",//$NON-NLS-1$
            "<=",//$NON-NLS-1$
            ">=",//$NON-NLS-1$
            "==",//$NON-NLS-1$
            "!=",//$NON-NLS-1$
            "^",//$NON-NLS-1$
            "|",//$NON-NLS-1$
            "&&",//$NON-NLS-1$
            "||",//$NON-NLS-1$
            "?",//$NON-NLS-1$
            ":",//$NON-NLS-1$
            "...",//$NON-NLS-1$
            "=",//$NON-NLS-1$
            "*=",//$NON-NLS-1$
            "/=",//$NON-NLS-1$
            "%=",//$NON-NLS-1$
            "+=",//$NON-NLS-1$
            "-=",//$NON-NLS-1$
            ">>=",//$NON-NLS-1$
            "<<=",//$NON-NLS-1$
            "&=",//$NON-NLS-1$
            "^=",//$NON-NLS-1$
            "|=",//$NON-NLS-1$
            ",",//$NON-NLS-1$
            "#",//$NON-NLS-1$
            "##",//$NON-NLS-1$
            "nl",//$NON-NLS-1$
            "$empty",//$NON-NLS-1$
            "auto",//$NON-NLS-1$
            "break",//$NON-NLS-1$
            "case",//$NON-NLS-1$
            "char",//$NON-NLS-1$
            "const",//$NON-NLS-1$
            "continue",//$NON-NLS-1$
            "default",//$NON-NLS-1$
            "do",//$NON-NLS-1$
            "double",//$NON-NLS-1$
            "else",//$NON-NLS-1$
            "enum",//$NON-NLS-1$
            "extern",//$NON-NLS-1$
            "float",//$NON-NLS-1$
            "for",//$NON-NLS-1$
            "goto",//$NON-NLS-1$
            "if",//$NON-NLS-1$
            "inline",//$NON-NLS-1$
            "int",//$NON-NLS-1$
            "long",//$NON-NLS-1$
            "register",//$NON-NLS-1$
            "restrict",//$NON-NLS-1$
            "return",//$NON-NLS-1$
            "short",//$NON-NLS-1$
            "signed",//$NON-NLS-1$
            "sizeof",//$NON-NLS-1$
            "static",//$NON-NLS-1$
            "struct",//$NON-NLS-1$
            "switch",//$NON-NLS-1$
            "typedef",//$NON-NLS-1$
            "union",//$NON-NLS-1$
            "unsigned",//$NON-NLS-1$
            "void",//$NON-NLS-1$
            "volatile",//$NON-NLS-1$
            "while",//$NON-NLS-1$
            "_Bool",//$NON-NLS-1$
            "_Complex",//$NON-NLS-1$
            "_Imaginary",//$NON-NLS-1$
            "EOF_TOKEN",//$NON-NLS-1$
            "identifier",//$NON-NLS-1$
            "integer",//$NON-NLS-1$
            "floating",//$NON-NLS-1$
            "charconst",//$NON-NLS-1$
            "stringlit",//$NON-NLS-1$
            "RightBracket",//$NON-NLS-1$
            "RightParen",//$NON-NLS-1$
            "RightBrace",//$NON-NLS-1$
            "SemiColon",//$NON-NLS-1$
            "Invalid",//$NON-NLS-1$
            "Completion",//$NON-NLS-1$
            "EndOfCompletion",//$NON-NLS-1$
            "SingleLineComment",//$NON-NLS-1$
            "MultiLineComment",//$NON-NLS-1$
            "ERROR_TOKEN",//$NON-NLS-1$
            "]",//$NON-NLS-1$
            ")",//$NON-NLS-1$
            "}",//$NON-NLS-1$
            ";",//$NON-NLS-1$
            "expression",//$NON-NLS-1$
            "postfix_expression",//$NON-NLS-1$
            "argument_expression_list",//$NON-NLS-1$
            "member_name",//$NON-NLS-1$
            "type_name",//$NON-NLS-1$
            "initializer_list",//$NON-NLS-1$
            "assignment_expression",//$NON-NLS-1$
            "unary_expression",//$NON-NLS-1$
            "cast_expression",//$NON-NLS-1$
            "multiplicative_expression",//$NON-NLS-1$
            "additive_expression",//$NON-NLS-1$
            "shift_expression",//$NON-NLS-1$
            "relational_expression",//$NON-NLS-1$
            "equality_expression",//$NON-NLS-1$
            "AND_expression",//$NON-NLS-1$
            "exclusive_OR_expression",//$NON-NLS-1$
            "inclusive_OR_expression",//$NON-NLS-1$
            "logical_AND_expression",//$NON-NLS-1$
            "logical_OR_expression",//$NON-NLS-1$
            "conditional_expression",//$NON-NLS-1$
            "expression_in_statement",//$NON-NLS-1$
            "expression_list",//$NON-NLS-1$
            "constant_expression",//$NON-NLS-1$
            "statement",//$NON-NLS-1$
            "compound_statement",//$NON-NLS-1$
            "label_identifier",//$NON-NLS-1$
            "block_item_list",//$NON-NLS-1$
            "block_item",//$NON-NLS-1$
            "declaration",//$NON-NLS-1$
            "goto_identifier",//$NON-NLS-1$
            "declaration_specifiers",//$NON-NLS-1$
            "init_declarator_list",//$NON-NLS-1$
            "simple_declaration_specifiers",//$NON-NLS-1$
            "struct_or_union_declaration_sp" +//$NON-NLS-1$
            "ecifiers",//$NON-NLS-1$
            "enum_declaration_specifiers",//$NON-NLS-1$
            "typdef_name_declaration_specif" +//$NON-NLS-1$
            "iers",//$NON-NLS-1$
            "no_type_declaration_specifier",//$NON-NLS-1$
            "type_qualifier",//$NON-NLS-1$
            "no_type_declaration_specifiers",//$NON-NLS-1$
            "type_specifier",//$NON-NLS-1$
            "struct_or_union_specifier",//$NON-NLS-1$
            "enum_specifier",//$NON-NLS-1$
            "typedef_name",//$NON-NLS-1$
            "init_declarator",//$NON-NLS-1$
            "declarator",//$NON-NLS-1$
            "initializer",//$NON-NLS-1$
            "struct_or_union_identifier",//$NON-NLS-1$
            "struct_declaration_list",//$NON-NLS-1$
            "struct_declaration",//$NON-NLS-1$
            "specifier_qualifier_list",//$NON-NLS-1$
            "struct_declarator_list",//$NON-NLS-1$
            "struct_declarator",//$NON-NLS-1$
            "enum_identifier",//$NON-NLS-1$
            "enumerator_list",//$NON-NLS-1$
            "enumerator",//$NON-NLS-1$
            "direct_declarator",//$NON-NLS-1$
            "pointer",//$NON-NLS-1$
            "function_direct_declarator",//$NON-NLS-1$
            "array_modifier",//$NON-NLS-1$
            "parameter_type_list",//$NON-NLS-1$
            "function_declarator",//$NON-NLS-1$
            "knr_direct_declarator",//$NON-NLS-1$
            "identifier_list",//$NON-NLS-1$
            "knr_function_declarator",//$NON-NLS-1$
            "type_qualifier_list",//$NON-NLS-1$
            "parameter_list",//$NON-NLS-1$
            "parameter_declaration",//$NON-NLS-1$
            "abstract_declarator",//$NON-NLS-1$
            "direct_abstract_declarator",//$NON-NLS-1$
            "designated_initializer",//$NON-NLS-1$
            "designation",//$NON-NLS-1$
            "designator_list",//$NON-NLS-1$
            "designator",//$NON-NLS-1$
            "external_declaration_list",//$NON-NLS-1$
            "external_declaration",//$NON-NLS-1$
            "declaration_list"//$NON-NLS-1$
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 49,
           SCOPE_UBOUND      = 38,
           SCOPE_SIZE        = 39,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 293,
           NT_OFFSET         = 98,
           LA_STATE_OFFSET   = 3164,
           MAX_LA            = 2147483647,
           NUM_RULES         = 291,
           NUM_NONTERMINALS  = 97,
           NUM_SYMBOLS       = 195,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 2413,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 73,
           EOLT_SYMBOL       = 73,
           ACCEPT_ACTION     = 2848,
           ERROR_ACTION      = 2873;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
