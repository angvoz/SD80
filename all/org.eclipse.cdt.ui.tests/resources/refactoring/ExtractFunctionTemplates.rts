//!Extract template function 
//#org.eclipse.cdt.ui.tests.refactoring.extractfunction.ExtractFunctionRefactoringTest
//@A.cpp
void test(){
}
template <typename T>
int tempFunct(){
	
	T i;
	i = 0;
	/*$*/i++;
	i+=3;/*$$*/
	
	return 0;
}

//=
void test(){
}
template<typename T> void exp(T i)
{
    i++;
    i += 3;
}

template <typename T>
int tempFunct(){
	
	T i;
	i = 0;
    exp(i);
	
	return 0;
}

//!Extract template function with template parameter Bug #12
//#org.eclipse.cdt.ui.tests.refactoring.extractfunction.ExtractFunctionRefactoringTest
//@A.cpp
void test(){
}
template <typename T>
int tempFunct(T p){

	/*$*/++p;
	p + 4;/*$$*/
	return 0;
}

//=
void test(){
}
template<typename T> void exp(T p)
{
    ++p;
    p + 4;
}

template <typename T>
int tempFunct(T p){
    exp(p);
	return 0;
}

//!Extract template function with template type declaration Bug #11
//#org.eclipse.cdt.ui.tests.refactoring.extractfunction.ExtractFunctionRefactoringTest
//@A.cpp
void test(){
}
template <typename T>
int tempFunct(){

	/*$*/T p;
	p = 0;
	p + 4;/*$$*/
	p + 2;
	return 0;
}

//=
void test(){
}
template<typename T> T exp()
{
    T p;
    p = 0;
    p + 4;
    return p;
}

template <typename T>
int tempFunct(){

	T p = exp();
	p + 2;
	return 0;
}

