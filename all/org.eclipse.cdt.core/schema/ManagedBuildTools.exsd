<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.cdt.core">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.cdt.core" id="ManagedBuildTools" name="Managed Build Tools"/>
      </appInfo>
      <documentation>
         Describes targets, configurations, and toolchains for the build system.
      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="target"/>
            <element ref="tool"/>
            <element ref="configuration"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="tool">
      <complexType>
         <sequence>
            <element ref="option"/>
            <element ref="optionCategory"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  A unique identifier for the tool that will be used by the build model.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  Human-readable name for the tool to be used in the UI.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="sources" type="string">
            <annotation>
               <documentation>
                  A comma-separated list of file extensions that the tool will produce output for.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="outputs" type="string">
            <annotation>
               <documentation>
                  The extension that the tool will produce from a given input.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="dependencyCalculator" type="string">
            <annotation>
               <documentation>
                  A reference to the class that will calculate the dependencies for a given file. For example, a compiler might require a dependency calculator for source files that discovers the dependenncies on header files.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="command" type="string">
            <annotation>
               <documentation>
                  The command that invokes the tool. For example, gcc for the Gnu C compiler, or g++ for the Gnu C++ compiler.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="option">
      <complexType>
         <sequence>
            <element ref="optionEnum"/>
            <element ref="optionValue"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  A unique identifier for the option.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  A descriptive name for the option.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="valueType" use="default" value="string">
            <annotation>
               <documentation>
                  General options can be one of the following types; &apos;string&apos; for catch-all entries for options that cannot be easily defined any other way, &apos;string list&apos; for entries that consist of a list of values such as defined symbols or paths, &apos;boolean&apos; for options that have two values, and &apos;enumerated&apos; for options that are one-of a list of values.

Two additional types exist to flag options of special relevance to the build model; &apos;include&apos;, and &apos;definedSymbols&apos;. You can pre-populate with optionValues, and they will display in the UI the same way the &apos;StringList&apos; options do. The build model will look specifically for these value types when clients query for include paths and preprocessor defines.
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="string">
                  </enumeration>
                  <enumeration value="stringList">
                  </enumeration>
                  <enumeration value="boolean">
                  </enumeration>
                  <enumeration value="enumerated">
                  </enumeration>
                  <enumeration value="includePath">
                  </enumeration>
                  <enumeration value="definedSymbols">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
         <attribute name="value" type="string">
            <annotation>
               <documentation>
                  Overridden value assigned to the option by the end user.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="category" type="string">
            <annotation>
               <documentation>
                  This is the id of the option category for this option.  The id can be the id of the tool which is also a category.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="defaultValue" type="string">
            <annotation>
               <documentation>
                  Specifies the default value for the option if the &apos;value&apos; field is blank. For enumerated options the optionEnums will be searched for the default. For string list options, all defined optionValues will be treated as defaults. For boolean values, specify truth using the string &apos;true&apos;. All other strings will be treated as false.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="command" type="string">
            <annotation>
               <documentation>
                  An optional value that specifies the actual command that will be passed to the tool on the command line.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="optionEnum">
      <annotation>
         <documentation>
            Defines a single value of an enumerated option.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  Unique identifier for the option enumeration.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  A descriptive name for the enumeration.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isDefault" type="boolean">
            <annotation>
               <documentation>
                  Flags this enumerated value as the default to apply to the option if the user has not changed the setting.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="command" type="string">
            <annotation>
               <documentation>
                  The command that the enumerated value translates to on the command line.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="configuration">
      <complexType>
         <sequence>
            <element ref="toolRef"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="toolRef">
      <complexType>
         <sequence>
            <element ref="optionRef"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="optionRef">
      <annotation>
         <documentation>
            Option references hold onto information the user has changed through the UI. Not all fields will be populated, depending on the option type the reference overrides. For example, the &apos;name&apos; field is used by enumerated options only.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="defaultValue" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="command" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="target">
      <annotation>
         <documentation>
            Represents a type of resource that is the target of the build process, for example, a Linux Library.  A target contains a sequence of tool definitions and configurations.  Targets are arranged in an inheritance hierarchy where a target inherits the list of tools from it&apos;s parent and can add to or override tools in this list.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="tool"/>
            <element ref="configuration"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  Used by the build model to uniquely identify the target.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  A human-readable target name, such as &apos;Linux Executable&apos;. This will be the name the user sees displayed in the UI.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isAbstract" type="boolean" use="default" value="false">
            <annotation>
               <documentation>
                  This is a UI property.  If set to true, users should not be able to create project configurations targeted at this target.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="parent" type="string">
            <annotation>
               <documentation>
                  The id of a target that this tool inherits from.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="artifactName" type="string">
            <annotation>
               <documentation>
                  This is the name of the final build artifact associated with the target. The user will specify this is the UI, so there is no need to supply a default value.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="defaultExtension" type="string">
            <annotation>
               <documentation>
                  This is the extensionthat will be applied to any build artifact created by the target.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isTest" type="boolean">
            <annotation>
               <documentation>
                  A an optional field that flags a target as a test-only target. If true, the target will not appear in the UI.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="optionCategory">
      <annotation>
         <documentation>
            An optional, but useful, mechanism for grouping options together.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="owner" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="optionValue">
      <annotation>
         <documentation>
            A value for defining individual elements of a string list option.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="value" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         CDT 1.1
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         [Enter extension point usage example here.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         
      </documentation>
   </annotation>

</schema>
