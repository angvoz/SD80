/*******************************************************************************
* Copyright (c) 2006, 2009 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.upc;

public class UPCExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, UPCExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,4,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,4,1,4,1,3,3,3,1,3,
            3,1,3,3,1,3,3,3,3,1,
            3,3,1,3,1,3,1,3,1,3,
            1,3,1,5,1,3,3,3,3,3,
            3,3,3,3,3,3,1,1,2,1,
            0,1,3,1,1,1,1,1,1,1,
            1,3,4,3,2,4,1,2,1,1,
            1,2,5,7,5,1,0,7,5,9,
            8,3,2,2,2,3,2,4,2,2,
            2,2,2,1,1,1,1,2,1,2,
            2,2,1,2,2,1,2,2,1,2,
            2,1,2,2,1,3,1,3,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,6,
            8,0,0,1,1,3,3,3,0,1,
            0,1,2,4,2,1,1,1,3,1,
            1,2,3,7,8,0,1,0,1,3,
            1,3,1,1,1,1,1,1,3,1,
            1,1,1,1,3,1,2,2,1,5,
            3,1,3,5,1,3,1,3,2,4,
            3,5,4,6,6,3,5,1,3,4,
            5,6,0,1,2,1,3,1,1,3,
            2,1,1,1,1,2,1,2,3,1,
            1,1,3,1,2,2,2,3,4,5,
            1,1,7,3,0,0,1,1,3,3,
            4,1,1,2,3,2,3,2,1,0,
            1,2,1,1,1,1,1,2,1,3,
            6,4,2,4,1,1,1,1,1,2,
            4,2,4,2,4,1,1,2,1,1,
            1,3,3,2,1,3,2,3,2,3,
            2,2,11,10,10,9,10,9,9,8,
            10,9,9,8,9,8,8,7,10,9,
            9,8,9,8,8,7,1,1,-43,0,
            0,0,0,0,0,0,0,0,-2,0,
            0,0,0,0,0,0,0,0,0,-132,
            0,0,0,0,0,-81,0,0,0,0,
            0,0,0,0,0,0,0,-62,0,0,
            0,0,0,0,0,0,0,-40,0,0,
            0,0,0,0,0,0,-175,0,-153,0,
            -120,0,0,0,0,-88,0,-90,0,-4,
            0,-17,0,0,0,0,0,0,0,-157,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -224,-44,0,0,0,0,0,0,0,0,
            0,0,-207,0,-19,-193,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-148,0,-1,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-82,-20,0,-145,0,0,0,0,0,
            0,0,0,-115,-116,-85,0,0,0,0,
            -21,0,0,0,0,-117,0,0,0,0,
            0,0,0,0,0,-5,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-22,0,-141,0,
            0,0,0,0,0,0,0,-208,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-49,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-83,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-80,0,-45,0,0,0,0,
            0,0,0,0,0,-3,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-124,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-131,0,0,
            0,0,0,0,0,0,0,-199,0,0,
            0,0,0,0,0,0,0,-133,0,0,
            -9,0,0,0,0,0,0,0,-23,0,
            0,0,0,0,-125,-144,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-30,0,
            0,0,0,0,0,0,0,0,-41,0,
            0,0,0,0,0,0,0,0,0,-63,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -64,0,0,0,0,0,0,0,0,0,
            -74,0,0,0,0,0,0,0,0,0,
            0,-65,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-66,0,0,0,0,0,0,0,
            0,0,-75,0,0,0,0,0,0,0,
            0,0,0,-67,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-68,0,0,0,0,0,
            0,0,0,0,-76,0,0,0,0,0,
            0,0,0,0,0,-69,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-70,0,0,0,
            0,0,0,0,0,0,-77,0,0,0,
            0,0,0,0,0,0,0,-71,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-72,0,
            0,0,0,0,0,0,0,0,-78,0,
            0,0,0,0,0,0,0,0,0,-73,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -137,0,0,0,0,0,0,0,0,0,
            -79,0,0,0,0,0,0,0,0,0,
            0,-160,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-161,0,0,0,0,0,0,0,
            0,0,-24,0,0,0,0,0,0,0,
            0,0,0,-196,0,0,0,0,0,0,
            0,0,0,-226,0,0,0,0,0,0,
            0,0,0,-205,0,0,0,0,0,0,
            0,0,0,-25,0,0,0,0,0,0,
            0,0,0,0,-6,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-134,
            0,-211,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-217,0,0,0,0,0,0,0,0,
            0,-26,0,0,0,0,0,0,0,0,
            0,-10,0,0,0,0,0,0,0,0,
            -11,0,0,0,0,0,0,0,-27,-225,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-61,
            0,0,0,0,0,0,0,0,0,-28,
            0,0,0,0,0,0,0,-97,0,-12,
            0,0,0,0,0,0,0,0,-50,0,
            0,0,0,0,0,0,0,0,-95,0,
            0,0,0,0,-174,-118,-86,-147,-29,-36,
            0,-98,0,0,0,0,-99,0,-59,0,
            0,0,0,0,0,0,0,0,-100,0,
            0,0,0,0,0,0,0,0,-212,0,
            0,0,0,0,-164,0,0,0,0,0,
            0,0,0,-92,0,-101,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-128,
            -119,-135,0,0,-13,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-202,0,0,0,0,0,0,-183,-37,
            0,0,0,0,0,0,-58,0,0,0,
            0,0,0,0,0,0,-139,0,0,0,
            0,0,0,-102,-206,0,0,0,0,-103,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-89,-146,0,0,0,
            0,-55,0,0,0,0,0,0,0,0,
            0,-104,0,0,0,-136,0,0,0,0,
            0,0,0,-197,0,0,-195,0,-158,-105,
            0,0,0,0,0,-56,0,0,0,0,
            0,0,0,0,0,0,0,0,-57,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-51,0,0,0,0,0,0,0,0,
            0,-87,0,-52,0,0,0,0,0,0,
            0,0,0,-186,0,-14,0,0,0,0,
            0,0,0,0,0,0,0,0,-127,0,
            0,0,0,0,0,0,0,0,0,0,
            -53,0,0,0,0,0,0,0,0,0,
            0,-93,-91,-210,0,0,-106,0,0,-54,
            0,0,0,0,0,0,0,0,0,-219,
            -130,-169,-182,-154,-84,0,0,0,0,0,
            0,-94,0,0,0,0,-189,0,0,0,
            0,0,0,0,-107,0,-7,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-96,0,0,0,0,
            0,-143,0,0,0,0,0,-152,0,0,
            0,0,0,0,0,0,-42,-156,0,0,
            0,0,-151,0,-108,-165,0,0,0,0,
            0,0,0,0,-163,0,0,0,0,0,
            0,0,-109,-110,0,0,-46,0,0,0,
            0,0,0,0,0,-111,0,-47,0,0,
            0,0,0,0,0,0,0,0,0,-48,
            0,0,0,0,0,0,0,0,-129,-168,
            -187,-159,-162,-39,-138,-181,-173,0,0,0,
            0,0,-112,0,-113,0,-8,0,0,0,
            0,0,0,-114,0,0,0,0,0,-121,
            -123,0,0,0,0,0,-15,0,0,0,
            0,0,0,-16,0,0,0,0,0,0,
            0,-18,0,0,0,-140,0,-60,0,0,
            0,0,-31,0,-185,0,-38,0,-149,-167,
            0,-172,0,-32,-166,-220,0,0,0,0,
            -155,0,0,0,0,0,-33,-170,0,0,
            0,0,0,0,0,0,0,-34,0,0,
            0,0,-122,0,0,0,0,0,-35,0,
            0,-200,-190,0,0,-203,-171,0,0,0,
            0,0,-126,0,0,0,0,-176,0,0,
            0,0,0,0,-142,0,0,0,0,0,
            -184,0,-192,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-178,-201,-179,-150,-216,0,-188,0,0,
            -204,0,0,-180,0,-213,-177,0,-191,-215,
            -221,0,-209,0,-214,0,0,-198,0,0,
            -194,0,-222,0,0,0,0,0,0,0,
            0,0,0,-218,0,0,0,-223,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            89,10,105,22,22,21,21,46,46,72,
            72,1,1,2,2,2,2,3,3,3,
            4,5,5,5,5,5,5,5,5,62,
            62,73,6,6,6,6,6,6,6,6,
            6,6,6,7,7,8,8,8,8,9,
            9,9,11,11,11,12,12,12,12,12,
            13,13,13,14,14,15,15,16,16,17,
            17,18,18,19,19,20,20,20,20,20,
            20,20,20,20,20,20,20,106,31,28,
            90,90,74,74,48,107,107,107,107,107,
            107,107,108,108,108,109,109,114,114,115,
            115,110,110,111,111,111,117,117,112,112,
            112,112,113,113,113,113,113,116,116,27,
            27,27,27,27,35,35,35,80,80,75,
            75,75,75,76,76,76,77,77,77,78,
            78,78,79,79,79,118,118,119,119,120,
            36,38,38,38,38,38,56,57,57,57,
            57,57,57,57,57,57,57,57,57,66,
            63,63,91,92,68,68,64,64,64,69,
            81,81,82,82,70,70,70,33,93,93,
            83,84,84,84,65,65,94,85,85,86,
            86,71,71,23,24,24,24,37,53,53,
            39,39,39,39,42,42,44,40,40,41,
            45,45,121,121,43,122,122,95,95,29,
            29,29,29,29,29,29,29,29,87,54,
            54,54,54,30,59,59,58,58,58,60,
            60,55,55,96,96,47,47,61,61,61,
            49,49,49,50,51,51,51,52,52,52,
            52,67,67,32,32,34,98,97,97,97,
            97,88,99,100,100,101,101,102,102,123,
            123,124,124,125,125,125,125,127,127,126,
            126,126,128,129,129,89,89,2,2,2,
            6,6,6,6,6,6,23,23,25,25,
            26,26,103,103,103,107,130,130,130,130,
            130,130,130,112,112,112,112,112,112,112,
            112,112,112,112,112,112,112,112,112,112,
            112,112,112,112,112,112,112,131,131,1,
            1262,17,21,18,442,1259,45,523,485,295,
            577,541,1063,729,1162,1104,1220,1189,75,92,
            76,429,135,213,326,327,525,20,17,21,
            18,442,43,44,137,134,136,160,618,20,
            17,21,18,442,43,45,523,485,838,577,
            541,1063,729,1162,1694,139,166,551,28,123,
            1700,6,143,146,149,152,277,438,39,396,
            40,1675,65,440,1472,1396,1523,1552,1586,1228,
            556,20,17,21,18,442,1259,45,523,485,
            427,577,541,1063,729,1162,1104,1220,1189,75,
            281,232,618,20,17,21,18,442,43,45,
            1267,1746,282,132,1700,66,347,20,17,21,
            18,442,1259,45,523,485,427,577,541,1063,
            729,1162,1104,1220,1189,75,281,225,179,492,
            218,1616,221,1745,223,224,229,287,282,656,
            1700,1758,32,59,1874,830,1861,1424,293,390,
            135,213,326,327,133,768,151,88,288,328,
            315,64,137,134,136,160,799,1255,255,213,
            326,327,1701,289,199,200,649,20,17,21,
            18,442,324,139,166,275,28,28,1700,1700,
            143,146,149,152,290,438,1773,142,28,32,
            1700,283,1472,1396,1523,1552,1586,1228,587,20,
            17,21,18,442,1259,45,523,485,379,577,
            541,1063,729,1162,1104,1220,1189,75,281,1672,
            618,20,17,21,18,442,43,45,523,485,
            282,1306,1700,281,20,17,21,18,442,1259,
            45,523,485,1793,577,541,1063,729,1162,1104,
            1220,1189,75,735,235,239,618,20,17,21,
            18,442,43,45,1279,291,618,20,17,21,
            18,442,1259,45,523,485,22,577,541,1063,
            729,1162,1104,1220,1189,75,92,804,20,17,
            21,18,442,1259,45,523,485,1805,577,541,
            1063,729,1162,1104,1220,1189,75,1592,461,20,
            17,21,18,442,43,45,523,485,982,577,
            541,1063,729,1162,1104,1220,1189,94,243,187,
            334,618,20,17,21,18,442,43,40,53,
            440,255,213,326,327,235,314,20,17,21,
            18,442,1259,45,523,485,1613,577,541,1063,
            729,1162,1104,1220,1189,75,1673,241,240,618,
            20,17,21,18,442,1259,45,523,485,838,
            577,541,1063,729,1162,1104,1220,1189,75,93,
            618,20,17,21,18,442,1259,45,523,485,
            19,577,541,1063,729,1162,1104,1220,1189,75,
            86,618,20,17,21,18,442,1259,45,523,
            485,838,577,541,1063,729,1162,1104,1220,1189,
            75,85,618,20,17,21,18,442,1259,45,
            523,485,534,577,541,1063,729,1162,1104,1220,
            1189,75,84,618,20,17,21,18,442,1259,
            45,523,485,838,577,541,1063,729,1162,1104,
            1220,1189,75,83,618,20,17,21,18,442,
            1259,45,523,485,535,577,541,1063,729,1162,
            1104,1220,1189,75,82,618,20,17,21,18,
            442,1259,45,523,485,838,577,541,1063,729,
            1162,1104,1220,1189,75,81,618,20,17,21,
            18,442,1259,45,523,485,546,577,541,1063,
            729,1162,1104,1220,1189,75,80,618,20,17,
            21,18,442,1259,45,523,485,838,577,541,
            1063,729,1162,1104,1220,1189,75,79,618,20,
            17,21,18,442,1259,45,523,485,1256,577,
            541,1063,729,1162,1104,1220,1189,75,78,618,
            20,17,21,18,442,1259,45,523,485,838,
            577,541,1063,729,1162,1104,1220,1189,75,77,
            618,20,17,21,18,442,1259,45,523,485,
            1321,577,541,1063,729,1162,1104,1220,1189,75,
            76,618,20,17,21,18,442,1259,45,523,
            485,838,577,541,1063,729,1162,1104,1220,1189,
            75,74,618,20,17,21,18,442,1259,45,
            523,485,23,577,541,1063,729,1162,1104,1220,
            1189,75,1832,618,20,17,21,18,442,1259,
            45,523,485,171,577,541,1063,729,1162,1104,
            1220,1189,75,1834,618,20,17,21,18,442,
            43,45,523,485,736,577,541,1063,729,1162,
            1104,1220,1189,94,618,20,17,21,18,442,
            43,45,523,485,333,577,541,1063,729,1162,
            1104,1220,1189,94,1726,680,20,17,21,18,
            442,322,1853,219,1616,221,1745,223,224,229,
            243,186,618,20,17,21,18,442,43,45,
            523,485,212,577,541,1063,729,1162,1104,1220,
            1189,94,618,20,17,21,18,442,43,45,
            523,485,613,577,541,1063,729,1162,1104,1220,
            1189,94,618,20,17,21,18,442,43,39,
            1863,618,20,17,21,18,442,43,38,176,
            618,20,17,21,18,442,43,45,523,485,
            202,577,541,1063,729,1162,1104,1220,1189,94,
            618,20,17,21,18,442,43,45,523,485,
            238,577,541,1063,729,1162,1104,1685,225,179,
            618,20,17,21,18,442,43,37,203,618,
            20,17,21,18,442,43,45,523,485,380,
            1374,135,213,326,327,654,854,385,1019,885,
            243,31,835,138,134,136,160,81,1740,618,
            20,17,21,18,442,43,45,523,485,115,
            577,541,1063,1646,140,166,276,274,28,1002,
            1700,144,147,150,153,979,438,218,1616,221,
            1745,223,224,229,325,1676,341,267,1257,536,
            272,263,255,213,326,327,277,1813,1416,264,
            838,886,188,1751,274,618,20,17,21,18,
            442,43,36,25,218,1616,221,1745,223,224,
            229,273,232,1322,267,1257,536,272,1844,1030,
            243,31,1746,28,261,1700,1320,618,20,17,
            21,18,442,43,45,523,485,6,577,541,
            1063,729,1634,718,400,243,1783,450,274,1726,
            480,218,1616,221,1745,223,224,229,219,1616,
            221,1745,223,224,229,1874,864,838,269,1257,
            536,272,618,20,17,21,18,442,43,45,
            523,485,511,577,541,1565,243,188,279,135,
            213,326,327,24,583,198,200,243,296,32,
            80,145,134,136,160,1836,618,20,17,21,
            18,442,43,45,523,485,210,577,1615,618,
            20,17,21,18,442,43,45,523,485,1798,
            577,1633,618,20,17,21,18,442,43,45,
            523,485,378,1380,618,20,17,21,18,442,
            43,45,523,485,632,1412,618,20,17,21,
            18,442,43,35,1342,135,213,326,327,430,
            20,17,21,18,442,43,36,142,134,136,
            160,618,20,17,21,18,442,43,45,523,
            1430,246,358,881,243,298,294,249,141,166,
            618,20,17,21,18,442,43,45,523,1527,
            674,883,838,883,6,848,135,213,326,327,
            1746,1835,909,1782,1787,1669,195,661,148,134,
            136,160,278,280,231,193,277,711,20,17,
            21,18,442,320,274,135,213,326,327,218,
            1616,221,1745,223,224,229,926,151,134,136,
            160,1130,235,1844,267,1257,536,272,430,20,
            17,21,18,442,43,36,1320,880,6,135,
            213,326,327,235,243,70,599,522,1677,1841,
            333,154,134,136,160,430,20,17,21,18,
            442,43,36,120,706,332,274,618,20,17,
            21,18,442,43,48,228,200,247,618,20,
            17,21,18,442,43,47,267,1257,536,272,
            618,20,17,21,18,442,43,46,266,924,
            601,113,974,235,6,518,924,441,1783,507,
            507,507,1847,20,656,487,507,742,20,17,
            21,18,442,41,550,242,1258,1258,197,1701,
            912,175,88,1258,1484,644,1701,773,20,17,
            21,18,442,34,773,20,17,21,18,442,
            33,284,6,1773,259,260,391,1397,6,1739,
            1349,259,369,6,1397,518,1739,340,656,486,
            32,193,6,369,6,386,32,656,209,197,
            88,930,1838,769,369,1607,88,6,957,1683,
            197,88,1557,1849,769,90,1607,369,6,418,
            1701,197,88,925,227,769,1701,1607,369,6,
            811,180,247,716,197,88,661,57,769,369,
            1607,853,507,382,1349,197,88,507,978,769,
            1084,1607,274,1726,895,382,197,88,1858,1258,
            769,6,1607,518,197,937,254,213,326,327,
            1484,1833,269,1257,536,272,979,1021,254,213,
            326,327,235,169,235,539,1006,259,441,1783,
            1846,518,1739,507,838,507,838,382,1851,723,
            518,518,525,235,244,192,245,192,382,483,
            197,747,1258,235,525,225,1484,230,1735,1671,
            254,213,326,327,449,295,234,1855,373,1939,
            736,254,213,326,327,297,1939,204,1939,1939,
            259,1939,1032,1542,1939,1739,181,205,1939,1939,
            1939,1939,1939,192,1939,1939,708,1939,194,209,
            1939,1939,1939,1939,1850,1671,1939,1289,1939,1939,
            1939,1939,1939,1786,1849,1939,0,329,698,0,
            20,179,0,1,2165,0,1,2176,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,12,13,14,15,16,17,18,0,
            20,21,22,23,24,25,26,27,28,29,
            30,0,32,33,34,35,36,37,0,0,
            40,41,42,43,44,45,46,47,48,49,
            50,51,0,53,54,55,0,1,0,3,
            8,5,4,0,0,0,2,11,12,0,
            14,6,7,9,10,0,1,38,3,0,
            0,25,26,27,4,6,7,68,32,33,
            34,35,36,37,19,31,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,0,1,0,3,60,5,4,0,
            62,63,0,11,12,61,14,64,65,66,
            67,0,0,64,65,66,67,25,26,27,
            76,0,62,63,32,33,34,35,36,37,
            0,19,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,0,1,
            0,3,60,5,0,0,62,63,4,11,
            12,31,14,64,65,66,67,0,1,0,
            3,0,0,25,26,27,5,56,57,0,
            32,33,34,35,36,37,19,8,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,0,1,0,3,60,38,
            39,0,1,2,0,11,12,0,14,5,
            70,71,0,1,0,3,0,1,0,25,
            26,27,77,78,6,7,32,33,34,35,
            36,37,70,71,40,41,42,43,44,45,
            46,47,48,49,50,51,0,53,54,55,
            0,1,2,3,4,5,6,7,8,9,
            10,0,58,13,0,15,16,17,18,68,
            20,21,22,23,24,59,0,31,28,29,
            30,74,32,0,1,2,3,4,5,6,
            7,8,9,10,0,1,13,3,15,16,
            17,18,0,20,21,22,23,24,58,0,
            0,28,29,30,5,32,0,1,2,3,
            4,5,6,7,8,9,10,0,1,13,
            3,15,16,17,18,19,20,21,22,23,
            24,58,0,1,28,29,30,0,39,0,
            1,0,3,89,0,0,2,2,11,12,
            0,14,11,12,4,14,56,57,52,0,
            0,0,25,26,27,73,25,26,27,32,
            33,34,35,36,37,31,31,40,41,42,
            43,44,45,46,47,48,49,50,51,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,13,3,15,16,17,18,0,20,
            21,22,23,24,0,56,57,28,29,30,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,13,3,15,16,17,18,0,
            20,21,22,23,24,0,0,58,28,29,
            30,0,1,2,3,4,0,6,7,8,
            9,10,0,0,13,0,15,16,17,18,
            0,20,21,22,23,24,68,0,58,28,
            29,30,5,38,0,1,2,3,4,0,
            6,7,8,9,10,56,57,13,0,15,
            16,17,18,19,20,21,22,23,24,0,
            0,60,28,29,30,0,1,2,3,4,
            74,6,7,8,9,10,56,57,13,52,
            15,16,17,18,19,20,21,22,23,24,
            0,31,0,28,29,30,0,1,2,3,
            4,0,6,7,8,9,10,59,0,13,
            0,15,16,17,18,19,20,21,22,23,
            24,61,0,31,28,29,30,0,1,2,
            3,4,73,6,7,8,9,10,0,31,
            13,0,15,16,17,18,5,20,21,22,
            23,24,0,61,0,28,29,30,0,1,
            2,3,4,0,6,7,8,9,10,59,
            0,13,0,15,16,17,18,0,20,21,
            22,23,24,0,1,2,28,29,30,0,
            1,2,3,4,72,6,7,8,9,10,
            0,38,13,0,15,16,17,18,38,20,
            21,22,23,24,0,0,75,28,29,30,
            0,1,2,3,4,0,6,7,8,9,
            10,0,0,13,0,15,16,17,18,0,
            20,21,22,23,24,0,1,2,28,29,
            30,0,1,2,3,4,0,6,7,8,
            9,10,0,0,13,0,15,16,17,18,
            38,20,21,22,23,24,0,0,0,28,
            29,30,0,1,2,3,4,72,6,7,
            8,9,10,0,69,13,19,15,16,17,
            18,0,20,21,22,23,24,0,0,0,
            28,29,30,0,1,2,3,4,0,6,
            7,8,9,10,0,69,13,19,15,16,
            17,18,0,20,21,22,23,24,0,0,
            0,28,29,30,0,0,2,0,4,5,
            11,12,5,14,0,11,12,0,14,2,
            0,0,5,0,25,26,27,0,0,25,
            26,27,5,0,0,31,32,33,34,35,
            36,37,19,39,11,12,39,14,31,0,
            0,2,0,4,0,0,39,5,25,26,
            27,11,12,0,14,32,33,34,35,36,
            37,0,0,0,19,25,26,27,0,52,
            31,0,32,33,34,35,36,37,0,11,
            12,39,14,0,0,0,2,4,4,0,
            19,0,0,25,26,27,11,12,0,14,
            32,33,34,35,36,37,0,0,19,0,
            25,26,27,69,0,31,0,32,33,34,
            35,36,37,79,80,81,82,83,84,85,
            86,87,88,0,0,19,0,0,0,1,
            2,0,59,5,11,12,0,14,11,12,
            0,14,11,12,0,14,0,0,25,26,
            27,0,25,26,27,0,25,26,27,31,
            5,0,11,12,0,14,19,39,0,1,
            2,0,4,0,0,0,25,26,27,0,
            1,2,0,4,0,0,0,0,0,0,
            19,0,19,38,0,0,0,0,0,31,
            0,0,0,0,0,0,0,0,0,0,
            31,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            75,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1939,1950,1722,1951,1325,1,1230,1181,1486,1714,
            1707,2153,2154,1687,2155,1952,1953,1954,1955,1939,
            1172,721,2256,2257,2258,2269,436,2270,1567,1115,
            556,253,2102,2103,2101,2156,2104,2100,182,89,
            2107,2112,2111,2109,2110,2108,2113,2114,2106,2115,
            2116,2117,65,1249,1522,1304,1939,1,49,1,
            1402,191,1660,60,32,52,1737,1,1,62,
            1,646,472,1965,1966,1939,1950,759,1951,54,
            51,1,1,1,1660,646,472,1011,1,1,
            1,1,1,1,1544,1674,1,1,1,1,
            1,1,1,1,1,1,1,1,191,1,
            1,1,1939,1,50,1,2135,190,1660,61,
            1648,1637,183,1,1,1350,1,1474,1462,1239,
            610,286,325,1474,1462,1239,610,1,1,1,
            1260,55,1648,1637,1,1,1,1,1,1,
            271,3165,1,1,1,1,1,1,1,1,
            1,1,1,1,190,1,1,1,1939,1,
            63,1,2135,191,1939,73,1648,1637,579,1,
            1,623,1,1474,1462,1239,610,1939,1950,1939,
            1951,1939,64,1,1,1,1945,1511,1530,66,
            1,1,1,1,1,1,1608,1402,1,1,
            1,1,1,1,1,1,1,1,1,1,
            191,1,1,1,1939,1950,1939,1951,2135,1878,
            1944,1,2165,1540,1939,2153,2154,71,2155,1943,
            1449,1436,1939,1950,1939,1951,1,1936,53,2269,
            436,2270,1210,1728,646,472,2102,2103,2101,2156,
            2104,2100,1449,1436,2107,2112,2111,2109,2110,2108,
            2113,2114,2106,2115,2116,2117,329,1249,1522,1304,
            1,1950,1722,1951,1499,1943,1230,1181,1486,1714,
            1707,1939,1942,1687,1939,1952,1953,1954,1955,1152,
            1172,721,2256,2257,2258,2197,1939,1927,1567,1115,
            556,408,677,1939,1950,1722,1951,1625,1943,1230,
            1181,1486,1714,1707,185,3305,1687,3305,1952,1953,
            1954,1955,69,1172,721,2256,2257,2258,1942,1,
            59,1567,1115,556,91,1053,1,1950,1722,1951,
            1325,29,1230,1181,1486,1714,1707,184,3329,1687,
            3329,1952,1953,1954,1955,3165,1172,721,2256,2257,
            2258,1942,1939,2177,1567,1115,556,129,91,206,
            3331,1939,3331,1926,270,222,1541,1543,2153,2154,
            1939,2155,2153,2154,1429,2155,1511,1530,29,58,
            1939,1939,2269,436,2270,1357,2269,436,2270,2102,
            2103,2101,2156,2104,2100,623,623,2107,2112,2111,
            2109,2110,2108,2113,2114,2106,2115,2116,2117,1939,
            1950,1722,1951,1325,1943,1230,1181,1486,1714,1707,
            208,1950,1687,1951,1952,1953,1954,1955,201,1172,
            721,2256,2257,2258,1939,1511,1530,1567,1115,556,
            1939,1950,1722,1951,1598,1943,1230,1181,1486,1714,
            1707,207,1375,1687,1375,1952,1953,1954,1955,57,
            1172,721,2256,2257,2258,256,72,1942,1567,1115,
            556,1939,1,1,1,1,1939,1,1,1,
            1,1,1939,1939,1,1939,1,1,1,1,
            56,1,1,1,1,1,1190,1939,1942,1,
            1,1,1947,1670,1939,1950,1722,1951,1325,1939,
            1230,1181,1486,1714,1707,1511,1530,1687,1,1952,
            1953,1954,1955,3165,1172,721,2256,2257,2258,70,
            1939,2255,1567,1115,556,1,1950,1722,1951,1325,
            408,1230,1181,1486,1714,1707,1511,1530,1687,1946,
            1952,1953,1954,1955,3165,1172,721,2256,2257,2258,
            1939,1074,292,1567,1115,556,1939,1950,1722,1951,
            1325,1939,1230,1181,1486,1714,1707,2197,220,1687,
            1,1952,1953,1954,1955,3165,1172,721,2256,2257,
            2258,1427,67,1132,1567,1115,556,1939,1950,1722,
            1951,1325,1357,1230,1181,1486,1714,1707,1939,623,
            1687,1,1952,1953,1954,1955,1949,1172,721,2256,
            2257,2258,1939,1524,1939,1567,1115,556,1939,1950,
            1733,1951,1325,30,1230,1181,1486,1714,1707,2196,
            30,1687,1939,1952,1953,1954,1955,1939,1172,721,
            2256,2257,2258,1,2165,1540,1567,1115,556,1939,
            1950,1744,1951,1325,1269,1230,1181,1486,1714,1707,
            1939,486,1687,1939,1952,1953,1954,1955,1968,1172,
            721,2256,2257,2258,1939,68,1948,1567,1115,556,
            1939,1950,1757,1951,1325,211,1230,1181,1486,1714,
            1707,1939,207,1687,1939,1952,1953,1954,1955,1939,
            1172,721,2256,2257,2258,253,2165,1540,1567,1115,
            556,1939,1950,1768,1951,1325,1939,1230,1181,1486,
            1714,1707,1939,1939,1687,1939,1952,1953,1954,1955,
            2779,1172,721,2256,2257,2258,1939,323,1939,1567,
            1115,556,1939,1950,1779,1951,1325,1269,1230,1181,
            1486,1714,1707,1939,1094,1687,3165,1952,1953,1954,
            1955,1939,1172,721,2256,2257,2258,1939,321,1939,
            1567,1115,556,1,1950,1722,1951,1325,1939,1230,
            1181,1486,1714,1707,1939,588,1687,3165,1952,1953,
            1954,1955,1939,1172,721,2256,2257,2258,1939,248,
            1939,1567,1115,556,20,1939,1930,1939,1930,1930,
            2153,2154,1945,2155,1939,179,179,1,179,1545,
            1939,1939,1945,42,2269,436,2270,285,1939,179,
            179,179,431,130,1939,1930,179,179,179,179,
            179,179,3165,1930,2153,2154,1944,2155,623,265,
            131,1545,1,1,43,1939,1944,1945,2269,436,
            2270,2153,2154,1939,2155,2102,2103,2101,2156,2104,
            2100,1939,1939,1939,3165,2269,436,2270,132,431,
            623,1939,2102,2103,2101,2156,2104,2100,1939,2153,
            2154,1944,2155,1,268,133,1545,253,253,1939,
            1367,1939,1939,2269,436,2270,2153,2154,1939,2155,
            2102,2103,2101,2156,2104,2100,1939,1939,1742,1939,
            2269,436,2270,990,1939,623,1939,2102,2103,2101,
            2156,2104,2100,969,948,927,906,885,843,864,
            822,801,780,249,1939,1811,1939,250,1,1933,
            1295,251,2197,1945,1,1,1939,1,1,1,
            1939,1,2153,2154,1939,2155,1939,189,1,1,
            1,252,1,1,1,1939,2269,436,2270,623,
            1949,1939,2153,2154,1939,2155,185,1944,262,2165,
            1295,189,1,189,1939,1939,2269,436,2270,268,
            2165,1295,1939,253,1939,1939,1939,1939,1939,1939,
            184,1939,206,471,1939,1939,1939,1939,1939,623,
            1939,1939,1939,1939,1939,1939,1939,1939,1939,1939,
            623,1939,1939,1939,1939,1939,1939,1939,1939,1939,
            1939,1939,1939,1939,1939,1939,1939,1939,1939,1939,
            1948
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            133,1,206,98,206,206,206,206,206,206,
            206,206,206,206,206,206,60,10,80,77,
            84,82,90,88,92,91,94,93,66,206,
            10,10,10,10,10,418,418,459,206,304,
            304,339,10,206,206,206,206,206,206,206,
            206,206,206,206,206,206,206,206,206,206,
            206,206,206,206,206,206,206,206,206,206,
            206,206,206,304,304,304,304,304,304,102,
            109,343,197,385,302,301,311,3,323,129,
            323,129,129,323,129,323,30,255,77,77,
            82,82,82,82,80,80,88,84,84,91,
            90,490,93,92,157,157,157,157,131,382,
            131,339,343,200,102,53,230,304,427,388,
            230,129,418,418,129,418,206,382,107,343,
            331,53,102,229,197,304,337,30,303,390,
            102,230,131,352,131,421,107,331,331,206,
            206,102,230,385,485,484,343,390,304,131,
            352,421,421,423,308,331,53,102,102,304,
            427,388,337,352,382,345,352,421,423,492,
            423,382,105,495,418,206,307,53,331,390,
            352,347,423,382,206,418,60,109,102,418,
            206,331,304,303,382,193,206,192,225,343,
            382,102,419,347,206,225
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            89,0,5,68,38,58,39,75,31,13,
            15,16,17,18,2,9,10,8,4,6,
            7,20,21,22,23,24,28,29,30,1,
            3,53,54,55,48,40,45,43,44,42,
            41,46,47,49,50,51,37,34,32,33,
            36,35,11,12,14,26,25,27,0,31,
            2,61,76,9,10,69,79,80,81,82,
            83,85,84,86,87,88,4,62,63,6,
            7,57,56,64,65,66,67,70,71,8,
            72,73,74,52,75,77,78,68,39,89,
            38,58,5,0,5,52,31,61,9,10,
            8,4,6,7,20,21,13,28,29,30,
            2,15,16,17,18,22,23,24,1,3,
            19,0,13,15,16,17,18,1,3,2,
            9,10,8,4,6,7,20,21,22,23,
            24,28,29,30,60,0,8,4,6,7,
            62,63,56,57,64,65,66,67,70,71,
            72,73,74,77,78,69,79,80,81,82,
            83,84,85,86,87,88,58,39,52,89,
            19,68,75,5,38,0,58,5,32,11,
            12,14,25,26,27,15,16,17,18,22,
            23,24,3,9,10,8,6,7,20,21,
            13,28,29,30,4,2,1,0,32,58,
            5,9,10,8,4,6,7,20,21,13,
            28,29,30,2,1,3,15,16,17,18,
            22,23,24,0,12,32,37,14,36,35,
            34,11,33,25,26,27,61,76,9,10,
            8,6,7,62,63,56,57,64,65,66,
            67,70,71,72,73,74,77,78,69,79,
            80,81,82,83,84,85,86,87,88,4,
            2,31,38,39,5,0,69,31,61,0,
            48,40,45,43,44,42,41,46,47,49,
            50,51,68,75,37,34,32,33,36,35,
            11,12,14,25,26,27,38,1,5,39,
            2,31,4,0,75,5,4,1,2,68,
            0,33,40,11,41,53,34,42,35,43,
            44,36,12,45,46,32,54,37,55,47,
            48,14,49,50,51,1,3,25,26,27,
            60,5,52,0,4,2,31,39,5,33,
            40,11,41,53,34,42,35,43,44,36,
            12,45,46,32,54,37,55,47,48,14,
            49,50,51,25,26,27,59,3,1,0,
            1,3,5,52,38,0,4,33,40,11,
            41,53,34,42,35,43,44,36,12,45,
            46,32,54,37,55,47,48,14,49,50,
            51,1,3,25,26,27,59,0,5,39,
            13,15,16,17,18,1,3,2,9,10,
            8,4,6,7,20,21,22,23,24,28,
            29,30,0,2,5,38,39,75,31,68,
            0,5,38,52,69,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            36,35,26,35,26,26,26,26,26,26,
            26,26,26,26,26,26,35,105,35,35,
            35,35,35,35,35,35,35,35,35,26,
            105,105,105,105,105,66,66,109,106,87,
            87,90,1,26,26,26,26,26,26,26,
            26,26,26,26,26,26,26,26,26,106,
            26,26,26,26,26,26,26,26,26,26,
            26,26,26,87,87,87,87,87,87,48,
            9,39,46,89,44,44,58,17,59,19,
            59,62,62,59,61,59,53,35,35,35,
            35,35,35,35,35,35,35,35,35,35,
            35,35,35,35,10,10,10,10,10,73,
            35,112,35,50,48,124,47,87,94,86,
            47,7,7,7,7,7,26,103,73,35,
            79,124,48,47,42,87,69,28,35,96,
            48,47,15,73,35,73,24,79,73,26,
            26,48,47,68,44,44,39,96,87,35,
            120,73,7,64,13,73,124,48,48,87,
            94,86,75,73,103,83,99,7,64,35,
            35,103,23,35,7,26,81,124,42,116,
            120,71,64,103,26,7,21,25,48,7,
            26,42,87,87,103,84,26,35,71,39,
            103,48,35,71,26,77
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            80,78,77,68,76,75,1,0,5,34,
            32,0,100,0,92,0,103,0,91,0,
            98,0,88,10,34,5,0,80,79,78,
            77,68,76,75,0,10,89,0,30,54,
            0,23,0,29,0,10,5,22,0,5,
            10,0,68,63,64,65,66,56,35,0,
            94,69,0,62,0,73,0,21,51,50,
            42,40,10,0,51,50,42,40,30,0,
            102,0,10,72,0,10,21,0,21,50,
            51,10,0,30,54,10,27,0,10,33,
            70,0,46,0,33,10,31,0,10,90,
            0,51,50,30,0,95,10,27,0,82,
            10,33,0,59,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,10,11,8,6,7,
            48,64,68,76,81,82,83,84,3,12,
            13,93,94,95,96,97,98,100,101,102,
            1,69,44,55,60,63,72,42,90,47,
            52,56,61,62,66,67,74,75,78,79,
            80,91,54,70,73,16,17,89,30,107,
            4,14,15,18,19,20,21,29,31,22,
            23,24,25,26,92,5,27,28,32,33,
            34,35,36,37,38,39,40,41,108,45,
            46,49,50,51,53,57,58,59,65,71,
            77,88,99,103,104,105,106
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            114,0,0,0,116,120,121,122,123,0,
            124,125,126,127,128,129,130,131,0,132,
            111,110,142,0,0,0,135,0,163,0,
            115,119,154,0,141,0,0,0,159,161,
            0,162,0,0,0,112,118,134,172,173,
            174,0,150,160,169,144,0,164,167,168,
            171,0,145,146,147,148,149,151,0,153,
            158,113,117,133,136,137,138,139,140,143,
            0,152,156,0,0,157,166,176,109,0,
            0,0,155,0,165,170,175,0,177,178,
            0,179,180,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            120,151,130,59,69,159,26,186,35,87,
            105,75,6,12,16,40,83,52,141,208,
            215,219,52,52,195,52,1,1,1,44,
            47,92,115,47,223,20,145,202,202,177,
            137,165,165,165,165,165,95,95,95
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            128,128,128,4,4,128,32,192,10,4,
            10,80,10,10,10,10,4,4,139,10,
            10,4,56,80,199,65,4,4,4,10,
            50,4,10,118,10,23,148,205,212,180,
            139,167,169,171,173,175,102,97,110
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            65,63,65,29,29,63,32,111,52,29,
            45,29,6,6,6,52,29,29,70,6,
            5,5,29,29,19,29,103,102,101,50,
            61,29,42,53,3,88,70,7,5,112,
            70,79,78,77,76,75,45,43,45
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            52,52,52,58,58,52,52,95,39,58,
            39,15,39,39,39,39,58,58,75,39,
            39,58,4,15,68,32,58,58,58,39,
            2,58,39,1,39,69,1,39,39,101,
            75,1,53,54,54,48,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            29,29,29,33,33,29,19,-1,37,33,
            9,33,44,44,44,37,33,33,5,44,
            44,44,33,33,78,33,17,1,3,37,
            39,33,9,11,44,105,5,50,44,-1,
            5,30,30,30,30,30,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            155,31,0,110,0,154,2,30,0,111,
            0,154,2,29,0,154,2,28,0,206,
            117,0,31,149,0,169,204,117,19,141,
            0,112,0,0,165,117,2,157,0,165,
            117,2,0,168,2,0,161,117,0,172,
            0,194,117,31,0,9,110,0,127,32,
            194,117,31,0,69,132,110,0,127,194,
            117,32,31,0,194,117,32,31,0,132,
            110,0,127,32,31,0,127,194,117,31,
            0,127,31,0,149,0,2,0,165,111,
            0,2,111,0,165,117,2,149,0,2,
            0,164,111,0,160,2,0,159,0,169,
            192,117,19,108,201,53,0,112,0,169,
            192,117,19,201,53,0,140,0,113,0,
            200,117,140,0,117,140,0,155,113,0,
            188,117,19,199,108,198,175,0,188,117,
            19,198,175,0,187,0,148,0,147,0,
            146,0,145,0,144,0,214,94,0,77,
            2,115,111,113,0,214,128,138,2,98,
            0,53,0,0,138,78,125,0,29,132,
            0,154,2,0,111,121,0,154,2,13,
            0,111,119,0,197,2,112,0,138,31,
            112,0,138,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1424,0,427,0,1833,1671,1787,0,1084,1349,
            471,1540,1342,1295,1258,0,436,0,588,486,
            450,1321,1256,546,535,534,396,0,1228,507,
            369,0,1745,1616,1257,536,1349,1773,1295,1258,
            1545,1607,0,1714,1707,1687,1567,1115,556,1625,
            1598,1499,396,408,1210,1269,1357,1449,1436,1402,
            1530,1511,1474,1462,1239,610,1660,1648,1637,646,
            472,1486,1325,1230,1181,1172,721,1190,1152,1132,
            588,1094,1074,1053,1032,736,1011,698,677,623,
            990,969,948,927,906,885,864,843,822,801,
            780,369,759,656,486,450,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,196,117,181,30,29,28,13,21,20,
            7,6,4,8,10,9,112,2,116,115,
            119,118,121,120,123,122,125,124,113,38,
            2,2,2,2,2,76,61,2,31,154,
            138,140,117,7,6,63,62,4,67,66,
            65,64,56,57,8,71,70,73,72,78,
            77,74,88,87,86,84,85,83,82,81,
            80,79,69,154,154,154,154,154,197,138,
            128,117,31,2,158,157,182,26,183,175,
            184,55,54,185,53,186,187,108,115,115,
            118,118,118,118,116,116,120,119,119,122,
            121,138,124,123,128,128,128,128,128,19,
            141,161,137,32,127,117,4,168,117,2,
            31,198,176,176,201,176,68,117,19,137,
            4,117,127,194,166,165,134,117,167,117,
            155,4,108,19,108,19,117,4,137,194,
            32,127,4,2,147,149,117,38,165,199,
            117,19,117,204,117,137,117,127,127,160,
            117,2,161,19,188,140,189,117,192,108,
            193,169,38,206,61,31,207,117,166,117,
            117,117,192,169,69,38,153,69,155,61,
            31,166,165,202,188,200,68,160,2,117,
            169,155,38,38,68,161
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "MYTHREAD",
            "THREADS",
            "UPC_MAX_BLOCKSIZE",
            "relaxed",
            "shared",
            "strict",
            "upc_barrier",
            "upc_localsizeof",
            "upc_blocksizeof",
            "upc_elemsizeof",
            "upc_notify",
            "upc_fence",
            "upc_wait",
            "upc_forall",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "expression_parser_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "initializer_seq",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "layout_qualifier"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 60,
           SCOPE_UBOUND      = 48,
           SCOPE_SIZE        = 49,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 226,
           NT_OFFSET         = 107,
           LA_STATE_OFFSET   = 2307,
           MAX_LA            = 2,
           NUM_RULES         = 368,
           NUM_NONTERMINALS  = 131,
           NUM_SYMBOLS       = 238,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 509,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 89,
           EOLT_SYMBOL       = 89,
           ACCEPT_ACTION     = 1926,
           ERROR_ACTION      = 1939;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
