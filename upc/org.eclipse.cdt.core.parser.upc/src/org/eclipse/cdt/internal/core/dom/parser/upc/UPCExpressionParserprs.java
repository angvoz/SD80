/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.upc;

public class UPCExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, UPCExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,8,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,4,1,4,1,3,3,3,1,3,
            3,1,3,3,1,3,3,3,3,1,
            3,3,1,3,1,3,1,3,1,3,
            1,3,1,5,1,3,3,3,3,3,
            3,3,3,3,3,3,1,1,2,1,
            0,1,3,1,1,1,1,1,1,1,
            1,3,4,3,2,4,1,2,1,1,
            1,2,5,7,5,1,0,7,5,9,
            8,3,2,2,2,3,2,4,2,2,
            2,2,2,1,1,1,1,2,1,2,
            2,2,1,2,2,1,2,2,1,2,
            2,1,2,2,1,3,1,3,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,6,
            8,0,0,1,1,3,3,3,0,1,
            0,1,2,4,2,1,1,1,3,1,
            1,2,3,7,8,0,1,0,1,3,
            1,3,1,1,1,1,1,1,3,1,
            1,1,1,1,3,1,2,2,1,5,
            3,1,3,5,1,3,1,3,2,4,
            3,5,4,6,6,3,5,1,3,4,
            5,6,0,1,2,1,3,1,1,3,
            2,1,1,1,1,2,1,2,3,1,
            1,1,3,1,2,2,2,3,4,5,
            1,7,3,0,0,1,1,3,3,4,
            1,1,2,3,2,3,2,1,0,1,
            2,1,1,1,1,1,2,4,3,6,
            2,4,1,1,1,1,1,2,4,2,
            4,2,4,1,1,2,1,1,1,3,
            3,2,1,3,2,3,2,3,2,2,
            11,10,10,9,10,9,9,8,10,9,
            9,8,9,8,8,7,10,9,9,8,
            9,8,8,7,1,1,-43,0,0,0,
            0,0,0,0,0,0,-40,0,0,0,
            0,0,0,0,0,0,0,-131,0,0,
            0,0,0,-156,-2,-85,-229,0,-86,0,
            0,0,0,-61,0,0,0,0,0,0,
            0,0,0,-4,0,0,0,0,0,0,
            0,0,-17,0,0,-19,0,0,-20,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-137,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-203,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -82,0,0,0,-58,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-126,0,0,0,0,0,0,0,0,
            0,-21,0,-36,0,0,-37,0,-88,-92,
            -95,0,-22,0,-23,-212,0,-90,-132,0,
            0,-155,0,0,-176,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-133,0,-24,-146,0,
            -123,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-150,0,0,
            0,0,0,0,0,0,-5,0,0,0,
            0,0,0,0,0,0,-134,0,0,0,
            0,0,0,0,0,0,-9,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -83,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-25,0,-199,0,0,0,0,0,0,
            0,0,0,-230,0,0,0,0,0,0,
            0,0,0,0,-3,0,0,0,0,0,
            0,0,0,0,-168,0,0,0,0,0,
            0,0,0,0,0,-135,0,-166,-26,-59,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-130,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-27,0,-142,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-30,0,0,0,0,0,0,
            0,0,0,-41,0,0,0,0,0,0,
            0,0,0,0,-63,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-64,0,0,0,0,
            0,0,0,0,0,-74,0,0,0,0,
            0,0,0,0,0,0,-65,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-66,0,0,
            0,0,0,0,0,0,0,-75,0,0,
            0,0,0,0,0,0,0,0,-67,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-68,
            0,0,0,0,0,0,0,0,0,-76,
            0,0,0,0,0,0,0,0,0,0,
            -69,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-70,0,0,0,0,0,0,0,0,
            0,-77,0,0,0,0,0,0,0,0,
            0,0,-71,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-72,0,0,0,0,0,0,
            0,0,0,-78,0,0,0,0,0,0,
            0,0,0,0,-73,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-136,0,0,0,0,
            0,0,0,0,0,-79,0,0,0,0,
            0,0,0,0,0,0,-161,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-162,0,0,
            0,0,0,0,0,0,0,-127,0,0,
            0,0,0,0,0,0,0,0,-179,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-202,0,
            0,0,0,0,0,0,0,0,-93,0,
            0,0,0,0,0,0,0,0,-178,0,
            -28,-196,-201,0,0,-44,0,0,0,0,
            0,0,0,0,-211,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-220,0,0,0,0,0,
            0,0,0,0,-80,0,0,0,0,0,
            0,0,0,0,-120,0,0,-29,-98,-180,
            0,-99,-100,-209,0,-121,0,-97,0,-151,
            -228,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-194,-145,-129,-189,
            0,0,0,0,-144,-124,0,0,0,0,
            -101,-222,0,0,0,0,0,0,-102,0,
            0,0,0,0,0,0,0,0,0,-139,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-141,-103,0,0,0,0,0,0,
            0,0,0,0,0,0,-165,-104,0,0,
            0,0,0,-105,0,0,0,-62,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-190,0,-6,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-106,-38,0,0,0,0,0,-152,-107,
            -154,-208,0,0,0,-159,-108,0,0,-193,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-55,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-109,-167,-110,-111,
            -175,-181,0,-56,0,0,0,0,0,0,
            0,0,0,-170,0,0,-57,0,0,0,
            0,0,0,0,0,0,0,0,0,-227,
            -157,0,0,-149,0,0,0,0,0,0,
            0,-192,-210,-112,0,-49,0,0,0,0,
            0,0,0,0,0,0,0,-53,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-113,-114,-115,-116,0,0,
            0,-50,0,0,0,0,0,0,0,0,
            0,-117,0,-51,0,0,0,0,0,0,
            0,0,0,-118,0,-87,-7,0,0,0,
            0,0,0,0,0,-52,0,0,0,0,
            0,0,0,0,0,-160,0,-173,0,0,
            0,0,-119,-122,-138,0,-147,0,0,0,
            0,0,-54,0,0,0,0,0,0,0,
            0,0,-89,-8,0,0,0,0,0,0,
            0,-163,0,-45,0,0,0,0,0,0,
            0,0,-84,-91,-182,0,0,0,0,-94,
            -223,-183,0,0,0,0,0,0,0,-153,
            -169,0,-219,0,-218,-158,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-96,0,0,0,0,-143,0,-171,0,
            0,0,0,-10,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-177,0,
            0,0,0,0,0,0,0,0,-164,0,
            0,0,0,0,0,0,-11,0,0,0,
            0,0,0,0,0,-197,-198,-224,-174,0,
            0,-12,0,0,0,0,0,0,0,-13,
            0,0,0,0,0,0,0,-14,0,0,
            0,0,0,0,0,-42,-46,0,0,0,
            0,0,0,0,0,0,-47,0,0,0,
            0,0,0,0,-48,0,0,0,0,0,
            0,0,-221,-128,0,-81,0,0,0,0,
            0,0,0,0,-184,-226,-188,-191,0,0,
            -185,0,0,0,0,0,0,0,0,0,
            0,-1,-186,0,0,0,0,0,0,0,
            0,0,0,0,0,-187,0,-15,0,0,
            0,0,0,0,0,0,0,-18,-214,0,
            0,0,0,0,-200,-31,0,0,0,0,
            -216,0,-213,0,0,0,0,-16,0,0,
            0,0,0,0,0,0,0,-225,0,0,
            -32,0,0,0,0,-217,0,0,-33,0,
            0,0,0,0,0,-34,-195,0,0,0,
            0,0,0,-35,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-125,0,
            0,0,0,0,0,0,0,0,-140,-172,
            0,0,0,0,0,0,-206,0,0,0,
            0,0,0,0,0,0,0,-148,0,0,
            0,0,0,0,0,-204,0,0,-207,0,
            -39,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-205,0,0,0,-215,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-60,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            89,10,104,22,22,21,21,37,37,72,
            72,1,1,2,2,2,2,3,3,3,
            4,5,5,5,5,5,5,5,5,54,
            54,73,6,6,6,6,6,6,6,6,
            6,6,6,7,7,8,8,8,8,9,
            9,9,11,11,11,12,12,12,12,12,
            13,13,13,14,14,15,15,16,16,17,
            17,18,18,19,19,20,20,20,20,20,
            20,20,20,20,20,20,20,105,31,28,
            90,90,75,75,46,106,106,106,106,106,
            106,106,107,107,107,108,108,113,113,114,
            114,109,109,110,110,110,116,116,111,111,
            111,111,112,112,112,112,112,115,115,27,
            27,27,27,27,33,33,33,81,81,76,
            76,76,76,77,77,77,78,78,78,79,
            79,79,80,80,80,117,117,118,118,119,
            34,36,36,36,36,36,55,57,57,57,
            57,57,57,57,57,57,57,57,57,66,
            63,63,91,92,67,67,64,64,64,68,
            82,82,83,83,69,69,69,32,93,93,
            84,85,85,85,65,65,94,86,86,87,
            87,70,70,23,24,24,24,35,51,51,
            38,38,38,38,41,41,43,39,39,40,
            44,44,120,120,42,121,121,95,95,29,
            29,29,29,29,29,29,29,29,88,52,
            52,52,52,30,59,59,58,58,58,60,
            60,53,53,96,96,45,45,61,61,61,
            47,47,47,48,49,49,49,50,50,50,
            50,56,56,56,62,97,74,74,74,74,
            71,98,99,99,100,100,101,101,122,122,
            123,123,124,124,124,124,126,126,125,125,
            125,127,127,89,89,2,2,2,6,6,
            6,6,6,6,23,23,25,25,26,26,
            102,102,102,106,128,128,128,128,128,128,
            128,111,111,111,111,111,111,111,111,111,
            111,111,111,111,111,111,111,111,111,111,
            111,111,111,111,111,129,129,1,1199,17,
            21,18,423,1198,45,429,426,88,533,522,
            568,535,719,672,1141,758,75,92,380,1210,
            135,213,324,325,919,175,916,973,1726,382,
            137,134,136,160,606,20,17,21,18,423,
            43,45,429,426,200,533,522,568,535,719,
            672,1475,139,790,166,275,373,1535,276,892,
            143,146,149,152,538,219,718,221,1398,223,
            224,229,414,1506,1553,1574,1580,1612,1208,531,
            20,17,21,18,423,1198,45,429,426,394,
            533,522,568,535,719,672,1141,758,75,281,
            581,20,17,21,18,423,1198,45,429,426,
            394,533,522,568,535,719,672,1141,758,75,
            281,63,1639,1200,292,606,20,17,21,18,
            423,43,45,429,426,286,533,522,568,535,
            1399,1596,427,20,17,21,18,423,43,36,
            287,1534,245,542,190,31,286,190,31,952,
            246,840,1596,62,246,53,190,1666,115,190,
            187,287,953,1206,1779,347,20,17,21,18,
            423,1198,45,429,426,394,533,522,568,535,
            719,672,1141,758,75,281,190,186,8,225,
            179,756,20,17,21,18,423,1198,45,429,
            426,1859,533,522,568,535,719,672,1141,758,
            75,1283,135,213,324,325,1401,25,539,716,
            24,288,137,134,136,160,210,1596,427,20,
            17,21,18,423,43,36,289,631,20,17,
            21,18,423,322,139,627,166,786,1590,388,
            331,326,143,146,149,152,538,606,20,17,
            21,18,423,43,40,1506,1553,1574,1580,1612,
            1208,281,20,17,21,18,423,1198,45,429,
            426,1849,533,522,568,535,719,672,1141,758,
            75,1246,135,239,556,20,17,21,18,423,
            1198,45,429,426,171,533,522,568,535,719,
            672,1141,758,75,281,606,20,17,21,18,
            423,1198,45,429,426,63,533,522,568,535,
            719,672,1141,758,75,92,190,188,988,763,
            606,20,17,21,18,423,43,45,429,426,
            290,533,522,568,1400,1534,1596,452,20,17,
            21,18,423,43,45,429,426,228,533,522,
            568,535,719,672,1141,758,94,1325,59,332,
            314,20,17,21,18,423,1198,45,429,426,
            414,533,522,568,535,719,672,1141,758,75,
            1562,282,240,1434,606,20,17,21,18,423,
            1198,45,429,426,88,533,522,568,535,719,
            672,1141,758,75,93,606,20,17,21,18,
            423,1198,45,429,426,19,533,522,568,535,
            719,672,1141,758,75,86,606,20,17,21,
            18,423,1198,45,429,426,88,533,522,568,
            535,719,672,1141,758,75,85,606,20,17,
            21,18,423,1198,45,429,426,1477,533,522,
            568,535,719,672,1141,758,75,84,606,20,
            17,21,18,423,1198,45,429,426,88,533,
            522,568,535,719,672,1141,758,75,83,606,
            20,17,21,18,423,1198,45,429,426,1478,
            533,522,568,535,719,672,1141,758,75,82,
            606,20,17,21,18,423,1198,45,429,426,
            88,533,522,568,535,719,672,1141,758,75,
            81,606,20,17,21,18,423,1198,45,429,
            426,1492,533,522,568,535,719,672,1141,758,
            75,80,606,20,17,21,18,423,1198,45,
            429,426,88,533,522,568,535,719,672,1141,
            758,75,79,606,20,17,21,18,423,1198,
            45,429,426,1504,533,522,568,535,719,672,
            1141,758,75,78,606,20,17,21,18,423,
            1198,45,429,426,88,533,522,568,535,719,
            672,1141,758,75,77,606,20,17,21,18,
            423,1198,45,429,426,1533,533,522,568,535,
            719,672,1141,758,75,76,606,20,17,21,
            18,423,1198,45,429,426,88,533,522,568,
            535,719,672,1141,758,75,74,606,20,17,
            21,18,423,1198,45,429,426,23,533,522,
            568,535,719,672,1141,758,75,1741,606,20,
            17,21,18,423,1198,45,429,426,88,533,
            522,568,535,719,672,1141,758,75,1753,606,
            20,17,21,18,423,43,45,429,426,273,
            533,522,568,535,719,672,1141,758,94,606,
            20,17,21,18,423,43,45,429,426,795,
            533,522,568,535,719,672,1141,758,94,190,
            295,340,996,190,297,1785,606,20,17,21,
            18,423,43,45,1202,606,20,17,21,18,
            423,43,45,429,426,1793,533,522,568,535,
            719,672,1141,758,94,606,20,17,21,18,
            423,43,45,429,426,794,533,522,568,535,
            719,672,1141,758,94,17,1443,566,307,781,
            936,212,899,901,996,449,904,22,225,179,
            134,606,20,17,21,18,423,43,45,429,
            426,202,533,522,568,535,719,672,1141,758,
            94,135,213,324,325,274,1535,113,854,144,
            144,138,134,136,160,88,794,569,705,1878,
            1867,174,968,269,399,396,272,203,1668,865,
            278,231,1581,140,197,166,279,274,241,1360,
            63,144,147,150,153,538,218,718,221,1398,
            223,224,229,794,874,267,399,396,272,263,
            218,718,221,1398,223,224,229,881,887,264,
            1526,293,1619,1766,927,243,193,1737,606,20,
            17,21,18,423,43,45,429,426,277,533,
            522,568,535,719,1476,893,274,656,20,17,
            21,18,423,320,261,218,718,221,1398,223,
            224,229,934,32,267,399,396,272,1766,17,
            889,17,909,695,274,1535,63,277,1088,1860,
            958,1669,1581,219,718,221,1398,223,224,229,
            1352,90,269,399,396,272,606,20,17,21,
            18,423,43,45,429,426,1582,533,522,1350,
            218,718,221,1398,223,224,229,772,926,937,
            377,256,256,1723,606,20,17,21,18,423,
            43,45,429,426,88,533,1357,606,20,17,
            21,18,423,43,45,429,426,227,533,1397,
            909,17,195,1046,794,280,198,200,28,283,
            1581,1402,256,256,306,1593,606,20,17,21,
            18,423,43,45,429,426,330,1251,606,20,
            17,21,18,423,43,45,429,1304,218,718,
            221,1398,223,224,229,938,784,622,647,180,
            204,1723,606,20,17,21,18,423,43,45,
            429,426,672,1259,606,20,17,21,18,423,
            43,45,429,426,697,1284,375,681,20,17,
            21,18,423,318,199,200,606,20,17,21,
            18,423,43,45,429,426,819,1298,17,135,
            213,324,325,722,985,986,1735,941,1827,142,
            134,136,160,606,20,17,21,18,423,43,
            45,429,1342,40,706,20,17,21,18,423,
            41,141,794,166,606,20,17,21,18,423,
            43,45,1203,884,96,17,135,213,324,325,
            152,63,834,1724,242,470,145,134,136,160,
            976,966,1886,918,277,256,987,135,213,324,
            325,569,274,135,213,324,325,148,134,136,
            160,1534,207,151,134,136,160,803,1238,994,
            267,399,396,272,606,20,17,21,18,423,
            43,39,181,397,1088,135,213,324,325,494,
            255,213,324,325,260,154,134,136,160,427,
            20,17,21,18,423,43,36,606,20,17,
            21,18,423,43,38,194,804,998,256,948,
            1666,247,606,20,17,21,18,423,43,37,
            606,20,17,21,18,423,43,36,606,20,
            17,21,18,423,43,35,898,606,20,17,
            21,18,423,43,48,205,491,606,20,17,
            21,18,423,43,47,606,20,17,21,18,
            423,43,46,330,913,274,503,20,17,21,
            18,423,43,44,569,797,80,913,17,209,
            2003,794,2003,267,399,396,272,569,1889,2003,
            2003,1238,478,794,1534,1142,1667,266,254,213,
            324,325,695,244,1238,2003,88,1534,731,20,
            17,21,18,423,34,245,1206,259,17,953,
            88,2003,1245,313,1537,794,17,225,367,1325,
            259,88,2003,794,1926,1245,367,1537,731,20,
            17,21,18,423,33,197,88,294,256,794,
            1696,17,230,197,88,296,907,794,1696,17,
            2003,367,2003,377,2003,2003,17,948,1666,367,
            2003,836,2003,1808,17,2003,367,234,197,88,
            2003,395,794,1696,367,684,197,88,2003,797,
            794,1696,2003,197,88,2003,878,794,1696,797,
            57,197,88,2003,920,794,1696,529,2003,2003,
            569,962,254,213,324,325,2003,569,942,1004,
            2003,2003,254,213,324,325,797,197,569,169,
            2003,17,1360,2003,1238,2003,2003,209,2003,569,
            2003,695,2003,2003,2003,1238,2003,2003,1617,254,
            213,324,325,1204,1667,2003,197,2003,1617,88,
            259,1360,1185,2003,2003,1791,842,1537,2003,192,
            850,259,2003,2003,2003,2003,1414,760,1537,2003,
            2003,2003,1442,1237,2003,1930,2003,1057,2003,255,
            213,324,325,255,213,324,325,17,192,2003,
            2003,2003,1816,2003,2003,2003,2003,695,2003,2003,
            2003,1595,1237,2003,2003,2003,2003,2003,2003,2003,
            2003,2003,2003,2003,2003,88,2003,2003,1444,2003,
            0,327,737,0,20,179,0,1,2229,0,
            1,2240,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,0,8,9,
            10,11,12,13,14,15,0,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,0,32,33,34,35,36,37,7,0,
            40,41,42,43,44,45,46,47,48,49,
            50,51,0,53,54,55,0,1,0,3,
            8,0,0,7,25,26,27,28,29,30,
            39,32,33,34,35,36,37,70,71,0,
            1,25,26,27,28,29,30,0,32,33,
            34,35,36,37,7,0,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,0,1,0,3,60,56,57,7,
            25,26,27,28,29,30,39,32,33,34,
            35,36,37,0,0,77,78,25,26,27,
            28,29,30,0,32,33,34,35,36,37,
            7,0,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,0,1,
            0,3,60,0,0,7,25,26,27,28,
            29,30,39,32,33,34,35,36,37,0,
            1,0,3,25,26,27,28,29,30,0,
            32,33,34,35,36,37,0,73,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,0,1,0,3,60,56,
            57,25,26,27,28,29,30,38,32,33,
            34,35,36,37,0,0,1,0,3,25,
            26,27,28,29,30,0,32,33,34,35,
            36,37,7,89,40,41,42,43,44,45,
            46,47,48,49,50,51,0,53,54,55,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,0,17,18,19,
            20,21,22,23,24,0,0,52,64,65,
            66,67,32,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,0,
            17,18,19,20,21,22,23,24,58,0,
            64,65,66,67,0,32,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,58,0,68,0,69,0,5,6,0,
            1,0,3,2,8,79,80,81,82,83,
            84,85,86,87,88,16,0,68,52,25,
            26,27,28,29,30,0,32,33,34,35,
            36,37,31,74,40,41,42,43,44,45,
            46,47,48,49,50,51,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,0,17,18,19,20,21,22,23,
            24,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,0,17,18,
            19,20,21,22,23,24,0,0,1,2,
            3,4,5,6,58,8,9,10,11,12,
            13,14,15,0,17,18,19,20,21,22,
            23,24,0,1,2,3,4,5,6,58,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,0,0,1,
            0,1,2,3,4,5,6,60,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,0,1,2,3,4,
            5,6,69,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            0,1,2,3,4,5,6,59,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,0,1,2,3,4,
            5,6,0,8,9,10,11,12,13,14,
            15,0,17,18,19,20,21,22,23,24,
            0,1,2,3,4,5,6,16,8,9,
            10,11,12,13,14,15,0,17,18,19,
            20,21,22,23,24,0,1,2,3,4,
            5,6,16,8,9,10,11,12,13,14,
            15,0,17,18,19,20,21,22,23,24,
            0,1,2,3,4,5,6,16,8,9,
            10,11,12,13,14,15,0,17,18,19,
            20,21,22,23,24,0,1,2,3,4,
            5,6,16,8,9,10,11,12,13,14,
            15,0,17,18,19,20,21,22,23,24,
            0,1,2,3,4,5,6,16,8,9,
            10,11,12,13,14,15,0,17,18,19,
            20,21,22,23,24,0,1,2,3,4,
            5,6,0,8,9,10,11,12,13,14,
            15,0,17,18,19,20,21,22,23,24,
            0,0,2,0,4,0,1,7,3,0,
            0,2,0,0,0,1,0,3,9,10,
            7,16,0,0,0,25,26,27,28,29,
            30,31,32,33,34,35,36,37,0,39,
            31,25,26,27,28,29,30,25,26,27,
            28,29,30,0,72,64,65,66,67,0,
            1,0,3,25,26,27,28,29,30,0,
            61,58,0,0,1,2,73,4,25,26,
            27,28,29,30,0,76,25,26,27,28,
            29,30,69,0,25,26,27,28,29,30,
            0,1,2,0,31,2,0,7,0,0,
            7,0,0,1,2,4,4,0,0,2,
            0,4,4,0,4,2,0,4,0,1,
            2,31,0,7,31,0,4,0,0,39,
            56,57,39,31,7,0,0,2,31,56,
            57,5,6,0,31,0,0,0,5,6,
            0,0,56,57,38,39,31,0,1,31,
            3,0,0,62,63,38,31,0,70,71,
            62,63,62,63,7,0,31,0,1,2,
            0,59,0,1,2,0,68,7,38,61,
            0,1,31,3,0,0,0,0,4,4,
            38,16,75,0,0,0,61,0,0,0,
            59,0,16,0,0,0,0,0,72,16,
            16,74,0,0,16,16,0,0,31,0,
            0,0,52,0,59,0,0,0,0,0,
            0,0,75,38,0,38,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            2003,2014,1778,2015,1680,1672,1657,63,1688,1798,
            1768,1554,2016,2017,2018,2019,1,1624,637,2318,
            2319,2320,1507,1327,617,2217,2218,2219,2331,529,
            2332,1,2166,2167,2165,2220,2168,2164,91,130,
            2171,2176,2175,2173,2174,2172,2177,2178,2170,2179,
            2180,2181,65,531,1129,530,2003,1,73,1,
            1376,55,253,191,2217,2218,2219,2331,529,2332,
            91,2166,2167,2165,2220,2168,2164,1417,1404,2003,
            2241,1,1,1,1,1,1,2003,1,1,
            1,1,1,1,2009,131,1,1,1,1,
            1,1,1,1,1,1,1,1,191,1,
            1,1,2003,1,182,1,2199,1458,1543,190,
            2217,2218,2219,2331,529,2332,2008,2166,2167,2165,
            2220,2168,2164,183,69,404,1957,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            2009,132,1,1,1,1,1,1,1,1,
            1,1,1,1,190,1,1,1,2003,1,
            285,1,2199,59,2003,191,2217,2218,2219,2331,
            529,2332,2008,2166,2167,2165,2220,2168,2164,2003,
            2014,2003,2015,1,1,1,1,1,1,89,
            1,1,1,1,1,1,133,495,1,1,
            1,1,1,1,1,1,1,1,1,1,
            191,1,1,1,2003,2014,2003,2015,2199,1458,
            1543,2217,2218,2219,2331,529,2332,784,2166,2167,
            2165,2220,2168,2164,60,185,3364,2003,3364,2217,
            2218,2219,2331,529,2332,2003,2166,2167,2165,2220,
            2168,2164,2011,1990,2171,2176,2175,2173,2174,2172,
            2177,2178,2170,2179,2180,2181,62,531,1129,530,
            1,2014,1778,2015,512,1672,1657,2007,1688,1798,
            1768,1554,2016,2017,2018,2019,2003,1624,637,2318,
            2319,2320,1507,1327,617,2003,43,2010,1516,1494,
            1482,1446,571,2003,2014,1778,2015,1649,1672,1657,
            2007,1688,1798,1768,1554,2016,2017,2018,2019,201,
            1624,637,2318,2319,2320,1507,1327,617,2006,71,
            1516,1494,1482,1446,2003,1078,1,2014,1778,2015,
            1680,1672,1657,29,1688,1798,1768,1554,2016,2017,
            2018,2019,3340,1624,637,2318,2319,2320,1507,1327,
            617,2006,52,1036,129,1015,66,1564,1146,2003,
            2014,270,2015,1239,1376,994,973,952,931,910,
            868,889,847,826,805,1349,2003,1211,29,2217,
            2218,2219,2331,529,2332,2003,2166,2167,2165,2220,
            2168,2164,651,1308,2171,2176,2175,2173,2174,2172,
            2177,2178,2170,2179,2180,2181,2003,2014,1778,2015,
            1680,1672,1657,2007,1688,1798,1768,1554,2016,2017,
            2018,2019,2003,1624,637,2318,2319,2320,1507,1327,
            617,2003,2014,1778,2015,608,1672,1657,2007,1688,
            1798,1768,1554,2016,2017,2018,2019,2003,1624,637,
            2318,2319,2320,1507,1327,617,2003,2003,1,1,
            1,1,1,1,2006,1,1,1,1,1,
            1,1,1,2003,1,1,1,1,1,1,
            1,1,2003,2014,1778,2015,1680,1672,1657,2006,
            1688,1798,1768,1554,2016,2017,2018,2019,1195,1624,
            637,2318,2319,2320,1507,1327,617,2003,1,2000,
            1,2014,1778,2015,1680,1672,1657,2317,1688,1798,
            1768,1554,2016,2017,2018,2019,3340,1624,637,2318,
            2319,2320,1507,1327,617,2003,2014,1778,2015,1680,
            1672,1657,674,1688,1798,1768,1554,2016,2017,2018,
            2019,3340,1624,637,2318,2319,2320,1507,1327,617,
            1,2014,1778,2015,1680,1672,1657,2261,1688,1798,
            1768,1554,2016,2017,2018,2019,3340,1624,637,2318,
            2319,2320,1507,1327,617,2003,2014,1778,2015,1680,
            1672,1657,2003,1688,1798,1768,1554,2016,2017,2018,
            2019,323,1624,637,2318,2319,2320,1507,1327,617,
            2003,2014,1786,2015,1680,1672,1657,1195,1688,1798,
            1768,1554,2016,2017,2018,2019,321,1624,637,2318,
            2319,2320,1507,1327,617,2003,2014,1811,2015,1680,
            1672,1657,1195,1688,1798,1768,1554,2016,2017,2018,
            2019,319,1624,637,2318,2319,2320,1507,1327,617,
            2003,2014,1819,2015,1680,1672,1657,1195,1688,1798,
            1768,1554,2016,2017,2018,2019,42,1624,637,2318,
            2319,2320,1507,1327,617,2003,2014,1826,2015,1680,
            1672,1657,1195,1688,1798,1768,1554,2016,2017,2018,
            2019,2003,1624,637,2318,2319,2320,1507,1327,617,
            2003,2014,1834,2015,1680,1672,1657,1195,1688,1798,
            1768,1554,2016,2017,2018,2019,2003,1624,637,2318,
            2319,2320,1507,1327,617,1,2014,1778,2015,1680,
            1672,1657,67,1688,1798,1768,1554,2016,2017,2018,
            2019,61,1624,637,2318,2319,2320,1507,1327,617,
            20,2003,1994,70,1994,2003,2014,1994,2015,32,
            2003,1343,2003,2003,184,3368,2003,3368,2029,2030,
            2007,1351,248,211,2003,179,179,179,179,179,
            179,1994,179,179,179,179,179,179,249,1994,
            1891,2217,2218,2219,2331,529,2332,2217,2218,2219,
            2331,529,2332,250,720,1516,1494,1482,1446,206,
            3369,251,3369,1,1,1,1,1,1,252,
            527,2006,2003,262,2229,1297,495,1,1,1,
            1,1,1,1,58,524,2217,2218,2219,2331,
            529,2332,1155,57,2217,2218,2219,2331,529,2332,
            1,1997,1297,1,651,1573,56,2009,64,2003,
            2009,49,268,2229,1297,1715,253,265,51,1573,
            50,1,1715,268,1715,1573,2003,253,1,2229,
            1252,651,1,2009,651,271,253,2003,2003,2008,
            1458,1543,2008,651,2013,222,54,1240,651,1458,
            1543,1564,1146,53,651,291,68,72,1564,1146,
            256,1,1458,1543,1736,2008,651,208,2014,1099,
            2015,327,30,1707,1697,1430,651,1,1417,1404,
            1707,1697,1707,1697,2013,1,1119,1,2229,1252,
            284,2261,253,2229,1252,2003,1175,1431,1591,1139,
            207,536,1991,536,2003,2003,2003,220,1270,1356,
            545,1528,2012,2003,189,30,1143,207,189,189,
            2261,2003,1575,2003,2003,2003,2003,2003,720,1738,
            185,1308,2003,2003,184,206,2003,2003,651,2003,
            2003,2003,1431,2003,2260,2003,2003,2003,2003,2003,
            2003,2003,2012,2032,2003,3350
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            473,1,142,41,142,142,142,142,142,142,
            142,142,142,142,142,142,3,55,23,20,
            27,25,33,31,35,34,37,36,9,142,
            55,55,55,55,55,433,433,247,142,240,
            240,394,55,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,240,240,240,240,240,240,45,
            109,398,133,400,238,237,366,48,378,129,
            378,129,129,378,129,378,75,191,20,20,
            25,25,25,25,23,23,31,27,27,34,
            33,324,36,35,326,326,326,326,131,107,
            394,398,136,45,98,166,240,441,403,166,
            129,433,433,129,433,142,107,398,386,98,
            45,165,133,240,392,75,239,405,45,166,
            131,272,131,305,307,244,302,131,386,386,
            142,142,45,166,400,319,318,398,405,240,
            131,272,305,305,302,105,439,433,142,243,
            302,107,386,98,45,45,240,441,403,392,
            272,302,311,272,305,307,436,307,109,45,
            433,142,107,98,386,405,272,313,307,302,
            142,433,45,307,386,240,239,302,362,142,
            361,161,398,302,302,434,313,142,161,307
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            89,0,31,2,61,76,9,10,69,79,
            80,81,82,83,85,84,86,87,88,4,
            62,63,5,6,57,56,64,65,66,67,
            70,71,8,72,73,74,52,75,77,78,
            68,39,89,38,58,7,0,7,68,38,
            58,39,75,31,11,12,13,14,15,2,
            9,10,8,4,5,6,17,18,19,20,
            21,22,23,24,1,3,53,54,55,48,
            40,45,43,44,42,41,46,47,49,50,
            51,37,34,32,33,36,35,25,26,27,
            29,28,30,0,7,52,31,61,9,10,
            8,4,5,6,17,18,11,22,23,24,
            2,12,13,14,15,19,20,21,1,3,
            16,0,58,7,32,25,26,27,28,29,
            30,12,13,14,15,19,20,21,3,9,
            10,8,5,6,17,18,11,22,23,24,
            4,2,1,0,32,58,7,9,10,8,
            4,5,6,17,18,11,22,23,24,2,
            1,3,12,13,14,15,19,20,21,0,
            26,32,37,27,36,35,34,25,33,28,
            29,30,61,76,9,10,8,5,6,62,
            63,56,57,64,65,66,67,70,71,72,
            73,74,77,78,69,79,80,81,82,83,
            84,85,86,87,88,4,2,31,38,39,
            7,0,69,31,61,0,7,39,11,12,
            13,14,15,1,3,2,9,10,8,4,
            5,6,17,18,19,20,21,22,23,24,
            0,33,40,25,41,53,34,42,35,43,
            44,36,26,45,46,32,54,37,55,47,
            48,27,49,50,51,1,3,28,29,30,
            60,7,52,0,1,3,7,52,38,0,
            75,7,4,1,2,68,0,2,7,38,
            39,75,31,68,0,8,4,5,6,62,
            63,56,57,64,65,66,67,70,71,72,
            73,74,77,78,69,79,80,81,82,83,
            84,85,86,87,88,58,39,52,89,16,
            68,75,7,38,0,48,40,45,43,44,
            42,41,46,47,49,50,51,68,75,37,
            34,32,33,36,35,25,26,27,28,29,
            30,38,1,7,39,2,31,4,0,4,
            2,31,39,7,33,40,25,41,53,34,
            42,35,43,44,36,26,45,46,32,54,
            37,55,47,48,27,49,50,51,28,29,
            30,59,3,1,0,7,38,52,69,0,
            4,33,40,25,41,53,34,42,35,43,
            44,36,26,45,46,32,54,37,55,47,
            48,27,49,50,51,1,3,28,29,30,
            59,0,11,12,13,14,15,1,3,2,
            9,10,8,4,5,6,17,18,19,20,
            21,22,23,24,60,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            105,39,30,39,30,30,30,30,30,30,
            30,30,30,30,30,30,39,108,39,39,
            39,39,39,39,39,39,39,39,39,30,
            108,108,108,108,108,16,16,85,109,70,
            70,94,1,30,30,30,30,30,30,30,
            30,30,30,30,30,30,30,30,30,109,
            30,30,30,30,30,30,30,30,30,30,
            30,30,30,70,70,70,70,70,70,45,
            30,13,43,93,11,11,60,18,61,23,
            61,21,21,61,20,61,55,39,39,39,
            39,39,39,39,39,39,39,39,39,39,
            39,39,39,39,39,39,39,39,39,77,
            51,39,40,45,112,44,70,100,69,44,
            7,7,7,7,7,30,28,39,83,112,
            45,44,98,70,73,32,39,102,45,44,
            63,77,39,77,25,9,77,39,83,77,
            30,30,45,44,72,11,11,13,102,70,
            39,114,77,7,91,27,39,7,30,49,
            91,77,77,112,45,45,70,100,69,79,
            77,91,88,65,7,25,39,39,29,45,
            7,30,28,112,98,118,114,75,25,91,
            30,7,45,25,98,70,70,91,89,30,
            39,75,13,91,91,39,75,30,81,47
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            81,79,78,67,77,76,1,0,99,0,
            29,0,30,52,0,73,0,102,0,94,
            68,0,91,0,54,0,71,10,62,5,
            0,81,80,79,78,67,77,76,0,5,
            10,0,10,5,22,0,97,0,101,0,
            49,48,30,0,67,63,64,65,66,55,
            33,0,92,0,10,32,69,0,10,21,
            0,21,49,48,41,39,10,0,49,48,
            41,39,30,0,10,90,0,10,72,0,
            37,0,21,48,49,10,0,23,0,30,
            52,10,27,0,10,89,0,32,10,31,
            0,59,0,83,10,32,0,95,10,27,
            0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,10,11,87,8,6,7,
            68,81,82,83,84,3,12,13,93,94,
            95,100,101,102,48,64,76,96,97,98,
            1,69,44,55,60,63,72,42,90,47,
            52,56,61,62,66,67,74,75,78,79,
            80,91,54,70,73,16,17,89,30,107,
            4,14,15,18,19,20,21,29,31,22,
            23,24,25,26,92,5,27,28,32,33,
            34,35,36,37,38,39,40,41,108,45,
            46,49,50,51,53,57,58,59,65,71,
            77,88,99,103,104,105,106
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            114,0,0,0,116,120,121,122,123,0,
            124,125,126,127,128,129,130,131,0,132,
            111,110,142,0,0,0,135,0,163,0,
            115,154,141,0,0,0,112,159,161,0,
            162,0,0,0,118,134,172,173,174,0,
            150,160,169,0,144,149,0,164,167,168,
            171,0,145,146,147,148,151,0,153,158,
            175,113,117,119,133,136,137,138,139,140,
            143,0,152,156,0,0,157,166,109,0,
            0,0,155,0,165,170,0,176,177,0,
            178,179,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            120,151,212,130,59,69,159,26,186,35,
            87,105,75,6,12,16,40,83,52,141,
            208,227,231,52,52,195,52,1,1,1,
            44,47,92,115,47,235,20,145,202,177,
            202,137,165,165,165,165,165,95,95,95
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            128,128,128,128,4,4,128,32,192,10,
            4,10,80,10,10,10,10,4,4,139,
            10,10,4,56,80,199,65,4,4,4,
            10,50,4,10,118,10,23,148,205,180,
            220,139,167,169,171,173,175,102,97,110
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            65,63,5,65,29,29,63,56,110,50,
            29,44,29,6,6,6,50,29,29,69,
            6,5,5,29,29,19,29,102,101,100,
            48,61,29,41,51,3,71,69,7,111,
            5,69,80,79,78,77,76,44,42,44
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            52,52,52,52,58,58,52,52,95,39,
            58,39,12,39,39,39,39,58,58,75,
            39,39,58,4,12,68,32,58,58,58,
            39,2,58,39,1,39,69,1,39,101,
            39,75,1,53,54,54,48,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            19,19,34,19,23,23,19,94,-1,27,
            23,9,23,34,34,34,27,23,23,3,
            34,34,34,23,23,68,23,17,1,7,
            27,29,23,9,11,34,95,3,40,-1,
            34,3,20,20,20,20,20,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            153,31,0,110,0,152,2,24,0,111,
            0,152,2,23,0,152,2,22,0,205,
            117,0,31,149,0,161,181,117,16,169,
            0,112,0,0,165,117,2,155,0,165,
            117,2,0,168,2,0,159,117,0,172,
            0,195,117,31,0,9,110,0,127,32,
            195,117,31,0,69,132,110,0,127,195,
            117,32,31,0,195,117,32,31,0,132,
            110,0,127,32,31,0,127,195,117,31,
            0,127,31,0,148,0,2,0,165,111,
            0,2,111,0,165,117,2,148,0,2,
            0,164,111,0,158,2,0,159,0,161,
            193,117,16,108,201,53,0,112,0,161,
            193,117,16,201,53,0,139,0,113,0,
            200,117,139,0,117,139,0,155,113,0,
            189,117,16,199,108,198,174,0,189,117,
            16,198,174,0,188,0,148,0,147,0,
            146,0,145,0,144,0,213,94,0,77,
            2,115,111,113,0,213,128,138,2,98,
            0,53,0,0,138,78,125,0,29,132,
            0,152,2,0,111,121,0,152,2,11,
            0,161,181,117,16,128,152,2,0,111,
            3,0,119,0,112,0,197,2,112,0,
            138,31,112,0,138,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1200,0,1889,1237,1860,0,394,0,397,1325,
            1430,1252,1352,1297,1238,0,529,0,1208,569,
            367,0,1398,718,399,396,1325,1206,1297,1238,
            1573,1696,0,1798,1768,1554,1507,1327,617,1649,
            608,512,1726,1308,404,720,495,1417,1404,1376,
            1543,1458,1516,1494,1482,1446,1715,1707,1697,1564,
            1146,1688,1680,1672,1657,1624,637,1211,1175,1155,
            1119,1099,1078,1057,760,1036,737,571,651,1015,
            994,973,952,931,910,889,868,847,826,805,
            367,784,695,674,470,545,449,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,196,117,182,24,23,22,11,18,17,
            6,5,4,8,10,9,112,2,116,115,
            119,118,121,120,123,122,125,124,113,38,
            2,2,2,2,2,76,61,2,31,152,
            138,139,117,6,5,63,62,4,67,66,
            65,64,56,57,8,71,70,73,72,78,
            77,74,88,87,86,84,85,83,82,81,
            80,79,69,152,152,152,152,152,197,138,
            128,117,31,2,156,155,183,29,184,174,
            185,55,54,186,53,187,188,108,115,115,
            118,118,118,118,116,116,120,119,119,122,
            121,138,124,123,128,128,128,128,128,16,
            159,137,32,127,117,4,168,117,2,31,
            198,175,175,201,175,68,117,137,4,117,
            127,195,166,165,134,117,167,117,153,4,
            108,16,108,16,181,117,16,169,4,137,
            195,32,127,4,2,146,148,117,38,165,
            199,117,16,117,161,38,205,61,31,206,
            117,16,137,117,127,127,158,117,2,159,
            16,189,139,190,117,193,108,194,69,153,
            61,31,117,117,166,117,117,117,193,161,
            69,38,153,181,166,165,202,189,200,68,
            158,2,117,161,161,38,38,68,159,144
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "MYTHREAD",
            "THREADS",
            "UPC_MAX_BLOCKSIZE",
            "relaxed",
            "shared",
            "strict",
            "upc_barrier",
            "upc_localsizeof",
            "upc_blocksizeof",
            "upc_elemsizeof",
            "upc_notify",
            "upc_fence",
            "upc_wait",
            "upc_forall",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "expression_parser_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "layout_qualifier"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 60,
           SCOPE_UBOUND      = 49,
           SCOPE_SIZE        = 50,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 230,
           NT_OFFSET         = 107,
           LA_STATE_OFFSET   = 2369,
           MAX_LA            = 2,
           NUM_RULES         = 366,
           NUM_NONTERMINALS  = 129,
           NUM_SYMBOLS       = 236,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1752,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 89,
           EOLT_SYMBOL       = 89,
           ACCEPT_ACTION     = 1990,
           ERROR_ACTION      = 2003;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
