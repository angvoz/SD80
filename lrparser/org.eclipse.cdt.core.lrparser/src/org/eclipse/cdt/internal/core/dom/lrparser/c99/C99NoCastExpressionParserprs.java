/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99NoCastExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, C99NoCastExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            4,1,1,3,3,3,1,3,3,1,
            3,3,1,3,3,3,3,1,3,3,
            1,3,1,3,1,3,1,3,1,3,
            1,5,1,3,3,3,3,3,3,3,
            3,3,3,3,1,1,2,1,0,1,
            3,1,1,1,1,1,1,1,1,3,
            3,2,2,4,1,2,1,1,1,2,
            5,7,5,1,0,7,5,9,8,3,
            2,2,2,3,2,4,2,2,2,2,
            2,1,1,1,1,2,1,2,2,2,
            1,2,2,1,2,2,1,2,2,1,
            2,2,1,3,1,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            5,5,6,6,2,2,2,1,0,1,
            2,4,2,1,1,1,3,1,1,2,
            3,6,7,1,0,1,3,1,3,1,
            1,1,1,1,1,3,1,1,1,1,
            1,3,1,2,2,1,5,3,1,3,
            5,1,3,1,3,2,4,3,5,4,
            6,6,3,5,1,1,2,3,4,1,
            2,1,3,1,1,3,2,1,1,1,
            1,2,1,2,3,1,1,1,3,1,
            2,2,2,3,4,5,1,5,1,1,
            3,3,4,1,1,2,3,2,3,2,
            1,0,1,2,1,1,1,1,1,2,
            4,3,6,2,4,1,1,-32,0,0,
            0,0,0,0,0,0,-2,0,0,0,
            0,0,0,0,0,0,0,0,0,-5,
            0,0,0,0,0,0,0,0,0,-121,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -177,0,-12,0,0,0,0,0,0,0,
            0,0,-13,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-127,-4,-15,-140,
            -169,-104,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-16,0,
            -170,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -165,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -33,-34,-29,-30,-3,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-17,0,-49,0,0,0,0,0,
            0,0,0,-18,0,0,0,-70,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-69,0,0,
            0,-19,-20,-21,-22,0,-107,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-126,0,0,0,
            0,0,0,0,0,-23,0,0,0,0,
            0,0,0,0,0,0,0,-24,-25,0,
            -185,0,0,0,0,0,0,0,0,-26,
            0,0,0,0,0,0,0,0,0,0,
            -27,0,0,0,0,0,0,0,0,-68,
            0,0,0,0,0,0,0,0,0,0,
            -83,-84,-139,-87,-56,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-57,0,0,0,0,0,
            0,0,0,-88,0,0,0,0,0,0,
            0,0,0,0,-58,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-59,0,0,0,0,0,
            0,0,0,-89,0,0,0,0,0,0,
            0,0,0,0,-60,0,0,0,0,0,
            0,0,0,-90,0,0,0,0,0,0,
            0,0,0,0,-61,0,0,0,0,0,
            0,0,0,-91,0,0,0,0,0,0,
            0,0,0,0,-62,0,0,0,0,0,
            0,0,0,-92,0,0,0,0,0,0,
            0,0,0,0,-63,0,0,0,0,0,
            0,0,0,-93,0,0,0,0,0,0,
            0,0,0,0,-64,0,0,0,0,0,
            0,0,0,-191,0,0,0,0,0,0,
            0,0,0,0,-65,0,0,0,0,0,
            0,0,0,-94,0,0,0,0,0,0,
            0,0,0,0,-66,0,0,0,0,0,
            0,0,0,-130,0,0,0,0,0,0,
            0,0,0,0,-46,0,0,0,0,0,
            0,0,0,0,0,-95,-96,-97,-98,-77,
            0,0,0,0,0,-144,0,0,0,0,
            0,0,0,0,-99,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-100,-101,
            -102,-151,-103,-78,0,0,0,0,-6,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-145,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-168,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -182,0,0,0,0,0,0,0,0,-114,
            0,0,0,0,0,0,0,0,0,-37,
            0,0,0,0,0,0,0,0,-47,0,
            0,0,0,0,0,0,0,-188,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-192,0,0,0,
            0,0,0,0,0,-80,0,0,0,0,
            0,0,0,0,0,-38,0,0,0,0,
            0,0,0,0,-7,0,0,0,0,0,
            0,-116,0,-202,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-120,0,0,0,0,0,0,0,
            0,-119,0,0,0,0,0,0,0,0,
            0,-129,-8,0,0,0,0,0,0,0,
            0,-51,0,0,0,0,0,0,0,0,
            -155,0,0,0,0,0,0,-131,-72,-123,
            -161,-142,-148,-73,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-203,0,0,
            0,0,0,0,0,-113,-67,0,0,-162,
            -166,0,-193,-106,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -204,0,0,-54,0,0,0,0,0,0,
            0,0,-160,0,0,0,0,0,0,0,
            -55,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-52,0,0,0,
            0,0,0,0,0,-82,0,0,0,0,
            -74,-179,-9,0,0,0,0,0,0,-115,
            0,0,-143,0,0,0,0,-167,0,-85,
            0,0,-171,0,0,0,0,-86,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-184,0,0,0,0,
            0,0,0,-75,0,-111,0,0,0,0,
            -48,0,0,0,0,0,0,0,0,-201,
            0,0,0,0,0,-159,-152,0,0,0,
            0,0,0,0,0,0,0,-50,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-10,
            0,0,0,0,0,0,0,-42,0,0,
            0,0,0,0,0,0,0,0,-43,0,
            0,0,0,0,0,0,0,-117,0,-11,
            0,0,0,0,0,0,0,0,0,-44,
            0,0,0,0,0,0,0,0,-108,0,
            -45,0,0,0,0,0,0,0,0,-194,
            0,-71,-187,-156,-109,-118,-31,-124,0,0,
            0,0,0,0,0,0,-110,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-147,0,0,0,0,0,0,-14,-28,
            -35,0,0,-122,-76,0,0,0,0,0,
            0,0,0,0,0,-39,0,0,0,0,
            0,0,0,0,0,0,0,-189,0,0,
            0,0,0,0,0,0,-183,-125,0,0,
            0,-79,-128,0,0,-40,0,0,0,0,
            0,0,-41,0,0,0,0,0,0,-81,
            0,0,0,0,0,-133,-36,0,0,0,
            0,0,0,-112,0,0,-153,-135,0,0,
            0,0,0,-134,0,-136,0,0,0,0,
            0,-176,0,-138,0,-154,-174,0,0,-137,
            0,0,0,-105,0,-158,0,0,0,0,
            -149,0,-190,0,0,0,-164,0,0,0,
            0,0,0,0,0,-175,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-1,0,
            0,0,-150,0,-132,-178,-53,0,-163,-157,
            0,0,0,0,0,0,-146,-141,0,0,
            -195,0,-172,-180,0,0,0,0,0,0,
            0,0,0,0,0,0,-173,-186,0,0,
            -181,0,-196,0,-197,0,0,0,0,0,
            -198,0,-199,-200,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            83,9,23,23,22,22,26,26,67,67,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,51,51,68,
            68,5,5,5,5,5,5,5,5,5,
            5,5,6,7,7,7,7,8,8,8,
            10,10,10,11,11,11,11,11,12,12,
            12,13,13,14,14,15,15,16,16,17,
            17,18,18,19,19,19,19,19,19,19,
            19,19,19,19,19,93,45,40,84,84,
            71,71,46,94,94,94,94,94,94,94,
            95,95,95,96,96,101,101,102,102,97,
            97,98,98,98,104,104,99,99,99,99,
            100,100,100,100,100,103,103,24,24,24,
            24,24,28,28,28,77,77,72,72,72,
            72,73,73,73,74,74,74,75,75,75,
            76,76,76,105,105,106,106,107,29,31,
            31,31,31,31,52,54,54,54,54,54,
            54,54,54,54,54,54,54,64,64,27,
            27,61,61,61,61,62,62,62,55,55,
            56,56,48,48,48,32,85,85,78,79,
            79,79,63,63,80,80,81,81,65,65,
            20,21,21,21,30,47,47,33,33,33,
            33,36,36,38,34,34,35,39,39,108,
            108,37,109,109,86,86,25,25,25,25,
            25,25,25,25,25,82,49,49,49,49,
            58,58,57,57,57,59,59,50,50,87,
            87,69,69,60,60,60,41,41,41,42,
            43,43,43,44,44,44,44,53,53,70,
            70,70,70,66,88,89,89,90,90,91,
            91,110,110,111,111,112,112,112,112,114,
            114,113,113,113,115,115,83,83,1,14,
            19,15,389,580,43,483,409,11,522,494,
            524,523,556,525,569,568,73,90,133,210,
            626,14,19,15,389,40,135,132,134,158,
            539,14,19,15,389,580,43,483,409,390,
            522,494,524,523,556,525,569,568,73,277,
            137,573,164,597,14,19,15,389,33,141,
            144,147,150,597,14,19,15,389,32,388,
            1211,1264,1445,1482,1500,1206,270,210,42,740,
            719,745,6,279,216,1551,218,1593,220,221,
            226,340,265,1104,1099,268,280,251,210,242,
            613,539,14,19,15,389,580,43,483,409,
            390,522,494,524,523,556,525,569,568,73,
            277,440,14,19,15,389,580,43,483,409,
            390,522,494,524,523,556,525,569,568,73,
            277,516,516,397,397,597,14,19,15,389,
            580,43,483,409,279,522,494,524,523,556,
            525,569,568,73,90,600,16,280,1131,391,
            285,1468,286,347,281,597,14,19,15,389,
            42,43,483,409,248,522,847,282,368,14,
            19,15,389,580,43,483,409,1385,522,494,
            524,523,556,525,569,568,73,1369,135,23,
            22,236,283,261,439,291,388,655,14,19,
            15,389,580,43,483,409,1388,522,494,524,
            523,556,525,569,568,73,1478,404,14,19,
            15,389,580,43,483,409,450,522,494,524,
            523,556,525,569,568,73,1607,1544,446,314,
            237,568,14,19,15,389,580,43,483,409,
            660,522,494,524,523,556,525,569,568,73,
            277,597,14,19,15,389,580,43,483,409,
            550,522,494,524,523,556,525,569,568,73,
            91,684,700,758,394,597,14,19,15,389,
            580,43,483,409,283,522,494,524,523,556,
            525,569,568,73,84,597,14,19,15,389,
            580,43,483,409,430,522,494,524,523,556,
            525,569,568,73,83,597,14,19,15,389,
            580,43,483,409,1557,522,494,524,523,556,
            525,569,568,73,82,597,14,19,15,389,
            580,43,483,409,433,522,494,524,523,556,
            525,569,568,73,81,597,14,19,15,389,
            580,43,483,409,533,522,494,524,523,556,
            525,569,568,73,80,597,14,19,15,389,
            580,43,483,409,724,522,494,524,523,556,
            525,569,568,73,79,597,14,19,15,389,
            580,43,483,409,727,522,494,524,523,556,
            525,569,568,73,78,597,14,19,15,389,
            580,43,483,409,453,522,494,524,523,556,
            525,569,568,73,77,597,14,19,15,389,
            580,43,483,409,717,522,494,524,523,556,
            525,569,568,73,76,597,14,19,15,389,
            580,43,483,409,623,522,494,524,523,556,
            525,569,568,73,75,597,14,19,15,389,
            580,43,483,409,286,522,494,524,523,556,
            525,569,568,73,74,597,14,19,15,389,
            42,43,483,764,133,210,518,254,288,605,
            349,192,135,132,134,158,597,14,19,15,
            389,580,43,483,409,634,522,494,524,523,
            556,525,569,568,73,1613,137,950,164,231,
            636,685,135,552,411,141,144,147,150,597,
            14,19,15,389,42,39,1211,1264,1445,1482,
            1500,1206,597,14,19,15,389,580,43,483,
            409,1032,522,494,524,523,556,525,569,568,
            73,1627,597,14,19,15,389,42,43,483,
            409,361,522,494,524,523,556,525,569,568,
            92,597,14,19,15,389,42,43,483,409,
            661,522,494,524,523,556,525,569,568,92,
            597,14,19,15,389,42,43,614,1628,597,
            14,19,15,389,42,43,483,804,597,14,
            19,15,389,42,43,483,409,209,522,494,
            524,523,556,525,569,568,92,597,14,19,
            15,389,42,43,483,409,451,522,494,524,
            523,556,525,569,568,92,597,14,19,15,
            389,42,43,644,1635,597,14,19,15,389,
            42,38,752,1062,597,14,19,15,389,42,
            43,483,409,200,522,494,524,523,556,525,
            569,568,92,597,14,19,15,389,42,43,
            483,409,753,522,494,524,523,556,525,569,
            568,72,502,597,14,19,15,389,42,37,
            201,882,597,14,19,15,389,42,43,483,
            409,308,522,494,524,523,849,270,756,751,
            114,765,114,255,536,215,1551,218,1593,220,
            221,226,1566,263,1104,1099,268,182,262,259,
            250,210,250,210,271,273,743,397,270,272,
            766,769,260,747,66,1595,215,1551,218,1593,
            220,221,226,1100,263,1104,1099,268,274,883,
            1537,216,1551,218,1593,220,221,226,1223,257,
            1233,520,1695,1266,597,14,19,15,389,42,
            43,483,409,763,522,494,524,523,556,525,
            880,597,14,19,15,389,42,43,483,409,
            1695,522,494,524,523,556,881,597,14,19,
            15,389,42,43,483,409,286,522,494,524,
            865,327,478,597,14,19,15,389,42,36,
            6,1611,1695,374,1631,1695,133,210,548,1524,
            397,133,210,410,136,132,134,158,302,140,
            132,134,158,251,210,215,1551,218,1593,220,
            221,226,21,251,210,288,763,1695,138,1133,
            164,20,1695,139,56,164,397,142,145,148,
            151,597,14,19,15,389,42,43,483,409,
            478,522,494,846,133,210,308,96,269,1611,
            196,198,143,132,134,158,824,784,597,14,
            19,15,389,42,43,483,409,1633,522,848,
            1695,1072,181,215,1551,218,1593,220,221,226,
            597,14,19,15,389,42,35,1133,597,14,
            19,15,389,42,43,483,409,256,684,597,
            14,19,15,389,42,43,483,409,6,704,
            597,14,19,15,389,42,34,1526,197,198,
            597,14,19,15,389,42,43,483,409,302,
            724,597,14,19,15,389,42,43,483,409,
            609,744,716,548,603,114,6,602,114,1611,
            1695,1514,238,1212,1695,1540,518,471,14,19,
            15,389,42,35,273,250,210,270,250,210,
            290,1695,270,215,1551,218,1593,220,221,226,
            243,1695,1695,263,1104,1099,268,1537,263,1104,
            1099,268,471,14,19,15,389,42,35,6,
            6,662,1266,387,162,104,387,262,308,308,
            455,193,1695,1102,1695,244,597,14,19,15,
            389,42,46,195,195,133,210,547,758,1695,
            856,1387,1387,146,132,134,158,548,302,86,
            86,88,152,397,454,454,597,14,19,15,
            389,42,45,597,14,19,15,389,42,44,
            200,240,133,210,1101,275,6,6,453,1127,
            149,132,134,158,399,1536,455,397,6,1641,
            133,210,1695,824,46,1230,94,1546,152,132,
            134,158,743,824,6,824,142,397,1072,276,
            544,1553,207,1599,631,824,238,86,195,1695,
            195,767,1238,435,228,824,1384,308,1384,222,
            195,1695,824,1544,255,1695,399,1101,1384,270,
            195,1483,190,1098,190,824,225,1072,1384,1091,
            1600,1286,1600,26,190,265,1104,1099,268,507,
            1072,1596,1600,744,190,48,308,6,455,544,
            190,1614,1600,255,824,206,455,302,6,824,
            1643,135,1098,302,308,361,255,411,224,1072,
            1173,1130,184,1483,195,1098,1101,302,302,86,
            239,308,1384,308,306,302,241,86,1695,1644,
            183,308,879,397,723,255,1695,1695,191,1695,
            242,287,1517,1695,1098,1695,1695,202,289,203,
            1118,1695,1695,1695,206,227,231,278,1695,1695,
            1695,1695,317,1695,1695,1695,1695,1695,1695,1256,
            1130,1695,0,17,178,0,18,177,0,1,
            1918,0,1,1929,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            0,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,0,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,0,42,43,44,0,1,0,3,0,
            5,6,7,8,9,0,11,12,13,14,
            15,6,7,8,9,0,11,12,13,14,
            15,6,7,8,29,30,31,32,33,34,
            35,36,37,38,39,40,45,42,43,44,
            80,46,47,0,1,0,3,50,5,6,
            7,8,9,0,11,12,13,14,15,6,
            7,8,9,0,11,12,13,14,15,6,
            7,8,29,30,31,32,33,34,35,36,
            37,38,39,40,0,42,43,44,4,46,
            47,0,1,0,3,50,5,6,7,8,
            9,0,11,12,13,14,15,6,7,8,
            9,0,11,12,13,14,15,6,7,8,
            29,30,31,32,33,34,35,36,37,38,
            39,40,0,42,43,44,0,46,47,0,
            1,0,3,0,5,6,7,8,9,0,
            11,12,13,14,15,6,7,8,9,0,
            11,12,13,14,15,6,7,8,29,30,
            31,32,33,34,35,36,37,38,39,40,
            0,42,43,44,0,46,47,0,1,0,
            3,0,5,6,7,8,9,0,11,12,
            13,14,15,0,0,1,2,16,17,5,
            0,0,1,2,10,4,29,30,31,32,
            33,34,35,36,37,38,39,40,18,42,
            43,44,0,46,47,0,1,0,3,59,
            0,6,7,8,9,41,11,12,13,14,
            15,0,55,56,57,58,5,0,55,56,
            57,58,5,0,29,30,31,32,33,34,
            35,36,37,38,39,40,0,42,43,44,
            48,49,6,7,8,9,0,11,12,13,
            14,15,55,56,57,58,0,0,0,1,
            4,3,51,46,64,29,30,31,32,33,
            34,35,36,37,38,39,40,0,1,2,
            3,4,5,0,26,0,9,0,65,6,
            7,8,0,16,17,18,19,20,21,22,
            23,24,25,0,27,28,0,4,0,53,
            54,5,4,0,1,2,3,4,5,0,
            0,1,9,3,0,6,7,8,51,16,
            17,18,19,20,21,22,23,24,25,0,
            27,28,0,4,0,1,26,41,0,0,
            1,2,3,4,5,0,53,54,50,0,
            0,1,0,3,51,16,17,18,19,20,
            21,22,23,24,25,26,27,28,16,17,
            0,1,2,3,4,5,26,0,1,2,
            48,49,53,54,50,46,16,17,18,19,
            20,21,22,23,24,25,0,27,28,61,
            62,0,1,2,0,4,0,1,2,3,
            4,10,63,68,69,0,1,0,3,0,
            1,51,16,17,18,19,20,21,22,23,
            24,25,0,27,28,0,59,2,0,1,
            2,3,4,0,1,10,3,0,1,0,
            3,0,0,47,16,17,18,19,20,21,
            22,23,24,25,26,27,28,0,1,2,
            3,4,0,1,2,26,4,26,61,62,
            48,49,10,16,17,18,19,20,21,22,
            23,24,25,26,27,28,0,1,2,3,
            4,0,0,2,0,4,0,5,0,1,
            2,10,16,17,18,19,20,21,22,23,
            24,25,0,27,28,0,1,2,3,4,
            0,0,2,0,4,0,0,0,16,17,
            10,16,17,18,19,20,21,22,23,24,
            25,18,27,28,0,1,2,3,4,0,
            0,0,0,1,0,3,5,63,66,0,
            16,17,18,19,20,21,22,23,24,25,
            0,27,28,0,0,2,26,4,5,6,
            7,8,9,10,11,12,13,14,15,0,
            65,2,41,4,5,6,7,8,9,10,
            11,12,13,14,15,0,0,2,0,60,
            5,5,0,0,41,10,0,5,10,70,
            71,72,73,74,75,76,77,78,79,0,
            41,2,0,0,0,2,0,5,64,10,
            0,0,0,10,10,0,41,0,19,20,
            10,45,0,41,0,0,0,45,0,0,
            52,48,49,0,48,49,10,26,26,0,
            0,0,66,41,0,0,0,0,0,0,
            0,52,0,0,0,0,52,0,0,0,
            45,0,45,0,0,59,67,45,0,0,
            45,0,0,0,0,0,0,0,0,0,
            0,0,0,0,60,0,0,0,60,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1695,611,1439,612,1320,1,1906,1907,1908,1856,
            1695,1857,1855,1909,1858,1854,1213,1073,1350,373,
            363,330,1705,1706,1707,1708,1695,1025,889,1861,
            1866,1865,1863,1864,1862,1867,1868,1860,1869,1870,
            1871,87,1006,884,850,1695,1,1,1,1695,
            189,1,1,1,1,128,1,1,1,1,
            1,1906,1907,1908,1856,246,1857,1855,1909,1858,
            1854,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,591,1,1,1,
            1682,189,1889,1695,1,1,1,1949,189,1,
            1,1,1,129,1,1,1,1,1,1906,
            1907,1908,1856,1695,1857,1855,1909,1858,1854,1906,
            1907,1908,1,1,1,1,1,1,1,1,
            1,1,1,1,1695,1,1,1,1134,189,
            1889,1695,1,1695,1,1948,189,1,1,1,
            1,130,1,1,1,1,1,1906,1907,1908,
            1856,247,1857,1855,1909,1858,1854,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1695,1,1,1,1695,189,1889,1695,
            1,1695,1,1695,188,1,1,1,1,131,
            1,1,1,1,1,1906,1907,1908,1856,245,
            1857,1855,1909,1858,1854,1906,1907,1908,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1695,1,1,1,1695,188,1889,1695,1,1695,
            1,50,189,1,1,1,1,58,1,1,
            1,1,1,60,1,1689,1103,1016,960,1700,
            63,1695,1918,1380,498,1444,1,1,1,1,
            1,1,1,1,1,1,1,1,1271,1,
            1,1,53,189,1889,1695,1873,59,1872,1053,
            67,1906,1907,1908,1856,1699,1857,1855,1909,1858,
            1854,1695,1371,1360,1339,1328,1698,1695,1371,1360,
            1339,1328,1702,69,1861,1866,1865,1863,1864,1862,
            1867,1868,1860,1869,1870,1871,127,1006,884,850,
            835,969,1906,1907,1908,1856,1695,1857,1855,1909,
            1858,1854,1371,1360,1339,1328,47,1695,1695,1874,
            1493,1875,1697,1701,1082,1861,1866,1865,1863,1864,
            1862,1867,1868,1860,1869,1870,1871,1,1712,1439,
            1713,1397,1698,248,1220,1695,527,1695,1181,1906,
            1907,1908,1695,1213,1073,1350,373,363,330,1705,
            1706,1707,1708,49,1025,889,1695,1493,1,1486,
            1456,1700,1134,1695,1712,1439,1713,1432,1698,249,
            1695,1874,902,1875,1695,1906,1907,1908,1697,1213,
            1073,1350,373,363,330,1705,1706,1707,1708,48,
            1025,889,57,1493,1,1692,1348,1699,61,1,
            1712,1439,1713,1320,27,71,1486,1456,1949,65,
            1695,1874,52,1875,1697,1213,1073,1350,373,363,
            330,1705,1706,1707,1708,1608,1025,889,1016,960,
            1695,1712,1439,1713,1320,1698,1386,1,1918,1380,
            835,969,1486,1456,1949,27,1213,1073,1350,373,
            363,330,1705,1706,1707,1708,1695,1025,889,1298,
            485,258,1918,1103,1695,1,1695,1,1,1,
            1,498,1197,1164,1597,1695,1724,62,1725,1695,
            1930,1697,1,1,1,1,1,1,1,1,
            1,1,56,1,1,266,997,1126,1,1712,
            1439,1713,1320,205,1874,498,1875,1695,1874,1695,
            1875,41,1695,2002,1213,1073,1350,373,363,330,
            1705,1706,1707,1708,1608,1025,889,1695,1712,1439,
            1713,1320,264,1918,1103,392,1444,392,1298,485,
            835,969,498,1213,1073,1350,373,363,330,1705,
            1706,1707,1708,1608,1025,889,1695,1712,1439,1713,
            1320,261,1,1382,66,1,1695,1704,1,1918,
            1380,498,1213,1073,1350,373,363,330,1705,1706,
            1707,1708,51,1025,889,1695,1712,1440,1713,1320,
            264,1695,1382,64,1444,70,1695,1695,1016,960,
            498,1213,1073,1350,373,363,330,1705,1706,1707,
            1708,1271,1025,889,1,1712,1439,1713,1320,42,
            186,1,204,1477,1695,1477,89,1197,1703,1695,
            1213,1073,1350,373,363,330,1705,1706,1707,1708,
            1695,1025,889,17,68,1683,1506,1683,1683,178,
            178,178,178,1683,178,178,178,178,178,18,
            1181,1686,89,1686,1686,177,177,177,177,1686,
            177,177,177,177,177,1,1695,1382,1695,815,
            1700,1704,1695,55,1683,498,54,1700,922,795,
            775,755,735,715,675,695,655,635,615,31,
            1686,1441,1,219,284,1532,199,1700,1082,1507,
            267,185,187,498,978,252,1699,28,1719,1720,
            498,1280,28,1699,208,204,217,1161,1695,1695,
            1228,835,969,1695,835,969,498,1518,1534,1695,
            1695,1695,1703,1699,1695,1695,1695,1695,1695,1695,
            1695,452,1695,1695,1695,1695,1383,1695,1695,1695,
            1287,1695,431,1695,1695,1034,451,1722,1695,1695,
            2665,1695,1695,1695,1695,1695,1695,1695,1695,1695,
            1695,1695,1695,1695,941,1695,1695,1695,571
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            427,1,80,41,80,80,80,80,80,80,
            80,80,80,338,3,181,178,185,183,191,
            189,193,192,195,194,10,80,338,163,163,
            256,338,322,322,379,80,80,80,80,80,
            80,80,80,80,80,80,80,80,80,80,
            80,80,80,80,80,80,80,80,80,80,
            80,80,80,80,80,80,163,72,260,74,
            292,161,160,231,243,243,70,70,243,70,
            243,352,117,117,163,45,178,178,183,183,
            183,183,181,181,189,185,185,192,191,224,
            194,193,166,54,256,251,97,45,375,78,
            163,398,295,206,262,206,262,332,206,80,
            54,251,375,375,45,77,74,163,254,352,
            162,297,262,262,262,262,332,332,334,49,
            54,375,251,80,80,45,78,292,219,218,
            260,297,163,262,289,325,262,262,289,334,
            226,334,332,289,52,229,322,80,48,54,
            251,45,45,163,398,295,254,289,327,289,
            289,80,322,334,56,45,322,80,334,297,
            202,80,201,93,260,289,45,289,163,162,
            327,80,93,323
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,66,10,2,52,67,19,20,18,
            4,16,17,53,54,48,49,55,56,57,
            58,61,62,63,64,65,68,69,46,60,
            70,71,72,73,74,76,75,77,78,79,
            59,41,80,45,51,5,0,60,10,52,
            0,5,46,10,52,19,20,18,4,16,
            17,27,28,21,2,22,23,24,25,1,
            3,26,0,6,7,8,9,51,5,22,
            23,24,25,3,19,20,18,16,17,27,
            28,21,4,2,1,0,6,7,8,2,
            22,23,24,25,1,3,19,20,18,4,
            16,17,27,28,21,0,7,9,15,8,
            14,13,12,6,11,52,67,19,20,18,
            16,17,53,54,48,49,55,56,57,58,
            61,62,63,64,65,68,69,60,70,71,
            72,73,74,75,76,77,78,79,4,2,
            10,45,41,5,0,60,70,71,72,73,
            74,75,76,77,78,79,26,4,53,54,
            16,17,49,48,55,56,57,58,61,62,
            18,63,64,65,51,41,46,80,68,69,
            59,66,5,45,0,11,6,12,13,14,
            7,9,15,8,1,4,26,2,5,45,
            41,66,10,59,0,5,45,46,60,0,
            37,29,34,32,33,31,30,35,36,38,
            39,40,59,66,15,12,9,11,14,13,
            6,7,8,45,1,5,41,2,10,4,
            0,11,29,6,30,42,12,31,13,32,
            33,14,7,34,35,9,43,15,44,36,
            37,8,38,39,40,1,3,47,46,5,
            0,4,2,10,41,5,11,29,6,30,
            42,12,31,13,32,33,14,7,34,35,
            9,43,15,44,36,37,8,38,39,40,
            50,3,1,0,66,5,4,1,2,59,
            0,1,3,5,46,45,0,21,22,23,
            24,25,2,19,20,18,4,16,17,27,
            28,3,1,42,43,44,37,29,34,32,
            33,31,30,35,36,38,39,40,15,12,
            9,11,14,13,6,7,8,0,5,41,
            21,22,23,24,25,1,3,2,19,20,
            18,4,16,17,27,28,0,11,29,6,
            30,42,12,31,13,32,33,14,7,34,
            35,9,43,15,44,36,37,8,38,39,
            40,1,3,50,4,0,21,22,23,24,
            25,1,3,2,19,20,18,4,16,17,
            27,28,47,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            83,8,17,8,17,17,17,17,17,17,
            17,17,17,64,8,8,8,8,8,8,
            8,8,8,8,8,8,17,64,41,41,
            55,1,19,19,68,65,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,65,17,17,17,17,17,17,17,
            17,17,17,17,17,17,41,8,73,21,
            54,31,31,47,48,48,27,27,48,27,
            48,43,8,8,41,23,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,81,56,81,16,23,62,22,
            41,71,40,8,81,8,81,81,8,17,
            16,81,62,62,23,22,9,41,34,2,
            8,80,81,75,81,75,27,81,25,11,
            81,62,9,17,17,23,22,33,31,31,
            73,80,41,75,29,59,86,75,29,25,
            8,8,27,29,15,8,27,17,13,16,
            9,23,23,41,71,40,35,29,50,29,
            29,17,27,25,17,23,27,17,25,79,
            60,17,8,50,73,29,23,29,41,41,
            50,17,37,8
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,77,76,75,74,73,72,0,20,0,
            89,0,91,0,66,9,4,0,68,0,
            9,4,23,0,51,0,27,0,26,0,
            25,0,22,9,43,42,36,34,0,9,
            22,0,61,62,63,64,52,28,0,9,
            36,34,0,22,9,43,42,0,9,67,
            0,58,0,32,9,45,0,9,84,0,
            9,24,49,0,56,9,32,0,86,24,
            9,0,9,83,0,9,32,48,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,69,1,
            44,55,60,63,72,10,11,8,6,7,
            68,81,82,83,84,3,12,13,47,52,
            56,61,62,66,67,74,75,78,79,80,
            90,54,70,73,42,91,93,16,17,30,
            89,4,14,15,18,19,20,21,29,31,
            22,23,24,25,26,92,5,27,28,32,
            33,34,35,36,37,38,39,40,41,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,101,105,106,107,108,0,109,
            110,111,112,113,114,115,116,117,118,129,
            0,97,96,122,149,98,121,128,0,0,
            0,140,145,147,0,148,0,0,0,0,
            158,159,160,0,100,120,137,139,146,155,
            0,131,136,0,0,138,150,153,154,157,
            132,133,134,135,144,161,99,102,103,104,
            119,123,124,125,126,127,130,142,0,0,
            143,152,95,0,141,151,156,162,163,0,
            164,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            158,80,33,39,87,107,113,138,12,19,
            49,67,119,124,26,45,97,154,176,180,
            147,1,1,30,54,77,184,6,101,129,
            166,93,57,57,57
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            17,17,4,4,17,17,17,144,17,24,
            4,24,17,17,24,4,95,24,24,4,
            151,4,4,24,4,24,24,9,104,132,
            169,95,64,59,72
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            4,63,25,25,63,61,61,98,53,44,
            25,39,61,61,44,25,48,5,4,4,
            18,91,90,42,25,36,2,66,48,99,
            4,48,39,37,39
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            46,46,51,51,46,46,46,86,46,41,
            51,41,46,46,41,51,66,41,41,51,
            59,51,51,41,51,41,41,60,1,92,
            41,66,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            34,19,23,23,19,19,19,-1,88,27,
            23,11,19,19,27,23,5,34,34,34,
            63,1,3,27,23,11,34,89,5,-1,
            34,5,11,11,11
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            139,10,0,96,0,181,102,0,31,136,
            0,144,163,102,26,0,98,0,150,102,
            2,135,0,97,0,150,102,2,0,153,
            2,0,112,9,175,102,10,0,112,175,
            102,9,10,0,112,9,10,0,112,175,
            102,10,0,112,10,0,129,0,2,0,
            151,97,0,2,97,0,150,102,2,129,
            0,2,0,150,97,0,140,2,0,144,
            173,102,26,120,42,0,144,173,102,26,
            42,0,125,0,99,0,178,102,125,0,
            102,125,0,141,99,0,148,102,26,120,
            44,0,148,102,26,120,43,0,148,102,
            26,44,0,148,102,26,43,0,187,85,
            0,77,2,100,97,99,0,187,115,138,
            2,89,0,53,0,0,138,69,110,0,
            29,117,0,162,2,21,0,144,163,102,
            26,115,162,2,0,162,2,0,97,3,
            0,104,0,98,0,177,2,97,0,138,
            10,97,0,138,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            391,0,390,0,1546,1600,1536,1526,1524,0,
            1118,1280,1380,1212,361,1103,1072,0,824,1206,
            308,0,1593,1551,1104,1099,361,1103,1072,1544,
            1382,1387,0,1432,1397,1181,1164,1197,1082,1298,
            485,1271,969,835,1371,1360,1339,1328,1493,1486,
            1456,1016,960,373,363,1350,1320,1213,1073,1025,
            889,330,1034,997,978,941,922,902,856,547,
            1053,527,498,815,795,775,755,735,715,695,
            675,655,635,615,308,591,455,571,411,431,
            340,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,176,102,164,21,28,27,17,16,4,
            18,20,19,2,97,101,100,104,103,106,
            105,108,107,110,109,98,45,2,162,138,
            125,102,67,52,2,10,17,16,54,53,
            4,58,57,56,55,48,49,18,62,61,
            64,63,69,68,65,79,78,77,75,76,
            74,73,72,71,70,60,162,115,102,10,
            2,136,135,165,166,167,44,43,168,42,
            169,170,1,3,177,138,100,100,103,103,
            103,103,101,101,105,104,104,107,106,138,
            109,108,115,26,142,4,9,112,102,4,
            153,102,2,120,26,120,26,26,120,59,
            102,4,102,102,112,175,151,150,117,102,
            152,102,26,102,26,102,102,26,163,102,
            26,102,151,175,9,112,4,2,127,129,
            102,45,150,102,148,125,149,102,148,173,
            120,174,102,144,45,181,52,10,182,102,
            151,112,112,140,102,2,142,148,102,148,
            144,60,45,173,60,139,52,10,163,102,
            178,59,140,2,102,144,139,144,150,179,
            45,59,142,45
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_cast_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_name",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_or_typedefname",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 47,
           SCOPE_UBOUND      = 34,
           SCOPE_SIZE        = 35,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 204,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2002,
           MAX_LA            = 2,
           NUM_RULES         = 307,
           NUM_NONTERMINALS  = 115,
           NUM_SYMBOLS       = 208,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1589,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1682,
           ERROR_ACTION      = 1695;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
