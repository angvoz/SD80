//!TestSimpleFunctionInClassToInHeader
//#org.eclipse.cdt.ui.tests.refactoring.togglefunction.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>

class A {
public:
    int /*$*/function/*$$*/()
    {
        return 0;
    }
private:
    int a;
};
//=
#include <iostream>

class A {
public:
    int function();
private:
    int a;
};

inline int A::function()
{
    return 0;
}


//!TestSimpleFunctionInHeaderToImplementation
//#org.eclipse.cdt.ui.tests.refactoring.togglefunction.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>

class A {
public:
    int function();
private:
    int a;
};

inline int A::/*$*/function/*$$*/()
{
    return 0;
}
//=
#include <iostream>

class A {
public:
    int function();
private:
    int a;
};


//@A.cpp
#include "A.h"

int main() {
    return 0;
}
//=
#include "A.h"

int main() {
    return 0;
}

int A::function()
{
    return 0;
}


//!TestSimpleFunctionInImplementationToInClass
//#org.eclipse.cdt.ui.tests.refactoring.togglefunction.ToggleRefactoringTest
//@.config
filename=A.cpp
//@A.cpp
#include "A.h"

int A::/*$*/function/*$$*/()
{
    return 0;
}

int main()
{
    return 0;
}
//=
#include "A.h"



int main()
{
    return 0;
}
//@A.h
#include <iostream>

class A {
public:
    int function();
private:
    int a;
};
//=
#include <iostream>

class A {
public:
    int function()
    {
        return 0;
    }
private:
    int a;
};
//!TestDifferentParameterNames
//#org.eclipse.cdt.ui.tests.refactoring.togglefunction.ToggleRefactoringTest
//@.config
filename=MyClass.cpp
//@MyClass.cpp
#include "MyClass.h"

myClass::/*$*/myClass/*$$*/(int implname) : fVal(implname) {}

int main()
{
    return 0;
}
//=
#include "MyClass.h"



int main()
{
    return 0;
}
//@MyClass.h

struct myClass {
  int fVal;
  myClass(int headername);
};

//=

struct myClass {
  int fVal;
  myClass(int implname)
    :fVal(implname)
    {
    }
};

//!TestMissingParameterNames
//#org.eclipse.cdt.ui.tests.refactoring.togglefunction.ToggleRefactoringTest
//@.config
filename=MyClass.cpp
//@MyClass.cpp
#include "MyClass.h"

myClass::/*$*/myClass/*$$*/(int implname) : fVal(implname) {}

int main()
{
    return 0;
}
//=
#include "MyClass.h"



int main()
{
    return 0;
}
//@MyClass.h

struct myClass {
  int fVal;
  myClass(int);
};

//=

struct myClass {
  int fVal;
  myClass(int implname)
    :fVal(implname)
    {
    }
};

