<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.4"?>
<plugin>
   <extension
         point="org.eclipse.cdt.codan.core.checkers"
         id="org.eclipse.cdt.codan.core.internal.checkers">

      <checker
            class="org.eclipse.cdt.codan.internal.checkers.AssignmentInConditionChecker"
            id="org.eclipse.cdt.codan.internal.checkers.AssignmentInConditionChecker"
            name="Assignment in condition">
      <problem
            defaultSeverity="Warning"
            description="Finds statements like  &apos;if (a=b)&apos;"
            id="org.eclipse.cdt.codan.internal.checkers.AssignmentInConditionProblem"
            name="Assignment in condition">
      </problem>
      
      
      </checker>
            <checker
            class="org.eclipse.cdt.codan.internal.checkers.StatementHasNoEffectChecker"
            id="org.eclipse.cdt.codan.internal.checkers.StatementHasNoEffectChecker"
            name="StatementHasNoEffectChecker">
      <problem
            category="org.eclipse.cdt.codan.core.categories.ProgrammingProblems"
            defaultSeverity="Warning"
            description="Finds statements like &apos;a;&apos; or &apos;-a;&apos; or &apos;a-b;&apos; which do no seems to have any side effect therefore suspicious"
            id="org.eclipse.cdt.codan.internal.checkers.StatementHasNoEffectProblem"
            messagePattern="Statement has no effect ''{0}''"
            name="Statement has no effect"/>
      </checker>
      
      <checker
            class="org.eclipse.cdt.codan.internal.checkers.NonVirtualDestructor"
            id="org.eclipse.cdt.codan.internal.checkers.NonVirtualDescructor"
            name="NonVirtualDescructorChecker">
      <problem
            category="org.eclipse.cdt.codan.core.categories.ProgrammingProblems"
            defaultSeverity="Warning"
            id="org.eclipse.cdt.codan.internal.checkers.NonVirtualDestructorProblem"
            name="Class has a virtual method and non-virtual destructor">
      </problem>
      </checker>

      <checker
            class="org.eclipse.cdt.codan.internal.checkers.CatchByReference"
            id="org.eclipse.cdt.codan.internal.checkers.CatchByReference"
            name="CatchByReferenceChecker">
      <problem
            category="org.eclipse.cdt.codan.core.categories.ProgrammingProblems"
            defaultSeverity="Warning"
            description="Catching by reference is recommended by C++ experts, &quot;Throw by value, catch by reference&quot;. For one thing, this avoids copying and potentially slicing the exception."
            id="org.eclipse.cdt.codan.internal.checkers.CatchByReference"
            name="Catching by reference is recommended"
            messagePattern="Catching by reference is recommended for non-basic types">
      </problem>
      </checker>
      <checker
            class="org.eclipse.cdt.codan.internal.checkers.SuggestedParenthesisChecker"
            id="org.eclipse.cdt.codan.internal.checkers.SuggestedParenthesisChecker"
            name="SuggestedParenthesisChecker">
      <problem
            category="org.eclipse.cdt.codan.core.categories.ProgrammingProblems"
            defaultSeverity="Warning"
            description="This checker finds a problems that caused by lack of understanding operator precedence in C. Example (! x&gt;0 &amp;&amp; x&lt;10). Parenthesis should be used to clarify programmer's intent."
            id="org.eclipse.cdt.codan.internal.checkers.SuggestedParenthesisProblem"
            name="Suggested parenthesis around expression">
      </problem>
      </checker>
      
             <checker
            class="org.eclipse.cdt.codan.internal.checkers.NamingConventionFunctionChecker"
            id="org.eclipse.cdt.codan.internal.checkers.NamingConventionFunctionChecker"
            name="NamingConventionFunctionChecker">
      <problem
            category="org.eclipse.cdt.codan.core.categories.CodeStyle"
            defaultEnabled="false"
            defaultSeverity="Info"
            description="Finds and reports functions name of which does not match pattern parameter"
            id="org.eclipse.cdt.codan.internal.checkers.NamingConventionFunctionChecker"
            messagePattern="Bad function name &quot;{0}&quot; (pattern /{1}/)"
            name="Name convention for function">
      </problem>
      </checker>
             <checker
                   class="org.eclipse.cdt.codan.internal.checkers.ReturnChecker"
                   id="org.eclipse.cdt.codan.internal.checkers.ReturnChecker"
                   name="Return inconsistencies">
                <problem
                      category="org.eclipse.cdt.codan.core.categories.ProgrammingProblems"
                      defaultEnabled="true"
                      defaultSeverity="Error"
                      description="Return statment has no return value, if somebody would use return value from this function it would be random"
                      id="org.eclipse.cdt.codan.checkers.noreturn"
                      messagePattern="Return without value, in function returning non-void"
                      name="No return value">
                </problem>
                <problem
                      category="org.eclipse.cdt.codan.core.categories.ProgrammingProblems"
                      defaultEnabled="true"
                      defaultSeverity="Error"
                      description="Return statement has a value, but function is declared to return void. Did you mean to declare function with return value?"
                      id="org.eclipse.cdt.codan.checkers.errreturnvalue"
                      messagePattern="Return has value, in function returning void"
                      name="Unused return value">
                </problem>
                     <problem
                      category="org.eclipse.cdt.codan.core.categories.ProgrammingProblems"
                      defaultEnabled="true"
                      defaultSeverity="Warning"
                      description="No return statement in a function which is declared to return value"
                      id="org.eclipse.cdt.codan.checkers.errnoreturn"
                      messagePattern="No return, in function returning non-void"
                      name="No return">
                </problem>
             </checker>
       

             
   </extension>
</plugin>
