/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.upc;

public class UPCNoCastExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, UPCNoCastExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            4,1,1,3,3,3,1,3,3,1,
            3,3,1,3,3,3,3,1,3,3,
            1,3,1,3,1,3,1,3,1,3,
            1,5,1,3,3,3,3,3,3,3,
            3,3,3,3,1,1,2,1,0,1,
            3,1,1,1,1,1,1,1,1,3,
            3,2,2,4,1,2,1,1,1,2,
            5,7,5,1,0,7,5,9,8,3,
            2,2,2,3,2,4,2,2,2,2,
            2,1,1,1,1,2,1,2,2,2,
            1,2,2,1,2,2,1,2,2,1,
            2,2,1,3,1,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            5,5,6,6,2,2,2,1,0,1,
            2,4,2,1,1,1,3,1,1,2,
            3,6,7,1,0,1,3,1,3,1,
            1,1,1,1,1,3,1,1,1,1,
            1,3,1,2,2,1,5,3,1,3,
            5,1,3,1,3,2,4,3,5,4,
            6,6,3,5,1,1,2,3,4,1,
            2,1,3,1,1,3,2,1,1,1,
            1,2,1,2,3,1,1,1,3,1,
            2,2,2,3,4,5,1,5,1,1,
            3,3,4,1,1,2,3,2,3,2,
            1,0,1,2,1,1,1,1,1,2,
            4,3,6,2,4,1,1,1,1,1,
            2,4,2,4,2,4,1,1,2,1,
            1,1,3,3,2,1,3,2,3,2,
            3,2,2,11,10,10,9,10,9,9,
            8,10,9,9,8,9,8,8,7,10,
            9,9,8,9,8,8,7,1,1,-38,
            0,0,0,0,0,0,0,-2,0,0,
            0,0,0,0,0,0,0,0,0,-78,
            -4,-87,0,0,0,0,-5,0,0,0,
            0,0,0,0,0,0,-60,0,0,0,
            0,0,0,0,-141,0,0,0,0,0,
            0,0,0,0,0,-18,0,-6,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-135,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-186,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-193,
            -9,0,0,0,0,0,0,-30,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-35,
            -36,0,-156,-19,-20,0,0,0,0,0,
            0,0,0,-84,0,0,0,0,0,0,
            0,0,-181,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-79,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-144,0,-7,0,0,0,0,0,
            -57,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-21,
            -81,0,0,0,0,0,0,0,0,-61,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-22,-23,0,0,0,
            -8,0,0,0,0,0,0,0,0,0,
            -15,0,0,0,0,0,0,0,0,0,
            0,0,-3,0,0,0,0,0,0,0,
            -167,0,0,0,0,0,0,0,0,0,
            0,0,-120,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-127,0,0,0,0,0,0,0,
            -24,0,0,0,0,0,0,0,0,0,
            0,-25,0,0,-48,0,0,0,0,0,
            0,0,-26,0,0,0,-27,-96,-140,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -201,0,0,0,0,0,0,0,-73,0,
            0,0,0,0,0,0,0,0,0,0,
            -62,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -43,0,0,0,0,0,0,0,-63,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-64,0,
            0,0,0,0,0,0,-74,0,0,0,
            0,0,0,0,0,0,0,0,-65,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-66,0,
            0,0,0,0,0,0,-75,0,0,0,
            0,0,0,0,0,0,0,0,-67,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-68,0,
            0,0,0,0,0,0,-76,0,0,0,
            0,0,0,0,0,0,0,0,-69,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-70,0,
            0,0,0,0,0,0,-95,0,0,0,
            0,0,0,0,0,0,0,0,-71,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-72,0,
            0,0,0,0,0,0,-124,0,0,0,
            0,0,0,0,0,0,0,0,-160,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-161,0,
            0,0,0,0,0,0,-142,0,0,0,
            0,0,0,0,0,0,0,0,-184,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-198,0,0,
            0,0,0,0,0,-39,0,0,0,0,
            0,0,0,0,0,0,-16,0,0,0,
            0,0,0,-52,0,0,0,0,0,0,
            0,-28,0,-204,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-208,0,0,0,0,0,0,0,
            -40,0,0,0,0,0,0,0,0,0,
            0,-29,-77,-93,-94,-155,0,0,-53,0,
            0,0,0,0,0,0,-97,0,-218,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-134,0,0,
            0,0,0,0,0,-82,0,0,0,0,
            0,0,0,0,0,0,-143,-122,-88,0,
            -98,0,0,-159,0,-58,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-165,
            0,0,0,0,0,-187,0,0,0,0,
            0,-85,-164,0,0,0,0,0,0,0,
            0,0,0,0,0,-99,0,0,0,0,
            0,0,0,-172,0,0,0,0,0,0,
            0,0,-171,-92,0,0,0,0,-90,0,
            0,0,0,0,0,0,-117,0,0,0,
            0,0,0,-119,0,0,0,0,0,0,
            -199,0,0,-37,-195,0,0,0,0,0,
            0,0,0,-54,0,0,0,0,0,0,
            0,-217,0,0,0,0,-1,-100,0,0,
            0,0,0,0,0,-121,-101,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-102,-185,0,0,0,0,0,0,
            0,0,0,0,0,-139,0,-169,0,-147,
            -176,0,-55,0,0,0,0,0,0,0,
            -129,0,0,0,0,0,0,0,0,-175,
            0,0,-83,-44,0,0,0,0,0,0,
            0,0,0,-56,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -162,-188,-189,-202,0,0,0,0,0,-49,
            0,0,0,0,0,0,0,-210,0,0,
            -41,0,0,0,0,0,0,0,0,0,
            -50,0,0,0,0,0,0,0,-211,0,
            0,-51,0,0,0,0,0,0,0,0,
            0,0,-86,-80,0,0,0,0,0,0,
            0,0,-126,-192,-131,-183,-132,0,-166,-89,
            0,0,0,0,0,0,0,0,0,-103,
            -104,0,0,0,-91,0,0,0,0,-137,
            0,-190,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-123,0,0,0,0,0,0,-148,0,
            0,0,0,0,0,-163,0,0,0,0,
            0,0,0,-219,-136,-149,-151,-154,-180,0,
            0,-200,0,0,0,0,0,-10,0,0,
            0,0,0,0,-11,0,0,0,0,0,
            0,-12,0,0,0,0,0,0,0,-105,
            0,0,0,0,0,0,0,-13,0,0,
            0,0,0,0,-14,0,0,0,0,0,
            0,-17,-31,-157,-213,0,-106,-215,-107,0,
            0,0,-32,-33,-168,-207,-203,-108,-42,-109,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-34,-125,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-45,0,0,0,0,0,0,0,
            0,0,0,-194,0,-196,0,0,0,-46,
            0,0,0,0,0,0,-47,0,0,0,
            0,0,0,-138,-197,0,0,-205,-150,-110,
            0,0,-212,0,-152,0,0,-170,0,-111,
            0,-112,0,-174,-113,0,0,0,0,0,
            0,0,-191,-214,0,0,0,-114,-206,0,
            0,0,0,-115,0,0,0,-153,-146,-59,
            0,-179,-116,-128,0,-130,0,0,-118,0,
            0,0,-133,0,0,0,0,0,0,-216,
            0,-145,0,0,0,0,0,-177,0,0,
            0,0,0,0,0,0,0,0,-158,0,
            -178,0,0,-182,0,-209,-220,0,0,0,
            0,0,0,0,0,0,0,0,0,-173,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            85,8,21,21,20,20,30,30,70,70,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,54,54,71,
            71,5,5,5,5,5,5,5,5,5,
            5,5,6,7,7,7,7,9,9,9,
            10,10,10,11,11,11,11,11,12,12,
            12,13,13,14,14,15,15,16,16,17,
            17,18,18,19,19,19,19,19,19,19,
            19,19,19,19,19,96,31,29,86,86,
            73,73,44,97,97,97,97,97,97,97,
            98,98,98,99,99,104,104,105,105,100,
            100,101,101,101,107,107,102,102,102,102,
            103,103,103,103,103,106,106,22,22,22,
            22,22,33,33,33,79,79,74,74,74,
            74,75,75,75,76,76,76,77,77,77,
            78,78,78,108,108,109,109,110,34,36,
            36,36,36,36,55,57,57,57,57,57,
            57,57,57,57,57,57,57,67,67,32,
            32,64,64,64,64,65,65,65,58,58,
            59,59,51,51,51,27,87,87,80,81,
            81,81,66,66,82,82,83,83,68,68,
            23,24,24,24,35,50,50,37,37,37,
            37,40,40,42,38,38,39,43,43,111,
            111,41,112,112,88,88,28,28,28,28,
            28,28,28,28,28,84,52,52,52,52,
            61,61,60,60,60,62,62,53,53,89,
            89,49,49,63,63,63,45,45,45,46,
            47,47,47,48,48,48,48,56,56,72,
            72,72,72,69,90,91,91,92,92,93,
            93,113,113,114,114,115,115,115,115,117,
            117,116,116,116,118,118,85,85,1,1,
            1,5,5,5,5,5,5,23,23,25,
            25,26,26,94,94,94,97,119,119,119,
            119,119,119,119,102,102,102,102,102,102,
            102,102,102,102,102,102,102,102,102,102,
            102,102,102,102,102,102,102,102,120,120,
            1,14,19,15,416,1132,43,515,314,514,
            626,600,701,627,723,712,1092,727,73,90,
            105,38,182,133,210,317,318,784,14,19,
            15,416,315,135,132,134,158,752,14,19,
            15,416,42,43,515,238,514,626,600,701,
            627,723,712,1700,1734,137,67,164,816,14,
            19,15,416,313,141,144,147,150,251,210,
            317,318,1739,381,1373,1222,1453,1470,1485,1254,
            688,14,19,15,416,1132,43,515,513,514,
            626,600,701,627,723,712,1092,727,73,277,
            688,14,19,15,416,1132,43,515,513,514,
            626,600,701,627,723,712,1092,727,73,277,
            595,752,14,19,15,416,42,39,752,14,
            19,15,416,1132,43,515,279,514,626,600,
            701,627,723,712,1092,727,73,91,270,280,
            528,528,1136,516,243,307,279,216,1210,218,
            1469,220,221,226,525,265,1176,601,268,280,
            1133,16,1688,480,14,19,15,416,1132,43,
            515,513,514,626,600,701,627,723,712,1092,
            727,73,277,394,14,19,15,416,1132,43,
            515,1188,514,626,600,701,627,723,712,1092,
            727,73,1316,340,236,848,14,19,15,416,
            311,752,14,19,15,416,42,43,515,281,
            514,626,600,701,627,1618,133,210,317,318,
            72,514,282,1774,1334,285,135,132,134,158,
            752,14,19,15,416,42,43,515,319,514,
            626,600,701,627,723,1702,140,357,137,271,
            164,880,14,19,15,416,40,141,144,147,
            150,752,14,19,15,416,33,1373,1222,1453,
            1470,1485,1254,752,14,19,15,416,1132,43,
            515,105,514,626,600,701,627,723,712,1092,
            727,73,90,912,14,19,15,416,1132,43,
            515,1684,514,626,600,701,627,723,712,1092,
            727,73,1346,605,14,19,15,416,42,43,
            515,71,514,626,600,701,627,723,712,1092,
            727,92,126,480,325,752,14,19,15,416,
            42,43,515,228,514,1236,381,287,598,437,
            14,19,15,416,1132,43,515,1350,514,626,
            600,701,627,723,712,1092,727,73,1401,20,
            237,720,14,19,15,416,1132,43,515,528,
            514,626,600,701,627,723,712,1092,727,73,
            277,752,14,19,15,416,1132,43,515,1705,
            514,626,600,701,627,723,712,1092,727,73,
            84,752,14,19,15,416,42,43,1147,752,
            14,19,15,416,1132,43,515,283,514,626,
            600,701,627,723,712,1092,727,73,83,752,
            14,19,15,416,1132,43,515,528,514,626,
            600,701,627,723,712,1092,727,73,82,752,
            14,19,15,416,1132,43,515,1718,514,626,
            600,701,627,723,712,1092,727,73,81,752,
            14,19,15,416,1132,43,515,528,514,626,
            600,701,627,723,712,1092,727,73,80,752,
            14,19,15,416,1132,43,515,1724,514,626,
            600,701,627,723,712,1092,727,73,79,752,
            14,19,15,416,1132,43,515,528,514,626,
            600,701,627,723,712,1092,727,73,78,752,
            14,19,15,416,1132,43,515,1733,514,626,
            600,701,627,723,712,1092,727,73,77,752,
            14,19,15,416,1132,43,515,528,514,626,
            600,701,627,723,712,1092,727,73,76,752,
            14,19,15,416,1132,43,515,21,514,626,
            600,701,627,723,712,1092,727,73,75,752,
            14,19,15,416,1132,43,515,528,514,626,
            600,701,627,723,712,1092,727,73,74,752,
            14,19,15,416,1132,43,515,269,514,626,
            600,701,627,723,712,1092,727,73,1402,752,
            14,19,15,416,1132,43,515,528,514,626,
            600,701,627,723,712,1092,727,73,1403,752,
            14,19,15,416,42,43,515,275,514,626,
            600,701,627,723,712,1092,727,92,752,14,
            19,15,416,42,43,515,353,514,626,600,
            701,627,723,712,1092,727,92,752,14,19,
            15,416,32,1404,752,14,19,15,416,42,
            43,515,51,1480,752,14,19,15,416,42,
            43,515,209,514,626,600,701,627,723,712,
            1092,727,92,752,14,19,15,416,42,43,
            515,353,514,626,600,701,627,723,712,1092,
            727,92,887,531,944,981,495,23,1605,752,
            14,19,15,416,42,43,515,426,1481,752,
            14,19,15,416,42,43,515,200,514,626,
            600,701,627,723,712,1092,727,92,752,14,
            19,15,416,42,43,515,57,514,626,600,
            701,627,723,712,1092,727,72,471,124,239,
            1549,538,22,201,295,661,752,14,19,15,
            416,42,43,515,272,514,626,600,701,1620,
            1006,250,210,317,318,270,352,251,210,317,
            318,1736,993,427,215,1210,218,1469,220,221,
            226,1713,263,1176,601,268,344,259,225,251,
            210,317,318,273,529,133,210,317,318,405,
            260,270,1285,1005,340,143,132,134,158,296,
            215,1210,218,1469,220,221,226,6,263,1176,
            601,268,729,1492,68,440,257,133,210,317,
            318,726,1490,182,431,366,987,136,132,134,
            158,1743,380,1439,752,14,19,15,416,42,
            43,515,366,514,626,600,1580,648,513,138,
            1439,164,270,1758,193,653,598,515,142,145,
            148,151,215,1210,218,1469,220,221,226,263,
            1176,601,268,638,982,1776,86,238,306,215,
            1210,218,1469,220,221,226,598,262,528,207,
            598,640,1776,752,14,19,15,416,42,43,
            515,6,514,626,1607,196,198,240,276,1689,
            1005,323,1616,512,752,14,19,15,416,42,
            43,1191,197,198,752,14,19,15,416,42,
            43,515,368,514,626,1609,133,210,317,318,
            181,598,598,598,598,1685,140,132,134,158,
            752,14,19,15,416,42,43,515,80,514,
            1308,680,239,241,242,287,1439,286,139,653,
            164,752,14,19,15,416,42,43,515,105,
            514,1317,752,14,19,15,416,42,43,515,
            88,514,1333,1030,474,215,1210,218,1469,220,
            221,226,1639,681,681,6,726,6,1492,945,
            1042,1729,1719,1695,273,1728,133,210,317,318,
            602,642,270,274,228,1073,146,132,134,158,
            124,1544,528,133,210,317,318,224,288,263,
            1176,601,268,149,132,134,158,947,133,210,
            317,318,222,250,210,317,318,987,152,132,
            134,158,562,14,19,15,416,42,35,562,
            14,19,15,416,42,35,562,14,19,15,
            416,42,35,243,308,181,6,6,6,1005,
            324,1194,640,1769,1698,1704,1732,244,752,14,
            19,15,416,42,38,752,14,19,15,416,
            42,37,752,14,19,15,416,42,36,26,
            612,216,1210,218,1469,220,221,226,752,14,
            19,15,416,42,35,752,14,19,15,416,
            42,34,6,6,6,598,1693,129,528,186,
            360,360,460,6,6,793,957,726,656,6,
            390,360,360,573,195,195,289,653,227,1284,
            1284,86,86,511,511,195,195,1187,6,643,
            1284,1284,86,86,511,511,360,573,86,290,
            728,510,759,752,14,19,15,416,42,46,
            195,1187,827,867,1005,1284,1005,86,256,511,
            752,14,19,15,416,42,45,752,14,19,
            15,416,42,44,124,1005,192,907,495,55,
            162,1739,255,1005,184,112,183,573,169,1027,
            149,1752,337,573,283,763,573,250,210,317,
            318,195,573,643,1005,202,1244,195,789,698,
            195,573,1244,203,790,1244,195,573,445,285,
            6,1244,445,794,795,1187,821,573,653,637,
            190,1187,1714,822,278,405,190,1253,1790,190,
            486,1187,200,1370,1790,190,1664,1790,17,86,
            1758,1690,1666,1790,1758,480,255,270,999,124,
            231,863,255,1027,400,1752,526,644,1859,1608,
            1859,1752,255,1859,265,1176,601,268,1859,1348,
            226,1752,250,210,317,318,206,1859,573,1859,
            206,1859,1859,1859,1859,1859,1859,1750,1859,1859,
            1351,1771,195,1859,1552,1771,1859,1244,1859,1859,
            1859,1859,1859,1859,1859,1859,1859,1859,1859,1859,
            1216,1859,1859,1859,1859,1859,1859,1859,1859,1859,
            1859,191,1859,0,320,693,0,17,178,0,
            18,177,0,1,2082,0,1,2093,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,12,13,14,15,0,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,0,38,39,
            40,41,42,43,44,45,46,47,48,49,
            0,51,52,53,0,1,0,3,2,5,
            6,7,8,9,10,11,0,0,2,15,
            0,0,16,6,7,8,9,10,11,0,
            1,2,16,17,18,69,32,33,34,35,
            36,54,38,39,40,41,42,43,44,45,
            46,47,48,49,0,51,52,53,4,55,
            56,0,1,0,3,0,5,6,7,8,
            9,10,11,0,74,0,15,61,0,6,
            7,8,9,10,11,64,65,66,67,0,
            70,71,76,32,33,34,35,36,0,38,
            39,40,41,42,43,44,45,46,47,48,
            49,0,51,52,53,0,55,56,0,1,
            0,3,0,5,6,7,8,9,10,11,
            0,0,1,15,3,0,6,7,8,9,
            10,11,64,65,66,67,57,58,73,0,
            32,33,34,35,36,0,38,39,40,41,
            42,43,44,45,46,47,48,49,37,51,
            52,53,74,55,56,0,1,0,3,68,
            5,6,7,8,9,10,11,0,0,1,
            15,3,0,6,7,8,9,10,11,64,
            65,66,67,54,12,13,0,32,33,34,
            35,36,0,38,39,40,41,42,43,44,
            45,46,47,48,49,37,51,52,53,0,
            55,56,0,1,0,3,0,5,6,7,
            8,9,10,11,0,0,1,15,3,72,
            6,7,8,9,10,11,0,0,1,2,
            4,4,0,0,32,33,34,35,36,0,
            38,39,40,41,42,43,44,45,46,47,
            48,49,37,51,52,53,0,55,56,0,
            1,0,3,0,60,6,7,8,9,10,
            11,0,0,1,15,3,0,6,7,8,
            9,10,11,77,78,0,1,2,62,63,
            14,32,33,34,35,36,0,38,39,40,
            41,42,43,44,45,46,47,48,49,0,
            51,52,53,0,1,2,3,4,5,0,
            57,58,89,14,0,12,13,14,15,73,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,0,0,1,2,4,
            0,5,2,68,4,0,0,1,2,3,
            4,5,16,0,0,1,16,3,12,13,
            14,15,59,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,69,0,
            0,1,2,0,4,2,50,0,5,0,
            1,2,3,4,5,0,16,62,63,16,
            5,12,13,14,0,59,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,0,0,0,0,0,37,6,7,8,
            9,10,11,50,0,0,15,0,0,16,
            0,16,5,5,55,50,0,0,0,54,
            16,4,0,32,33,34,35,36,54,38,
            39,40,41,42,43,44,45,46,47,48,
            49,0,1,2,3,4,5,37,0,57,
            58,57,58,12,13,14,61,50,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,68,0,1,2,0,4,62,
            63,0,5,75,0,1,2,3,4,5,
            16,0,0,12,13,0,12,13,14,0,
            59,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,0,0,2,0,
            4,0,0,0,1,0,4,0,1,2,
            3,4,16,12,13,0,59,0,0,12,
            13,14,0,59,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,0,
            0,70,71,0,5,5,0,0,1,2,
            3,4,0,54,57,58,0,0,1,12,
            13,14,60,56,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,0,
            1,2,3,4,37,0,1,72,3,50,
            50,12,13,14,0,0,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,0,1,2,3,4,37,60,0,1,
            0,3,0,12,13,14,0,0,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,0,1,2,3,4,0,0,
            0,0,0,0,0,12,13,14,0,37,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,0,1,2,3,4,
            0,0,0,0,0,37,37,12,13,14,
            37,37,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,0,1,2,
            3,4,60,0,0,0,0,37,37,12,
            13,14,0,0,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,0,
            1,2,3,4,0,0,0,0,0,0,
            0,12,13,14,0,0,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,0,1,2,3,4,54,0,0,0,
            0,0,0,12,13,14,0,0,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,0,0,2,2,4,5,6,
            7,8,9,10,11,69,0,0,15,16,
            16,5,0,0,0,79,80,81,82,83,
            84,85,86,87,88,32,33,34,35,36,
            0,0,2,0,4,5,6,7,8,9,
            10,11,0,50,0,15,16,16,6,7,
            8,9,10,11,0,0,0,15,0,5,
            54,0,32,33,34,35,36,0,0,0,
            0,16,0,0,32,33,34,35,36,0,
            50,75,0,0,0,6,7,8,9,10,
            11,0,61,0,15,0,0,6,7,8,
            9,10,11,0,0,0,15,0,0,55,
            0,32,33,34,35,36,0,0,0,0,
            0,0,0,32,33,34,35,36,6,7,
            8,9,10,11,0,0,0,15,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,32,33,34,35,36,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1859,1134,1602,1135,1588,1,2070,2071,2072,2180,
            524,2181,1572,1565,1595,2020,208,1077,641,631,
            1869,1870,1871,1872,1558,481,2167,2168,2169,575,
            418,387,2021,2019,2073,2022,2018,87,2025,2030,
            2029,2027,2028,2026,2031,2032,2024,2033,2034,2035,
            69,1259,1189,382,1859,1,266,1,1463,189,
            1,1,1,1,1,1,31,246,1421,1,
            61,58,553,1,1,1,1,1,1,1,
            2082,1418,1619,1883,1884,1058,1,1,1,1,
            1,488,1,1,1,1,1,1,1,1,
            1,1,1,1,1859,1,1,1,1274,189,
            2053,1859,1,1859,1,1859,189,1,1,1,
            1,1,1,1859,610,67,1,1121,60,2070,
            2071,2072,2180,524,2181,1442,1431,1410,715,53,
            1384,1353,1066,1,1,1,1,1,70,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1859,1,1,1,1859,189,2053,1859,1,
            1859,1,1859,189,1,1,1,1,1,1,
            247,1859,2038,1,2039,59,1,1,1,1,
            1,1,1442,1431,1410,715,1084,1139,581,252,
            1,1,1,1,1,1859,1,1,1,1,
            1,1,1,1,1,1,1,1,1361,1,
            1,1,610,189,2053,1859,1,65,1,1168,
            188,1,1,1,1,1,1,245,1859,2038,
            1,2039,50,2070,2071,2072,2180,524,2181,1442,
            1431,1410,715,1615,1374,791,1859,1,1,1,
            1,1,1859,1,1,1,1,1,1,1,
            1,1,1,1,1,1465,1,1,1,1859,
            188,2053,1859,1,1,1,71,189,1,1,
            1,1,1,1,248,1859,2038,1,2039,1196,
            2070,2071,2072,2180,524,2181,47,1859,2082,1418,
            1677,1545,1859,1859,1,1,1,1,1,1859,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1467,1,1,1,68,189,2053,1859,
            2037,1859,2036,57,2113,2070,2071,2072,2180,524,
            2181,249,1859,1888,2020,1889,63,2070,2071,2072,
            2180,524,2181,397,1730,1,2082,1418,1670,1653,
            1294,2021,2019,2073,2022,2018,1859,2025,2030,2029,
            2027,2028,2026,2031,2032,2024,2033,2034,2035,64,
            1259,1189,382,1,1876,1602,1877,1522,1862,1859,
            1084,1139,1843,1294,1859,1572,1565,1595,673,581,
            1077,641,631,1869,1870,1871,1872,1558,481,2167,
            2168,2169,575,418,387,49,1,1853,1223,1677,
            261,1864,1454,1113,1,1859,1859,1876,1602,1877,
            1536,1862,553,1859,205,2038,553,2039,1572,1565,
            1595,1019,1861,1077,641,631,1869,1870,1871,1872,
            1558,481,2167,2168,2169,575,418,387,751,1859,
            258,2082,1223,1,1,1454,1863,1859,1864,1,
            1876,1602,1877,1588,27,1859,553,1670,1653,553,
            1864,1572,1565,1595,28,1861,1077,641,631,1869,
            1870,1871,1872,1558,481,2167,2168,2169,575,418,
            387,127,56,267,55,1859,1604,2070,2071,2072,
            2180,524,2181,1863,320,199,2020,1859,1,553,
            1859,1039,1864,1868,27,1863,1859,48,1859,1777,
            1844,1677,1859,2021,2019,2073,2022,2018,533,2025,
            2030,2029,2027,2028,2026,2031,2032,2024,2033,2034,
            2035,1859,1876,1602,1877,1588,1862,1267,1859,1084,
            1139,1084,1139,1572,1565,1595,1466,1863,1077,641,
            631,1869,1870,1871,1872,1558,481,2167,2168,2169,
            575,418,387,1149,264,2082,1223,1859,1545,1670,
            1653,52,1862,1867,1859,1876,1602,1877,1529,1862,
            553,62,1859,1374,791,1859,1572,1565,1595,1859,
            1861,1077,641,631,1869,1870,1871,1872,1558,481,
            2167,2168,2169,575,418,387,264,54,1454,28,
            1545,51,1,1859,2094,1859,1274,1859,1,1,
            1,1,553,1374,791,66,1861,1859,1859,1,
            1,1,1859,1861,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1384,1353,1859,89,1864,1859,1,1876,1602,
            1877,1588,1859,1886,1084,1139,1859,1,1856,1572,
            1565,1595,2113,2166,1077,641,631,1869,1870,1871,
            1872,1558,481,2167,2168,2169,575,418,387,1859,
            1876,1602,1877,1588,1604,1859,2038,1196,2039,89,
            1863,1572,1565,1595,1859,1859,1077,641,631,1869,
            1870,1871,1872,1558,481,2167,2168,2169,575,418,
            387,1859,1876,1602,1877,1588,1604,2113,204,1281,
            1859,1281,316,1572,1565,1595,1859,1859,1077,641,
            631,1869,1870,1871,1872,1558,481,2167,2168,2169,
            575,418,387,1859,1876,1603,1877,1588,314,312,
            1859,1859,1,41,186,1572,1565,1595,1859,1267,
            1077,641,631,1869,1870,1871,1872,1558,481,2167,
            2168,2169,575,418,387,1859,1876,1613,1877,1588,
            185,187,1859,1859,1859,1267,1267,1572,1565,1595,
            1267,1546,1077,641,631,1869,1870,1871,1872,1558,
            481,2167,2168,2169,575,418,387,1859,1876,1614,
            1877,1588,2112,1859,1859,1859,1859,1547,1548,1572,
            1565,1595,204,1859,1077,641,631,1869,1870,1871,
            1872,1558,481,2167,2168,2169,575,418,387,1859,
            1876,1638,1877,1588,1859,1859,42,1859,1859,1859,
            1859,1572,1565,1595,1859,1859,1077,641,631,1869,
            1870,1871,1872,1558,481,2167,2168,2169,575,418,
            387,1,1876,1602,1877,1588,2977,1859,1859,1859,
            1859,1859,1859,1572,1565,1595,1859,1859,1077,641,
            631,1869,1870,1871,1872,1558,481,2167,2168,2169,
            575,418,387,17,219,1847,1464,1847,1847,178,
            178,178,178,178,178,979,1859,1859,178,1847,
            553,1868,1859,1859,1859,959,939,919,899,879,
            839,859,819,799,771,178,178,178,178,178,
            18,284,1850,1859,1850,1850,177,177,177,177,
            177,177,128,1847,1859,177,1850,1094,2070,2071,
            2072,2180,524,2181,1859,217,1859,2020,1859,1866,
            1302,1859,177,177,177,177,177,1859,1859,1859,
            1859,553,1859,1859,2021,2019,2073,2022,2018,129,
            1850,1867,1859,1859,1859,2070,2071,2072,2180,524,
            2181,130,1617,1859,2020,1859,1859,2070,2071,2072,
            2180,524,2181,1859,1859,1859,2020,1859,1859,1865,
            1859,2021,2019,2073,2022,2018,1859,1859,1859,1859,
            1859,1859,131,2021,2019,2073,2022,2018,2070,2071,
            2072,2180,524,2181,1859,1859,1859,2020,1859,1859,
            1859,1859,1859,1859,1859,1859,1859,1859,1859,1859,
            1859,1859,1859,1859,2021,2019,2073,2022,2018
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            250,1,142,41,142,142,142,142,142,142,
            142,142,142,142,142,142,55,3,459,456,
            463,461,469,467,471,470,473,472,10,142,
            55,55,55,55,240,240,339,55,403,403,
            345,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,142,142,142,142,142,142,142,142,
            142,142,240,240,240,240,131,343,133,370,
            238,237,311,48,323,323,129,129,323,129,
            323,75,191,191,240,45,456,456,461,461,
            461,461,459,459,467,463,463,470,469,505,
            472,471,444,444,444,444,107,339,331,136,
            45,98,166,240,412,373,166,484,278,484,
            278,406,484,142,107,331,98,98,45,165,
            133,240,337,75,239,375,45,166,278,278,
            278,278,406,406,408,275,107,98,331,142,
            142,45,166,370,500,499,343,375,240,278,
            308,243,278,278,308,408,507,408,406,308,
            105,510,403,142,274,107,331,45,45,240,
            412,373,337,308,245,308,308,142,403,408,
            109,45,403,142,408,375,480,142,479,161,
            343,308,45,308,240,239,245,142,161,404
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            89,0,75,16,2,61,76,17,18,14,
            4,12,13,62,63,57,58,64,65,66,
            67,70,71,72,73,74,77,78,55,69,
            79,80,81,82,83,85,84,86,87,88,
            68,50,89,54,59,5,0,5,68,54,
            59,50,75,16,19,20,21,22,23,2,
            17,18,14,4,12,13,24,25,26,27,
            28,29,30,31,3,1,51,52,53,46,
            38,43,41,42,40,39,44,45,47,48,
            49,36,33,15,32,35,34,6,7,8,
            10,9,11,0,5,55,16,61,17,18,
            14,4,12,13,24,25,19,29,30,31,
            2,20,21,22,23,26,27,28,1,3,
            37,0,59,5,15,6,7,8,9,10,
            11,20,21,22,23,26,27,28,3,17,
            18,14,12,13,24,25,19,29,30,31,
            4,2,1,0,15,59,5,17,18,14,
            4,12,13,24,25,19,29,30,31,2,
            1,3,20,21,22,23,26,27,28,0,
            7,15,36,8,35,34,33,6,32,9,
            10,11,61,76,17,18,14,12,13,62,
            63,57,58,64,65,66,67,70,71,72,
            73,74,77,78,69,79,80,81,82,83,
            84,85,86,87,88,4,2,16,54,50,
            5,0,75,5,4,1,2,68,0,19,
            20,21,22,23,1,3,2,17,18,14,
            4,12,13,24,25,26,27,28,29,30,
            31,56,0,69,16,61,0,32,38,6,
            39,51,33,40,34,41,42,35,7,43,
            44,15,52,36,53,45,46,8,47,48,
            49,1,3,9,10,11,56,55,5,0,
            46,38,43,41,42,40,39,44,45,47,
            48,49,68,75,36,33,15,32,35,34,
            6,7,8,9,10,11,54,1,5,50,
            2,16,4,0,5,50,19,20,21,22,
            23,1,3,2,17,18,14,4,12,13,
            24,25,26,27,28,29,30,31,0,4,
            2,16,50,5,32,38,6,39,51,33,
            40,34,41,42,35,7,43,44,15,52,
            36,53,45,46,8,47,48,49,9,10,
            11,60,3,1,0,1,3,5,55,54,
            0,32,38,6,39,51,33,40,34,41,
            42,35,7,43,44,15,52,36,53,45,
            46,8,47,48,49,1,3,9,10,11,
            60,4,0,69,79,80,81,82,83,84,
            85,86,87,88,37,4,62,63,12,13,
            58,57,64,65,66,67,70,71,14,72,
            73,74,59,50,55,89,77,78,68,75,
            5,54,0,32,6,33,34,35,7,15,
            36,8,1,4,9,10,11,37,2,5,
            54,50,75,16,68,0,5,54,55,69,
            0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            56,8,19,8,19,19,19,19,19,19,
            19,19,19,19,19,19,72,8,8,8,
            8,8,8,8,8,8,8,8,8,19,
            72,72,72,72,70,70,65,1,27,27,
            61,73,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,73,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,70,70,70,70,8,78,21,64,
            25,25,49,15,50,50,9,9,50,9,
            50,45,8,8,70,23,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,86,66,86,18,
            23,31,22,70,76,69,22,8,86,8,
            86,86,8,19,18,86,31,31,23,22,
            11,70,34,2,8,85,23,22,86,80,
            86,80,9,86,29,13,86,31,11,19,
            19,23,22,33,25,25,78,85,70,80,
            43,40,88,80,43,29,8,8,9,43,
            17,8,9,19,59,18,11,23,23,70,
            76,69,35,43,52,43,43,19,9,29,
            19,23,9,19,29,84,41,19,8,52,
            78,43,23,43,70,70,52,19,37,8
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,79,78,77,76,75,74,0,32,0,
            23,0,91,0,94,0,69,8,4,0,
            8,4,21,0,28,0,71,0,54,0,
            61,0,20,8,47,46,40,38,0,8,
            70,0,30,0,64,65,66,67,55,33,
            0,8,40,38,0,8,85,0,93,0,
            8,86,0,20,8,47,46,0,8,20,
            0,27,8,31,0,8,22,52,0,59,
            8,27,0,88,22,8,0,8,27,51,
            0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,96,97,
            98,10,11,8,69,1,6,7,68,81,
            82,83,84,12,13,93,94,95,100,101,
            102,44,55,60,63,72,3,47,52,56,
            61,62,66,67,74,75,78,79,80,90,
            54,70,73,42,91,107,16,17,89,30,
            4,14,15,18,19,20,21,29,31,22,
            23,24,25,26,92,5,27,28,32,33,
            34,35,36,37,38,39,40,41,108,45,
            46,49,50,51,53,57,58,59,65,71,
            77,88,99,103,104,105,106
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,115,119,120,121,0,122,123,
            124,125,126,127,128,129,130,131,132,111,
            110,136,143,0,0,0,154,163,0,112,
            114,135,142,0,0,0,159,161,0,162,
            0,0,0,134,172,173,174,0,117,151,
            153,160,169,0,145,150,0,0,152,164,
            167,168,171,146,147,148,149,158,175,113,
            116,118,133,137,138,139,140,141,144,156,
            0,0,157,166,109,0,155,165,170,176,
            177,0,178,179,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            208,118,57,67,125,145,151,188,26,33,
            85,103,157,162,73,6,12,16,38,81,
            50,135,204,226,230,50,50,197,50,1,
            1,1,42,45,90,113,45,234,20,139,
            179,216,131,167,167,167,167,167,93,93,
            93
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            31,31,4,4,31,31,31,194,31,10,
            4,10,31,31,78,10,10,10,10,4,
            4,133,10,10,4,54,78,201,63,4,
            4,4,10,48,4,10,116,10,23,142,
            182,219,133,169,171,173,175,177,100,95,
            108
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            4,66,28,28,66,64,64,101,56,48,
            28,43,64,64,28,5,5,5,48,28,
            28,51,5,4,4,28,28,18,28,94,
            93,92,46,63,28,40,50,2,69,51,
            102,4,51,78,77,76,75,74,43,41,
            43
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            55,55,59,59,55,55,55,95,55,50,
            59,50,55,55,20,50,50,50,50,59,
            59,75,50,50,59,4,20,68,15,59,
            59,59,50,2,59,50,1,50,69,1,
            101,50,75,3,51,52,52,46,2,2,
            2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            36,21,25,25,21,21,21,-1,95,29,
            25,11,21,21,25,36,36,36,29,25,
            25,5,36,36,36,25,25,69,25,19,
            1,3,29,31,25,11,13,36,96,5,
            -1,36,5,22,22,22,22,22,11,11,
            11
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            151,16,0,110,0,156,2,31,0,111,
            0,156,2,30,0,156,2,29,0,197,
            115,0,31,150,0,161,179,115,37,0,
            112,0,167,115,2,153,0,167,115,2,
            0,170,2,0,159,115,0,172,0,191,
            115,16,0,9,110,0,126,15,191,115,
            16,0,69,132,110,0,126,191,115,15,
            16,0,191,115,15,16,0,132,110,0,
            126,15,16,0,126,191,115,16,0,126,
            16,0,147,0,2,0,165,111,0,2,
            111,0,167,115,2,147,0,2,0,164,
            111,0,157,2,0,159,0,161,189,115,
            37,139,51,0,161,189,115,37,51,0,
            134,0,113,0,194,115,134,0,115,134,
            0,155,113,0,165,115,37,139,53,0,
            165,115,37,139,52,0,165,115,37,53,
            0,165,115,37,52,0,186,0,149,0,
            148,0,147,0,146,0,145,0,204,94,
            0,77,2,114,111,113,0,204,127,138,
            2,98,0,53,0,0,138,78,124,0,
            29,131,0,156,2,19,0,161,179,115,
            37,127,156,2,0,156,2,0,111,3,
            0,118,0,112,0,193,2,111,0,138,
            16,111,0,138,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1334,0,513,0,1704,1790,1698,1695,1689,0,
            1544,480,1302,1418,1285,1223,1187,0,524,0,
            1254,573,360,0,1469,1210,1176,601,480,1739,
            1223,1187,1454,1284,0,1536,1529,1522,610,397,
            1196,581,1384,1353,1294,1139,1084,1442,1431,1410,
            715,1677,1670,1653,1374,791,1077,641,1595,1588,
            1572,1565,1558,481,631,575,418,387,1149,1113,
            1094,1058,1039,1019,999,729,1168,693,673,553,
            979,959,939,919,899,879,859,839,819,799,
            771,360,488,653,751,460,533,440,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,192,115,180,31,30,29,19,25,24,
            13,12,4,14,18,17,2,111,116,114,
            118,117,120,119,122,121,124,123,112,54,
            2,2,2,2,156,138,134,115,76,61,
            2,16,13,12,63,62,4,67,66,65,
            64,57,58,14,71,70,73,72,78,77,
            74,88,87,86,84,85,83,82,81,80,
            79,69,156,156,156,156,127,115,16,2,
            154,153,181,10,182,183,53,52,184,51,
            185,186,1,3,193,138,114,114,117,117,
            117,117,116,116,119,118,118,121,120,138,
            123,122,127,127,127,127,37,159,4,15,
            126,115,4,170,115,2,16,139,37,139,
            37,37,139,68,115,4,115,115,126,191,
            168,167,129,115,169,115,151,4,37,115,
            37,115,115,37,179,115,37,115,168,191,
            15,126,4,2,145,147,115,54,167,115,
            165,134,166,115,165,189,139,190,115,161,
            54,197,61,16,198,115,168,126,126,157,
            115,2,159,165,115,165,161,69,54,189,
            69,151,61,16,179,115,194,68,157,2,
            115,161,151,161,167,195,54,68,159,54
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "MYTHREAD",
            "THREADS",
            "UPC_MAX_BLOCKSIZE",
            "relaxed",
            "shared",
            "strict",
            "upc_barrier",
            "upc_localsizeof",
            "upc_blocksizeof",
            "upc_elemsizeof",
            "upc_notify",
            "upc_fence",
            "upc_wait",
            "upc_forall",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_cast_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_name",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_or_typedefname",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "layout_qualifier"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 56,
           SCOPE_UBOUND      = 50,
           SCOPE_SIZE        = 51,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 220,
           NT_OFFSET         = 107,
           LA_STATE_OFFSET   = 2218,
           MAX_LA            = 2,
           NUM_RULES         = 359,
           NUM_NONTERMINALS  = 120,
           NUM_SYMBOLS       = 227,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1307,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 89,
           EOLT_SYMBOL       = 89,
           ACCEPT_ACTION     = 1843,
           ERROR_ACTION      = 1859;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
