/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99NoCastExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, C99NoCastExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,3,1,1,
            4,4,3,3,2,2,8,1,0,1,
            1,2,2,2,2,2,2,2,2,2,
            4,1,1,3,3,3,1,3,3,1,
            3,3,1,3,3,3,3,1,3,3,
            1,3,1,3,1,3,1,3,1,3,
            1,5,1,3,3,3,3,3,3,3,
            3,3,3,3,1,1,2,1,0,1,
            3,1,1,1,1,1,1,1,1,3,
            4,3,2,4,1,2,1,1,1,2,
            5,7,5,1,0,7,5,9,8,3,
            2,2,2,3,2,4,2,2,2,2,
            2,1,1,1,1,2,1,2,2,2,
            1,2,2,1,2,2,1,2,2,1,
            2,2,1,3,1,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,6,8,0,
            0,1,1,3,3,3,0,1,0,1,
            2,4,2,1,1,1,3,1,1,2,
            3,7,8,0,1,0,1,3,1,3,
            1,1,1,1,1,1,3,1,1,1,
            1,1,3,1,2,2,1,5,3,1,
            3,5,1,3,1,3,2,4,3,5,
            4,6,6,3,5,1,2,3,4,5,
            0,1,2,1,3,1,1,3,2,1,
            1,1,1,2,1,2,3,1,1,1,
            3,1,2,2,2,3,4,5,1,7,
            3,0,0,1,1,3,3,4,1,1,
            2,3,2,3,2,1,0,1,2,1,
            1,1,1,1,2,4,3,6,2,4,
            1,1,-32,0,0,0,0,0,0,0,
            0,0,0,-76,0,0,0,0,0,0,
            0,0,0,0,0,-78,-114,0,-2,0,
            0,0,0,-120,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-4,0,-15,-72,-115,
            0,-126,0,0,0,0,0,-110,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-137,0,-116,0,-132,
            0,0,0,-6,0,0,0,0,0,0,
            0,0,0,-117,0,0,-184,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-157,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-55,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-145,0,0,0,
            0,0,0,0,0,-16,-104,-17,0,0,
            0,0,0,0,-118,0,0,0,-79,-18,
            0,-19,-73,-147,-29,0,-70,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-180,0,0,0,0,0,0,0,0,
            0,0,-20,0,0,0,0,0,0,0,
            0,0,-3,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-51,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-30,
            0,-107,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-21,-125,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-129,0,-141,0,-52,
            0,0,0,0,0,0,0,0,0,0,
            -122,0,0,0,-67,-22,0,0,0,0,
            -156,0,0,0,0,0,-27,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-23,0,
            -159,0,0,0,-162,0,0,0,0,0,
            -37,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-56,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-57,0,0,0,
            0,0,0,0,0,0,0,-24,0,0,
            0,0,0,0,0,0,0,-58,0,0,
            0,0,0,0,0,0,0,0,-25,0,
            0,0,0,0,0,0,0,0,-59,0,
            0,0,0,0,0,0,0,0,0,-26,
            0,0,0,0,0,0,0,0,0,-60,
            0,0,0,0,0,0,0,0,0,0,
            -68,0,0,0,0,0,0,0,0,0,
            -61,0,0,0,0,0,0,0,0,0,
            0,-84,0,0,0,0,0,0,0,0,
            0,-62,0,0,0,0,0,0,0,0,
            0,0,-87,0,0,0,0,0,0,0,
            0,0,-63,0,0,0,0,0,0,0,
            0,0,0,-88,0,0,0,0,0,0,
            0,0,0,-64,0,0,0,0,0,0,
            0,0,0,0,-89,0,0,0,0,0,
            0,0,0,0,-65,0,0,0,0,0,
            0,0,0,0,0,-90,0,0,0,0,
            0,0,0,0,0,-66,0,0,0,0,
            0,0,0,0,0,0,-91,0,0,0,
            0,0,0,0,0,0,-142,0,0,0,
            0,0,0,0,0,0,0,-92,0,0,
            0,0,0,0,0,0,0,-143,0,0,
            0,0,0,0,0,0,0,0,-136,0,
            0,0,0,0,0,0,0,0,-160,0,
            0,0,0,0,0,0,0,0,0,-173,
            0,0,0,0,0,0,0,0,-183,0,
            0,0,0,0,0,0,0,0,0,-174,
            0,0,0,0,0,0,0,0,-93,0,
            0,0,-177,-94,0,-7,0,0,0,0,
            0,0,0,-191,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-199,0,0,0,0,0,0,
            0,0,0,0,-133,0,0,0,0,0,
            0,0,0,0,-161,0,-182,0,0,0,
            -8,0,0,0,0,0,0,0,-207,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-119,0,
            0,0,0,0,0,0,0,0,0,-95,
            0,0,0,0,0,0,0,0,-96,-192,
            0,-97,-81,-98,0,-54,0,0,0,0,
            0,0,0,0,0,0,-128,0,0,0,
            0,0,0,-33,0,-34,0,0,-48,0,
            0,0,0,0,0,0,0,0,0,-99,
            0,0,0,0,-100,-146,-101,-102,-103,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-1,-36,0,-53,-35,0,0,0,-83,
            0,0,0,0,0,0,0,-85,0,0,
            0,0,0,0,0,-106,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-171,0,
            0,-46,0,0,0,0,0,0,0,0,
            0,0,-121,0,-188,-135,-138,-140,-148,0,
            0,0,0,0,0,0,0,0,0,0,
            -130,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-134,-139,0,0,0,
            0,0,0,0,-5,0,0,0,0,0,
            0,0,-49,0,0,0,0,0,0,0,
            0,0,0,-152,0,-50,0,0,0,0,
            0,0,0,0,0,0,-190,0,-206,-12,
            0,0,0,0,0,0,0,0,-165,0,
            -209,-158,-178,-179,-200,0,-42,0,0,0,
            0,0,0,0,0,0,0,-205,0,0,
            0,0,0,0,0,0,0,0,-13,0,
            0,0,0,0,0,0,-43,0,0,0,
            0,0,0,0,0,0,0,-44,0,0,
            0,0,0,0,0,0,0,0,-45,0,
            0,0,0,0,0,0,0,0,0,-111,
            0,0,-47,0,0,0,0,0,0,0,
            0,0,-201,-38,0,0,0,0,0,0,
            0,0,0,0,-154,0,-163,0,0,-71,
            -113,-170,-86,-189,-194,0,-74,0,-108,-185,
            0,0,0,-208,-127,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-155,0,
            0,0,0,0,0,-172,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-9,0,0,0,0,0,0,0,-10,
            0,0,0,0,0,0,0,-11,0,0,
            0,0,0,0,0,-31,-39,0,0,0,
            0,0,0,0,-198,0,0,-40,0,0,
            0,0,0,0,0,0,-124,-69,-149,-112,
            -151,0,-41,0,0,0,0,0,0,0,
            0,-169,0,0,-131,-175,0,0,0,0,
            0,-168,0,0,0,0,0,-14,0,0,
            0,-144,0,0,-28,-195,0,0,0,0,
            0,-166,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-196,0,0,
            0,0,-75,0,0,0,0,0,0,0,
            0,0,0,-77,0,0,-176,0,-105,0,
            0,0,0,0,0,-80,-153,0,0,0,
            0,0,0,0,0,0,-82,0,0,-202,
            0,0,0,0,0,0,0,0,-167,0,
            0,0,0,0,0,0,-187,0,0,0,
            0,0,0,0,0,0,0,0,-186,0,
            0,-150,0,-109,0,-181,-123,0,-193,0,
            -197,0,0,0,-203,-204,0,-164,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            87,11,24,24,23,23,32,32,69,69,
            1,1,2,2,2,2,3,3,3,4,
            5,5,5,5,5,5,5,5,51,51,
            70,6,6,6,6,6,6,6,6,6,
            6,6,7,8,8,8,8,9,9,9,
            10,10,10,12,12,12,12,12,13,13,
            13,14,14,15,15,16,16,17,17,18,
            18,19,19,20,20,20,20,20,20,20,
            20,20,20,20,20,101,45,40,88,88,
            73,73,46,102,102,102,102,102,102,102,
            103,103,103,104,104,109,109,110,110,105,
            105,106,106,106,112,112,107,107,107,107,
            108,108,108,108,108,111,111,25,25,25,
            25,25,27,27,27,79,79,74,74,74,
            74,75,75,75,76,76,76,77,77,77,
            78,78,78,113,113,114,114,115,28,30,
            30,30,30,30,52,54,54,54,54,54,
            54,54,54,54,54,54,54,63,60,60,
            89,90,64,64,61,61,61,65,80,80,
            81,81,66,66,66,48,91,91,82,83,
            83,83,62,62,92,84,84,85,85,67,
            67,21,22,22,22,29,47,47,33,33,
            33,33,36,36,38,34,34,35,39,39,
            116,116,37,117,117,93,93,26,26,26,
            26,26,26,26,26,26,86,49,49,49,
            49,31,56,56,55,55,55,57,57,50,
            50,94,94,71,71,58,58,58,41,41,
            41,42,43,43,43,44,44,44,44,53,
            53,53,59,95,72,72,72,72,68,96,
            97,97,98,98,99,99,118,118,119,119,
            120,120,120,120,122,122,121,121,121,123,
            123,87,87,1,832,16,20,17,368,790,
            43,488,486,502,236,500,614,543,689,656,
            769,748,73,90,133,211,445,250,400,502,
            135,132,134,158,415,19,16,20,17,368,
            790,43,488,486,502,396,500,614,543,689,
            656,769,748,73,279,137,541,164,671,199,
            157,185,569,141,144,147,150,324,364,19,
            16,20,17,368,42,35,366,1457,1623,1634,
            1646,1657,1210,253,211,273,679,284,157,184,
            254,370,244,1297,488,19,16,20,17,368,
            42,39,285,337,329,1296,979,464,19,16,
            20,17,368,790,43,488,486,502,396,500,
            614,543,689,656,769,748,73,279,335,19,
            16,20,17,368,790,43,488,486,502,396,
            500,614,543,689,656,769,748,73,279,488,
            19,16,20,17,368,42,43,488,486,502,
            284,500,614,543,689,1188,1297,364,19,16,
            20,17,368,42,35,285,324,13,194,1455,
            1324,286,1352,1085,290,157,186,1297,344,493,
            12,245,30,678,715,281,287,275,19,16,
            20,17,368,790,43,488,486,502,1694,500,
            614,543,689,656,769,748,73,1459,811,274,
            226,237,440,19,16,20,17,368,790,43,
            488,486,502,31,500,614,543,689,656,769,
            748,73,279,488,19,16,20,17,368,790,
            43,488,486,502,398,500,614,543,689,656,
            769,748,73,90,488,19,16,20,17,368,
            42,43,488,486,502,288,500,614,543,1144,
            281,1297,536,19,16,20,17,368,790,43,
            488,486,502,1697,500,614,543,689,656,769,
            748,73,1557,18,63,299,19,16,20,17,
            368,790,43,488,486,502,366,500,614,543,
            689,656,769,748,73,1592,189,177,52,238,
            488,19,16,20,17,368,42,43,488,486,
            502,110,500,614,1180,281,191,133,211,252,
            211,244,638,135,132,134,158,488,19,16,
            20,17,368,790,43,488,486,502,1189,500,
            614,543,689,656,769,748,73,91,137,242,
            164,157,293,27,1349,244,141,144,147,150,
            324,488,19,16,20,17,368,42,43,853,
            1457,1623,1634,1646,1657,1210,488,19,16,20,
            17,368,790,43,488,486,502,281,500,614,
            543,689,656,769,748,73,84,488,19,16,
            20,17,368,790,43,488,486,502,402,500,
            614,543,689,656,769,748,73,83,488,19,
            16,20,17,368,790,43,488,486,502,6,
            500,614,543,689,656,769,748,73,82,488,
            19,16,20,17,368,790,43,488,486,502,
            523,500,614,543,689,656,769,748,73,81,
            488,19,16,20,17,368,790,43,488,486,
            502,159,500,614,543,689,656,769,748,73,
            80,488,19,16,20,17,368,790,43,488,
            486,502,560,500,614,543,689,656,769,748,
            73,79,488,19,16,20,17,368,790,43,
            488,486,502,306,500,614,543,689,656,769,
            748,73,78,488,19,16,20,17,368,790,
            43,488,486,502,342,500,614,543,689,656,
            769,748,73,77,488,19,16,20,17,368,
            790,43,488,486,502,544,500,614,543,689,
            656,769,748,73,76,488,19,16,20,17,
            368,790,43,488,486,502,647,500,614,543,
            689,656,769,748,73,75,488,19,16,20,
            17,368,790,43,488,486,502,657,500,614,
            543,689,656,769,748,73,74,488,19,16,
            20,17,368,790,43,488,486,502,659,500,
            614,543,689,656,769,748,73,1602,488,19,
            16,20,17,368,790,43,488,486,502,698,
            500,614,543,689,656,769,748,73,1669,488,
            19,16,20,17,368,42,43,488,486,502,
            244,500,614,543,689,656,769,748,92,488,
            19,16,20,17,368,42,43,488,486,502,
            655,500,614,543,689,656,769,748,92,413,
            661,1265,178,718,675,1696,488,19,16,20,
            17,368,42,38,488,19,16,20,17,368,
            42,43,488,486,502,1699,500,614,543,689,
            656,769,748,92,488,19,16,20,17,368,
            42,43,488,486,502,13,500,614,543,689,
            656,769,748,92,1337,681,1647,157,295,193,
            210,488,19,16,20,17,368,42,37,488,
            19,16,20,17,368,42,43,488,486,502,
            200,500,614,543,689,656,769,748,92,488,
            19,16,20,17,368,42,43,488,486,502,
            144,500,614,543,689,656,769,748,72,50,
            157,1353,57,517,412,201,488,19,16,20,
            17,368,42,43,488,486,502,151,500,614,
            543,689,656,1187,157,30,157,30,1559,488,
            19,16,20,17,368,42,43,488,486,502,
            550,500,1130,272,291,547,207,154,307,676,
            216,504,219,1269,221,222,227,1572,265,503,
            369,270,388,13,261,13,421,208,495,275,
            189,177,272,553,553,262,553,553,281,216,
            504,219,1269,221,222,227,709,265,503,369,
            270,133,211,1582,24,414,23,136,132,134,
            158,22,86,86,1420,86,88,311,1453,200,
            1185,259,488,19,16,20,17,368,42,43,
            488,1029,138,710,164,361,13,13,572,697,
            142,145,148,151,324,272,1660,1489,695,1708,
            1263,693,217,504,219,1269,221,222,227,339,
            267,503,369,270,1218,225,712,716,216,504,
            219,1269,221,222,227,512,19,16,20,17,
            368,40,1355,488,19,16,20,17,368,42,
            43,488,486,502,717,1139,488,19,16,20,
            17,368,42,43,488,486,502,244,1142,361,
            488,19,16,20,17,368,33,196,198,612,
            1660,261,104,394,719,720,1545,488,19,16,
            20,17,368,42,43,488,486,895,64,202,
            253,211,216,504,219,1269,221,222,227,488,
            19,16,20,17,368,32,1355,488,19,16,
            20,17,368,42,43,488,486,916,488,19,
            16,20,17,368,42,43,488,486,937,488,
            19,16,20,17,368,42,43,488,486,958,
            281,197,198,488,19,16,20,17,368,42,
            43,488,1034,623,488,19,16,20,17,368,
            42,43,874,271,1660,13,280,13,1795,1795,
            672,543,543,61,718,698,1637,232,417,61,
            646,1560,1575,1689,638,281,216,504,219,1269,
            221,222,227,275,276,229,272,21,133,211,
            1582,253,211,239,140,132,134,158,277,604,
            1353,265,503,369,270,1263,13,217,504,219,
            1269,221,222,227,1795,1705,1706,1677,1420,139,
            1795,164,488,19,16,20,17,368,42,36,
            488,19,16,20,17,368,42,35,488,19,
            16,20,17,368,42,34,161,488,19,16,
            20,17,368,42,46,495,1795,1558,488,19,
            16,20,17,368,42,45,207,61,97,97,
            323,281,272,488,19,16,20,17,368,42,
            44,636,323,1033,1354,429,95,265,503,369,
            270,241,281,636,278,1157,636,636,13,1226,
            1226,1226,61,1795,264,13,281,1157,1795,313,
            1157,195,61,1226,1795,223,313,1639,1249,1639,
            257,1795,1795,195,192,1465,240,1281,370,228,
            195,1249,257,603,1020,257,242,1465,86,1281,
            1561,1795,1281,590,608,86,1536,604,1353,241,
            590,232,191,1536,133,211,637,48,1795,1795,
            143,132,134,158,1795,133,211,642,636,505,
            97,146,132,134,158,272,655,133,211,61,
            1263,1795,195,149,132,134,158,142,133,211,
            267,503,369,270,152,132,134,158,636,282,
            1795,1226,711,243,52,1020,61,52,1795,61,
            636,244,195,636,207,244,244,1795,52,1464,
            1795,1795,1795,190,1157,252,211,1157,252,211,
            292,1454,1354,294,1795,1020,1795,1000,1576,252,
            211,1795,1795,179,1795,1795,1795,203,1351,257,
            1795,1795,258,190,1596,1795,1281,1795,1795,1795,
            372,1795,1795,372,1795,1795,1795,1701,1576,1795,
            1795,1795,1795,1795,1460,1795,1795,1795,1795,1795,
            1795,1795,1795,1795,1795,1795,1795,1795,1795,1795,
            615,1795,1618,947,1795,0,19,177,0,1,
            2019,0,1,2030,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,0,0,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,0,
            0,31,32,33,34,35,36,37,38,39,
            40,41,42,13,44,45,46,0,1,0,
            3,0,5,6,7,8,0,6,7,8,
            0,14,0,0,1,5,55,56,57,58,
            65,24,25,26,27,28,47,48,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,0,1,0,3,51,5,
            6,7,8,0,55,56,57,58,14,0,
            50,55,56,57,58,6,7,8,24,25,
            26,27,28,61,62,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,0,1,0,3,51,5,6,7,8,
            0,1,2,0,4,14,0,1,0,3,
            0,11,2,60,4,24,25,26,27,28,
            12,11,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,0,1,
            0,3,51,0,6,7,8,4,0,0,
            1,2,14,4,61,62,0,1,2,11,
            11,5,24,25,26,27,28,11,65,31,
            32,33,34,35,36,37,38,39,40,41,
            42,0,44,45,46,0,30,6,7,8,
            0,0,2,0,4,14,53,54,5,0,
            1,11,3,0,64,24,25,26,27,28,
            0,12,31,32,33,34,35,36,37,38,
            39,40,41,42,0,1,2,3,4,5,
            0,0,1,9,10,5,43,13,14,15,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,5,63,0,0,9,10,4,
            30,13,14,15,16,17,18,19,20,21,
            22,23,0,0,50,0,4,0,0,1,
            49,3,9,10,0,1,2,3,4,5,
            12,0,0,9,10,4,12,13,50,15,
            16,17,18,19,20,21,22,23,53,54,
            0,1,2,0,1,2,3,4,5,0,
            64,49,9,10,5,0,13,43,15,16,
            17,18,19,20,21,22,23,0,1,2,
            3,4,0,0,53,54,9,10,29,30,
            13,0,15,16,17,18,19,20,21,22,
            23,0,0,50,0,1,2,3,4,59,
            0,9,10,9,10,5,12,13,0,15,
            16,17,18,19,20,21,22,23,51,0,
            1,2,3,4,0,1,0,3,9,10,
            30,12,13,60,15,16,17,18,19,20,
            21,22,23,0,1,2,3,4,0,68,
            69,0,9,10,63,12,13,49,15,16,
            17,18,19,20,21,22,23,0,1,2,
            3,4,0,1,0,3,9,10,0,5,
            13,0,15,16,17,18,19,20,21,22,
            23,0,1,2,3,4,0,1,0,3,
            9,10,0,29,13,0,15,16,17,18,
            19,20,21,22,23,0,1,2,3,4,
            0,0,0,0,9,10,0,5,13,0,
            15,16,17,18,19,20,21,22,23,0,
            66,2,13,4,5,6,7,8,0,29,
            11,0,30,14,6,7,8,6,7,8,
            0,80,60,24,25,26,27,28,0,30,
            47,48,70,71,72,73,74,75,76,77,
            78,79,0,0,1,59,3,0,6,7,
            8,0,0,6,7,8,14,6,7,8,
            0,14,0,1,2,0,24,25,26,27,
            28,24,25,26,27,28,0,0,1,2,
            0,0,6,7,8,0,0,6,7,8,
            14,6,7,8,0,14,0,0,0,5,
            24,25,26,27,28,24,25,26,27,28,
            0,0,2,2,0,0,5,0,0,2,
            0,11,11,9,10,15,16,12,11,11,
            0,11,0,47,48,5,0,0,2,0,
            1,30,3,47,48,47,48,11,0,0,
            0,0,4,4,0,0,0,0,0,0,
            66,29,52,12,0,11,29,12,12,0,
            52,0,52,43,0,0,12,67,0,0,
            0,12,0,12,0,0,29,29,0,0,
            0,0,0,0,0,0,0,0,0,49,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,59,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1795,1805,1588,1806,1520,69,2007,2008,2009,1512,
            1091,58,1,1528,1956,1379,1340,1305,1807,1808,
            1809,1810,1036,404,1957,1955,2010,1958,1954,53,
            63,1961,1966,1965,1963,1964,1962,1967,1968,1960,
            1969,1970,1971,1169,1143,499,336,1795,1,60,
            1,1795,189,1,1,1,59,2007,2008,2009,
            1795,1,61,1795,2031,1798,1409,1398,1387,1357,
            459,1,1,1,1,1,1252,1423,1,1,
            1,1,1,1,1,1,1,1,1,1,
            189,1,1,1,1795,1,251,1,1989,188,
            1,1,1,1795,1409,1398,1387,1357,1,247,
            1797,1409,1398,1387,1357,1,1,1,1,1,
            1,1,1,1326,1313,1,1,1,1,1,
            1,1,1,1,1,1,1,188,1,1,
            1,1795,1,62,1,1989,189,1,1,1,
            260,2019,1186,70,1,1,1795,1805,1795,1806,
            263,507,1450,532,1,1,1,1,1,1,
            487,507,1,1,1,1,1,1,1,1,
            1,1,1,1,189,1,1,1,1795,1805,
            67,1806,1989,47,2007,2008,2009,1563,269,266,
            2019,1186,1956,251,1326,1313,1,1789,1186,507,
            507,1800,1957,1955,2010,1958,1954,507,459,1961,
            1966,1965,1963,1964,1962,1967,1968,1960,1969,1970,
            1971,127,1143,499,336,180,1799,2007,2008,2009,
            266,65,1450,1795,251,1956,1548,1537,1802,1795,
            1805,507,1806,181,574,1957,1955,2010,1958,1954,
            283,1075,1961,1966,1965,1963,1964,1962,1967,1968,
            1960,1969,1970,1971,1,1805,1588,1806,378,1798,
            1795,1,1792,1512,1091,1800,1801,1528,592,1379,
            1340,1305,1807,1808,1809,1810,1036,404,1795,1805,
            1588,1806,477,1798,640,49,68,1512,1091,1563,
            1799,1528,968,1379,1340,1305,1807,1808,1809,1810,
            1036,404,1,50,1797,1795,251,1795,1795,1805,
            2051,1806,1434,701,1,1805,1588,1806,1520,28,
            1266,48,1795,1512,1091,1563,2798,1528,1797,1379,
            1340,1305,1807,1808,1809,1810,1036,404,1548,1537,
            1,2019,1433,1795,1805,1588,1806,1520,1798,1795,
            574,2051,1512,1091,1800,1795,1528,28,1379,1340,
            1305,1807,1808,1809,1810,1036,404,1795,1,1,
            1,1,1795,209,1548,1537,1,1,1368,1799,
            1,71,1,1,1,1,1,1,1,1,
            1,66,52,1797,1,1805,1588,1806,1520,1064,
            1,1434,701,1512,1091,89,2798,1528,1,1379,
            1340,1305,1807,1808,1809,1810,1036,404,2107,1795,
            1805,1588,1806,1520,183,2832,1795,2832,1512,1091,
            89,2798,1528,1044,1379,1340,1305,1807,1808,1809,
            1810,1036,404,1,1805,1588,1806,1520,1795,1146,
            1205,1795,1512,1091,640,2798,1528,2051,1379,1340,
            1305,1807,1808,1809,1810,1036,404,1795,1805,1588,
            1806,1520,182,2837,1795,2837,1512,1091,1795,1804,
            1528,1795,1379,1340,1305,1807,1808,1809,1810,1036,
            404,1795,1805,1595,1806,1520,204,2839,1795,2839,
            1512,1091,42,1339,1528,1795,1379,1340,1305,1807,
            1808,1809,1810,1036,404,1,1805,1588,1806,1520,
            87,1795,1,57,1512,1091,1795,1800,1528,64,
            1379,1340,1305,1807,1808,1809,1810,1036,404,19,
            1803,1786,1169,1786,1786,177,177,177,246,667,
            1786,248,1799,177,2007,2008,2009,1,1,1,
            1795,1785,926,177,177,177,177,177,1795,1786,
            1252,1423,905,884,863,842,821,779,800,758,
            737,716,128,206,1805,1119,1806,129,2007,2008,
            2009,249,1795,2007,2008,2009,1956,2007,2008,2009,
            1795,1956,1,2019,1433,1795,1957,1955,2010,1958,
            1954,1957,1955,2010,1958,1954,130,251,2019,1433,
            1795,131,2007,2008,2009,250,56,2007,2008,2009,
            1956,2007,2008,2009,1,1956,55,1795,54,1804,
            1957,1955,2010,1958,1954,1957,1955,2010,1958,1954,
            31,1,1206,1450,51,41,1800,268,1795,1451,
            289,1203,507,1434,701,1820,1821,487,507,989,
            282,1009,254,1252,1423,1267,220,29,1452,205,
            1140,1799,1140,1252,1423,1252,1423,507,1795,1795,
            1,1795,651,1268,218,1795,1795,29,205,199,
            1803,1692,1166,1445,187,507,438,1447,1496,187,
            691,187,1087,1267,1795,1795,183,1164,1795,1795,
            1795,182,1795,204,1795,1795,1823,2807,1795,1795,
            1795,1795,1795,1795,1795,1795,1795,1795,1795,2050,
            1795,1795,1795,1795,1795,1795,1795,1795,1795,1795,
            1795,1795,1795,1795,1795,1795,1795,1795,1099
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            243,1,76,41,76,76,76,76,76,76,
            76,76,76,392,3,218,215,222,220,228,
            226,230,229,232,231,10,76,392,159,159,
            357,392,329,329,261,76,76,76,76,76,
            76,76,76,76,76,76,76,76,76,76,
            76,76,76,76,76,76,76,76,76,76,
            76,76,76,76,76,76,159,68,361,70,
            299,157,156,332,344,66,344,66,66,344,
            66,344,406,113,159,45,215,215,220,220,
            220,220,218,218,226,222,222,229,228,292,
            231,230,203,50,357,361,93,45,429,74,
            159,363,302,66,329,329,66,329,76,50,
            361,352,429,45,73,70,159,355,406,158,
            304,68,169,68,280,282,200,196,68,352,
            429,76,76,45,74,299,287,286,361,304,
            159,68,169,280,280,196,48,297,329,76,
            199,196,50,429,352,45,45,159,363,302,
            355,169,196,162,169,280,282,294,282,52,
            45,329,76,50,352,304,169,164,282,196,
            76,329,45,282,159,158,196,239,76,238,
            89,361,196,196,330,164,76,89,282
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,66,11,2,52,67,15,16,13,
            4,9,10,53,54,47,48,55,56,57,
            58,61,62,63,64,65,68,69,43,60,
            70,71,72,73,74,76,75,77,78,79,
            59,30,80,29,50,5,0,5,43,11,
            52,15,16,13,4,9,10,22,23,17,
            2,18,19,20,21,1,3,12,0,6,
            7,8,14,50,5,18,19,20,21,3,
            15,16,13,9,10,22,23,17,4,2,
            1,0,6,7,8,2,18,19,20,21,
            1,3,15,16,13,4,9,10,22,23,
            17,0,7,14,28,8,27,26,25,6,
            24,52,67,15,16,13,9,10,53,54,
            47,48,55,56,57,58,61,62,63,64,
            65,68,69,60,70,71,72,73,74,75,
            76,77,78,79,4,2,11,29,30,5,
            0,66,5,4,1,2,59,0,24,31,
            6,32,44,25,33,26,34,35,27,7,
            36,37,14,45,28,46,38,39,8,40,
            41,42,1,3,51,5,43,0,60,11,
            52,0,60,70,71,72,73,74,75,76,
            77,78,79,12,4,53,54,9,10,48,
            47,55,56,57,58,61,62,13,63,64,
            65,50,30,43,80,68,69,59,66,5,
            29,0,17,18,19,20,21,1,3,2,
            15,16,13,4,9,10,22,23,51,0,
            5,30,17,18,19,20,21,1,3,2,
            15,16,13,4,9,10,22,23,0,1,
            3,5,43,29,0,2,5,29,30,66,
            11,59,0,5,29,43,60,0,4,2,
            11,30,5,24,31,6,32,44,25,33,
            26,34,35,27,7,36,37,14,45,28,
            46,38,39,8,40,41,42,49,3,1,
            0,39,31,36,34,35,33,32,37,38,
            40,41,42,59,66,28,25,14,24,27,
            26,6,7,8,29,1,5,30,2,11,
            4,0,4,24,31,6,32,44,25,33,
            26,34,35,27,7,36,37,14,45,28,
            46,38,39,8,40,41,42,1,3,49,
            0,17,18,19,20,21,2,15,16,13,
            4,9,10,22,23,1,3,44,45,46,
            39,31,36,34,35,33,32,37,38,40,
            41,42,28,25,14,24,27,26,6,7,
            8,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            60,38,22,38,22,22,22,22,22,22,
            22,22,22,102,38,38,38,38,38,38,
            38,38,38,38,38,38,22,102,88,88,
            83,1,51,51,63,103,22,22,22,22,
            22,22,22,22,22,22,22,22,22,22,
            22,22,103,22,22,22,22,22,22,22,
            22,22,22,22,22,22,88,38,90,24,
            82,11,11,71,72,9,72,49,49,72,
            48,72,66,38,88,26,38,38,38,38,
            38,38,38,38,38,38,38,38,38,38,
            38,38,38,58,106,38,28,26,118,25,
            88,93,87,7,7,7,7,7,22,20,
            38,58,118,26,25,13,88,54,31,38,
            95,17,58,38,58,41,15,58,38,58,
            118,22,22,26,25,53,11,11,90,95,
            88,38,110,58,7,39,19,38,7,22,
            46,39,58,118,13,26,26,88,93,87,
            74,58,39,43,98,7,41,38,38,21,
            26,7,22,20,13,114,110,56,41,39,
            22,7,26,41,88,88,39,44,22,38,
            56,90,39,39,38,56,22,76,80
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            79,77,76,64,75,74,1,0,89,0,
            26,0,21,0,97,0,90,0,68,11,
            59,5,0,11,5,24,0,5,11,0,
            79,78,77,76,64,75,74,0,32,0,
            51,0,11,69,0,99,0,92,65,0,
            70,0,23,43,42,36,34,11,0,11,
            87,0,11,88,0,64,60,61,62,63,
            52,27,0,43,42,36,34,31,0,95,
            0,23,42,43,11,0,11,23,0,31,
            49,0,31,49,11,25,0,11,48,66,
            0,48,11,45,0,43,42,31,0,81,
            11,48,0,93,11,25,0,56,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,10,11,
            1,3,8,69,6,7,68,81,82,83,
            84,12,13,44,55,60,63,72,42,90,
            47,52,56,61,62,66,67,74,75,78,
            79,80,91,54,70,73,16,17,30,89,
            93,4,14,15,18,19,20,21,29,31,
            22,23,24,25,26,92,5,27,28,32,
            33,34,35,36,37,38,39,40,41,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            100,0,0,0,102,106,107,108,109,110,
            0,111,112,113,114,115,116,117,118,119,
            129,0,97,96,122,150,128,0,0,0,
            0,98,146,148,0,149,0,0,0,0,
            159,160,161,0,101,121,137,141,147,156,
            0,131,136,0,151,154,155,158,0,132,
            133,134,135,138,0,140,145,162,99,103,
            104,105,120,123,124,125,126,127,130,0,
            139,143,0,0,144,153,95,0,0,0,
            142,0,152,157,0,163,164,0,165,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            82,113,156,92,35,41,121,12,136,21,
            51,69,28,47,103,152,174,178,145,1,
            1,32,56,79,182,6,107,127,164,99,
            59,59,59
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            90,90,90,90,4,4,90,18,142,26,
            4,26,26,4,101,26,26,4,149,4,
            4,26,4,26,26,9,110,130,167,101,
            66,61,74
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            62,60,5,62,26,26,60,53,106,44,
            26,39,44,26,66,6,5,5,19,99,
            98,42,26,36,3,68,66,107,5,66,
            39,37,39
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            43,43,43,43,50,50,43,43,86,30,
            50,30,30,50,66,30,30,50,59,50,
            50,30,50,30,30,60,1,92,30,66,
            2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            17,17,32,17,21,21,17,86,-1,25,
            21,9,25,21,3,32,32,32,61,1,
            7,25,21,9,32,87,3,-1,32,3,
            9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            139,11,0,96,0,189,104,0,31,136,
            0,144,165,104,12,152,0,98,0,0,
            148,104,2,135,0,97,0,148,104,2,
            0,151,2,0,113,14,179,104,11,0,
            113,179,104,14,11,0,113,14,11,0,
            113,179,104,11,0,113,11,0,129,0,
            2,0,152,97,0,2,97,0,148,104,
            2,129,0,2,0,151,97,0,140,2,
            0,144,177,104,12,94,185,44,0,98,
            0,144,177,104,12,185,44,0,141,0,
            99,0,184,104,141,0,104,141,0,142,
            99,0,173,104,12,183,94,182,157,0,
            173,104,12,182,157,0,195,85,0,77,
            2,101,97,99,0,195,116,138,2,89,
            0,53,0,0,138,69,111,0,29,118,
            0,164,2,17,0,144,165,104,12,116,
            164,2,0,164,2,0,97,3,0,105,
            0,98,0,181,2,98,0,138,11,98,
            0,138,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1085,0,1677,1576,1647,0,396,0,1464,1339,
            1433,1265,1249,1186,1157,0,636,1210,313,0,
            1269,504,503,369,1249,1186,1157,1639,1450,1536,
            0,477,378,459,1146,640,574,1326,1313,1169,
            1423,1252,1409,1398,1387,1357,1563,1548,1537,1434,
            701,1379,1340,1528,1520,1512,1091,1036,404,1305,
            1099,1064,1044,1009,989,968,947,615,1119,592,
            507,926,905,884,863,842,821,800,779,758,
            737,716,313,667,553,532,417,438,344,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,180,104,166,17,23,22,10,9,4,
            13,16,15,2,98,102,101,105,103,107,
            106,109,108,111,110,99,29,2,164,138,
            141,104,67,52,2,11,10,9,54,53,
            4,58,57,56,55,47,48,13,62,61,
            64,63,69,68,65,79,78,77,75,76,
            74,73,72,71,70,60,164,116,104,11,
            2,136,135,167,168,157,169,46,45,170,
            44,171,172,94,181,138,101,101,103,103,
            103,103,102,102,106,105,105,108,107,138,
            110,109,116,12,142,124,14,113,104,4,
            151,104,2,182,158,158,185,158,59,104,
            124,4,104,113,179,149,148,118,104,150,
            104,94,12,94,12,165,104,12,152,4,
            104,179,14,113,4,2,127,129,104,29,
            148,183,104,12,104,144,29,189,52,11,
            190,104,12,104,149,113,113,140,104,2,
            142,12,173,141,174,104,177,94,178,60,
            139,52,11,104,149,104,104,104,177,144,
            60,29,139,165,148,186,173,184,59,140,
            2,104,144,144,29,29,59,142,125
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_cast_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 51,
           SCOPE_UBOUND      = 32,
           SCOPE_SIZE        = 33,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 209,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2107,
           MAX_LA            = 2,
           NUM_RULES         = 312,
           NUM_NONTERMINALS  = 123,
           NUM_SYMBOLS       = 216,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1202,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1785,
           ERROR_ACTION      = 1795;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
