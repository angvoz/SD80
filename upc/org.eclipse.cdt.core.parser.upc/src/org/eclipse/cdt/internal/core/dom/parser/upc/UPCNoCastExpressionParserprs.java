/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.upc;

public class UPCNoCastExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, UPCNoCastExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            4,1,1,3,3,3,1,3,3,1,
            3,3,1,3,3,3,3,1,3,3,
            1,3,1,3,1,3,1,3,1,3,
            1,5,1,3,3,3,3,3,3,3,
            3,3,3,3,1,1,2,1,0,1,
            3,1,1,1,1,1,1,1,1,3,
            4,3,2,4,1,2,1,1,1,2,
            5,7,5,1,0,7,5,9,8,3,
            2,2,2,3,2,4,2,2,2,2,
            2,1,1,1,1,2,1,2,2,2,
            1,2,2,1,2,2,1,2,2,1,
            2,2,1,3,1,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            5,5,6,6,2,2,2,1,0,1,
            2,4,2,1,1,1,3,1,1,2,
            3,6,7,1,0,1,3,1,3,1,
            1,1,1,1,1,3,1,1,1,1,
            1,3,1,2,2,1,5,3,1,3,
            5,1,3,1,3,2,4,3,5,4,
            6,6,3,5,1,1,2,3,4,1,
            2,1,3,1,1,3,2,1,1,1,
            1,2,1,2,3,1,1,1,3,1,
            2,2,2,3,4,5,1,7,3,0,
            0,1,1,3,3,4,1,1,2,3,
            2,3,2,1,0,1,2,1,1,1,
            1,1,2,4,3,6,2,4,1,1,
            1,1,1,2,4,2,4,2,4,1,
            1,2,1,1,1,3,3,2,1,3,
            2,3,2,3,2,2,11,10,10,9,
            10,9,9,8,10,9,9,8,9,8,
            8,7,10,9,9,8,9,8,8,7,
            1,1,-38,0,0,0,0,0,0,-35,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-78,-212,-87,0,0,0,0,0,
            0,-2,-4,-18,-19,0,0,0,0,-60,
            0,0,0,0,0,0,-172,0,0,0,
            0,0,0,0,0,0,0,0,-39,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-20,-21,0,0,0,0,0,0,0,
            0,0,0,-135,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-207,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-61,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -54,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-36,-73,0,-156,-40,0,
            -55,0,0,0,0,0,0,0,0,0,
            0,0,-22,0,0,0,0,-182,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-79,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-155,0,-144,
            -165,-5,0,0,0,0,0,0,-23,-24,
            0,-25,-88,0,-6,0,0,0,0,0,
            0,0,0,0,0,0,-90,0,0,0,
            0,0,0,0,0,0,-85,0,0,0,
            0,0,0,0,0,0,0,0,0,-26,
            0,0,-27,-74,0,-28,0,-29,0,0,
            0,0,0,0,0,0,0,0,-77,0,
            0,0,0,0,0,0,0,0,0,0,
            -203,0,0,0,0,0,0,-75,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -3,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -57,0,0,0,0,0,0,-93,0,0,
            0,0,0,0,0,-168,0,-9,0,0,
            0,0,0,0,0,-120,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-94,-76,-127,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-140,
            0,0,0,0,0,0,-97,0,0,0,
            0,0,0,0,0,0,0,0,0,-98,
            0,0,-30,0,0,0,0,0,0,-95,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-62,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-63,0,0,0,0,0,0,-124,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-64,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-65,0,0,0,0,0,0,-142,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-66,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-67,0,0,0,0,0,0,-170,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-68,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-69,0,0,0,0,0,0,-192,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-70,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-71,0,0,0,0,0,0,-217,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-72,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-161,0,0,0,0,0,0,-99,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-162,0,0,0,0,0,0,-186,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-185,0,0,0,0,0,0,-100,
            0,0,0,0,0,0,0,0,0,0,
            0,-200,0,0,0,0,0,0,-101,0,
            0,0,0,0,0,0,0,0,0,0,
            -7,0,0,0,0,0,0,-48,0,0,
            0,0,0,0,-102,0,0,0,-206,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-210,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-8,0,0,0,
            0,0,0,-49,0,0,0,0,0,0,
            -224,0,0,0,-220,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-134,0,0,0,0,0,0,
            -84,0,0,0,0,0,0,0,0,0,
            0,0,-143,-213,-81,-184,-177,-82,0,0,
            -58,0,0,0,0,0,0,-176,0,0,
            0,0,0,0,-15,0,0,0,0,0,
            0,-125,0,-92,-195,0,-166,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-117,0,0,0,0,0,
            0,0,0,-119,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-197,0,
            0,0,0,0,0,0,0,-173,0,-96,
            0,0,0,0,0,-219,-103,-104,0,0,
            0,0,0,-56,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-16,0,0,0,0,0,0,-83,
            -121,-105,0,0,0,0,0,0,0,-167,
            -129,-126,-131,-1,-106,0,-86,0,0,0,
            0,0,0,0,0,0,-107,-108,0,0,
            0,0,0,0,0,0,0,0,-132,0,
            0,0,0,0,0,0,0,0,-136,0,
            0,0,0,-109,0,0,0,-50,0,0,
            0,0,0,0,-110,0,0,0,-51,0,
            0,0,0,0,0,-181,0,0,0,-52,
            0,0,0,0,0,0,-89,0,0,-53,
            0,0,0,0,0,0,-80,0,0,0,
            -111,-37,-91,0,0,-112,-202,-141,0,0,
            0,0,0,-139,-113,-114,0,-115,-147,0,
            0,0,0,-116,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -163,0,0,0,0,-128,0,0,0,0,
            -43,0,0,0,0,0,0,-130,0,0,
            0,0,-133,-145,0,-44,0,0,0,0,
            0,0,-158,0,-123,0,0,0,0,0,
            0,-148,0,0,0,0,0,0,-164,0,
            0,0,0,0,0,0,-221,-149,-151,-154,
            -157,-42,0,-178,0,0,0,0,0,0,
            -10,0,0,0,0,0,0,-11,0,0,
            0,0,0,0,-12,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -13,0,0,0,0,0,0,-14,0,0,
            0,0,0,0,-17,-179,-31,-169,-188,-209,
            -194,0,-187,0,0,0,-32,0,-33,-183,
            -41,-190,-196,0,-205,0,0,0,0,0,
            0,0,-34,0,0,0,0,0,0,0,
            0,0,0,0,-218,0,0,0,0,0,
            0,0,-122,0,0,0,0,-211,-216,0,
            0,-223,0,0,0,0,-201,0,-45,0,
            0,0,0,0,0,0,0,0,0,-138,
            0,0,-46,0,0,0,0,0,0,-47,
            0,0,0,0,0,0,0,0,0,-150,
            -198,-152,0,0,0,0,0,0,0,-191,
            -204,-171,0,0,0,-59,0,-175,0,0,
            -193,0,0,0,0,-208,0,0,0,0,
            0,0,0,0,0,0,-199,0,0,0,
            0,-146,0,-118,0,0,0,0,0,0,
            0,0,0,0,-153,-214,-215,0,0,0,
            0,-180,0,0,0,0,-222,0,0,0,
            0,0,0,0,-137,0,0,0,0,0,
            0,-159,0,0,0,0,0,0,0,0,
            0,0,-160,0,0,0,-189,0,0,0,
            0,0,-174,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            86,7,21,21,20,20,29,29,71,71,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,54,54,72,
            72,5,5,5,5,5,5,5,5,5,
            5,5,6,8,8,8,8,9,9,9,
            10,10,10,11,11,11,11,11,12,12,
            12,13,13,14,14,15,15,16,16,17,
            17,18,18,19,19,19,19,19,19,19,
            19,19,19,19,19,98,31,30,87,87,
            74,74,44,99,99,99,99,99,99,99,
            100,100,100,101,101,106,106,107,107,102,
            102,103,103,103,109,109,104,104,104,104,
            105,105,105,105,105,108,108,22,22,22,
            22,22,33,33,33,80,80,75,75,75,
            75,76,76,76,77,77,77,78,78,78,
            79,79,79,110,110,111,111,112,34,36,
            36,36,36,36,55,57,57,57,57,57,
            57,57,57,57,57,57,57,68,68,32,
            32,65,65,65,65,66,66,66,58,58,
            59,59,51,51,51,27,88,88,81,82,
            82,82,67,67,83,83,84,84,69,69,
            23,24,24,24,35,50,50,37,37,37,
            37,40,40,42,38,38,39,43,43,113,
            113,41,114,114,89,89,28,28,28,28,
            28,28,28,28,28,85,52,52,52,52,
            61,61,60,60,60,62,62,53,53,90,
            90,49,49,63,63,63,45,45,45,46,
            47,47,47,48,48,48,48,56,56,56,
            64,91,73,73,73,73,70,92,93,93,
            94,94,95,95,115,115,116,116,117,117,
            117,117,119,119,118,118,118,120,120,86,
            86,1,1,1,5,5,5,5,5,5,
            23,23,25,25,26,26,96,96,96,99,
            121,121,121,121,121,121,121,104,104,104,
            104,104,104,104,104,104,104,104,104,104,
            104,104,104,104,104,104,104,104,104,104,
            104,122,122,1,14,19,15,394,638,43,
            296,432,395,533,433,590,589,630,592,636,
            633,73,90,558,693,196,133,210,320,321,
            649,1224,353,466,1115,172,135,132,134,158,
            753,14,19,15,394,42,43,692,432,395,
            533,433,590,589,630,592,1451,1496,137,241,
            164,215,1257,218,1360,220,221,226,141,144,
            147,150,139,6,960,1744,182,393,1350,617,
            1367,1437,1453,1254,654,14,19,15,394,638,
            43,518,432,395,533,433,590,589,630,592,
            636,633,73,277,720,14,19,15,394,638,
            43,518,432,395,533,433,590,589,630,592,
            636,633,73,277,753,14,19,15,394,42,
            43,23,432,395,533,433,590,589,630,1456,
            282,753,14,19,15,394,42,43,1523,432,
            395,533,433,1352,283,296,296,578,369,241,
            282,753,14,19,15,394,42,43,1523,432,
            395,533,1365,24,283,16,1465,1659,467,14,
            19,15,394,638,43,518,432,395,533,433,
            590,589,630,592,636,633,73,277,396,14,
            19,15,394,638,43,1653,432,395,533,433,
            590,589,630,592,636,633,73,1351,908,236,
            341,991,786,14,19,15,394,318,1721,168,
            229,22,239,310,284,819,14,19,15,394,
            316,273,1523,133,210,320,321,367,285,270,
            1620,1060,288,135,132,134,158,1009,215,1257,
            218,1360,220,221,226,1508,263,1228,1225,268,
            559,960,1426,454,296,137,402,164,1026,1513,
            133,210,320,321,840,141,144,147,150,231,
            143,132,134,158,1466,1350,617,1367,1437,1453,
            1254,687,14,19,15,394,638,43,296,432,
            395,533,433,590,589,630,592,636,633,73,
            277,753,14,19,15,394,638,43,1468,432,
            395,533,433,590,589,630,592,636,633,73,
            90,753,14,19,15,394,42,43,951,432,
            395,533,433,590,589,1378,558,286,753,14,
            19,15,394,42,39,1523,918,14,19,15,
            394,638,43,1680,432,395,533,433,590,589,
            630,592,636,633,73,1464,971,296,586,14,
            19,15,394,42,43,393,432,395,533,433,
            590,589,630,592,636,633,92,1474,1255,328,
            431,14,19,15,394,638,43,253,432,395,
            533,433,590,589,630,592,636,633,73,1491,
            522,237,1469,753,14,19,15,394,638,43,
            296,432,395,533,433,590,589,630,592,636,
            633,73,91,753,14,19,15,394,638,43,
            21,432,395,533,433,590,589,630,592,636,
            633,73,84,753,14,19,15,394,638,43,
            296,432,395,533,433,590,589,630,592,636,
            633,73,83,753,14,19,15,394,638,43,
            269,432,395,533,433,590,589,630,592,636,
            633,73,82,753,14,19,15,394,638,43,
            296,432,395,533,433,590,589,630,592,636,
            633,73,81,753,14,19,15,394,638,43,
            275,432,395,533,433,590,589,630,592,636,
            633,73,80,753,14,19,15,394,638,43,
            296,432,395,533,433,590,589,630,592,636,
            633,73,79,753,14,19,15,394,638,43,
            276,432,395,533,433,590,589,630,592,636,
            633,73,78,753,14,19,15,394,638,43,
            296,432,395,533,433,590,589,630,592,636,
            633,73,77,753,14,19,15,394,638,43,
            222,432,395,533,433,590,589,630,592,636,
            633,73,76,753,14,19,15,394,638,43,
            296,432,395,533,433,590,589,630,592,636,
            633,73,75,753,14,19,15,394,638,43,
            227,432,395,533,433,590,589,630,592,636,
            633,73,74,753,14,19,15,394,638,43,
            298,432,395,533,433,590,589,630,592,636,
            633,73,1622,753,14,19,15,394,638,43,
            569,432,395,533,433,590,589,630,592,636,
            633,73,1710,753,14,19,15,394,42,43,
            314,432,395,533,433,590,589,630,592,636,
            633,92,753,14,19,15,394,42,43,407,
            432,395,533,433,590,589,630,592,636,633,
            92,852,14,19,15,394,314,1711,753,14,
            19,15,394,42,43,503,432,395,1040,753,
            14,19,15,394,42,43,209,432,395,533,
            433,590,589,630,592,636,633,92,753,14,
            19,15,394,42,43,289,432,395,533,433,
            590,589,630,592,636,633,92,885,14,19,
            15,394,40,1757,753,14,19,15,394,42,
            43,58,432,395,1080,753,14,19,15,394,
            42,43,200,432,395,533,433,590,589,630,
            592,636,633,92,753,14,19,15,394,42,
            43,343,432,395,533,433,590,589,630,592,
            636,633,72,83,558,259,527,909,115,201,
            716,753,14,19,15,394,42,43,692,432,
            395,533,433,590,1404,753,14,19,15,394,
            33,270,892,271,341,140,272,639,291,580,
            215,1257,218,1360,220,221,226,181,263,1228,
            1225,268,278,259,1223,25,1547,133,210,320,
            321,1737,444,270,69,225,260,136,132,134,
            158,1775,216,1257,218,1360,220,221,226,127,
            265,1228,1225,268,1744,255,1224,322,125,138,
            604,164,880,257,1514,1299,127,174,345,142,
            145,148,151,1224,753,14,19,15,394,42,
            43,20,432,395,533,1377,215,1257,218,1360,
            220,221,226,753,14,19,15,394,32,1658,
            501,604,557,215,1257,218,1360,220,221,226,
            286,25,660,25,621,339,1658,1022,1700,1742,
            1702,681,238,133,210,320,321,373,626,193,
            196,198,274,140,132,134,158,1610,224,25,
            133,210,320,321,86,309,1755,197,198,183,
            146,132,134,158,763,139,1782,164,753,14,
            19,15,394,42,43,659,432,395,1099,753,
            14,19,15,394,42,43,692,432,395,1125,
            753,14,19,15,394,42,43,1054,432,1317,
            753,14,19,15,394,42,43,1047,432,1318,
            392,441,254,1067,1252,26,632,909,240,383,
            133,210,320,321,604,620,672,273,738,604,
            149,132,134,158,771,270,133,210,320,321,
            270,251,210,320,321,240,152,132,134,158,
            326,604,263,1228,1225,268,804,263,1228,1225,
            268,753,14,19,15,394,42,43,837,777,
            840,1756,239,870,478,262,753,14,19,15,
            394,42,43,903,790,551,14,19,15,394,
            42,35,551,14,19,15,394,42,35,551,
            14,19,15,394,42,35,243,473,25,25,
            25,25,25,327,728,1712,1718,1762,1613,681,
            244,753,14,19,15,394,42,38,753,14,
            19,15,394,42,37,753,14,19,15,394,
            42,36,86,1310,216,1257,218,1360,220,221,
            226,753,14,19,15,394,42,35,753,14,
            19,15,394,42,34,25,928,25,764,25,
            520,660,363,692,363,580,464,25,1726,25,
            758,524,604,692,363,527,363,195,681,195,
            1223,228,1452,25,1452,86,515,86,515,195,
            363,195,279,241,1452,998,1452,86,515,86,
            515,88,184,126,370,195,516,293,661,908,
            1452,256,419,86,515,231,634,527,668,753,
            14,19,15,394,42,46,250,210,320,321,
            126,192,747,753,14,19,15,394,42,45,
            753,14,19,15,394,42,44,1872,1872,1554,
            56,692,113,250,210,320,321,580,800,580,
            604,604,170,1767,1458,1872,25,1872,284,580,
            1872,892,195,681,195,580,51,1308,580,1308,
            183,242,290,580,195,1872,207,692,770,1308,
            195,1458,731,1223,500,1308,86,1415,1223,580,
            1872,190,1872,190,1872,513,692,604,407,1803,
            1238,1803,513,190,1223,1033,202,692,1872,190,
            1623,1803,270,1255,255,126,1701,1803,292,255,
            1872,880,126,1514,1872,203,1000,1554,1514,265,
            1228,1225,268,297,1554,255,1181,354,250,210,
            320,321,920,227,1514,250,210,320,321,1872,
            580,1872,1872,1872,1872,1645,251,210,320,321,
            251,210,320,321,206,195,1872,1872,1872,1872,
            1308,206,1872,1872,1872,1872,1793,1872,1227,1606,
            1872,1872,1872,1797,1872,1457,1606,1872,1872,1872,
            1872,1872,1872,1872,191,1872,0,323,748,0,
            17,178,0,18,177,0,1,2095,0,1,
            2106,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,0,0,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            0,1,52,53,54,0,1,0,3,0,
            5,6,7,8,9,10,11,0,0,64,
            65,66,67,18,6,7,8,9,10,11,
            57,58,0,1,2,0,4,0,33,34,
            35,36,37,38,39,40,41,42,43,44,
            45,46,47,48,49,23,51,52,53,54,
            60,56,0,1,0,3,2,5,6,7,
            8,9,10,11,0,0,0,1,2,5,
            18,6,7,8,9,10,11,23,0,0,
            1,2,4,4,0,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,23,51,52,53,54,0,56,0,
            1,0,3,0,5,6,7,8,9,10,
            11,14,0,12,13,12,13,18,6,7,
            8,9,10,11,68,0,1,0,3,75,
            62,63,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,24,
            51,52,53,54,0,56,0,1,0,3,
            0,5,6,7,8,9,10,11,0,0,
            0,1,0,3,18,6,7,8,9,10,
            11,0,0,0,24,2,4,4,0,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,23,51,52,53,
            54,23,56,0,1,0,3,2,5,6,
            7,8,9,10,11,0,0,0,70,71,
            5,18,6,7,8,9,10,11,23,0,
            1,73,3,0,62,63,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,24,51,52,53,54,0,56,
            0,1,0,3,0,50,6,7,8,9,
            10,11,0,0,57,58,12,13,18,6,
            7,8,9,10,11,23,0,1,0,3,
            57,58,0,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            24,23,52,53,54,0,1,2,3,4,
            5,0,64,65,66,67,0,12,13,14,
            15,16,17,18,19,20,21,22,0,1,
            25,26,27,28,29,30,31,32,0,61,
            0,1,2,3,4,5,64,65,66,67,
            0,89,12,13,14,15,16,17,18,19,
            20,21,22,0,59,25,26,27,28,29,
            30,31,32,57,58,0,0,1,2,3,
            4,5,0,1,2,74,4,0,12,13,
            14,15,16,17,0,19,20,21,22,59,
            24,25,26,27,28,29,30,31,32,0,
            0,2,0,4,0,0,6,7,8,9,
            10,11,0,1,74,3,0,51,18,0,
            55,0,23,0,5,4,0,1,5,3,
            77,78,55,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            0,1,2,3,4,5,0,0,0,57,
            58,4,12,13,14,15,16,17,0,19,
            20,21,22,50,55,25,26,27,28,29,
            30,31,32,62,63,0,1,2,3,4,
            5,23,0,1,75,3,0,12,13,14,
            15,16,17,0,19,20,21,22,5,59,
            25,26,27,28,29,30,31,32,0,0,
            0,1,2,3,4,0,70,71,0,61,
            72,0,12,13,14,15,16,17,0,19,
            20,21,22,24,59,25,26,27,28,29,
            30,31,32,0,1,2,3,4,0,0,
            0,23,59,0,5,12,13,14,15,16,
            17,0,19,20,21,22,56,24,25,26,
            27,28,29,30,31,32,0,1,2,3,
            4,0,0,1,2,24,5,72,12,13,
            14,15,16,17,73,19,20,21,22,50,
            24,25,26,27,28,29,30,31,32,0,
            1,2,3,4,0,0,68,0,68,5,
            0,12,13,14,15,16,17,0,19,20,
            21,22,51,24,25,26,27,28,29,30,
            31,32,0,1,2,3,4,0,0,0,
            0,24,0,0,12,13,14,15,16,17,
            0,19,20,21,22,51,14,25,26,27,
            28,29,30,31,32,0,1,2,3,4,
            60,0,0,0,24,0,69,12,13,14,
            15,16,17,0,19,20,21,22,0,0,
            25,26,27,28,29,30,31,32,0,1,
            2,3,4,60,0,0,69,24,0,0,
            12,13,14,15,16,17,0,19,20,21,
            22,0,0,25,26,27,28,29,30,31,
            32,0,1,2,3,4,0,0,0,0,
            24,0,0,12,13,14,15,16,17,0,
            19,20,21,22,0,0,25,26,27,28,
            29,30,31,32,0,1,2,3,4,0,
            0,0,0,24,0,4,12,13,14,15,
            16,17,0,19,20,21,22,0,0,25,
            26,27,28,29,30,31,32,0,1,2,
            3,4,0,0,0,0,24,0,0,12,
            13,14,15,16,17,0,19,20,21,22,
            0,0,25,26,27,28,29,30,31,32,
            0,60,2,0,4,5,6,7,8,9,
            10,11,55,55,0,0,0,0,18,0,
            0,0,2,23,4,5,6,7,8,9,
            10,11,55,33,34,35,36,37,18,0,
            0,1,2,23,0,5,0,0,0,0,
            50,0,5,33,34,35,36,37,0,0,
            0,0,0,23,6,7,8,9,10,11,
            50,0,0,0,0,0,18,6,7,8,
            9,10,11,0,0,0,0,0,0,18,
            50,33,34,35,36,37,0,50,2,0,
            0,5,55,0,33,34,35,36,37,6,
            7,8,9,10,11,0,0,0,0,23,
            0,18,6,7,8,9,10,11,0,0,
            0,0,0,0,18,0,33,34,35,36,
            37,0,0,0,69,0,50,0,0,33,
            34,35,36,37,79,80,81,82,83,84,
            85,86,87,88,0,0,2,0,0,0,
            0,0,0,0,0,0,0,0,0,15,
            16,0,0,0,0,0,0,23,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,61,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            76,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1872,708,1605,746,1591,58,2083,2084,2085,2196,
            1211,2197,1575,1568,1598,1343,1245,1167,2033,1882,
            1883,1884,1885,53,1,1561,718,2183,2184,2185,
            1111,595,582,2034,2032,2086,2035,2031,2038,2043,
            2042,2040,2041,2039,2044,2045,2037,2046,2047,2048,
            1,1869,607,593,385,1872,1,281,1,1872,
            189,1,1,1,1,1,1,1872,246,1419,
            1408,1174,1118,1,1,1,1,1,1,1,
            1430,1440,258,2095,581,1872,1,1872,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,558,189,1,1,1,
            2126,2066,1872,1,266,1,1362,189,1,1,
            1,1,1,1,1,1872,1,2095,384,1881,
            1,2083,2084,2085,2196,1211,2197,558,47,264,
            2095,581,1690,1399,1872,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,558,189,1,1,1,63,2066,1872,
            1,50,1,52,189,1,1,1,1,1,
            1,501,247,1516,1501,1516,1501,1,1,1,
            1,1,1,1,1148,1872,2051,1872,2052,1880,
            1683,1669,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1361,
            189,1,1,1,1872,2066,1872,1,61,1,
            1872,188,1,1,1,1,1,1,67,245,
            1872,1901,1872,1902,1,2083,2084,2085,2196,1211,
            2197,1872,49,261,1275,1447,1690,1,267,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,558,188,1,1,
            1,558,2066,1872,1,219,1,1611,189,1,
            1,1,1,1,1,1872,248,57,1324,521,
            1877,1,2083,2084,2085,2196,1211,2197,558,1872,
            2051,701,2052,56,1683,1669,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1363,189,1,1,1,60,2066,
            1872,2050,323,2049,51,1876,2083,2084,2085,2196,
            1211,2197,1872,249,1430,1440,1516,1501,2033,2083,
            2084,2085,2196,1211,2197,1857,1872,2051,1872,2052,
            1430,1440,59,2034,2032,2086,2035,2031,2038,2043,
            2042,2040,2041,2039,2044,2045,2037,2046,2047,2048,
            1389,1073,607,593,385,1,1889,1605,1890,1525,
            1875,69,1419,1408,1174,1118,55,1575,1568,1598,
            1343,1245,1167,726,1882,1883,1884,1885,1872,2107,
            1561,718,2183,2184,2185,1111,595,582,1872,1226,
            1872,1889,1605,1890,1539,1875,1419,1408,1174,1118,
            70,1856,1575,1568,1598,1343,1245,1167,1053,1882,
            1883,1884,1885,71,1874,1561,718,2183,2184,2185,
            1111,595,582,1430,1440,87,1,1889,1605,1890,
            1591,27,1872,2095,384,484,1399,252,1575,1568,
            1598,1343,1245,1167,1872,1882,1883,1884,1885,1874,
            2959,1561,718,2183,2184,2185,1111,595,582,264,
            127,1447,54,1399,1872,1872,2083,2084,2085,2196,
            1211,2197,205,2051,484,2052,1872,27,2033,1872,
            793,48,558,1,1881,1690,1872,2051,89,2052,
            400,1716,1608,2034,2032,2086,2035,2031,2038,2043,
            2042,2040,2041,2039,2044,2045,2037,2046,2047,2048,
            1872,1889,1605,1890,1591,1875,62,1872,65,1430,
            1440,1284,1575,1568,1598,1343,1245,1167,287,1882,
            1883,1884,1885,89,1316,1561,718,2183,2184,2185,
            1111,595,582,1683,1669,1872,1889,1605,1890,1532,
            1875,1129,204,1667,1880,1667,1872,1575,1568,1598,
            1343,1245,1167,1872,1882,1883,1884,1885,1875,1874,
            1561,718,2183,2184,2185,1111,595,582,1872,319,
            1872,1,1,1,1,66,1324,521,1872,1625,
            1231,68,1,1,1,1,1,1,217,1,
            1,1,1,1275,1874,1,1,1,1,1,
            1,1,1,1,1889,1605,1890,1591,1872,1,
            199,558,1874,1872,1877,1575,1568,1598,1343,1245,
            1167,317,1882,1883,1884,1885,2182,2959,1561,718,
            2183,2184,2185,1111,595,582,1872,1889,1605,1890,
            1591,1872,1,2095,384,1275,1879,1231,1575,1568,
            1598,1343,1245,1167,701,1882,1883,1884,1885,1876,
            2959,1561,718,2183,2184,2185,1111,595,582,1,
            1889,1605,1890,1591,280,1872,1204,208,1185,1551,
            1,1575,1568,1598,1343,1245,1167,315,1882,1883,
            1884,1885,1878,2959,1561,718,2183,2184,2185,1111,
            595,582,1872,1889,1605,1890,1591,1872,1872,1872,
            1872,1275,64,1,1575,1568,1598,1343,1245,1167,
            41,1882,1883,1884,1885,1551,501,1561,718,2183,
            2184,2185,1111,595,582,1872,1889,1607,1890,1591,
            2126,1872,1872,1872,1275,1872,1092,1575,1568,1598,
            1343,1245,1167,186,1882,1883,1884,1885,1872,1872,
            1561,718,2183,2184,2185,1111,595,582,1872,1889,
            1617,1890,1591,2125,1872,1872,661,1548,1872,1872,
            1575,1568,1598,1343,1245,1167,185,1882,1883,1884,
            1885,1872,1872,1561,718,2183,2184,2185,1111,595,
            582,1872,1889,1619,1890,1591,1872,1872,1872,1872,
            1549,1872,1872,1575,1568,1598,1343,1245,1167,187,
            1882,1883,1884,1885,1872,1872,1561,718,2183,2184,
            2185,1111,595,582,1872,1889,1633,1890,1591,1872,
            1872,1,1872,1550,1872,1284,1575,1568,1598,1343,
            1245,1167,1872,1882,1883,1884,1885,28,28,1561,
            718,2183,2184,2185,1111,595,582,1,1889,1605,
            1890,1591,1872,1872,1872,1872,1609,204,1872,1575,
            1568,1598,1343,1245,1167,1872,1882,1883,1884,1885,
            1872,1872,1561,718,2183,2184,2185,1111,595,582,
            17,2126,1860,1872,1860,1860,178,178,178,178,
            178,178,538,1899,1872,1872,1872,1872,178,1872,
            18,1872,1863,1860,1863,1863,177,177,177,177,
            177,177,2827,178,178,178,178,178,177,1872,
            1,1866,581,1863,1872,1877,1872,1872,1872,1872,
            1860,1872,1877,177,177,177,177,177,128,1872,
            1872,1872,1872,558,2083,2084,2085,2196,1211,2197,
            1863,129,1872,1872,1872,42,2033,2083,2084,2085,
            2196,1211,2197,1872,1872,1872,1872,1872,1872,2033,
            1876,2034,2032,2086,2035,2031,1,1876,1447,1872,
            1872,1877,1662,130,2034,2032,2086,2035,2031,2083,
            2084,2085,2196,1211,2197,1872,131,1872,1872,558,
            1872,2033,2083,2084,2085,2196,1211,2197,1872,1872,
            1872,1872,1872,1872,2033,1872,2034,2032,2086,2035,
            2031,1872,1872,1872,1013,1872,1876,1872,1872,2034,
            2032,2086,2035,2031,993,973,953,933,913,873,
            893,853,833,813,31,1872,1621,1872,1872,1872,
            1872,1872,1872,1872,1872,1872,1872,1872,1872,1896,
            1897,1872,1872,1872,1872,1872,1872,1552,1872,1872,
            1872,1872,1872,1872,1872,1872,1872,1872,1872,1872,
            1872,1872,1872,1872,1872,1872,1872,1872,1872,1872,
            1872,1872,1872,1872,1872,1872,1872,1872,1872,1872,
            1872,1872,1872,1872,1872,519,1872,1872,1872,1872,
            1872,1872,1872,1872,1872,1872,1872,1872,1872,1872,
            419
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            353,1,85,41,85,85,85,85,85,85,
            85,85,85,85,85,85,197,3,434,431,
            438,436,444,442,446,445,448,447,10,85,
            197,197,197,197,157,157,314,197,416,416,
            487,85,85,85,85,85,85,85,85,85,
            85,85,85,85,85,85,85,85,85,85,
            85,85,85,85,85,85,85,85,85,85,
            85,85,157,157,157,157,74,318,76,383,
            155,154,286,190,298,298,72,72,298,72,
            298,217,108,108,157,45,431,431,436,436,
            436,436,434,434,442,438,438,445,444,480,
            447,446,419,419,419,419,50,314,306,79,
            45,240,161,157,247,386,161,459,320,459,
            320,377,459,85,50,306,240,240,45,160,
            76,157,312,217,156,388,45,161,320,320,
            320,320,377,377,379,187,350,74,240,306,
            85,85,45,161,383,475,474,318,388,157,
            320,350,279,320,320,350,379,482,379,377,
            350,48,485,416,85,186,350,50,306,45,
            45,157,247,386,312,350,281,350,350,85,
            416,379,52,45,416,85,50,388,455,85,
            454,104,318,350,45,379,157,156,281,85,
            104,350,417,379
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            89,0,75,23,2,61,76,15,16,14,
            4,12,13,62,63,57,58,64,65,66,
            67,70,71,72,73,74,77,78,51,69,
            79,80,81,82,83,85,84,86,87,88,
            68,50,89,55,59,5,0,5,51,23,
            61,15,16,14,4,12,13,25,26,17,
            30,31,32,2,19,20,21,22,27,28,
            29,1,3,24,0,59,5,18,6,7,
            8,9,10,11,19,20,21,22,27,28,
            29,3,15,16,14,12,13,25,26,17,
            30,31,32,4,2,1,0,7,18,37,
            8,36,35,34,6,33,9,10,11,61,
            76,15,16,14,12,13,62,63,57,58,
            64,65,66,67,70,71,72,73,74,77,
            78,69,79,80,81,82,83,84,85,86,
            87,88,4,2,23,55,50,5,0,18,
            59,5,15,16,14,4,12,13,25,26,
            17,30,31,32,2,1,3,19,20,21,
            22,27,28,29,0,69,23,61,0,5,
            68,55,59,50,75,23,17,19,20,21,
            22,2,15,16,14,4,12,13,25,26,
            27,28,29,30,31,32,3,1,52,53,
            54,46,38,43,41,42,40,39,44,45,
            47,48,49,37,34,18,33,36,35,6,
            7,8,10,9,11,0,33,38,6,39,
            52,34,40,35,41,42,36,7,43,44,
            18,53,37,54,45,46,8,47,48,49,
            1,3,9,10,11,60,4,0,75,5,
            4,1,2,68,0,46,38,43,41,42,
            40,39,44,45,47,48,49,68,75,37,
            34,18,33,36,35,6,7,8,9,10,
            11,55,1,5,50,2,23,4,0,33,
            38,6,39,52,34,40,35,41,42,36,
            7,43,44,18,53,37,54,45,46,8,
            47,48,49,1,3,9,10,11,56,5,
            51,0,17,19,20,21,22,1,3,2,
            15,16,14,4,12,13,25,26,27,28,
            29,30,31,32,56,0,1,3,5,51,
            55,0,4,2,23,50,5,33,38,6,
            39,52,34,40,35,41,42,36,7,43,
            44,18,53,37,54,45,46,8,47,48,
            49,9,10,11,60,3,1,0,69,79,
            80,81,82,83,84,85,86,87,88,24,
            4,62,63,12,13,58,57,64,65,66,
            67,70,71,14,72,73,74,59,50,51,
            89,77,78,68,75,5,55,0,33,6,
            34,35,36,7,18,37,8,1,4,9,
            10,11,24,2,5,55,50,75,23,68,
            0,5,55,51,69,0,5,50,17,19,
            20,21,22,1,3,2,15,16,14,4,
            12,13,25,26,27,28,29,30,31,32,
            0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            67,8,20,8,20,20,20,20,20,20,
            20,20,20,20,20,20,77,8,8,8,
            8,8,8,8,8,8,8,8,8,20,
            77,77,77,77,65,65,71,1,13,13,
            81,78,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,78,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,65,65,65,65,8,48,22,70,
            44,44,54,42,55,55,9,9,55,9,
            55,50,8,8,65,24,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,92,72,92,35,
            24,84,23,65,46,64,23,8,92,8,
            92,92,8,20,18,92,84,84,24,23,
            75,65,29,2,8,91,24,23,92,86,
            92,86,9,92,26,15,92,8,84,75,
            20,20,24,23,28,44,44,48,91,65,
            86,11,61,94,86,11,26,8,8,9,
            11,17,8,9,20,38,11,92,75,24,
            24,65,46,64,30,11,57,11,11,20,
            9,26,19,24,9,20,18,90,62,20,
            8,57,48,11,24,26,65,65,57,20,
            32,11,8,40
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,80,79,78,77,76,75,0,32,0,
            29,0,72,0,93,0,70,7,64,4,
            0,7,4,21,0,54,0,20,7,47,
            46,40,38,0,4,7,0,95,0,91,
            0,96,0,28,0,7,22,52,0,65,
            66,67,68,55,33,0,7,40,38,0,
            7,71,0,7,20,0,7,86,0,20,
            7,47,46,0,23,0,27,7,31,0,
            7,87,0,61,0,59,7,27,0,89,
            22,7,0,7,27,51,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,96,97,
            98,10,11,8,6,7,68,69,81,82,
            83,84,1,3,12,13,93,94,95,100,
            101,102,44,55,60,63,72,47,52,56,
            61,62,66,67,74,75,78,79,80,90,
            91,54,70,73,42,107,16,17,89,30,
            4,14,15,18,19,20,21,29,31,22,
            23,24,25,26,92,5,27,28,32,33,
            34,35,36,37,38,39,40,41,108,45,
            46,49,50,51,53,57,58,59,65,71,
            77,88,99,103,104,105,106
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,115,119,120,0,121,122,123,
            124,125,126,127,128,129,130,131,132,111,
            110,136,143,0,0,0,154,163,112,0,
            114,135,142,0,0,0,159,161,0,162,
            0,0,0,134,172,173,174,0,117,151,
            153,160,169,0,145,150,0,0,152,164,
            167,168,171,0,146,147,148,149,158,175,
            113,116,118,133,137,138,139,140,141,144,
            156,0,0,157,166,109,0,155,165,170,
            0,176,177,0,178,179,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            212,120,59,69,129,149,155,26,192,35,
            87,105,161,166,75,6,12,16,40,83,
            52,139,208,230,234,52,52,201,52,1,
            1,1,44,47,92,115,47,238,20,143,
            183,220,135,171,171,171,171,171,95,95,
            95
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            127,127,4,4,127,127,127,32,198,10,
            4,10,127,127,80,10,10,10,10,4,
            4,137,10,10,4,56,80,205,65,4,
            4,4,10,50,4,10,118,10,23,146,
            186,223,137,173,175,177,179,181,102,97,
            110
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            4,67,28,28,67,65,65,56,103,48,
            28,43,65,65,28,5,5,5,48,28,
            28,51,5,4,4,28,28,18,28,96,
            95,94,46,63,28,40,50,2,70,51,
            104,4,51,79,78,77,76,75,43,41,
            43
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            51,51,59,59,51,51,51,51,95,50,
            59,50,51,51,19,50,50,50,50,59,
            59,75,50,50,59,4,19,68,18,59,
            59,59,50,2,59,50,1,50,69,1,
            101,50,75,3,52,53,53,46,2,2,
            2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            36,21,25,25,21,21,21,95,-1,29,
            25,11,21,21,25,36,36,36,29,25,
            25,5,36,36,36,25,25,69,25,19,
            1,3,29,31,25,11,13,36,96,5,
            -1,36,5,22,22,22,22,22,11,11,
            11
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            151,23,0,110,0,156,2,32,0,111,
            0,156,2,31,0,156,2,30,0,199,
            114,0,31,150,0,161,180,114,24,171,
            0,112,0,0,167,114,2,153,0,167,
            114,2,0,170,2,0,159,114,0,172,
            0,192,114,23,0,9,110,0,126,18,
            192,114,23,0,69,132,110,0,126,192,
            114,18,23,0,192,114,18,23,0,132,
            110,0,126,18,23,0,126,192,114,23,
            0,126,23,0,147,0,2,0,165,111,
            0,2,111,0,167,114,2,147,0,2,
            0,164,111,0,157,2,0,159,0,161,
            190,114,24,139,52,0,112,0,161,190,
            114,24,52,0,134,0,113,0,195,114,
            134,0,114,134,0,155,113,0,165,114,
            24,139,54,0,165,114,24,139,53,0,
            165,114,24,54,0,165,114,24,53,0,
            187,0,149,0,148,0,147,0,146,0,
            145,0,206,94,0,77,2,114,111,113,
            0,206,127,138,2,98,0,53,0,0,
            138,78,124,0,29,131,0,156,2,17,
            0,161,180,114,24,127,156,2,0,156,
            2,0,111,3,0,118,0,112,0,194,
            2,111,0,138,23,111,0,138,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1060,0,518,0,1718,1803,1712,1702,1700,0,
            1547,1255,1316,384,1299,581,1223,0,1211,0,
            1254,580,363,0,1360,1257,1228,1225,1255,1744,
            581,1223,1447,1452,0,1539,1532,1525,484,400,
            1231,701,1324,521,501,1440,1430,1419,1408,1174,
            1118,1690,1683,1669,1516,1501,1343,1245,1598,1591,
            1575,1568,1561,718,1167,1111,595,582,1185,1148,
            1129,1092,1073,1053,1033,770,1204,748,726,558,
            1013,993,973,953,933,913,893,873,853,833,
            813,363,793,681,661,464,538,444,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,193,114,181,32,31,30,17,26,25,
            13,12,4,14,16,15,2,111,116,115,
            118,117,120,119,122,121,124,123,112,55,
            2,2,2,2,156,138,134,114,76,61,
            2,23,13,12,63,62,4,67,66,65,
            64,57,58,14,71,70,73,72,78,77,
            74,88,87,86,84,85,83,82,81,80,
            79,69,156,156,156,156,127,114,23,2,
            154,153,182,10,183,184,54,53,185,52,
            186,187,1,3,194,138,115,115,117,117,
            117,117,116,116,119,118,118,121,120,138,
            123,122,127,127,127,127,24,159,4,18,
            126,114,4,170,114,2,23,139,24,139,
            24,24,139,68,114,4,114,114,126,192,
            168,167,129,114,169,114,151,4,24,114,
            24,114,114,24,180,114,24,171,114,168,
            192,18,126,4,2,145,147,114,55,167,
            114,165,134,166,114,165,190,139,191,114,
            161,55,199,61,23,200,114,24,168,126,
            126,157,114,2,159,165,114,165,161,69,
            55,190,69,151,61,23,114,114,195,68,
            157,2,114,161,151,180,167,196,55,68,
            159,161,55,136
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "MYTHREAD",
            "THREADS",
            "UPC_MAX_BLOCKSIZE",
            "relaxed",
            "shared",
            "strict",
            "upc_barrier",
            "upc_localsizeof",
            "upc_blocksizeof",
            "upc_elemsizeof",
            "upc_notify",
            "upc_fence",
            "upc_wait",
            "upc_forall",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_cast_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_name",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_or_typedefname",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "layout_qualifier"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 56,
           SCOPE_UBOUND      = 50,
           SCOPE_SIZE        = 51,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 224,
           NT_OFFSET         = 107,
           LA_STATE_OFFSET   = 2234,
           MAX_LA            = 2,
           NUM_RULES         = 362,
           NUM_NONTERMINALS  = 122,
           NUM_SYMBOLS       = 229,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1364,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 89,
           EOLT_SYMBOL       = 89,
           ACCEPT_ACTION     = 1856,
           ERROR_ACTION      = 1872;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
