2002-10-20 Alain Magloire

	-data-write-register-values is not in the texinfo manual but implemented in
	gdb-5.2.1/gdb/mi/mim-main.c:
	Write given values into registers. The registers and values are
	given as pairs. The corresponding MI command is 
	-data-write-register-values <format> [<regnum1> <value1>...<regnumN> <valueN>]

	* src/.../core/command/MIDataWriteRegisterValues.java: New file.
	* src/.../core/command/CommandFactory.java (createMIDataWriteMemory): New method.
	* src/.../core/cdi/Register.java (setValue): Implemented.
	
2002-10-20 Alain Magloire

	Althought -data-write-memory is not documented in the texinfo manual
	it is implemented and well documented in the code(gdb-5.2.1/gdb/mi/mi-main.c).
	"mi_cmd_data_write_memory: Usage: [-o COLUMN_OFFSET] ADDR FORMAT WORD-SIZE VALUE.");

	* src/.../core/command/MIDataWriteMemory.java: New file
	* src/.../core/command/CommandFactory.java (createMIDataWriteMemory): New method.
	* src/.../core/cdi/MemoryBlock.java (setValue): Implemented.

2002-10-20 Alain Magloire

	* src/.../core/cdi/CTarget.java (getMemoryBlock): Remove
	we use the MemoryManager instead.
	(EvaluateExpressionToValue): Removed not use.
	* src/.../core/cdi/SourceManager.java (setFile): Removed not use.
	(getFile): Removed not use.
	(reset): Removed not use.

2002-10-19 Alain Magloire

	The responsability to generate Events for modify memory blocks is push
	on the CDI implementation.  The way we do this is every time consuming,
	when the inferior is suspended(see EventManager.processSuspendedEvent()),
	MemoryManager.update() is called, the method will go through the list of MemoryBlocks
	that are not MemoryBlocks.setFrozen() and fetch the new memories, the data is compare
	and MemoryChangedEvents are fired for blocks with changed values.
	Gdb/mi var objects does not seem to provide any support for Memory ranges.

	* src/.../core/cdi/MemoryChangedEvent.java: New File implements ICDIMemoryChangedEvent.
	* src/.../core/cdi/EventManager.java (update): Process MIMemoryChangedEvent's.
	(processSuspendedEvent): call MemoryManager.update().
	* src/.../core/cdi/MemoryBlock.java (getExpression): New method.
	(getMIDataReadMemoryInfo): New method.
	(setMIDataReadMemoryInfo): New method.
	* src/.../core/cdi/MemoryManager.java (update): New method.
	(compareBlock): New method.
	(listMemoryBlocks): New method.

	* src/.../core/cdi/CTarget.java (setCurrentThread): Catch null pointer.
	(getCThreads): Likewise.
	* src/.../core/event/MIMemoryChangedEvent.java: New File.
	* src/.../core/event/MIThreadExitEvent.java: Indentation fixes.
	* src/.../core/event/MIVarChangedEvent.java: Indentation fixes.


	
2002-10-16 Alain Magloire

	* src/.../mi/core/cdi/MemoryManager.java (createMemoryBlock):
	New method that takes a string instead of a long, rearrange
	the method for it.

2002-10-12 Alain Magloire

	There are some serious problems with gdb/mi, for example
	the most recurrent one is when using -data-disassemble
	in a threaded program, GNU/Linux uses a thread manager
	when trying to access the stackframe, gdb usually coredumps
	with an assert, it goes something like this:
	
-data-disassemble -f manager.c -l 136 -n 100 0
&"Cannot access memory at address 0x4002d794\n"
^error,msg="Cannot access memory at address 0x4002d794"
(gdb) 
-data-disassemble -s 0x4002d900 -e 0x4002d964 0
&"Cannot access memory at address 0x4002d900\n"
^error,msg="Cannot access memory at address 0x4002d900"
(gdb) 
-thread-select 2
&"ui-out.c:133: gdb-internal-error: push_level: Assertion `uiout->level >= 0 && uiout->level < MAX_UI_OUT_LEVELS' failed.\n"

	The RxThread will spawn a thread to terminate the session
	and clear the receiving queue.


	* RxThread.java (run): When the thread is being cancel() or
	running out of run(), clear the receiving queue(rxQueue) and
	notify any commands waiting.

	* TxTread.java (run): Before putting the command in the
	receiving queue(rxQueue) check to see if the thread is
	still running.
	When the thread is being cancel() or running out of run(),
	clear the transmition queue(txQueue) an notify any commands
	waiting.

	* Queue.java (clearItems): New method that clear the items
	on the queue and returning them.

	* CommandQueue.java (clearCommands): New method calls super.clearItems()
	whith the appropriate castings.

	* cdi/CThread.java (setCurrentStackFrame): Check for null.

2002-10-12 Alain Magloire

	The memory block is implemented with
	-data-read-memory (MIDataReadMemory)
	Since the ICDIMemoryBlock only have
	byte[] getBytes()
	We will always issue:
	-data-read-memory address x 1 1 length
	The CDI upper layer will deal with any conversions
	
	The problem now is how to send changedEvent when
	an element of the memory changed.
	
	* cdi/MemoryBlock.java (getLength): Implemented
	(getBytes): Implemented
	(getStartAddress): Implemented

	* cdi/MemoryManager.java: Implemented.
	
	* command/MIDataReadMemory (getMIDataReadMemoryInfo):
	New helper method.

2002-10-12 Alain Magloire

	* cdi/Location (getInstructions): Methods removed
	no longer define in ICDILocation.

2002-10-11 Alain Magloire

	* cdi/SourceManager (getMixedInstruction):
	Implement the 3 new methods to return Mixed source
	and assemby instructions.
	
	* cdi/MixedInstruction: New class implements
	ICDIMixedInstruction.

2002-10-11 Alain Magloire

	* cdi/ExpressionManager.java:  Not needed, removed.

2002-10-10 Alain Magloire

	The Eclipse/UI/Debug framewok is being very repetive
	and each command can be ask 2, 3 times.  So we'll try
	to make certain commands smarter by not reissuing them
	to gdb if the state is the same.  We do this when
	selecting the thread and when selecting the stackframe.
	
	The other problem is that Eclipse/UI/Debug is calling
	ICDISession.terminate() twice, this is catch by looking
	at isTerminated().

	* cdi/CThread.java (setCurrentStackFrame): Make it smarter
	to not reselect the stack level if it is already at that
	level.

	* MISession.java (isTerminated): Declare a flag that will
	hold the state.
	(terminate): Check if it was call already.

2002-10-10 Alain Magloire

	* SourceManager.java:  Implement getInstructions().
