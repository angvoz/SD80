/*******************************************************************************
* Copyright (c) 2006, 2007 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.c99;

import lpg.lpgjavaruntime.*;

import java.util.*;

import org.eclipse.cdt.core.dom.ast.*;
import org.eclipse.cdt.core.dom.c99.IParserActionTokenProvider;
import org.eclipse.cdt.core.dom.c99.IParser;
import org.eclipse.cdt.core.dom.c99.IParseResult;
import org.eclipse.cdt.core.dom.parser.c99.C99ParseResult;
import org.eclipse.cdt.core.dom.parser.c99.C99ParserAction;
import org.eclipse.cdt.core.dom.ast.IASTCompletionNode;
import org.eclipse.cdt.core.dom.c99.IKeywordMap;
import org.eclipse.cdt.core.dom.parser.c99.C99KeywordMap;

public class C99Parser extends PrsStream implements RuleAction , IParserActionTokenProvider, IParser 
{
    private static ParseTable prs = new C99Parserprs();
    private BacktrackingParser btParser;

    public BacktrackingParser getParser() { return btParser; }
    private void setResult(Object object) { btParser.setSym1(object); }
    public Object getRhsSym(int i) { return btParser.getSym(i); }

    public int getRhsTokenIndex(int i) { return btParser.getToken(i); }
    public IToken getRhsIToken(int i) { return super.getIToken(getRhsTokenIndex(i)); }
    
    public int getRhsFirstTokenIndex(int i) { return btParser.getFirstToken(i); }
    public IToken getRhsFirstIToken(int i) { return super.getIToken(getRhsFirstTokenIndex(i)); }

    public int getRhsLastTokenIndex(int i) { return btParser.getLastToken(i); }
    public IToken getRhsLastIToken(int i) { return super.getIToken(getRhsLastTokenIndex(i)); }

    public int getLeftSpan() { return btParser.getFirstToken(); }
    public IToken getLeftIToken()  { return super.getIToken(getLeftSpan()); }

    public int getRightSpan() { return btParser.getLastToken(); }
    public IToken getRightIToken() { return super.getIToken(getRightSpan()); }

    public int getRhsErrorTokenIndex(int i)
    {
        int index = btParser.getToken(i);
        IToken err = super.getIToken(index);
        return (err instanceof ErrorToken ? index : 0);
    }
    public ErrorToken getRhsErrorIToken(int i)
    {
        int index = btParser.getToken(i);
        IToken err = super.getIToken(index);
        return (ErrorToken) (err instanceof ErrorToken ? err : null);
    }

    public C99Parser(LexStream lexStream)
    {
        super(lexStream);

        try
        {
            super.remapTerminalSymbols(orderedTerminalSymbols(), C99Parserprs.EOFT_SYMBOL);
        }
        catch(NullExportedSymbolsException e) {
        }
        catch(NullTerminalSymbolsException e) {
        }
        catch(UnimplementedTerminalsException e)
        {
            java.util.ArrayList unimplemented_symbols = e.getSymbols();
            System.out.println("The Lexer will not scan the following token(s):");//$NON-NLS-1$
            for (int i = 0; i < unimplemented_symbols.size(); i++)
            {
                Integer id = (Integer) unimplemented_symbols.get(i);
                System.out.println("    " + C99Parsersym.orderedTerminalSymbols[id.intValue()]); //$NON-NLS-1$              
            }
            System.out.println();                        
        }
        catch(UndefinedEofSymbolException e)
        {
            throw new Error(new UndefinedEofSymbolException
                                ("The Lexer does not implement the Eof symbol " +//$NON-NLS-1$
                                 C99Parsersym.orderedTerminalSymbols[C99Parserprs.EOFT_SYMBOL]));
        } 
    }

    public String[] orderedTerminalSymbols() { return C99Parsersym.orderedTerminalSymbols; }
    public String getTokenKindName(int kind) { return C99Parsersym.orderedTerminalSymbols[kind]; }
    public int getEOFTokenKind() { return C99Parserprs.EOFT_SYMBOL; }
    public PrsStream getParseStream() { return (PrsStream) this; }
    
    //
    // Report error message for given error_token.
    //
    public final void reportErrorTokenMessage(int error_token, String msg)
    {
        int firsttok = super.getFirstErrorToken(error_token),
            lasttok = super.getLastErrorToken(error_token);
        String location = super.getFileName() + ':' +
                          (firsttok > lasttok
                                    ? (super.getEndLine(lasttok) + ":" + super.getEndColumn(lasttok))//$NON-NLS-1$
                                    : (super.getLine(error_token) + ":" +//$NON-NLS-1$
                                       super.getColumn(error_token) + ":" +//$NON-NLS-1$
                                       super.getEndLine(error_token) + ":" +//$NON-NLS-1$
                                       super.getEndColumn(error_token)))
                          + ": ";//$NON-NLS-1$
        super.reportError((firsttok > lasttok ? ParseErrorCodes.INSERTION_CODE : ParseErrorCodes.SUBSTITUTION_CODE), location, msg);
    }

    public Object parser()
    {
        return parser(null, 0);
    }
    
    public Object parser(Monitor monitor)
    {
        return parser(monitor, 0);
    }
    
    public Object parser(int error_repair_count)
    {
        return parser(null, error_repair_count);
    }

    public Object parser(Monitor monitor, int error_repair_count)
    {
        try
        {
            btParser = new BacktrackingParser(monitor, (TokenStream) this, prs, (RuleAction) this);
        }
        catch (NotBacktrackParseTableException e)
        {
            throw new Error(new NotBacktrackParseTableException
                                ("Regenerate C99Parserprs.java with -BACKTRACK option"));//$NON-NLS-1$
        }
        catch (BadParseSymFileException e)
        {
            throw new Error(new BadParseSymFileException("Bad Parser Symbol File -- C99Parsersym.java"));//$NON-NLS-1$
        }

        try
        {
            return (Object) btParser.parse(error_repair_count);
        }
        catch (BadParseException e)
        {
            reset(e.error_token); // point to error token
            DiagnoseParser diagnoseParser = new DiagnoseParser(this, prs);
            diagnoseParser.diagnose(e.error_token);
        }

        return null;
    }


private  C99ParserAction  action = new  C99ParserAction (this, C99Parserprs.orderedTerminalSymbols);
private IKeywordMap keywordMap = new  C99KeywordMap ();
private List commentTokens = new ArrayList();

public C99Parser() {  // constructor
	this(new C99Lexer() {
		// used by mapKind() to map C99 token kinds to the token kinds of a parser that extends this one
		public String[] orderedExportedSymbols() {
			return C99Parsersym.orderedTerminalSymbols;
		}
	});
}

public void addToken(IToken token) {
	int newKind = mapKind(token.getKind());
	if(newKind == C99Parserprs.TK_identifier) {
		Integer keywordKind = keywordMap.getKeywordKind(token.toString());
		if(keywordKind != null) {
			newKind = keywordKind.intValue();
		}
	}
	token.setKind(newKind);
	super.addToken(token);
}

public void addCommentToken(IToken token) {
	commentTokens.add(token);
}

public List getCommentTokens() {
	return commentTokens;
}

public IParseResult parse() {
	// this has to be done, or... kaboom!
	setStreamLength(getSize());
	// do the actual parsing, -1 means full error handling
	parser(null, -1); 

	IASTTranslationUnit tu      = action.getAST();
	boolean encounteredError    = action.encounteredError();
	IASTCompletionNode compNode = action.getASTCompletionNode();

	return new C99ParseResult(tu, compNode, encounteredError);
}


// implements IParserActionTokenProvider.getEOFToken()
public IToken getEOFToken() {
	List tokens = getTokens();
	IToken eof = (IToken) tokens.get(tokens.size() - 1);
	return eof;
}


// implements IParserActionTokenProvider.getRuleTokenCount()
public int getRuleTokenCount() {
	return (getRightSpan() - getLeftSpan()) + 1; 
}

public List getRuleTokens() {
	return Collections.unmodifiableList(getTokens().subList(getLeftSpan(), getRightSpan() + 1));
}


    public void ruleAction(int ruleNumber)
    {
        switch (ruleNumber)
        {
 
            //
            // Rule 1:  <openscope> ::= $Empty
            //
            case 1: { action.beforeConsume(); action.   openASTScope();            break;
            }
 
            //
            // Rule 12:  constant ::= integer
            //
            case 12: { action.beforeConsume(); action.   consumeExpressionConstant(IASTLiteralExpression.lk_integer_constant);            break;
            }
 
            //
            // Rule 13:  constant ::= floating
            //
            case 13: { action.beforeConsume(); action.   consumeExpressionConstant(IASTLiteralExpression.lk_float_constant);              break;
            }
 
            //
            // Rule 14:  constant ::= charconst
            //
            case 14: { action.beforeConsume(); action.   consumeExpressionConstant(IASTLiteralExpression.lk_char_constant);               break;
            }
 
            //
            // Rule 15:  constant ::= stringlit
            //
            case 15: { action.beforeConsume(); action.   consumeExpressionConstant(IASTLiteralExpression.lk_string_literal);              break;
            }
 
            //
            // Rule 17:  primary_expression ::= ident
            //
            case 17: { action.beforeConsume(); action.   consumeExpressionID();            break;
            }
 
            //
            // Rule 18:  primary_expression ::= ( expression )
            //
            case 18: { action.beforeConsume(); action.   consumeExpressionBracketed();            break;
            }
 
            //
            // Rule 20:  postfix_expression ::= postfix_expression [ expression ]
            //
            case 20: { action.beforeConsume(); action.   consumeExpressionArraySubscript();            break;
            }
 
            //
            // Rule 21:  postfix_expression ::= postfix_expression ( )
            //
            case 21: { action.beforeConsume(); action.   consumeExpressionFunctionCall(false);            break;
            }
 
            //
            // Rule 22:  postfix_expression ::= postfix_expression ( argument_expression_list )
            //
            case 22: { action.beforeConsume(); action.   consumeExpressionFunctionCall(true);            break;
            }
 
            //
            // Rule 23:  postfix_expression ::= postfix_expression . ident
            //
            case 23: { action.beforeConsume(); action.   consumeExpressionFieldReference(false);            break;
            }
 
            //
            // Rule 24:  postfix_expression ::= postfix_expression -> ident
            //
            case 24: { action.beforeConsume(); action.   consumeExpressionFieldReference(true);            break;
            }
 
            //
            // Rule 25:  postfix_expression ::= postfix_expression ++
            //
            case 25: { action.beforeConsume(); action.   consumeExpressionUnaryOperator(IASTUnaryExpression.op_postFixIncr);            break;
            }
 
            //
            // Rule 26:  postfix_expression ::= postfix_expression --
            //
            case 26: { action.beforeConsume(); action.   consumeExpressionUnaryOperator(IASTUnaryExpression.op_postFixDecr);            break;
            }
 
            //
            // Rule 27:  postfix_expression ::= ( type_name ) { <openscope> initializer_list }
            //
            case 27: { action.beforeConsume(); action.   consumeExpressionTypeIdInitializer();            break;
            }
 
            //
            // Rule 28:  postfix_expression ::= ( type_name ) { <openscope> initializer_list , }
            //
            case 28: { action.beforeConsume(); action.   consumeExpressionTypeIdInitializer();            break;
            }
 
            //
            // Rule 29:  argument_expression_list ::= assignment_expression
            //
            case 29: { action.beforeConsume(); action.   consumeExpressionList(true);            break;
            }
 
            //
            // Rule 30:  argument_expression_list ::= argument_expression_list , assignment_expression
            //
            case 30: { action.beforeConsume(); action.   consumeExpressionList(false);           break;
            }
 
            //
            // Rule 32:  unary_expression ::= ++ unary_expression
            //
            case 32: { action.beforeConsume(); action.   consumeExpressionUnaryOperator(IASTUnaryExpression.op_prefixIncr);            break;
            }
 
            //
            // Rule 33:  unary_expression ::= -- unary_expression
            //
            case 33: { action.beforeConsume(); action.   consumeExpressionUnaryOperator(IASTUnaryExpression.op_prefixDecr);            break;
            }
 
            //
            // Rule 34:  unary_expression ::= & cast_expression
            //
            case 34: { action.beforeConsume(); action.   consumeExpressionUnaryOperator(IASTUnaryExpression.op_amper);            break;
            }
 
            //
            // Rule 35:  unary_expression ::= * cast_expression
            //
            case 35: { action.beforeConsume(); action.   consumeExpressionUnaryOperator(IASTUnaryExpression.op_star);             break;
            }
 
            //
            // Rule 36:  unary_expression ::= + cast_expression
            //
            case 36: { action.beforeConsume(); action.   consumeExpressionUnaryOperator(IASTUnaryExpression.op_plus);             break;
            }
 
            //
            // Rule 37:  unary_expression ::= - cast_expression
            //
            case 37: { action.beforeConsume(); action.   consumeExpressionUnaryOperator(IASTUnaryExpression.op_minus);            break;
            }
 
            //
            // Rule 38:  unary_expression ::= ~ cast_expression
            //
            case 38: { action.beforeConsume(); action.   consumeExpressionUnaryOperator(IASTUnaryExpression.op_tilde);            break;
            }
 
            //
            // Rule 39:  unary_expression ::= ! cast_expression
            //
            case 39: { action.beforeConsume(); action.   consumeExpressionUnaryOperator(IASTUnaryExpression.op_not);              break;
            }
 
            //
            // Rule 40:  unary_expression ::= sizeof unary_expression
            //
            case 40: { action.beforeConsume(); action.   consumeExpressionUnaryOperator(IASTUnaryExpression.op_sizeof);           break;
            }
 
            //
            // Rule 41:  unary_expression ::= sizeof ( type_name )
            //
            case 41: { action.beforeConsume(); action.   consumeExpressionUnarySizeofTypeName();            break;
            }
 
            //
            // Rule 43:  cast_expression ::= ( type_name ) cast_expression
            //
            case 43: { action.beforeConsume(); action.   consumeExpressionCast();            break;
            }
 
            //
            // Rule 45:  multiplicative_expression ::= multiplicative_expression * cast_expression
            //
            case 45: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_multiply);           break;
            }
 
            //
            // Rule 46:  multiplicative_expression ::= multiplicative_expression / cast_expression
            //
            case 46: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_divide);             break;
            }
 
            //
            // Rule 47:  multiplicative_expression ::= multiplicative_expression % cast_expression
            //
            case 47: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_modulo);             break;
            }
 
            //
            // Rule 49:  additive_expression ::= additive_expression + multiplicative_expression
            //
            case 49: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_plus);            break;
            }
 
            //
            // Rule 50:  additive_expression ::= additive_expression - multiplicative_expression
            //
            case 50: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_minus);           break;
            }
 
            //
            // Rule 52:  shift_expression ::= shift_expression << additive_expression
            //
            case 52: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_shiftLeft);             break;
            }
 
            //
            // Rule 53:  shift_expression ::= shift_expression >> additive_expression
            //
            case 53: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_shiftRight);            break;
            }
 
            //
            // Rule 55:  relational_expression ::= relational_expression < shift_expression
            //
            case 55: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_lessThan);               break;
            }
 
            //
            // Rule 56:  relational_expression ::= relational_expression > shift_expression
            //
            case 56: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_greaterThan);            break;
            }
 
            //
            // Rule 57:  relational_expression ::= relational_expression <= shift_expression
            //
            case 57: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_lessEqual);              break;
            }
 
            //
            // Rule 58:  relational_expression ::= relational_expression >= shift_expression
            //
            case 58: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_greaterEqual);           break;
            }
 
            //
            // Rule 60:  equality_expression ::= equality_expression == relational_expression
            //
            case 60: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_equals);            break;
            }
 
            //
            // Rule 61:  equality_expression ::= equality_expression != relational_expression
            //
            case 61: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_notequals);            break;
            }
 
            //
            // Rule 63:  AND_expression ::= AND_expression & equality_expression
            //
            case 63: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryAnd);            break;
            }
 
            //
            // Rule 65:  exclusive_OR_expression ::= exclusive_OR_expression ^ AND_expression
            //
            case 65: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryXor);            break;
            }
 
            //
            // Rule 67:  inclusive_OR_expression ::= inclusive_OR_expression | exclusive_OR_expression
            //
            case 67: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryOr);            break;
            }
 
            //
            // Rule 69:  logical_AND_expression ::= logical_AND_expression && inclusive_OR_expression
            //
            case 69: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_logicalAnd);            break;
            }
 
            //
            // Rule 71:  logical_OR_expression ::= logical_OR_expression || logical_AND_expression
            //
            case 71: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_logicalOr);            break;
            }
 
            //
            // Rule 73:  conditional_expression ::= logical_OR_expression ? expression : conditional_expression
            //
            case 73: { action.beforeConsume(); action.   consumeExpressionConditional();            break;
            }
 
            //
            // Rule 75:  assignment_expression ::= unary_expression = assignment_expression
            //
            case 75: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_assign);            break;
            }
 
            //
            // Rule 76:  assignment_expression ::= unary_expression *= assignment_expression
            //
            case 76: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_multiplyAssign);            break;
            }
 
            //
            // Rule 77:  assignment_expression ::= unary_expression /= assignment_expression
            //
            case 77: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_divideAssign);            break;
            }
 
            //
            // Rule 78:  assignment_expression ::= unary_expression %= assignment_expression
            //
            case 78: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_moduloAssign);            break;
            }
 
            //
            // Rule 79:  assignment_expression ::= unary_expression += assignment_expression
            //
            case 79: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_plusAssign);            break;
            }
 
            //
            // Rule 80:  assignment_expression ::= unary_expression -= assignment_expression
            //
            case 80: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_minusAssign);            break;
            }
 
            //
            // Rule 81:  assignment_expression ::= unary_expression <<= assignment_expression
            //
            case 81: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_shiftLeftAssign);            break;
            }
 
            //
            // Rule 82:  assignment_expression ::= unary_expression >>= assignment_expression
            //
            case 82: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_shiftRightAssign);            break;
            }
 
            //
            // Rule 83:  assignment_expression ::= unary_expression &= assignment_expression
            //
            case 83: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryAndAssign);            break;
            }
 
            //
            // Rule 84:  assignment_expression ::= unary_expression ^= assignment_expression
            //
            case 84: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryXorAssign);            break;
            }
 
            //
            // Rule 85:  assignment_expression ::= unary_expression |= assignment_expression
            //
            case 85: { action.beforeConsume(); action.   consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryOrAssign);            break;
            }
 
            //
            // Rule 86:  expression_in_statement ::= expression_list
            //
            case 86: { action.beforeConsume(); action.   consumeExpression();            break;
            }
 
            //
            // Rule 87:  expression ::= expression_list
            //
            case 87: { action.beforeConsume(); action.   consumeExpression();            break;
            }
 
            //
            // Rule 88:  expression_list ::= assignment_expression
            //
            case 88: { action.beforeConsume(); action.   consumeExpressionList(true);            break;
            }
 
            //
            // Rule 89:  expression_list ::= expression_list , assignment_expression
            //
            case 89: { action.beforeConsume(); action.   consumeExpressionList(false);            break;
            }
 
            //
            // Rule 97:  statement ::= ERROR_TOKEN
            //
            case 97: { action.beforeConsume(); action.   consumeStatementProblem();            break;
            }
 
            //
            // Rule 98:  labeled_statement ::= label_identifier : statement
            //
            case 98: { action.beforeConsume(); action.   consumeStatementLabeled();            break;
            }
 
            //
            // Rule 99:  labeled_statement ::= case constant_expression : statement
            //
            case 99: { action.beforeConsume(); action.   consumeStatementCase();            break;
            }
 
            //
            // Rule 100:  labeled_statement ::= default : statement
            //
            case 100: { action.beforeConsume(); action.   consumeStatementDefault();            break;
            }
 
            //
            // Rule 101:  label_identifier ::= identifier
            //
            case 101: { action.beforeConsume(); action.   consumeName();            break;
            }
 
            //
            // Rule 102:  compound_statement ::= { }
            //
            case 102: { action.beforeConsume(); action.   consumeStatementEmptyCompoundStatement();            break;
            }
 
            //
            // Rule 103:  compound_statement ::= { <openscope> block_item_list }
            //
            case 103: { action.beforeConsume(); action.   consumeStatementCompoundStatement();            break;
            }
 
            //
            // Rule 107:  block_item ::= declaration
            //
            case 107: { action.beforeConsume(); action.   consumeStatementDeclaration();            break;
            }
 
            //
            // Rule 108:  expression_statement ::= ;
            //
            case 108: { action.beforeConsume(); action.   consumeStatementNull();            break;
            }
 
            //
            // Rule 109:  expression_statement ::= expression_in_statement ;
            //
            case 109: { action.beforeConsume(); action.   consumeStatementExpression();            break;
            }
 
            //
            // Rule 110:  selection_statement ::= if ( expression ) statement
            //
            case 110: { action.beforeConsume(); action.   consumeStatementIfThen();            break;
            }
 
            //
            // Rule 111:  selection_statement ::= if ( expression ) statement else statement
            //
            case 111: { action.beforeConsume(); action.   consumeStatementIfThenElse();            break;
            }
 
            //
            // Rule 112:  selection_statement ::= switch ( expression ) statement
            //
            case 112: { action.beforeConsume(); action.   consumeStatementSwitch();            break;
            }
 
            //
            // Rule 113:  iteration_statement ::= do statement while ( expression ) ;
            //
            case 113: { action.beforeConsume(); action.   consumeStatementDoLoop();            break;
            }
 
            //
            // Rule 114:  iteration_statement ::= while ( expression ) statement
            //
            case 114: { action.beforeConsume(); action.   consumeStatementWhileLoop();            break;
            }
 
            //
            // Rule 115:  iteration_statement ::= for ( expression ; expression ; expression ) statement
            //
            case 115: { action.beforeConsume(); action.   consumeStatementForLoop(true, true, true);            break;
            }
 
            //
            // Rule 116:  iteration_statement ::= for ( expression ; expression ; ) statement
            //
            case 116: { action.beforeConsume(); action.   consumeStatementForLoop(true, true, false);            break;
            }
 
            //
            // Rule 117:  iteration_statement ::= for ( expression ; ; expression ) statement
            //
            case 117: { action.beforeConsume(); action.   consumeStatementForLoop(true, false, true);            break;
            }
 
            //
            // Rule 118:  iteration_statement ::= for ( expression ; ; ) statement
            //
            case 118: { action.beforeConsume(); action.   consumeStatementForLoop(true, false, false);            break;
            }
 
            //
            // Rule 119:  iteration_statement ::= for ( ; expression ; expression ) statement
            //
            case 119: { action.beforeConsume(); action.   consumeStatementForLoop(false, true, true);            break;
            }
 
            //
            // Rule 120:  iteration_statement ::= for ( ; expression ; ) statement
            //
            case 120: { action.beforeConsume(); action.   consumeStatementForLoop(false, true, false);            break;
            }
 
            //
            // Rule 121:  iteration_statement ::= for ( ; ; expression ) statement
            //
            case 121: { action.beforeConsume(); action.   consumeStatementForLoop(false, false, true);            break;
            }
 
            //
            // Rule 122:  iteration_statement ::= for ( ; ; ) statement
            //
            case 122: { action.beforeConsume(); action.   consumeStatementForLoop(false, false, false);            break;
            }
 
            //
            // Rule 123:  iteration_statement ::= for ( declaration expression ; expression ) statement
            //
            case 123: { action.beforeConsume(); action.   consumeStatementForLoop(true, true, true);            break;
            }
 
            //
            // Rule 124:  iteration_statement ::= for ( declaration expression ; ) statement
            //
            case 124: { action.beforeConsume(); action.   consumeStatementForLoop(true, true, false);            break;
            }
 
            //
            // Rule 125:  iteration_statement ::= for ( declaration ; expression ) statement
            //
            case 125: { action.beforeConsume(); action.   consumeStatementForLoop(true, false, true);            break;
            }
 
            //
            // Rule 126:  iteration_statement ::= for ( declaration ; ) statement
            //
            case 126: { action.beforeConsume(); action.   consumeStatementForLoop(true, false, false);            break;
            }
 
            //
            // Rule 127:  jump_statement ::= goto goto_identifier ;
            //
            case 127: { action.beforeConsume(); action.   consumeStatementGoto();            break;
            }
 
            //
            // Rule 128:  jump_statement ::= continue ;
            //
            case 128: { action.beforeConsume(); action.   consumeStatementContinue();            break;
            }
 
            //
            // Rule 129:  jump_statement ::= break ;
            //
            case 129: { action.beforeConsume(); action.   consumeStatementBreak();            break;
            }
 
            //
            // Rule 130:  jump_statement ::= return ;
            //
            case 130: { action.beforeConsume(); action.   consumeStatementReturn(false);            break;
            }
 
            //
            // Rule 131:  jump_statement ::= return expression ;
            //
            case 131: { action.beforeConsume(); action.   consumeStatementReturn(true);            break;
            }
 
            //
            // Rule 132:  goto_identifier ::= identifier
            //
            case 132: { action.beforeConsume(); action.   consumeName();            break;
            }
 
            //
            // Rule 133:  declaration ::= declaration_specifiers ;
            //
            case 133: { action.beforeConsume(); action.   consumeDeclaration(false);            break;
            }
 
            //
            // Rule 134:  declaration ::= declaration_specifiers <openscope> init_declarator_list ;
            //
            case 134: { action.beforeConsume(); action.   consumeDeclaration(true);            break;
            }
 
            //
            // Rule 135:  declaration_specifiers ::= <openscope> simple_declaration_specifiers
            //
            case 135: { action.beforeConsume(); action.   consumeDeclarationSpecifiersSimple();           break;
            }
 
            //
            // Rule 136:  declaration_specifiers ::= <openscope> struct_or_union_declaration_specifiers
            //
            case 136: { action.beforeConsume(); action.   consumeDeclarationSpecifiersStructUnionEnum();           break;
            }
 
            //
            // Rule 137:  declaration_specifiers ::= <openscope> enum_declaration_specifiers
            //
            case 137: { action.beforeConsume(); action.   consumeDeclarationSpecifiersStructUnionEnum();           break;
            }
 
            //
            // Rule 138:  declaration_specifiers ::= <openscope> typdef_name_declaration_specifiers
            //
            case 138: { action.beforeConsume(); action.   consumeDeclarationSpecifiersTypedefName();           break;
            }
 
            //
            // Rule 165:  init_declarator ::= declarator = initializer
            //
            case 165: { action.beforeConsume(); action.   consumeDeclaratorWithInitializer();            break;
            }
 
            //
            // Rule 166:  storage_class_specifier ::= typedef
            //
            case 166: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 167:  storage_class_specifier ::= extern
            //
            case 167: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 168:  storage_class_specifier ::= static
            //
            case 168: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 169:  storage_class_specifier ::= auto
            //
            case 169: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 170:  storage_class_specifier ::= register
            //
            case 170: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 171:  type_specifier ::= void
            //
            case 171: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 172:  type_specifier ::= char
            //
            case 172: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 173:  type_specifier ::= short
            //
            case 173: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 174:  type_specifier ::= int
            //
            case 174: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 175:  type_specifier ::= long
            //
            case 175: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 176:  type_specifier ::= float
            //
            case 176: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 177:  type_specifier ::= double
            //
            case 177: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 178:  type_specifier ::= signed
            //
            case 178: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 179:  type_specifier ::= unsigned
            //
            case 179: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 180:  type_specifier ::= _Bool
            //
            case 180: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 181:  type_specifier ::= _Complex
            //
            case 181: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 182:  type_specifier ::= _Imaginary
            //
            case 182: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 183:  typedef_name ::= ident
            //
            case 183: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 184:  struct_or_union_specifier ::= struct { <openscope> struct_declaration_list_opt }
            //
            case 184: { action.beforeConsume(); action.   consumeTypeSpecifierComposite(false, IASTCompositeTypeSpecifier.k_struct);            break;
            }
 
            //
            // Rule 185:  struct_or_union_specifier ::= union { <openscope> struct_declaration_list_opt }
            //
            case 185: { action.beforeConsume(); action.   consumeTypeSpecifierComposite(false, IASTCompositeTypeSpecifier.k_union);            break;
            }
 
            //
            // Rule 186:  struct_or_union_specifier ::= struct struct_or_union_identifier { <openscope> struct_declaration_list_opt }
            //
            case 186: { action.beforeConsume(); action.   consumeTypeSpecifierComposite(true, IASTCompositeTypeSpecifier.k_struct);            break;
            }
 
            //
            // Rule 187:  struct_or_union_specifier ::= union struct_or_union_identifier { <openscope> struct_declaration_list_opt }
            //
            case 187: { action.beforeConsume(); action.   consumeTypeSpecifierComposite(true, IASTCompositeTypeSpecifier.k_union);            break;
            }
 
            //
            // Rule 188:  struct_or_union_specifier ::= struct struct_or_union_identifier
            //
            case 188: { action.beforeConsume(); action.   consumeTypeSpecifierElaborated(IASTElaboratedTypeSpecifier.k_struct);            break;
            }
 
            //
            // Rule 189:  struct_or_union_specifier ::= union struct_or_union_identifier
            //
            case 189: { action.beforeConsume(); action.   consumeTypeSpecifierElaborated(IASTElaboratedTypeSpecifier.k_union);            break;
            }
 
            //
            // Rule 190:  struct_or_union_identifier ::= identifier
            //
            case 190: { action.beforeConsume(); action.   consumeName();            break;
            }
 
            //
            // Rule 195:  struct_declaration ::= specifier_qualifier_list <openscope> struct_declarator_list ;
            //
            case 195: { action.beforeConsume(); action.   consumeStructDeclaration(true);            break;
            }
 
            //
            // Rule 196:  struct_declaration ::= specifier_qualifier_list ;
            //
            case 196: { action.beforeConsume(); action.   consumeStructDeclaration(false);            break;
            }
 
            //
            // Rule 201:  struct_declarator ::= : constant_expression
            //
            case 201: { action.beforeConsume(); action.   consumeStructBitField(false);            break;
            }
 
            //
            // Rule 202:  struct_declarator ::= declarator : constant_expression
            //
            case 202: { action.beforeConsume(); action.   consumeStructBitField(true);             break;
            }
 
            //
            // Rule 203:  enum_identifier ::= identifier
            //
            case 203: { action.beforeConsume(); action.   consumeName();            break;
            }
 
            //
            // Rule 204:  enum_specifier ::= enum { <openscope> enumerator_list_opt }
            //
            case 204: { action.beforeConsume(); action.   consumeTypeSpecifierEnumeration(false);            break;
            }
 
            //
            // Rule 205:  enum_specifier ::= enum enum_identifier { <openscope> enumerator_list_opt }
            //
            case 205: { action.beforeConsume(); action.   consumeTypeSpecifierEnumeration(true);            break;
            }
 
            //
            // Rule 206:  enum_specifier ::= enum { <openscope> enumerator_list_opt , }
            //
            case 206: { action.beforeConsume(); action.   consumeTypeSpecifierEnumeration(false);            break;
            }
 
            //
            // Rule 207:  enum_specifier ::= enum enum_identifier { <openscope> enumerator_list_opt , }
            //
            case 207: { action.beforeConsume(); action.   consumeTypeSpecifierEnumeration(true);            break;
            }
 
            //
            // Rule 208:  enum_specifier ::= enum enum_identifier
            //
            case 208: { action.beforeConsume(); action.   consumeTypeSpecifierElaborated(IASTElaboratedTypeSpecifier.k_enum);            break;
            }
 
            //
            // Rule 213:  enumerator ::= enum_identifier
            //
            case 213: { action.beforeConsume(); action.   consumeEnumerator(false);            break;
            }
 
            //
            // Rule 214:  enumerator ::= enum_identifier = constant_expression
            //
            case 214: { action.beforeConsume(); action.   consumeEnumerator(true);            break;
            }
 
            //
            // Rule 215:  type_qualifier ::= const
            //
            case 215: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 216:  type_qualifier ::= restrict
            //
            case 216: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 217:  type_qualifier ::= volatile
            //
            case 217: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 218:  function_specifier ::= inline
            //
            case 218: { action.beforeConsume(); action.   consumeToken();            break;
            }
 
            //
            // Rule 220:  declarator ::= <openscope> pointer direct_declarator
            //
            case 220: { action.beforeConsume(); action.   consumeDeclaratorWithPointer(true);            break;
            }
 
            //
            // Rule 221:  direct_declarator ::= identifier
            //
            case 221: { action.beforeConsume(); action.   consumeDirectDeclaratorIdentifier();            break;
            }
 
            //
            // Rule 222:  direct_declarator ::= ( declarator )
            //
            case 222: { action.beforeConsume(); action.   consumeDirectDeclaratorBracketed();            break;
            }
 
            //
            // Rule 225:  array_direct_declarator ::= direct_declarator array_modifier
            //
            case 225: { action.beforeConsume(); action.   consumeDirectDeclaratorArrayDeclarator();            break;
            }
 
            //
            // Rule 226:  function_direct_declarator ::= direct_declarator ( <openscope> parameter_type_list )
            //
            case 226: { action.beforeConsume(); action.   consumeDirectDeclaratorFunctionDeclarator(true);            break;
            }
 
            //
            // Rule 227:  function_direct_declarator ::= direct_declarator ( )
            //
            case 227: { action.beforeConsume(); action.   consumeDirectDeclaratorFunctionDeclarator(false);            break;
            }
 
            //
            // Rule 229:  function_declarator ::= <openscope> pointer function_direct_declarator
            //
            case 229: { action.beforeConsume(); action.   consumeDeclaratorWithPointer(true);            break;
            }
 
            //
            // Rule 230:  knr_direct_declarator ::= direct_declarator ( <openscope> identifier_list )
            //
            case 230: { action.beforeConsume(); action.   consumeDirectDeclaratorFunctionDeclaratorKnR();            break;
            }
 
            //
            // Rule 232:  knr_function_declarator ::= <openscope> pointer knr_direct_declarator
            //
            case 232: { action.beforeConsume(); action.   consumeDeclaratorWithPointer(true);            break;
            }
 
            //
            // Rule 233:  array_modifier ::= [ ]
            //
            case 233: { action.beforeConsume(); action.   consumeDirectDeclaratorArrayModifier(false);            break;
            }
 
            //
            // Rule 234:  array_modifier ::= [ <openscope> type_qualifier_list ]
            //
            case 234: { action.beforeConsume(); action.   consumeDirectDeclaratorModifiedArrayModifier(false, false, true,  false);            break;
            }
 
            //
            // Rule 235:  array_modifier ::= [ assignment_expression ]
            //
            case 235: { action.beforeConsume(); action.   consumeDirectDeclaratorArrayModifier(true );            break;
            }
 
            //
            // Rule 236:  array_modifier ::= [ <openscope> type_qualifier_list assignment_expression ]
            //
            case 236: { action.beforeConsume(); action.   consumeDirectDeclaratorModifiedArrayModifier(false, false, true,  true );            break;
            }
 
            //
            // Rule 237:  array_modifier ::= [ static assignment_expression ]
            //
            case 237: { action.beforeConsume(); action.   consumeDirectDeclaratorModifiedArrayModifier(true,  false, false, true );            break;
            }
 
            //
            // Rule 238:  array_modifier ::= [ static <openscope> type_qualifier_list assignment_expression ]
            //
            case 238: { action.beforeConsume(); action.   consumeDirectDeclaratorModifiedArrayModifier(true,  false, true,  true );            break;
            }
 
            //
            // Rule 239:  array_modifier ::= [ <openscope> type_qualifier_list static assignment_expression ]
            //
            case 239: { action.beforeConsume(); action.   consumeDirectDeclaratorModifiedArrayModifier(true,  false, true,  true );            break;
            }
 
            //
            // Rule 240:  array_modifier ::= [ * ]
            //
            case 240: { action.beforeConsume(); action.   consumeDirectDeclaratorModifiedArrayModifier(false, true,  false, false);            break;
            }
 
            //
            // Rule 241:  array_modifier ::= [ <openscope> type_qualifier_list * ]
            //
            case 241: { action.beforeConsume(); action.   consumeDirectDeclaratorModifiedArrayModifier(false, true,  true,  false);            break;
            }
 
            //
            // Rule 242:  pointer ::= *
            //
            case 242: { action.beforeConsume(); action.   consumePointer();            break;
            }
 
            //
            // Rule 243:  pointer ::= pointer *
            //
            case 243: { action.beforeConsume(); action.   consumePointer();            break;
            }
 
            //
            // Rule 244:  pointer ::= * <openscope> type_qualifier_list
            //
            case 244: { action.beforeConsume(); action.   consumePointerTypeQualifierList();            break;
            }
 
            //
            // Rule 245:  pointer ::= pointer * <openscope> type_qualifier_list
            //
            case 245: { action.beforeConsume(); action.   consumePointerTypeQualifierList();            break;
            }
 
            //
            // Rule 253:  parameter_declaration ::= declaration_specifiers init_declarator
            //
            case 253: { action.beforeConsume(); action.   consumeParameterDeclaration(true);            break;
            }
 
            //
            // Rule 254:  parameter_declaration ::= declaration_specifiers
            //
            case 254: { action.beforeConsume(); action.   consumeParameterDeclaration(false);           break;
            }
 
            //
            // Rule 255:  parameter_declaration ::= declaration_specifiers abstract_declarator
            //
            case 255: { action.beforeConsume(); action.   consumeParameterDeclaration(true);            break;
            }
 
            //
            // Rule 256:  identifier_list ::= identifier
            //
            case 256: { action.beforeConsume(); action.   consumeName();            break;
            }
 
            //
            // Rule 257:  identifier_list ::= identifier_list , identifier
            //
            case 257: { action.beforeConsume(); action.   consumeName();            break;
            }
 
            //
            // Rule 258:  type_name ::= specifier_qualifier_list
            //
            case 258: { action.beforeConsume(); action.   consumeTypeId(false);            break;
            }
 
            //
            // Rule 259:  type_name ::= specifier_qualifier_list abstract_declarator
            //
            case 259: { action.beforeConsume(); action.   consumeTypeId(true);            break;
            }
 
            //
            // Rule 260:  abstract_declarator ::= <openscope> pointer
            //
            case 260: { action.beforeConsume(); action.   consumeDeclaratorWithPointer(false);            break;
            }
 
            //
            // Rule 262:  abstract_declarator ::= <openscope> pointer direct_abstract_declarator
            //
            case 262: { action.beforeConsume(); action.   consumeDeclaratorWithPointer(true);             break;
            }
 
            //
            // Rule 263:  direct_abstract_declarator ::= ( abstract_declarator )
            //
            case 263: { action.beforeConsume(); action.   consumeDirectDeclaratorBracketed();            break;
            }
 
            //
            // Rule 264:  direct_abstract_declarator ::= array_modifier
            //
            case 264: { action.beforeConsume(); action.   consumeAbstractDeclaratorArrayModifier(false);            break;
            }
 
            //
            // Rule 265:  direct_abstract_declarator ::= direct_abstract_declarator array_modifier
            //
            case 265: { action.beforeConsume(); action.   consumeAbstractDeclaratorArrayModifier(true);             break;
            }
 
            //
            // Rule 266:  direct_abstract_declarator ::= ( )
            //
            case 266: { action.beforeConsume(); action.   consumeAbstractDeclaratorFunctionDeclarator(false, false);           break;
            }
 
            //
            // Rule 267:  direct_abstract_declarator ::= direct_abstract_declarator ( )
            //
            case 267: { action.beforeConsume(); action.   consumeAbstractDeclaratorFunctionDeclarator(true, false);            break;
            }
 
            //
            // Rule 268:  direct_abstract_declarator ::= ( <openscope> parameter_type_list )
            //
            case 268: { action.beforeConsume(); action.   consumeAbstractDeclaratorFunctionDeclarator(false, true);            break;
            }
 
            //
            // Rule 269:  direct_abstract_declarator ::= direct_abstract_declarator ( <openscope> parameter_type_list )
            //
            case 269: { action.beforeConsume(); action.   consumeAbstractDeclaratorFunctionDeclarator(true, true);             break;
            }
 
            //
            // Rule 270:  initializer ::= assignment_expression
            //
            case 270: { action.beforeConsume(); action.   consumeInitializer();            break;
            }
 
            //
            // Rule 271:  initializer ::= { <openscope> initializer_list }
            //
            case 271: { action.beforeConsume(); action.   consumeInitializerList();            break;
            }
 
            //
            // Rule 272:  initializer ::= { <openscope> initializer_list , }
            //
            case 272: { action.beforeConsume(); action.   consumeInitializerList();            break;
            }
 
            //
            // Rule 277:  designated_initializer ::= <openscope> designation initializer
            //
            case 277: { action.beforeConsume(); action.   consumeInitializerDesignated();            break;
            }
 
            //
            // Rule 281:  designator ::= [ constant_expression ]
            //
            case 281: { action.beforeConsume(); action.   consumeDesignatorArrayDesignator();            break;
            }
 
            //
            // Rule 282:  designator ::= . identifier
            //
            case 282: { action.beforeConsume(); action.   consumeDesignatorFieldDesignator();            break;
            }
 
            //
            // Rule 283:  translation_unit ::= external_declaration_list
            //
            case 283: { action.beforeConsume(); action.   consumeTranslationUnit();            break;
            }
 
            //
            // Rule 284:  translation_unit ::= $Empty
            //
            case 284: { action.beforeConsume(); action.   consumeTranslationUnit();            break;
            }
 
            //
            // Rule 289:  external_declaration ::= ;
            //
            case 289: { action.beforeConsume(); action.   consumeDeclarationEmpty();           break;
            }
 
            //
            // Rule 290:  external_declaration ::= ERROR_TOKEN
            //
            case 290: { action.beforeConsume(); action.   consumeDeclarationProblem();            break;
            }
 
            //
            // Rule 291:  function_definition ::= declaration_specifiers <openscope> function_declarator compound_statement
            //
            case 291: { action.beforeConsume(); action.   consumeFunctionDefinition();            break;
            }
 
            //
            // Rule 292:  function_definition ::= declaration_specifiers <openscope> knr_function_declarator <openscope> declaration_list compound_statement
            //
            case 292: { action.beforeConsume(); action.   consumeFunctionDefinitionKnR();            break;
            }

    
            default:
                break;
        }
        return;
    }
}

