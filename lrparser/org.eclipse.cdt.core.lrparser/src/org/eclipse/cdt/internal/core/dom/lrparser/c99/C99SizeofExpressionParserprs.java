/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99SizeofExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, C99SizeofExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            4,1,4,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,5,9,8,
            3,2,2,2,3,2,4,2,2,2,
            2,2,1,1,1,1,2,1,2,2,
            2,1,2,2,1,2,2,1,2,2,
            1,2,2,1,3,1,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,6,8,0,0,1,1,3,3,3,
            0,1,0,1,2,4,2,1,1,1,
            3,1,1,2,3,7,8,0,1,0,
            1,3,1,3,1,1,1,1,1,1,
            3,1,1,1,1,1,3,1,2,2,
            1,5,3,1,3,5,1,3,1,3,
            2,4,3,5,4,6,6,3,5,1,
            2,3,4,5,0,1,2,1,3,1,
            1,3,2,1,1,1,1,2,1,2,
            3,1,1,1,3,1,2,2,2,3,
            4,5,1,7,3,0,0,1,1,3,
            3,4,1,1,2,3,2,3,2,1,
            0,1,2,1,1,1,1,1,2,4,
            3,6,2,4,1,1,-37,0,0,0,
            0,0,0,0,0,0,-30,0,0,0,
            0,0,0,0,0,0,-82,0,0,-2,
            -4,-76,-14,0,0,0,0,-124,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-16,
            0,-5,0,0,0,0,0,0,0,0,
            0,0,-114,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-130,0,-141,-17,
            0,-80,0,-18,-19,0,0,-47,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -188,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -161,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -31,-20,-202,-56,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -48,0,0,0,0,0,0,0,0,0,
            0,-21,0,0,0,0,0,-22,-160,0,
            -38,0,0,0,0,0,0,0,-83,0,
            -74,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-184,0,0,0,0,0,
            0,0,0,0,-34,0,0,0,0,0,
            0,0,0,0,-3,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-85,-23,-52,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-71,0,-111,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-118,0,-133,-129,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-24,0,0,0,0,-27,0,0,
            0,0,0,0,0,0,0,-25,0,0,
            0,0,0,0,0,0,0,0,0,-26,
            0,-12,0,0,0,0,0,0,0,0,
            0,0,-39,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-57,0,0,0,
            0,0,0,0,0,0,-35,0,0,0,
            0,0,0,0,0,0,-58,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-59,0,0,0,
            0,0,0,0,0,0,-68,0,0,0,
            0,0,0,0,0,0,-60,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-61,0,0,0,
            0,0,0,0,0,0,-69,0,0,0,
            0,0,0,0,0,0,-62,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-63,0,0,0,
            0,0,0,0,0,0,-70,0,0,0,
            0,0,0,0,0,0,-64,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-65,0,0,0,
            0,0,0,0,0,0,-115,0,0,0,
            0,0,0,0,0,0,-66,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-67,0,0,0,
            0,0,0,0,0,0,-131,0,0,0,
            0,0,0,0,0,0,-146,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-147,0,0,0,
            0,0,0,0,0,0,-155,0,0,0,
            0,0,0,0,0,0,-164,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-187,0,0,0,0,
            0,0,0,0,0,-77,0,0,0,0,
            0,0,0,0,-6,0,0,0,0,0,
            0,-88,-89,0,-7,0,0,0,0,0,
            0,0,-195,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-203,0,0,0,0,0,0,0,0,
            0,-90,0,0,0,0,0,0,0,0,
            -8,0,0,0,0,0,0,-108,-91,0,
            -9,0,0,0,0,0,0,0,-211,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-123,0,0,
            0,0,0,0,0,0,0,-132,0,0,
            0,0,0,0,0,0,-33,0,-10,0,
            0,0,0,0,0,0,0,-54,-92,-126,
            -116,-119,-93,0,-166,-94,-112,0,-150,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-95,-177,0,0,0,-113,0,-196,
            -87,-96,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -73,0,0,-151,0,0,0,0,0,0,
            0,0,-55,0,0,0,0,0,0,0,
            0,0,-175,0,0,0,0,0,0,0,
            -127,0,0,0,0,-13,0,0,0,0,
            0,0,0,0,0,0,-97,0,0,0,
            -98,0,0,0,-192,-99,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-53,
            0,0,0,0,0,0,0,0,0,-145,
            0,0,0,-100,-101,-210,0,-137,0,0,
            0,0,0,0,0,0,-169,0,-102,-103,
            0,0,0,-49,0,0,0,0,0,0,
            0,0,0,-140,0,0,0,0,0,0,
            0,0,0,0,0,0,-11,0,0,0,
            0,0,0,0,-120,0,0,0,-149,0,
            0,0,0,0,0,0,-50,0,0,0,
            0,0,0,0,0,0,-128,0,-104,0,
            -105,0,-106,-107,0,-110,-125,0,0,-51,
            0,0,0,0,0,0,0,0,0,0,
            0,-43,0,0,0,0,0,0,0,0,
            0,-44,0,0,0,0,0,0,0,0,
            0,-45,0,0,0,0,0,0,0,0,
            0,-46,0,0,0,0,0,0,0,0,
            0,-205,-75,-78,-40,0,0,0,0,0,
            0,0,0,-41,0,0,0,0,0,0,
            -148,-134,0,-136,0,0,-138,-212,0,-189,
            0,0,0,0,-117,0,0,0,0,0,
            0,0,-36,0,0,0,0,0,0,0,
            0,0,0,-109,0,0,-181,0,0,-173,
            0,0,0,0,0,0,0,0,0,0,
            -15,-42,0,0,0,0,0,0,-143,0,
            0,-174,-28,0,0,0,0,0,0,-153,
            0,0,0,-121,0,-29,0,0,0,0,
            0,0,-172,0,-79,0,0,0,0,0,
            -122,0,0,0,0,0,0,-178,0,0,
            0,-199,0,0,0,0,0,0,0,-81,
            0,0,0,0,0,0,0,0,0,-84,
            -193,0,0,-72,0,0,0,0,0,0,
            0,0,-86,-157,-190,0,0,0,0,0,
            0,0,-135,0,0,-191,0,0,0,0,
            -165,-159,0,0,0,0,-180,0,0,0,
            0,0,0,-1,-179,-156,0,0,-32,0,
            -154,0,-206,0,0,0,0,-163,0,-213,
            0,0,-162,-139,0,-142,-168,0,0,0,
            -152,0,0,0,0,0,0,0,-182,0,
            0,0,0,0,0,-144,0,0,0,-198,
            -170,-171,0,0,0,0,0,-183,-158,0,
            0,0,-167,-185,0,0,0,0,0,-176,
            -186,0,0,0,0,0,0,-194,-197,0,
            0,0,0,-200,-201,-207,0,-208,-204,0,
            0,-209,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            87,10,23,23,20,20,32,32,70,70,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,51,51,71,
            71,5,5,5,5,5,5,5,5,5,
            5,5,6,6,7,7,7,7,8,8,
            8,9,9,9,11,11,11,11,11,12,
            12,12,13,13,14,14,15,15,16,16,
            17,17,18,18,19,19,19,19,19,19,
            19,19,19,19,19,19,101,41,33,88,
            88,73,73,47,102,102,102,102,102,102,
            102,103,103,103,104,104,109,109,110,110,
            105,105,106,106,106,112,112,107,107,107,
            107,108,108,108,108,108,111,111,24,24,
            24,24,24,27,27,27,79,79,74,74,
            74,74,75,75,75,76,76,76,77,77,
            77,78,78,78,113,113,114,114,115,28,
            30,30,30,30,30,52,54,54,54,54,
            54,54,54,54,54,54,54,54,64,64,
            25,25,61,61,89,90,65,65,62,62,
            62,66,80,80,81,81,67,67,67,42,
            91,91,82,83,83,83,63,63,92,84,
            84,85,85,68,68,21,22,22,22,29,
            48,48,34,34,34,34,37,37,39,35,
            35,36,40,40,116,116,38,117,117,93,
            93,26,26,26,26,26,26,26,26,26,
            86,49,49,49,49,31,56,56,55,55,
            55,57,57,50,50,94,94,60,60,58,
            58,58,43,43,43,44,45,45,45,46,
            46,46,46,53,53,53,59,95,72,72,
            72,72,69,96,97,97,98,98,99,99,
            118,118,119,119,120,120,120,120,122,122,
            121,121,121,123,123,87,87,1,14,19,
            15,343,670,44,400,370,405,201,404,492,
            462,577,498,658,643,74,91,387,134,215,
            31,14,144,743,136,133,135,159,434,14,
            19,15,343,670,44,400,370,405,399,404,
            492,462,577,498,658,643,74,283,277,138,
            57,165,530,14,19,15,343,40,142,145,
            148,151,402,358,14,19,15,343,42,35,
            341,1404,1505,1530,1540,1553,1161,744,23,312,
            157,288,191,1122,6,30,248,1479,506,14,
            19,15,343,42,44,400,1162,289,257,215,
            1294,482,14,19,15,343,670,44,400,370,
            405,399,404,492,462,577,498,658,643,74,
            283,332,14,19,15,343,670,44,400,370,
            405,399,404,492,462,577,498,658,643,74,
            283,201,605,421,506,14,19,15,343,42,
            44,400,370,405,288,404,492,462,577,1341,
            1479,506,14,19,15,343,42,44,400,1227,
            289,615,200,1630,290,1603,1571,294,684,323,
            1479,506,14,19,15,343,42,44,1042,414,
            291,275,14,19,15,343,670,44,400,370,
            405,1158,404,492,462,577,498,658,643,74,
            1127,26,22,196,241,458,14,19,15,343,
            670,44,400,370,405,489,404,492,462,577,
            498,658,643,74,283,506,14,19,15,343,
            670,44,400,370,405,1544,404,492,462,577,
            498,658,643,74,91,1315,439,344,506,14,
            19,15,343,42,44,400,370,405,292,404,
            492,462,1265,104,1479,578,14,19,15,343,
            670,44,400,370,405,1211,404,492,462,577,
            498,658,643,74,1337,326,20,189,299,14,
            19,15,343,670,44,400,370,405,341,404,
            492,462,577,498,658,643,74,1421,134,215,
            1424,242,1511,237,136,133,135,159,506,14,
            19,15,343,670,44,400,370,405,713,404,
            492,462,577,498,658,643,74,92,1494,138,
            595,165,554,14,19,15,343,33,142,145,
            148,151,402,506,14,19,15,343,42,44,
            1059,1404,1505,1530,1540,1553,1161,506,14,19,
            15,343,670,44,400,370,405,489,404,492,
            462,577,498,658,643,74,85,506,14,19,
            15,343,670,44,400,370,405,16,404,492,
            462,577,498,658,643,74,84,506,14,19,
            15,343,670,44,400,370,405,489,404,492,
            462,577,498,658,643,74,83,506,14,19,
            15,343,670,44,400,370,405,1343,404,492,
            462,577,498,658,643,74,82,506,14,19,
            15,343,670,44,400,370,405,489,404,492,
            462,577,498,658,643,74,81,506,14,19,
            15,343,670,44,400,370,405,1344,404,492,
            462,577,498,658,643,74,80,506,14,19,
            15,343,670,44,400,370,405,489,404,492,
            462,577,498,658,643,74,79,506,14,19,
            15,343,670,44,400,370,405,21,404,492,
            462,577,498,658,643,74,78,506,14,19,
            15,343,670,44,400,370,405,489,404,492,
            462,577,498,658,643,74,77,506,14,19,
            15,343,670,44,400,370,405,275,404,492,
            462,577,498,658,643,74,76,506,14,19,
            15,343,670,44,400,370,405,489,404,492,
            462,577,498,658,643,74,75,506,14,19,
            15,343,670,44,400,370,405,281,404,492,
            462,577,498,658,643,74,1631,506,14,19,
            15,343,670,44,400,370,405,489,404,492,
            462,577,498,658,643,74,1632,506,14,19,
            15,343,42,44,400,370,405,282,404,492,
            462,577,498,658,643,93,506,14,19,15,
            343,42,44,400,370,405,243,404,492,462,
            577,498,658,643,93,506,14,19,15,343,
            42,39,602,632,1644,506,14,19,15,343,
            42,38,278,506,14,19,15,343,42,44,
            400,370,405,1659,404,492,462,577,498,658,
            643,93,506,14,19,15,343,42,44,400,
            370,405,194,404,492,462,577,498,658,643,
            93,506,14,19,15,343,42,37,118,199,
            214,506,14,19,15,343,42,36,348,506,
            14,19,15,343,42,44,400,370,405,204,
            404,492,462,577,498,658,643,93,506,14,
            19,15,343,42,44,400,370,405,113,404,
            492,462,577,498,658,643,73,118,1490,506,
            14,19,15,343,42,35,205,555,118,416,
            645,307,583,465,276,323,488,104,555,207,
            1260,617,220,1184,223,1611,225,226,231,1460,
            87,269,986,342,274,1098,265,189,593,279,
            243,87,1346,490,323,276,266,285,52,1280,
            583,189,241,220,1184,223,1611,225,226,231,
            1454,261,269,986,342,274,907,1503,1422,256,
            215,124,134,215,511,1619,182,867,137,133,
            135,159,263,506,14,19,15,343,42,44,
            400,370,405,151,404,492,462,577,498,1339,
            230,52,1346,139,397,165,554,14,19,15,
            343,32,143,146,149,152,402,654,212,276,
            1454,499,256,215,1347,281,13,221,1184,223,
            1611,225,226,231,618,1593,271,986,342,274,
            506,14,19,15,343,42,44,400,370,405,
            52,404,492,1279,50,622,281,397,118,220,
            1184,223,1611,225,226,231,1593,756,1554,624,
            330,256,215,1669,506,14,19,15,343,42,
            44,400,370,405,746,404,1231,917,257,215,
            220,1184,223,1611,225,226,231,506,14,19,
            15,343,42,34,1669,583,1277,200,202,358,
            14,19,15,343,42,35,463,506,14,19,
            15,343,42,44,400,370,405,104,1236,723,
            188,690,249,97,158,499,562,728,201,202,
            506,14,19,15,343,42,44,400,370,405,
            245,1264,506,14,19,15,343,42,44,400,
            370,1119,506,14,19,15,343,42,44,400,
            370,1123,506,14,19,15,343,42,44,400,
            370,1126,506,14,19,15,343,42,44,400,
            370,1153,693,613,232,506,14,19,15,343,
            42,47,1593,1121,506,14,19,15,343,42,
            46,104,646,279,331,134,215,205,710,276,
            765,141,133,135,159,514,220,1184,223,1611,
            225,226,231,160,244,1563,269,986,342,274,
            1503,257,215,1181,242,280,140,747,165,1347,
            307,867,221,1184,223,1611,225,226,231,276,
            617,118,506,14,19,15,343,42,45,590,
            276,317,514,118,1098,1347,269,986,342,274,
            124,1346,1555,317,620,199,118,271,986,342,
            274,268,233,489,87,675,317,199,1658,1203,
            261,583,707,1443,1586,907,87,1422,612,1427,
            199,1346,489,227,707,1443,134,215,1235,87,
            680,545,144,133,135,159,190,707,1443,1203,
            709,747,232,747,409,14,19,15,343,42,
            43,134,215,714,48,718,787,147,133,135,
            159,134,215,116,617,617,142,150,133,135,
            159,559,647,617,134,215,617,647,199,1098,
            153,133,135,159,382,95,766,1098,197,441,
            199,357,1666,124,555,617,1518,1619,583,555,
            338,617,1619,729,118,261,118,52,1518,199,
            1522,677,1422,261,1572,1098,1125,87,947,730,
            1422,194,89,297,1346,315,753,1518,256,215,
            746,104,104,194,1154,1585,1607,229,768,118,
            211,262,1428,118,104,211,1665,1585,1664,1577,
            118,583,195,421,246,247,1457,1638,323,104,
            1566,1541,1638,1430,365,323,323,296,323,749,
            295,340,287,1715,1715,1715,299,827,1715,1715,
            1715,1668,298,1715,236,1715,1715,1715,1715,1715,
            206,1715,1715,1715,1715,284,1715,183,207,1715,
            1600,1715,0,17,179,0,18,178,0,1,
            1943,0,1,1954,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,0,0,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,0,
            0,31,32,33,34,35,36,37,38,39,
            40,41,42,30,44,45,46,0,1,0,
            3,0,5,6,7,8,0,6,7,8,
            55,56,57,58,17,9,10,55,56,57,
            58,24,25,26,27,28,47,48,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,0,1,0,3,51,5,
            6,7,8,0,55,56,57,58,5,13,
            80,17,0,1,2,0,4,0,24,25,
            26,27,28,0,12,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,0,1,0,3,51,5,6,7,8,
            0,1,2,50,4,12,0,0,17,0,
            4,2,12,4,49,24,25,26,27,28,
            13,12,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,0,1,
            0,3,51,0,6,7,8,4,0,0,
            0,1,4,3,0,17,0,1,2,53,
            54,5,24,25,26,27,28,13,12,31,
            32,33,34,35,36,37,38,39,40,41,
            42,0,44,45,46,29,0,6,7,8,
            0,0,0,2,2,4,53,54,17,9,
            10,53,54,12,12,24,25,26,27,28,
            61,62,31,32,33,34,35,36,37,38,
            39,40,41,42,0,1,2,3,4,5,
            0,1,2,9,10,11,0,1,14,15,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,5,68,69,0,9,10,11,
            4,0,14,15,16,17,18,19,20,21,
            22,23,0,12,50,0,1,5,3,0,
            0,0,1,2,3,4,5,0,13,59,
            9,10,11,0,13,14,15,16,50,18,
            19,20,21,22,23,49,0,0,1,2,
            3,4,5,52,0,43,9,10,11,5,
            0,14,15,16,43,18,19,20,21,22,
            23,0,1,2,3,4,0,1,59,3,
            9,10,11,29,30,14,15,16,0,18,
            19,20,21,22,23,49,63,50,0,1,
            2,3,4,0,1,0,3,9,10,11,
            0,13,14,15,16,5,18,19,20,21,
            22,23,51,0,1,2,3,4,0,1,
            0,3,9,10,11,5,13,14,15,16,
            30,18,19,20,21,22,23,0,1,2,
            3,4,47,48,0,0,9,10,11,29,
            13,14,15,16,0,18,19,20,21,22,
            23,0,1,2,3,4,66,0,0,0,
            9,10,11,5,13,14,15,16,0,18,
            19,20,21,22,23,0,1,2,3,4,
            0,47,48,0,9,10,11,29,5,14,
            15,16,12,18,19,20,21,22,23,0,
            1,2,3,4,47,48,47,48,9,10,
            11,0,29,14,15,16,5,18,19,20,
            21,22,23,0,1,2,3,4,0,61,
            62,0,9,10,11,4,0,14,15,16,
            12,18,19,20,21,22,23,0,1,2,
            3,4,0,1,43,3,9,10,11,0,
            0,14,15,16,0,18,19,20,21,22,
            23,0,13,2,0,4,5,6,7,8,
            52,0,0,12,2,11,5,5,17,0,
            1,0,3,0,12,24,25,26,27,28,
            29,0,13,2,11,4,5,6,7,8,
            0,29,0,12,0,0,0,1,17,3,
            6,7,8,0,60,24,25,26,27,28,
            29,0,9,10,70,71,72,73,74,75,
            76,77,78,79,0,30,0,66,2,0,
            6,7,8,0,63,6,7,8,12,0,
            0,17,0,1,2,0,17,0,24,25,
            26,27,28,24,25,26,27,28,0,0,
            1,2,0,0,6,7,8,0,1,6,
            7,8,0,0,1,17,3,0,0,0,
            17,4,24,25,26,27,28,24,25,26,
            27,28,0,0,2,0,0,64,0,6,
            7,8,0,64,12,0,14,15,6,7,
            8,6,7,8,0,0,49,0,0,0,
            6,7,8,0,0,30,30,65,13,0,
            0,13,13,0,0,0,13,65,60,60,
            0,0,0,0,52,0,0,30,0,0,
            0,0,0,0,0,0,0,59,0,67,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1715,1002,1471,1003,1109,59,1931,1932,1933,1061,
            1051,1307,61,88,1216,672,372,1877,1725,1726,
            1727,1728,1005,995,1878,1876,1934,1879,1875,54,
            1715,1882,1887,1886,1884,1885,1883,1888,1889,1881,
            1890,1891,1892,648,576,509,337,1715,1,60,
            1,1715,193,1,1,1,51,1931,1932,1933,
            1392,1382,1372,1362,1,683,501,1392,1382,1372,
            1362,1,1,1,1,1,408,481,1,1,
            1,1,1,1,1,1,1,1,1,1,
            193,1,1,1,1715,1,41,1,1913,192,
            1,1,1,1715,1392,1382,1372,1362,1718,1058,
            1702,1,264,1943,1129,1,1,1,1,1,
            1,1,1,255,511,1,1,1,1,1,
            1,1,1,1,1,1,1,192,1,1,
            1,1715,1,273,1,1913,193,1,1,1,
            270,1943,1129,1717,255,511,48,1715,1,267,
            1472,1403,511,1,1975,1,1,1,1,1,
            1058,511,1,1,1,1,1,1,1,1,
            1,1,1,1,193,1,1,1,1715,1894,
            184,1893,1913,50,1931,1932,1933,1472,49,62,
            1715,1744,1472,1745,1715,1877,1,1709,1129,1414,
            1405,1720,1878,1876,1934,1879,1875,1639,511,1882,
            1887,1886,1884,1885,1883,1888,1889,1881,1890,1891,
            1892,128,576,509,337,1719,72,1931,1932,1933,
            53,270,272,1403,1435,255,1414,1405,1877,683,
            501,1414,1405,511,511,1878,1876,1934,1879,1875,
            1350,1327,1882,1887,1886,1884,1885,1883,1888,1889,
            1881,1890,1891,1892,1,1732,1471,1733,383,1718,
            1,1943,1402,1061,1051,1307,1715,1955,1216,672,
            372,595,1725,1726,1727,1728,1005,995,1715,1732,
            1471,1733,1319,1718,1193,1118,1,1061,1051,1307,
            255,1715,1216,672,372,937,1725,1726,1727,1728,
            1005,995,1715,957,1717,1715,1895,1722,1896,1715,
            185,1,1732,1471,1733,1109,27,287,1268,1032,
            1061,1051,1307,66,2573,1216,672,372,1717,1725,
            1726,1727,1728,1005,995,1975,1,1715,1732,1471,
            1733,1109,1718,1598,1715,1721,1061,1051,1307,1720,
            1715,1216,672,372,27,1725,1726,1727,1728,1005,
            995,1715,1,1,1,1,187,2800,1088,2800,
            1,1,1,1719,1672,1,1,1,1715,1,
            1,1,1,1,1,1974,1250,1717,1715,1732,
            1471,1733,1109,186,2801,58,2801,1061,1051,1307,
            1715,1058,1216,672,372,1724,1725,1726,1727,1728,
            1005,995,2031,1,1732,1471,1733,1109,208,2805,
            1,2805,1061,1051,1307,90,2573,1216,672,372,
            1266,1725,1726,1727,1728,1005,995,1715,1732,1471,
            1733,1109,408,481,57,1715,1061,1051,1307,90,
            2573,1216,672,372,1715,1725,1726,1727,1728,1005,
            995,1,1732,1471,1733,1109,1723,56,1715,55,
            1061,1051,1307,1720,2573,1216,672,372,63,1725,
            1726,1727,1728,1005,995,1715,1732,1471,1733,1109,
            222,408,481,1,1061,1051,1307,1719,1720,1216,
            672,372,511,1725,1726,1727,1728,1005,995,1715,
            1732,1483,1733,1109,408,481,408,481,1061,1051,
            1307,286,1719,1216,672,372,1606,1725,1726,1727,
            1728,1005,995,1715,1732,1496,1733,1109,293,1350,
            1327,1715,1061,1051,1307,1120,1715,1216,672,372,
            976,1725,1726,1727,1728,1005,995,1,1732,1471,
            1733,1109,1715,1895,1606,1896,1061,1051,1307,1715,
            1715,1216,672,372,42,1725,1726,1727,1728,1005,
            995,17,1643,1703,64,1703,1703,179,179,179,
            1651,1,1,1703,1403,1284,1724,1720,179,1715,
            1895,67,1896,65,511,179,179,179,179,179,
            1703,18,1604,1706,1284,1706,1706,178,178,178,
            1715,1719,1715,1706,251,258,210,1895,178,1896,
            1,1,1,52,897,178,178,178,178,178,
            1706,1715,683,501,877,857,837,817,797,757,
            777,737,717,697,129,1591,224,1723,1482,130,
            1931,1932,1933,68,1250,1931,1932,1933,511,69,
            1715,1877,1,1943,1402,1715,1877,1715,1878,1876,
            1934,1879,1875,1878,1876,1934,1879,1875,131,255,
            1943,1402,70,132,1931,1932,1933,1,1712,1931,
            1932,1933,71,209,1160,1877,1160,1715,1715,213,
            1877,1626,1878,1876,1934,1879,1875,1878,1876,1934,
            1879,1875,31,250,1589,28,28,578,203,1931,
            1932,1933,252,578,1107,253,1739,1740,1,1,
            1,1931,1932,1933,254,1715,1975,209,191,191,
            1931,1932,1933,191,1715,441,1742,464,1650,1715,
            1715,187,186,1715,1715,1715,208,464,535,1013,
            1715,1715,1715,1715,461,1715,1715,2755,1715,1715,
            1715,1715,1715,1715,1715,1715,1715,1069,1715,327
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            377,1,76,41,76,76,76,76,76,76,
            76,76,76,3,325,236,233,240,238,246,
            244,248,247,250,249,10,76,325,325,291,
            291,395,76,159,159,319,325,76,76,76,
            76,76,76,76,76,76,76,76,76,76,
            76,76,76,76,76,76,76,76,76,76,
            76,76,76,76,76,76,76,159,159,159,
            45,52,323,70,261,157,156,294,306,66,
            306,66,66,306,66,306,339,113,113,233,
            233,238,238,238,238,236,236,244,240,240,
            247,246,426,249,248,221,68,50,319,323,
            93,45,362,74,159,162,264,66,291,291,
            66,291,76,50,323,314,362,45,73,70,
            159,317,339,158,266,68,191,68,414,416,
            374,218,68,314,362,76,76,45,74,261,
            421,420,323,266,159,68,191,414,414,218,
            48,431,291,76,373,218,50,362,314,45,
            45,159,162,264,317,191,218,366,191,414,
            416,428,416,52,45,291,76,50,314,266,
            191,368,416,218,76,291,45,416,159,158,
            218,257,76,256,89,323,218,218,292,368,
            76,89,416
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,66,12,2,52,67,14,15,11,
            4,9,10,53,54,47,48,55,56,57,
            58,61,62,63,64,65,68,69,43,60,
            70,71,72,73,74,76,75,77,78,79,
            59,29,80,30,50,5,0,5,43,12,
            52,14,15,11,4,9,10,22,23,16,
            2,18,19,20,21,1,3,13,0,6,
            7,8,17,50,5,18,19,20,21,3,
            14,15,11,9,10,22,23,16,4,2,
            1,0,6,7,8,2,18,19,20,21,
            1,3,14,15,11,4,9,10,22,23,
            16,0,7,17,28,8,27,26,25,6,
            24,52,67,14,15,11,9,10,53,54,
            47,48,55,56,57,58,61,62,63,64,
            65,68,69,60,70,71,72,73,74,75,
            76,77,78,79,4,2,12,30,29,5,
            0,4,24,31,6,32,44,25,33,26,
            34,35,27,7,36,37,17,45,28,46,
            38,39,8,40,41,42,1,3,49,0,
            24,31,6,32,44,25,33,26,34,35,
            27,7,36,37,17,45,28,46,38,39,
            8,40,41,42,1,3,51,5,43,0,
            60,70,71,72,73,74,75,76,77,78,
            79,13,4,53,54,9,10,48,47,55,
            56,57,58,61,62,11,63,64,65,50,
            29,43,80,68,69,59,66,5,30,0,
            4,2,12,29,5,24,31,6,32,44,
            25,33,26,34,35,27,7,36,37,17,
            45,28,46,38,39,8,40,41,42,49,
            3,1,0,39,31,36,34,35,33,32,
            37,38,40,41,42,59,66,28,25,17,
            24,27,26,6,7,8,30,1,5,29,
            2,12,4,0,16,18,19,20,21,2,
            14,15,11,4,9,10,22,23,3,1,
            44,45,46,39,31,36,34,35,33,32,
            37,38,40,41,42,28,25,17,24,27,
            26,6,7,8,0,66,5,4,1,2,
            59,0,60,12,52,0,16,18,19,20,
            21,1,3,2,14,15,11,4,9,10,
            22,23,51,0,5,29,16,18,19,20,
            21,1,3,2,14,15,11,4,9,10,
            22,23,0,1,3,5,43,30,0,2,
            5,30,29,66,12,59,0,5,30,43,
            60,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            103,9,23,9,23,23,23,23,23,23,
            23,23,23,9,86,9,9,9,9,9,
            9,9,9,9,9,9,23,86,86,10,
            10,110,87,80,80,73,1,23,23,23,
            23,23,23,23,23,23,23,23,23,23,
            23,23,23,87,23,23,23,23,23,23,
            23,23,23,23,23,23,23,80,80,80,
            29,23,61,27,72,12,12,58,59,18,
            59,32,32,59,31,59,53,9,9,9,
            9,9,9,9,9,9,9,9,9,9,
            9,9,9,9,9,9,9,49,82,9,
            34,29,51,28,80,39,79,37,37,37,
            37,37,23,21,9,49,51,29,28,14,
            80,45,2,9,41,77,49,9,49,70,
            16,49,9,49,51,23,23,29,28,44,
            12,12,61,41,80,9,93,49,37,25,
            20,9,37,23,101,25,49,51,14,29,
            29,80,39,79,64,49,25,90,106,37,
            70,9,9,22,29,37,23,21,14,97,
            93,47,70,25,23,37,29,70,80,80,
            25,91,23,9,47,61,25,25,9,47,
            23,66,113
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,79,78,77,76,65,75,74,0,71,
            0,26,0,21,0,97,0,89,0,69,
            10,59,4,0,32,0,10,4,23,0,
            92,66,0,4,10,0,25,0,31,49,
            10,24,0,20,45,44,37,35,10,0,
            56,0,65,61,62,63,64,52,27,0,
            31,49,0,45,44,37,35,31,0,51,
            0,20,44,45,10,0,90,0,10,20,
            0,45,44,31,0,42,10,41,0,10,
            70,0,81,10,42,0,93,10,24,0,
            99,0,10,87,0,10,42,67,0,10,
            88,0,95,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,10,11,
            8,1,3,6,7,68,69,81,82,83,
            84,12,13,44,55,60,63,72,90,42,
            47,52,56,61,62,66,67,74,75,78,
            79,80,91,54,70,73,16,17,30,89,
            93,4,14,15,18,19,20,21,29,31,
            22,23,24,25,26,92,5,27,28,32,
            33,34,35,36,37,38,39,40,41,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,101,105,106,107,108,109,0,
            110,111,112,113,114,115,116,117,118,97,
            129,0,96,122,121,150,128,0,0,0,
            0,98,0,146,148,0,149,0,0,0,
            100,141,159,160,161,0,120,137,147,156,
            0,131,136,0,151,154,155,158,0,103,
            132,133,134,135,138,0,140,145,162,99,
            102,104,119,123,124,125,126,127,130,0,
            139,143,0,0,144,153,95,0,0,0,
            142,0,152,157,0,163,164,0,165,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            82,113,162,92,35,41,121,12,136,21,
            51,69,28,47,103,158,177,181,145,1,
            1,32,56,79,185,6,107,152,127,152,
            99,59,59,59
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            90,90,90,90,4,4,90,18,142,26,
            4,26,26,4,101,26,26,4,149,4,
            4,26,4,26,26,9,110,155,130,170,
            101,66,61,74
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            63,61,4,63,26,26,61,53,106,46,
            26,40,46,26,67,5,4,4,18,99,
            98,44,26,37,2,69,67,6,107,4,
            67,40,38,40
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            43,43,43,43,50,50,43,43,86,29,
            50,29,29,50,66,29,29,50,59,50,
            50,29,50,29,29,60,1,29,92,29,
            66,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            17,17,32,17,21,21,17,87,-1,25,
            21,9,25,21,3,32,32,32,62,1,
            7,25,21,9,32,88,3,35,-1,32,
            3,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            140,12,0,96,0,189,103,0,31,136,
            0,144,165,103,13,152,0,98,0,0,
            148,103,2,137,0,97,0,148,103,2,
            0,151,2,0,112,17,179,103,12,0,
            112,179,103,17,12,0,112,17,12,0,
            112,179,103,12,0,112,12,0,130,0,
            2,0,152,97,0,2,97,0,148,103,
            2,130,0,2,0,151,97,0,141,2,
            0,144,177,103,13,118,185,44,0,98,
            0,144,177,103,13,185,44,0,135,0,
            99,0,184,103,135,0,103,135,0,142,
            99,0,173,103,13,183,118,182,158,0,
            173,103,13,182,158,0,195,85,0,77,
            2,100,97,99,0,195,113,134,2,89,
            0,53,0,0,134,69,110,0,29,117,
            0,153,2,0,97,106,0,153,2,16,
            0,144,165,103,13,113,153,2,0,97,
            3,0,104,0,98,0,181,2,97,0,
            134,12,97,0,134,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1571,0,1566,1585,1554,0,399,0,1428,1266,
            1402,1235,1203,1129,1098,0,617,1161,317,0,
            1611,1184,986,342,1203,1129,1098,1454,1403,1443,
            0,1216,672,372,1319,383,1544,464,1193,1250,
            578,1350,1327,1284,481,408,1392,1382,1372,1362,
            1472,1414,1405,683,501,1307,1109,1061,1051,1005,
            995,1069,1032,1013,976,957,937,917,618,1088,
            595,511,897,877,857,837,817,797,777,757,
            737,717,697,317,648,555,535,421,441,348,
            0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,180,103,166,16,23,22,10,9,4,
            11,15,14,97,2,101,100,104,102,106,
            105,108,107,110,109,98,30,2,2,67,
            52,2,12,153,134,135,103,10,9,54,
            53,4,58,57,56,55,47,48,11,62,
            61,64,63,69,68,65,79,78,77,75,
            76,74,73,72,71,70,60,153,153,181,
            134,113,103,12,2,138,137,167,168,158,
            169,46,45,170,44,171,172,1,3,100,
            100,102,102,102,102,101,101,105,104,104,
            107,106,134,109,108,113,113,13,142,124,
            17,112,103,4,151,103,2,182,159,159,
            185,159,59,103,124,4,103,112,179,149,
            148,117,103,150,103,118,13,118,13,165,
            103,13,152,4,103,179,17,112,4,2,
            128,130,103,30,148,183,103,13,103,144,
            30,189,52,12,190,103,13,103,149,112,
            112,141,103,2,142,13,173,135,174,103,
            177,118,178,60,140,52,12,103,149,103,
            103,103,177,144,60,30,140,165,148,186,
            173,184,59,141,2,103,144,144,30,30,
            59,142,125
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_sizeof_type_name_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_token",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 51,
           SCOPE_UBOUND      = 33,
           SCOPE_SIZE        = 34,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 213,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2031,
           MAX_LA            = 2,
           NUM_RULES         = 316,
           NUM_NONTERMINALS  = 123,
           NUM_SYMBOLS       = 216,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1584,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1702,
           ERROR_ACTION      = 1715;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
