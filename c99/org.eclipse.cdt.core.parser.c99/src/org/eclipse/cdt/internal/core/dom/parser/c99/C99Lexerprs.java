/*******************************************************************************
* Copyright (c) 2006, 2007 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*******************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.c99;

public class C99Lexerprs implements lpg.lpgjavaruntime.ParseTable, C99Lexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2,2,2,1,1,1,1,1,
            1,1,1,2,2,1,1,2,2,2,
            2,1,1,2,2,1,1,1,3,1,
            2,2,2,2,2,3,3,2,2,2,
            1,1,2,2,2,2,2,2,4,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2,
            2,2,5,1,2,3,2,2,2,1,
            1,1,2,2,1,1,3,4,4,1,
            2,1,2,1,2,2,2,1,2,2,
            1,2,1,2,1,1,1,1,2,2,
            1,1,1,2,3,2,2,3,3,4,
            3,4,1,2,2,2,3,3,2,3,
            2,1,1,2,2,3,3,2,3,2,
            1,2,1,1,1,1,3,4,1,2,
            1,1,1,1,1,1,2,2,2,2,
            2,2,2,2,2,2,2,2,3,2,
            3,3,4,1,2,1,1
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,32,32,32,32,32,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,24,24,1,1,1,1,1,1,
            1,1,1,1,38,38,38,38,38,38,
            38,38,3,3,3,3,3,3,3,3,
            3,3,3,3,3,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,39,
            39,39,39,39,39,13,13,13,13,13,
            13,13,13,13,13,14,14,14,14,14,
            14,14,14,14,14,11,11,11,11,40,
            40,40,40,40,40,40,15,15,15,15,
            15,15,15,15,15,32,32,32,32,41,
            41,42,42,43,25,25,44,44,44,44,
            44,44,33,33,33,26,26,6,6,20,
            34,34,34,34,45,46,47,47,27,27,
            27,27,27,27,27,16,16,22,22,23,
            23,35,35,48,48,48,48,48,48,49,
            49,49,49,5,5,50,50,50,28,28,
            28,28,17,17,51,51,51,29,29,29,
            29,21,21,12,12,12,12,36,36,30,
            30,18,18,7,7,7,7,8,8,8,
            8,8,8,8,8,8,8,8,9,10,
            37,37,37,37,31,31,19,19,295,636,
            112,1561,274,331,236,1287,587,175,176,646,
            177,1245,306,326,303,304,305,1438,132,327,
            291,1299,235,1394,232,324,1347,249,250,434,
            341,509,2,3,4,5,1553,429,610,421,
            499,218,1572,531,507,405,261,262,524,1163,
            185,186,254,187,265,306,301,303,304,305,
            1788,318,1352,302,875,175,176,299,177,1581,
            306,326,303,304,305,1365,132,327,291,443,
            1163,185,186,324,187,252,306,301,303,304,
            305,1758,1603,454,302,458,563,454,299,683,
            175,176,220,177,1766,306,326,303,304,305,
            472,1379,327,779,185,186,268,187,325,306,
            301,303,304,305,1614,274,441,302,971,175,
            176,300,177,1771,306,326,303,304,305,1422,
            463,327,1067,185,186,270,187,325,306,301,
            303,304,305,1,206,207,302,208,1654,274,
            300,99,206,207,209,208,1665,274,491,491,
            199,200,209,169,1676,274,228,1452,517,1259,
            234,112,1794,1777,1754,236,540,393,206,207,
            1459,208,1797,335,1404,272,1798,491,209,399,
            366,1755,229,235,243,233,266,1795,202,222,
            197,206,207,1458,208,1590,488,335,1687,274,
            488,209,372,399,366,226,1590,496,241,1698,
            274,496,604,1332,132,1782,292,1438,132,1761,
            614,1438,132,607,614,1516,1590,638,1590,640,
            1403,638,1757,640,1801,1477,132,596,291,1632,
            504,237,513,618,504,620,1438,132,1802,614,
            1438,132,1385,319,1643,548,626,1643,559,548,
            1505,132,559,292,1438,132,238,630,1643,642,
            1643,644,1270,642,1346,644,1533,132,1803,292,
            1438,132,1353,634,1438,132,1753,239,1709,274,
            1720,274,1731,274,1742,274,1759,649,649
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,78,79,80,81,
            82,83,84,85,86,87,88,89,90,91,
            92,93,94,95,96,97,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,97,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,0,
            96,97,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,0,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,78,79,80,81,
            82,83,84,85,86,87,88,89,90,91,
            92,93,94,95,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,0,83,84,85,86,87,
            88,89,90,91,92,93,94,95,0,1,
            2,3,4,5,6,7,8,9,10,0,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,0,0,30,31,
            32,0,34,35,36,37,38,28,0,41,
            14,15,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,0,1,2,3,4,5,6,7,8,
            9,10,98,12,13,0,0,16,17,18,
            19,0,0,22,23,24,25,26,27,28,
            15,30,11,32,0,1,2,3,4,5,
            6,7,8,9,10,29,12,13,0,81,
            16,17,18,19,0,33,22,23,24,25,
            26,27,28,0,1,2,3,4,5,6,
            7,8,0,0,0,12,0,0,30,0,
            32,18,19,20,21,12,13,14,15,16,
            17,0,20,21,31,0,42,34,35,36,
            37,0,11,0,41,0,43,0,1,2,
            3,4,5,6,7,8,9,10,0,12,
            13,0,0,16,17,18,19,0,0,22,
            23,24,25,26,27,14,15,0,11,11,
            0,20,21,80,0,82,0,1,2,3,
            4,5,6,7,8,9,10,29,12,13,
            0,33,16,17,18,19,39,0,22,23,
            24,25,26,27,0,1,2,3,4,5,
            6,7,8,9,10,0,12,13,0,0,
            16,17,18,19,0,0,22,23,24,25,
            26,27,0,1,2,3,4,5,6,7,
            8,9,10,0,12,13,31,0,16,17,
            18,19,0,38,22,23,24,25,26,27,
            0,1,2,3,4,5,6,7,8,9,
            10,0,20,21,0,0,16,17,0,0,
            0,0,0,12,13,14,15,0,28,0,
            1,2,3,4,5,6,7,8,9,10,
            20,21,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,0,0,0,39,40,
            28,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,0,0,0,0,0,0,0,
            0,0,0,0,11,0,14,15,14,15,
            0,11,20,21,20,21,0,12,13,14,
            15,0,12,13,14,15,33,0,12,13,
            14,15,11,0,0,42,0,0,11,43,
            0,0,0,0,11,11,0,11,11,0,
            29,11,11,0,0,0,14,0,0,0,
            0,40,29,0,0,0,0,0,0,76,
            73,74,75,0,0,0,0,77,82,0,
            0,0,0,83,0,0,0,0,0,0,
            98,0,0,96,0,0,98,0,0,0,
            0,0,0,0,0,0,79,0,0,0,
            0,0,78,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            649,763,764,765,766,767,768,769,770,771,
            772,807,714,740,720,746,713,739,709,710,
            729,755,711,712,735,736,737,738,803,808,
            724,732,750,804,722,726,728,730,758,800,
            802,862,796,861,715,716,717,718,719,721,
            723,725,727,731,733,734,741,742,743,744,
            745,747,748,749,751,752,753,754,756,757,
            759,760,813,844,846,847,806,517,797,815,
            809,795,860,491,798,799,810,811,814,816,
            817,794,812,805,801,859,845,863,649,763,
            764,765,766,767,768,769,770,771,772,807,
            714,740,720,746,713,739,709,710,729,755,
            711,712,735,736,737,738,803,808,724,732,
            750,804,722,726,728,730,758,800,802,862,
            796,861,715,716,717,718,719,721,723,725,
            727,731,733,734,741,742,743,744,745,747,
            748,749,751,752,753,754,756,757,759,760,
            813,844,846,847,806,540,797,815,809,795,
            860,876,798,799,810,811,814,816,817,794,
            812,805,801,859,845,863,649,763,764,765,
            766,767,768,769,770,771,772,807,714,740,
            720,746,713,739,709,710,729,755,711,712,
            735,736,737,738,803,808,724,732,750,804,
            722,726,728,730,758,800,802,862,796,861,
            715,716,717,718,719,721,723,725,727,731,
            733,734,741,742,743,744,745,747,748,749,
            751,752,753,754,756,757,759,760,813,844,
            846,847,806,874,797,815,809,795,860,872,
            798,799,810,811,814,816,817,794,812,805,
            801,859,845,863,649,575,764,765,766,767,
            768,769,770,771,772,469,714,740,720,582,
            713,739,709,710,729,755,711,712,735,736,
            737,738,422,512,724,732,750,356,722,726,
            728,730,758,543,565,580,520,336,715,716,
            717,718,719,721,723,725,727,731,733,734,
            741,742,743,744,745,747,748,749,751,752,
            753,754,756,757,759,760,762,844,846,847,
            514,526,537,390,685,351,379,569,657,658,
            655,656,659,660,669,522,392,687,700,649,
            845,864,649,763,764,765,766,767,768,769,
            770,771,772,807,714,740,720,746,713,739,
            709,710,729,755,711,712,735,736,737,738,
            803,808,724,732,750,804,722,726,728,730,
            758,800,802,862,796,861,715,716,717,718,
            719,721,723,725,727,731,733,734,741,742,
            743,744,745,747,748,749,751,752,753,754,
            756,757,759,760,813,844,846,847,806,874,
            797,815,809,795,860,649,798,799,810,811,
            814,816,817,794,812,805,801,859,845,863,
            217,763,764,765,766,767,768,769,770,771,
            772,807,714,740,720,746,713,739,709,710,
            729,755,711,712,735,736,737,738,803,808,
            724,732,750,804,722,726,728,730,758,800,
            802,821,796,820,715,716,717,718,719,721,
            723,725,727,731,733,734,741,742,743,744,
            745,747,748,749,751,752,753,754,756,757,
            759,760,813,854,852,853,806,823,797,815,
            809,795,819,822,798,799,810,811,814,816,
            817,794,812,805,801,850,649,763,764,765,
            766,767,768,769,770,771,772,807,714,740,
            720,746,713,739,709,710,729,755,711,712,
            735,736,737,738,803,808,724,732,750,804,
            722,726,728,730,758,800,802,353,796,969,
            715,716,717,718,719,721,723,725,727,731,
            733,734,741,742,743,744,745,747,748,749,
            751,752,753,754,756,757,759,760,813,833,
            831,832,806,830,797,815,809,795,828,829,
            798,799,810,811,814,816,817,794,812,805,
            801,827,649,763,764,765,766,767,768,769,
            770,771,772,807,714,740,720,746,713,739,
            709,710,729,755,711,712,735,736,737,738,
            803,808,724,732,750,804,722,726,728,730,
            758,800,802,353,796,970,715,716,717,718,
            719,721,723,725,727,731,733,734,741,742,
            743,744,745,747,748,749,751,752,753,754,
            756,757,759,760,813,833,831,832,806,830,
            797,815,809,795,828,829,798,799,810,811,
            814,816,817,794,812,805,801,827,649,763,
            764,765,766,767,768,769,770,771,772,807,
            714,740,720,746,713,739,709,710,729,755,
            711,712,735,736,737,738,803,808,724,732,
            750,804,722,726,728,730,758,800,802,353,
            796,838,715,716,717,718,719,721,723,725,
            727,731,733,734,741,742,743,744,745,747,
            748,749,751,752,753,754,756,757,759,760,
            813,843,841,842,806,840,797,815,809,795,
            946,839,798,799,810,811,814,816,817,794,
            812,805,801,837,649,763,764,765,766,767,
            768,769,770,771,772,807,714,740,720,746,
            713,739,709,710,729,755,711,712,735,736,
            737,738,803,808,724,732,750,804,722,726,
            728,730,758,800,802,353,796,971,715,716,
            717,718,719,721,723,725,727,731,733,734,
            741,742,743,744,745,747,748,749,751,752,
            753,754,756,757,759,760,813,833,831,832,
            806,830,797,815,809,795,828,829,798,799,
            810,811,814,816,817,794,812,805,801,827,
            649,763,764,765,766,767,768,769,770,771,
            772,807,714,740,720,746,713,739,709,710,
            729,755,711,712,735,736,737,738,803,808,
            724,732,750,804,722,726,728,730,758,800,
            802,353,796,972,715,716,717,718,719,721,
            723,725,727,731,733,734,741,742,743,744,
            745,747,748,749,751,752,753,754,756,757,
            759,760,813,833,831,832,806,830,797,815,
            809,795,828,829,798,799,810,811,814,816,
            817,794,812,805,801,827,649,763,764,765,
            766,767,768,769,770,771,772,807,714,740,
            720,746,713,739,709,710,729,755,711,712,
            735,736,737,738,803,808,724,732,750,804,
            722,726,728,730,758,800,802,353,796,838,
            715,716,717,718,719,721,723,725,727,731,
            733,734,741,742,743,744,745,747,748,749,
            751,752,753,754,756,757,759,760,813,843,
            841,842,806,840,797,815,809,795,947,839,
            798,799,810,811,814,816,817,794,812,805,
            801,837,649,763,764,765,766,767,768,769,
            770,771,772,807,714,740,720,746,713,739,
            709,710,729,755,711,712,735,736,737,738,
            803,808,724,732,750,804,722,726,728,730,
            758,800,802,353,796,838,715,716,717,718,
            719,721,723,725,727,731,733,734,741,742,
            743,744,745,747,748,749,751,752,753,754,
            756,757,759,760,813,843,841,842,806,840,
            797,815,809,795,649,839,798,799,810,811,
            814,816,817,794,812,805,801,837,1,763,
            764,765,766,767,768,769,770,771,772,649,
            714,740,720,746,713,739,709,710,729,755,
            711,712,735,736,737,738,248,649,724,732,
            750,649,722,726,728,730,758,688,52,580,
            628,624,715,716,717,718,719,721,723,725,
            727,731,733,734,741,742,743,744,745,747,
            748,749,751,752,753,754,756,757,759,760,
            762,245,763,764,765,766,767,768,769,770,
            771,772,648,787,793,258,37,786,792,782,
            783,32,649,784,785,788,789,790,791,585,
            909,578,698,576,649,763,764,765,766,767,
            768,769,770,771,772,704,787,793,649,702,
            786,792,782,783,58,708,784,785,788,789,
            790,791,347,649,773,774,775,776,777,778,
            779,780,649,263,649,962,649,649,578,649,
            576,960,961,571,567,942,944,943,945,556,
            545,40,571,567,600,649,632,963,964,965,
            966,649,679,649,959,649,957,649,763,764,
            765,766,767,768,769,770,771,772,649,787,
            793,242,649,786,792,782,783,18,23,784,
            785,788,789,790,791,628,624,649,693,692,
            649,904,905,958,649,956,285,763,764,765,
            766,767,768,769,770,771,772,706,787,793,
            649,602,786,792,782,783,663,649,784,785,
            788,789,790,791,284,763,764,765,766,767,
            768,769,770,771,772,114,787,793,649,649,
            786,792,782,783,649,649,784,785,788,789,
            790,791,286,763,764,765,766,767,768,769,
            770,771,772,649,787,793,895,649,786,792,
            782,783,253,896,784,785,788,789,790,791,
            244,763,764,765,766,767,768,769,770,771,
            772,264,904,905,649,649,556,545,649,649,
            251,649,649,942,944,943,945,649,589,649,
            763,764,765,766,767,768,769,770,771,772,
            904,905,12,763,764,765,766,767,768,769,
            770,771,772,275,763,764,765,766,767,768,
            769,770,771,772,649,649,649,649,931,932,
            622,276,763,764,765,766,767,768,769,770,
            771,772,649,763,764,765,766,767,768,769,
            770,771,772,281,763,764,765,766,767,768,
            769,770,771,772,279,763,764,765,766,767,
            768,769,770,771,772,277,763,764,765,766,
            767,768,769,770,771,772,280,763,764,765,
            766,767,768,769,770,771,772,278,763,764,
            765,766,767,768,769,770,771,772,290,763,
            764,765,766,767,768,769,770,771,772,288,
            763,764,765,766,767,768,769,770,771,772,
            289,763,764,765,766,767,768,769,770,771,
            772,287,763,764,765,766,767,768,769,770,
            771,772,273,26,240,649,97,216,219,649,
            22,649,649,649,677,267,244,244,628,624,
            269,691,244,244,904,905,271,942,944,943,
            945,19,942,944,943,945,703,33,942,944,
            943,945,694,27,16,705,21,17,699,394,
            25,24,257,649,678,697,649,680,690,649,
            662,696,695,649,649,649,908,649,649,649,
            649,664,584,649,649,649,649,649,649,598,
            844,846,847,649,649,649,649,483,410,649,
            649,649,649,870,649,649,649,649,649,649,
            244,649,649,845,649,649,216,649,649,649,
            649,649,649,649,649,649,684,649,649,649,
            649,649,683
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 89,
           NT_OFFSET         = 98,
           LA_STATE_OFFSET   = 976,
           MAX_LA            = 1,
           NUM_RULES         = 327,
           NUM_NONTERMINALS  = 52,
           NUM_SYMBOLS       = 150,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 328,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 98,
           EOLT_SYMBOL       = 65,
           ACCEPT_ACTION     = 648,
           ERROR_ACTION      = 649;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
