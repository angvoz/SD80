-----------------------------------------------------------------------------------
-- Copyright (c) 2006, 2007 IBM Corporation and others.
-- All rights reserved. This program and the accompanying materials
-- are made available under the terms of the Eclipse Public License v1.0
-- which accompanies this distribution, and is available at
-- http://www.eclipse.org/legal/epl-v10.html
--
-- Contributors:
--     IBM Corporation - initial API and implementation
-----------------------------------------------------------------------------------

%options la=2
%options package=org.eclipse.cdt.internal.core.dom.lrparser.c99
%options template=TrialUndoParserTemplate.g
%options import_terminals=C99Lexer.g

-----------------------------------------------------------------------------------
--
-- An attempt was made to create a C99 parser that has the ability to do all the
-- binding resolution during the parse. This parser was meant to be used with
-- the C99ResolveParserAction class. 
--
-- This initiative has since been abandoned and therefore this parser does
-- not work correctly, use C99Parser.g instead.
--
-- This parser is deprecated.
--
-----------------------------------------------------------------------------------

$Notice
/./*******************************************************************************
 * Copyright (c) 2006, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *********************************************************************************/
 
 // This file was generated by LPG
./
$End

$Terminals
	
	-- Most terminals are defined in the lexer and imported from there.
	-- This section lists terminals that are not defined in the lexer such as keywords.
	
	
	-- The scanner does not recognize keywords, it will return them as identifier tokens.
	-- An IKeywordMap is used to convert these identifiers to keyword tokens.
	
	auto      break     case      char  
	const     continue  default   do       
	double    else      enum      extern 
	float     for       goto      if        
	inline    int       long      register 
	restrict  return    short     signed     
	sizeof    static    struct    switch
	typedef   union     unsigned  void 
	volatile  while
	_Bool     _Complex  _Imaginary
	
	
    -- Special token used to represent an identifier that has been declared as a typedef name.
    -- This is the lexer feedback hack.

	TypedefName

	
    -- These are aliases for lexer tokens.


	LeftBracket      ::= '['
	LeftParen        ::= '('
	LeftBrace        ::= '{'
	Dot              ::= '.'
	Arrow            ::= '->'
	PlusPlus         ::= '++'
	MinusMinus       ::= '--'
	And              ::= '&'
	Star             ::= '*'
	Plus             ::= '+'
	Minus            ::= '-'
	Tilde            ::= '~'
	Bang             ::= '!'
	Slash            ::= '/'
	Percent          ::= '%'
	RightShift       ::= '>>'
	LeftShift        ::= '<<'
	LT               ::= '<'
	GT               ::= '>'
	LE               ::= '<='
	GE               ::= '>='
	EQ               ::= '=='
	NE               ::= '!='
	Caret            ::= '^'
	Or               ::= '|'
	AndAnd           ::= '&&'
	OrOr             ::= '||'
	Question         ::= '?'
	Colon            ::= ':'
	DotDotDot        ::= '...'
	Assign           ::= '='
	StarAssign       ::= '*='
	SlashAssign      ::= '/='
	PercentAssign    ::= '%='
	PlusAssign       ::= '+='
	MinusAssign      ::= '-='
	RightShiftAssign ::= '>>='
	LeftShiftAssign  ::= '<<='
	AndAssign        ::= '&='
	CaretAssign      ::= '^='
	OrAssign         ::= '|='
	Comma            ::= ','


$End


$Globals
/.	
	import java.util.*;
	
	import org.eclipse.cdt.core.dom.ast.*;
	import org.eclipse.cdt.core.dom.lrparser.IKeywordMap;
	import org.eclipse.cdt.core.dom.lrparser.IParseResult;
	import org.eclipse.cdt.core.dom.lrparser.IParser;
	import org.eclipse.cdt.core.dom.lrparser.IParserActionTokenProvider;
	import org.eclipse.cdt.core.dom.lrparser.action.c99.C99BuildASTParserAction;
	import org.eclipse.cdt.core.dom.lrparser.action.c99.C99ResolveParserAction;
	import org.eclipse.cdt.core.dom.lrparser.c99.C99KeywordMap;
	import org.eclipse.cdt.core.dom.lrparser.c99.C99ParseResult;
	import org.eclipse.cdt.core.dom.lrparser.preprocessor.IPreprocessorTokenCollector;
	import org.eclipse.cdt.internal.core.dom.lrparser.c99.bindings.IC99Scope;
	import org.eclipse.cdt.core.dom.lrparser.util.DebugUtil;
./
$End

$Define
	-- These macros allow the template and header code to be customized by an extending parser.
	$ast_class /.Object./
	$additional_interfaces /. , IPreprocessorTokenCollector<IToken> ./
	
	$build_action_class /. C99BuildASTParserAction ./
	$resolve_action_class /. C99ResolveParserAction ./
	
	$keyword_map_class /. C99KeywordMap ./
	$lexer_class /. C99Lexer ./
	$action_class /. C99ParserAction ./
	$data_class /. Object ./ -- allow anything to be passed between actions
	
	$UndoResolver /.$Undo action.resolver.undo(); $EndUndo./
	
	$Resolve /. $BeginTrial 
	./
	$EndResolve /. $EndTrial 
		$UndoResolver
	./ -- undo actions are automatically generated for binding resolution actions
	
	$Builder /. $BeginFinal  
	./
	$EndBuilder /. /*$builder.getASTStack().print();*/ $EndFinal ./
	
	$resolve /. action.resolver./
	$builder /. action.builder./

    $setBinding /. provider.getActiveRule().setData./
    $getBinding /. (IBinding)provider.getActiveRule().getData./
    
    $setScope /. provider.getActiveRule().setData./
    $getScope /. (IC99Scope)provider.getActiveRule().getData./

$End


$Headers
/.
	private C99ParserAction action;
	
	private List commentTokens = new ArrayList();
	private IKeywordMap keywordMap = new $keyword_map_class();
	
	public $action_type() {  // constructor
		this(new $lexer_class());
	}
	
	private void initActions() {
	    // binding resolution actions need access to IASTName nodes, temporary
	    action = new C99ParserAction();
		action.resolver = new $resolve_action_class(this);
		action.builder  = new $build_action_class(this);
		action.builder.setTokenMap(C99Parsersym.orderedTerminalSymbols);
		parserAction = action;
	}
	
	public void addToken(IToken token) {
		int newKind = mapKind(token.getKind());
		if(keywordMap != null && newKind == $prs_type.TK_identifier) {
			Integer keywordKind = keywordMap.getKeywordKind(token.toString());
			if(keywordKind != null) {
				newKind = keywordKind.intValue();
			}
		}
		token.setKind(newKind);
		super.addToken(token);
	}
	
	public void addCommentToken(IToken token) {
		commentTokens.add(token);
	}
	
	public List getCommentTokens() {
		return commentTokens;
	}
	
	public IParseResult parse() {
		// this has to be done, or... kaboom!
		setStreamLength(getSize());
		initActions();
		commentTokens = new ArrayList();
		
		final int errorRepairCount = -1;  // -1 means full error handling
		parser(null, errorRepairCount);
		super.resetTokenStream();
	
		IASTTranslationUnit tu      = action.builder.getAST();
		boolean encounteredError    = action.builder.encounteredError();
		IASTCompletionNode compNode = action.builder.getASTCompletionNode();
	
		boolean assertionsEnabled = false;
		assert assertionsEnabled = true;
		if(assertionsEnabled) {
			DebugUtil.assertBindings(tu);
		}
	
		action = null;
		parserAction = null;
		return new C99ParseResult(tu, compNode, encounteredError);
	}
	
	// implements IParserActionTokenProvider.getEOFToken()
	public IToken getEOFToken() {
		List tokens = getTokens();
		IToken eof = (IToken) tokens.get(tokens.size() - 1);
		return eof;
	}
	
	public int getKind(int i) {
		int kind = super.getKind(i);
		if(kind == C99Parsersym.TK_identifier && action.resolver.isTypedef(getTokenText(i))) {
			kind = C99Parsersym.TK_TypedefName;
		}
		return kind;
	}
	
./
$End


$Start  -- the grammar start symbol
	translation_unit
$End



$Rules

-------------------------------------------------------------------------------------------
-- AST  and Symbol Table Scoping
-------------------------------------------------------------------------------------------


<openscope-ast> 
    ::= $empty
          /.$Action $Builder  $builder.openASTScope();  $EndBuilder $EndAction./ 
  
<openscope-symbol> 
    ::= $empty
          /.$Action $Resolve  $resolve.openSymbolScope();  $EndResolve $EndAction./ 

<openscope-declaration> 
    ::= $empty
          /.$Action $Resolve  $resolve.openDeclarationScope();  $EndResolve $EndAction./ 
           
<openscope-name> ::= $empty

-------------------------------------------------------------------------------------------
-- Content assist
-------------------------------------------------------------------------------------------

']' ::=? 'RightBracket'
--       | 'EndOfCompletion'
      
')' ::=? 'RightParen'
--       | 'EndOfCompletion'
      
'}' ::=? 'RightBrace'
--      | 'EndOfCompletion'
      
';' ::=? 'SemiColon'
--       | 'EndOfCompletion'



-------------------------------------------------------------------------------------------
-- Expressions
-------------------------------------------------------------------------------------------


constant
    ::= 'integer'                    
          /.
            $Action
          	  $Resolve  $resolve.consumeExpressionConstant(IASTLiteralExpression.lk_integer_constant);  $EndResolve
          	  $Builder  $builder.consumeExpressionConstant(IASTLiteralExpression.lk_integer_constant);  $EndBuilder
            $EndAction
          ./
      | 'floating'
          /.
            $Action
          	  $Resolve  $resolve.consumeExpressionConstant(IASTLiteralExpression.lk_float_constant);  $EndResolve
          	  $Builder  $builder.consumeExpressionConstant(IASTLiteralExpression.lk_float_constant);  $EndBuilder
            $EndAction
          ./
      | 'charconst'                  
          /.
            $Action
          	  $Resolve  $resolve.consumeExpressionConstant(IASTLiteralExpression.lk_char_constant);  $EndResolve
          	  $Builder  $builder.consumeExpressionConstant(IASTLiteralExpression.lk_char_constant);  $EndBuilder
            $EndAction
          ./
      | 'stringlit'
          /.
            $Action
          	  $Resolve  $resolve.consumeExpressionConstant(IASTLiteralExpression.lk_string_literal);  $EndResolve
          	  $Builder  $builder.consumeExpressionConstant(IASTLiteralExpression.lk_string_literal);  $EndBuilder
            $EndAction
          ./


primary_expression 
    ::= constant 
      | primary_expression_id
          /.
            $Action
            	$Resolve  $setBinding($resolve.consumeExpressionID());  $EndResolve
            	$Builder  $builder.consumeExpressionID($getBinding());  $EndBuilder
            $EndAction
          ./
      | '(' expression ')'         
          /.
            $Action 
              $Builder  $builder.consumeExpressionBracketed();  $EndBuilder
            $EndAction
          ./


primary_expression_id   -- Typedefname not allowed as a variable name.
    ::= 'identifier'
      | 'Completion'


<openscope-type>
    ::= $empty
          /. $Action $Resolve  $resolve.openTypeScope();  $EndResolve $EndAction ./
          
          
postfix_expression
    ::= primary_expression
      | postfix_expression '[' expression ']'
          /.
            $Action
          	  $Resolve  $resolve.consumeExpressionArraySubscript();  $EndResolve
          	  $Builder  $builder.consumeExpressionArraySubscript();  $EndBuilder
            $EndAction
          ./
      | postfix_expression '(' ')'
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionFunctionCall(false);  $EndResolve
          	  $Builder  $builder.consumeExpressionFunctionCall(false);  $EndBuilder
            $EndAction
          ./
      | postfix_expression '(' <openscope-type> <openscope-ast> argument_expression_list ')'
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionFunctionCall(true);  $EndResolve
          	  $Builder  $builder.consumeExpressionFunctionCall(true);  $EndBuilder
            $EndAction
          ./
      | postfix_expression '.'  member_name
          /.
            $Action
              $Resolve $setBinding($resolve.consumeExpressionFieldReference(false));         $EndResolve
              $Builder $builder.consumeExpressionFieldReference($getBinding(), false);  $EndBuilder
            $EndAction
          ./
      | postfix_expression '->' member_name
          /.
          	$Action
              $Resolve $setBinding($resolve.consumeExpressionFieldReference(true));        $EndResolve
              $Builder $builder.consumeExpressionFieldReference($getBinding(), true);  $EndBuilder
            $EndAction
          ./
      | postfix_expression '++'
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionUnaryOperator(IASTUnaryExpression.op_postFixIncr);  $EndResolve
          	  $Builder  $builder.consumeExpressionUnaryOperator(IASTUnaryExpression.op_postFixIncr);  $EndBuilder
            $EndAction
          ./
      | postfix_expression '--'
          /.
            $Action
          	  $Resolve  $resolve.consumeExpressionUnaryOperator(IASTUnaryExpression.op_postFixDecr);  $EndResolve
          	  $Builder  $builder.consumeExpressionUnaryOperator(IASTUnaryExpression.op_postFixDecr);  $EndBuilder
            $EndAction
          ./
      | '(' type_name ')' '{' <openscope-type> <openscope-ast> initializer_list comma_opt '}'
          /.
            $Action
          	  $Resolve  $resolve.consumeExpressionTypeIdInitializer();  $EndResolve
          	  $Builder  $builder.consumeExpressionTypeIdInitializer();  $EndBuilder
            $EndAction
          ./
 
 
comma_opt
    ::= ',' | $empty


member_name
    ::= 'identifier'
      | 'TypedefName'
      | 'Completion'


argument_expression_list
    ::= assignment_expression
      | argument_expression_list ',' assignment_expression


unary_expression
    ::= postfix_expression
      | '++' unary_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionUnaryOperator(IASTUnaryExpression.op_prefixIncr);  $EndResolve
          	  $Builder  $builder.consumeExpressionUnaryOperator(IASTUnaryExpression.op_prefixIncr);  $EndBuilder
            $EndAction
          ./
      | '--' unary_expression
          /.
            $Action
          	  $Resolve  $resolve.consumeExpressionUnaryOperator(IASTUnaryExpression.op_prefixDecr);  $EndResolve
          	  $Builder  $builder.consumeExpressionUnaryOperator(IASTUnaryExpression.op_prefixDecr);  $EndBuilder
            $EndAction
          ./
      | '&' cast_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionUnaryOperator(IASTUnaryExpression.op_amper);  $EndResolve
          	  $Builder  $builder.consumeExpressionUnaryOperator(IASTUnaryExpression.op_amper);  $EndBuilder
            $EndAction
          ./
      | '*' cast_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionUnaryOperator(IASTUnaryExpression.op_star);  $EndResolve
          	  $Builder  $builder.consumeExpressionUnaryOperator(IASTUnaryExpression.op_star);  $EndBuilder
            $EndAction
          ./
      | '+' cast_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionUnaryOperator(IASTUnaryExpression.op_plus);  $EndResolve
          	  $Builder  $builder.consumeExpressionUnaryOperator(IASTUnaryExpression.op_plus);  $EndBuilder
            $EndAction
          ./
      | '-' cast_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionUnaryOperator(IASTUnaryExpression.op_minus);  $EndResolve
          	  $Builder  $builder.consumeExpressionUnaryOperator(IASTUnaryExpression.op_minus);  $EndBuilder
            $EndAction
          ./
      | '~' cast_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionUnaryOperator(IASTUnaryExpression.op_tilde);  $EndResolve
          	  $Builder  $builder.consumeExpressionUnaryOperator(IASTUnaryExpression.op_tilde);  $EndBuilder
            $EndAction
          ./
      | '!' cast_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionUnaryOperator(IASTUnaryExpression.op_not);  $EndResolve
          	  $Builder  $builder.consumeExpressionUnaryOperator(IASTUnaryExpression.op_not);  $EndBuilder
            $EndAction
          ./
      | 'sizeof' unary_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionUnaryOperator(IASTUnaryExpression.op_sizeof);  $EndResolve
          	  $Builder  $builder.consumeExpressionUnaryOperator(IASTUnaryExpression.op_sizeof);  $EndBuilder
            $EndAction
          ./
      | 'sizeof' '(' type_name ')'
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionUnarySizeofTypeName();  $EndResolve
          	  $Builder  $builder.consumeExpressionUnarySizeofTypeName();  $EndBuilder
            $EndAction
          ./  
          

cast_expression
    ::= unary_expression
      | '(' type_name ')' cast_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionCast();  $EndResolve
          	  $Builder  $builder.consumeExpressionCast();  $EndBuilder
            $EndAction
          ./  


multiplicative_expression
    ::= cast_expression
      | multiplicative_expression '*' cast_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_multiply);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_multiply);  $EndBuilder
            $EndAction
          ./
      | multiplicative_expression '/' cast_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_divide);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_divide);  $EndBuilder
            $EndAction
          ./
      | multiplicative_expression '%' cast_expression
          /.
            $Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_modulo);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_modulo);  $EndBuilder
            $EndAction
          ./


additive_expression
    ::= multiplicative_expression
      | additive_expression '+' multiplicative_expression
      	  /.
            $Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_plus);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_plus);  $EndBuilder
            $EndAction
          ./
      | additive_expression '-' multiplicative_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_minus);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_minus);  $EndBuilder
            $EndAction
          ./


shift_expression
    ::= additive_expression
      | shift_expression '<<' additive_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_shiftLeft);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_shiftLeft);  $EndBuilder
            $EndAction
          ./
      | shift_expression '>>' additive_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_shiftRight);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_shiftRight);  $EndBuilder
            $EndAction
          ./


relational_expression
    ::= shift_expression
      | relational_expression '<' shift_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_lessThan);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_lessThan);  $EndBuilder
            $EndAction
          ./
      | relational_expression '>' shift_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_greaterThan);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_greaterThan);  $EndBuilder
            $EndAction
          ./
      | relational_expression '<=' shift_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_lessEqual);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_lessEqual);  $EndBuilder
            $EndAction
          ./
      | relational_expression '>=' shift_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_greaterEqual);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_greaterEqual);  $EndBuilder
            $EndAction
          ./


equality_expression
    ::= relational_expression
      | equality_expression '==' relational_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_equals);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_equals);  $EndBuilder
            $EndAction
          ./
      | equality_expression '!=' relational_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_notequals);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_notequals);  $EndBuilder
            $EndAction
          ./


AND_expression
    ::= equality_expression
      | AND_expression '&' equality_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryAnd);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryAnd);  $EndBuilder
            $EndAction
          ./


exclusive_OR_expression
    ::= AND_expression
      | exclusive_OR_expression '^' AND_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryXor);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryXor);  $EndBuilder
            $EndAction
          ./


inclusive_OR_expression
    ::= exclusive_OR_expression
      | inclusive_OR_expression '|' exclusive_OR_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryOr);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryOr);  $EndBuilder
            $EndAction
          ./


logical_AND_expression
    ::= inclusive_OR_expression
      | logical_AND_expression '&&' inclusive_OR_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_logicalAnd);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_logicalAnd);  $EndBuilder
            $EndAction
          ./


logical_OR_expression
    ::= logical_AND_expression
      | logical_OR_expression '||' logical_AND_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_logicalOr);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_logicalOr);  $EndBuilder
            $EndAction
          ./


conditional_expression
    ::= logical_OR_expression
      | logical_OR_expression '?' expression ':' conditional_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionConditional();  $EndResolve
          	  $Builder  $builder.consumeExpressionConditional();  $EndBuilder
            $EndAction
          ./


assignment_expression
    ::= conditional_expression
      | unary_expression '='   assignment_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_assign);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_assign);  $EndBuilder
            $EndAction
          ./
      | unary_expression '*='  assignment_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_multiplyAssign);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_multiplyAssign);  $EndBuilder
            $EndAction
          ./
      | unary_expression '/='  assignment_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_divideAssign);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_divideAssign);  $EndBuilder
            $EndAction
          ./
      | unary_expression '%='  assignment_expression
          /.
          	$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_moduloAssign);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_moduloAssign);  $EndBuilder
            $EndAction
          ./
      | unary_expression '+='  assignment_expression
          /.$Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_plusAssign);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_plusAssign);  $EndBuilder
            $EndAction
          ./
      | unary_expression '-='  assignment_expression
          /.
            $Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_minusAssign);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_minusAssign);  $EndBuilder
            $EndAction
          ./
      | unary_expression '<<=' assignment_expression
          /.
            $Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_shiftLeftAssign);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_shiftLeftAssign);  $EndBuilder
            $EndAction
          ./
      | unary_expression '>>=' assignment_expression
          /.
            $Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_shiftRightAssign);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_shiftRightAssign);  $EndBuilder
            $EndAction
          ./
      | unary_expression '&='  assignment_expression
          /.
            $Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryAndAssign);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryAndAssign);  $EndBuilder
            $EndAction
          ./
      | unary_expression '^='  assignment_expression
          /.
            $Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryXorAssign);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryXorAssign);  $EndBuilder
            $EndAction
          ./
      | unary_expression '|='  assignment_expression
          /.
            $Action
          	  $Resolve  $resolve.consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryOrAssign);  $EndResolve
          	  $Builder  $builder.consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryOrAssign);  $EndBuilder
            $EndAction
          ./

	
-- special rule to avoid conflict between problem statements and problem expressions
expression_in_statement
    ::= <openscope-ast> expression_list
          /.$Action $Builder  $builder.consumeExpression();  $EndBuilder $EndAction./


expression
    ::= <openscope-ast> expression_list
          /.$Action $Builder  $builder.consumeExpression();  $EndBuilder $EndAction./


expression_list
    ::= assignment_expression
      | expression_list ',' assignment_expression 


constant_expression
    ::= conditional_expression
    

-------------------------------------------------------------------------------------------
-- Statements
-------------------------------------------------------------------------------------------
      

      
statement
    ::= labeled_statement
      | compound_statement
      | expression_statement
      | selection_statement
      | iteration_statement
      | jump_statement
      | ERROR_TOKEN
          /.$Action $Builder  $builder.consumeStatementProblem();  $EndBuilder $EndAction./


labeled_statement
    ::= identifier_or_typedefname ':' statement
    	  /.
            $Action
          	  $Resolve  $setBinding($resolve.consumeStatementLabeled());  $EndResolve
          	  $Builder  $builder.consumeStatementLabeled($getBinding());  $EndBuilder
            $EndAction
          ./
      | 'case' constant_expression ':'
          /.$Action $Builder  $builder.consumeStatementCase();  $EndBuilder $EndAction./
      | 'default' ':'
          /.$Action $Builder  $builder.consumeStatementDefault();  $EndBuilder $EndAction./
         
         
compound_statement
    ::= <openscope-symbol> '{' '}' 
          /.
            $Action
              $Resolve  $setScope($resolve.closeSymbolScope());  $EndResolve
              $Builder  $builder.consumeStatementCompoundStatementEmpty($getScope());  $EndBuilder
              
            $EndAction
          ./
      | <openscope-symbol> '{' <openscope-ast> block_item_list '}'
          /.
            $Action
          	  $Resolve  $setScope($resolve.closeSymbolScope());  $EndResolve
          	  $Builder  $builder.consumeStatementCompoundStatement($getScope());  $EndBuilder
            $EndAction
          ./
         
         
block_item_list
    ::= block_item
      | block_item_list block_item
      
      
block_item
    ::= statement
      | declaration
          /.$Action $Builder  $builder.consumeStatementDeclaration();  $EndBuilder $EndAction./
         
         
expression_statement
    ::= ';'
          /.$Action $Builder  $builder.consumeStatementNull();  $EndBuilder $EndAction./
      | expression_in_statement ';'
          /.$Action $Builder  $builder.consumeStatementExpression();  $EndBuilder $EndAction./
         
         
selection_statement
    ::= 'if' '(' expression ')' statement
          /.$Action $Builder  $builder.consumeStatementIfThen();  $EndBuilder $EndAction./
      | 'if' '(' expression ')' statement 'else' statement
          /.$Action $Builder  $builder.consumeStatementIfThenElse();  $EndBuilder $EndAction./
      | 'switch' '(' expression ')' statement
          /.$Action $Builder  $builder.consumeStatementSwitch();  $EndBuilder $EndAction./
  
  
expression_opt
    ::= expression
      | $empty
          /.$Action $Builder  $builder.consumeExpressionOptional();  $EndBuilder $EndAction./


iteration_statement
    ::= 'do' statement 'while' '(' expression ')' ';'
          /.$Action $Builder  $builder.consumeStatementDoLoop();  $EndBuilder $EndAction./
      | 'while' '(' expression ')' statement
          /.$Action $Builder  $builder.consumeStatementWhileLoop();  $EndBuilder $EndAction./
      | <openscope-symbol> 'for' '(' expression_opt ';' expression_opt ';' expression_opt ')' statement
          /.
            $Action
          	  $Resolve  $resolve.closeSymbolScope();  $EndResolve
          	  $Builder  $builder.consumeStatementForLoop();  $EndBuilder
            $EndAction
          ./
      | <openscope-symbol> 'for' '(' declaration expression_opt ';' expression_opt ')' statement
          /.
            $Action
          	  $Resolve  $resolve.closeSymbolScope();  $EndResolve
          	  $Builder  $builder.consumeStatementForLoop();  $EndBuilder
            $EndAction
          ./
          

jump_statement
    ::= 'goto' identifier_or_typedefname ';'
          /.
            $Action
          	  $Resolve  $setBinding($resolve.consumeStatementGoto());  $EndResolve
          	  $Builder  $builder.consumeStatementGoto($getBinding());  $EndBuilder
            $EndAction
          ./
      | 'continue' ';'
          /.$Action $Builder  $builder.consumeStatementContinue();  $EndBuilder $EndAction./
      | 'break' ';'
          /.$Action $Builder  $builder.consumeStatementBreak();  $EndBuilder $EndAction./
      | 'return' ';'
          /.$Action $Builder  $builder.consumeStatementReturn(false);  $EndBuilder $EndAction./
      | 'return' expression ';'
          /.$Action $Builder  $builder.consumeStatementReturn(true);  $EndBuilder $EndAction./
    
    
    
-------------------------------------------------------------------------------------------
-- Declarations
-------------------------------------------------------------------------------------------

      
      
declaration 
    ::= declaration_specifiers  ';'
          /.
            $Action
          	  $Resolve  $resolve.closeDeclarationScope();    $EndResolve
          	  $Builder  $builder.consumeDeclaration(false);  $EndBuilder
            $EndAction
          ./
	  | declaration_specifiers <openscope-ast> init_declarator_list ';'
	      /.
            $Action
          	  $Resolve  $resolve.closeDeclarationScope();   $EndResolve
          	  $Builder  $builder.consumeDeclaration(true);  $EndBuilder
            $EndAction
          ./
         

declaration_specifiers
    ::= <openscope-declaration> <openscope-ast> simple_declaration_specifiers
          /.$Action $Builder  $builder.consumeDeclarationSpecifiersSimple();  $EndBuilder $EndAction./
      | <openscope-declaration> <openscope-ast> struct_or_union_declaration_specifiers
          /.$Action $Builder  $builder.consumeDeclarationSpecifiersStructUnionEnum();  $EndBuilder $EndAction./
      | <openscope-declaration> <openscope-ast> elaborated_declaration_specifiers
          /.$Action $Builder  $builder.consumeDeclarationSpecifiersStructUnionEnum();  $EndBuilder $EndAction./
      | <openscope-declaration> <openscope-ast> enum_declaration_specifiers
          /.$Action $Builder  $builder.consumeDeclarationSpecifiersStructUnionEnum();  $EndBuilder $EndAction./
      | <openscope-declaration> <openscope-ast> typdef_name_declaration_specifiers
          /.
            $Action
          	  $Resolve  $setBinding($resolve.consumeDeclarationSpecifiersTypedefName());  $EndResolve
          	  $Builder  $builder.consumeDeclarationSpecifiersTypedefName($getBinding());  $EndBuilder
            $EndAction
          ./


no_type_declaration_specifier
    ::= storage_class_specifier
      | type_qualifier
      | function_specifier
    
    
no_type_declaration_specifiers
    ::= no_type_declaration_specifier
      | no_type_declaration_specifiers no_type_declaration_specifier
  
      
simple_declaration_specifiers
    ::= type_specifier
      | no_type_declaration_specifiers type_specifier
      | simple_declaration_specifiers type_specifier
      | simple_declaration_specifiers no_type_declaration_specifier
      
      
struct_or_union_declaration_specifiers
    ::= struct_or_union_specifier
      | no_type_declaration_specifiers struct_or_union_specifier
      | struct_or_union_declaration_specifiers no_type_declaration_specifier
      
      
elaborated_declaration_specifiers
    ::= elaborated_specifier
      | no_type_declaration_specifiers elaborated_specifier
      | elaborated_declaration_specifiers no_type_declaration_specifier


enum_declaration_specifiers
    ::= enum_specifier
      | no_type_declaration_specifiers  enum_specifier
      | enum_declaration_specifiers no_type_declaration_specifier


typdef_name_declaration_specifiers
    ::= typedef_name
      | no_type_declaration_specifiers  typedef_name
      | typdef_name_declaration_specifiers no_type_declaration_specifier
    
    
init_declarator_list
    ::= init_declarator
      | init_declarator_list ',' init_declarator
					  
					  
init_declarator 
    ::= complete_declarator
          /.
            $Action
              $Resolve  $resolve.consumeInitDeclarator();  $EndResolve 
            $EndAction
          ./
      | complete_declarator '=' initializer
          /.
            $Action 
              $Resolve  $resolve.consumeInitDeclarator();  $EndResolve 
              $Builder  $builder.consumeDeclaratorWithInitializer();  $EndBuilder 
            $EndAction
          ./


complete_declarator
    ::= declarator
          /.
            $Action 
              $Resolve  $setBinding($resolve.consumeDeclaratorComplete());  $EndResolve
              $Builder  $builder.consumeDeclaratorComplete($getBinding());  $EndBuilder 
            $EndAction
          ./


storage_class_specifier
    ::= storage_class_specifier_token
          /.
            $Action
              $Resolve  $resolve.consumeDeclSpecToken();  $EndResolve 
              $Builder  $builder.consumeDeclSpecToken();  $EndBuilder 
            $EndAction
          ./


storage_class_specifier_token 
    ::= 'typedef'
      | 'extern'
      | 'static'
      | 'auto'
      | 'register'


type_specifier
    ::= type_specifier_token
          /.
            $Action
              $Resolve  $resolve.consumeDeclSpecToken();  $EndResolve 
              $Builder  $builder.consumeDeclSpecToken();  $EndBuilder 
            $EndAction
          ./
				
type_specifier_token
    ::= 'void'        
      | 'char'
      | 'short'
      | 'int'
      | 'long'
      | 'float'
      | 'double'
      | 'signed'
      | 'unsigned'
      | '_Bool'
      | '_Complex'
      | '_Imaginary'
		
		
typedef_name
    ::= 'TypedefName' 
          /.
            $Action
              $Resolve  $resolve.consumeDeclSpecToken();  $EndResolve 
              $Builder  $builder.consumeDeclSpecToken();  $EndBuilder 
            $EndAction
          ./


identifier_or_typedefname
    ::= 'identifier'
      | 'TypedefName'
      
      
struct_or_union_specifier
    ::= 'struct' '{' <openscope-name> <openscope-ast> struct_declaration_list_opt '}'
          /.
            $Action
          	  $Resolve  $setBinding($resolve.consumeTypeSpecifierComposite(false, IASTCompositeTypeSpecifier.k_struct));   $EndResolve
          	  $Builder  $builder.consumeTypeSpecifierComposite(false, IASTCompositeTypeSpecifier.k_struct, $getBinding()); $EndBuilder
            $EndAction
          ./           
      | 'union' '{' <openscope-name> <openscope-ast> struct_declaration_list_opt '}'
          /.
            $Action
          	  $Resolve  $setBinding($resolve.consumeTypeSpecifierComposite(false, IASTCompositeTypeSpecifier.k_union));   $EndResolve
          	  $Builder  $builder.consumeTypeSpecifierComposite(false, IASTCompositeTypeSpecifier.k_union, $getBinding()); $EndBuilder
            $EndAction
          ./  
      | 'struct' identifier_or_typedefname '{' <openscope-name> <openscope-ast> struct_declaration_list_opt '}'
          /.
            $Action
          	  $Resolve  $setBinding($resolve.consumeTypeSpecifierComposite(true, IASTCompositeTypeSpecifier.k_struct));   $EndResolve
          	  $Builder  $builder.consumeTypeSpecifierComposite(true, IASTCompositeTypeSpecifier.k_struct, $getBinding()); $EndBuilder
            $EndAction
          ./ 
      | 'union'  identifier_or_typedefname '{' <openscope-name> <openscope-ast> struct_declaration_list_opt '}'
          /.
            $Action
          	  $Resolve  $setBinding($resolve.consumeTypeSpecifierComposite(true, IASTCompositeTypeSpecifier.k_union));   $EndResolve
          	  $Builder  $builder.consumeTypeSpecifierComposite(true, IASTCompositeTypeSpecifier.k_union, $getBinding()); $EndBuilder
            $EndAction
          ./
          
          
elaborated_specifier          
    ::= 'struct' identifier_or_typedefname
          /.
            $Action
          	  $Resolve  $setBinding($resolve.consumeTypeSpecifierElaborated(IASTCompositeTypeSpecifier.k_struct));   $EndResolve
          	  $Builder  $builder.consumeTypeSpecifierElaborated(IASTCompositeTypeSpecifier.k_struct, $getBinding()); $EndBuilder
            $EndAction
          ./
      | 'union'  identifier_or_typedefname
          /.
            $Action
          	  $Resolve  $setBinding($resolve.consumeTypeSpecifierElaborated(IASTCompositeTypeSpecifier.k_union));   $EndResolve
          	  $Builder  $builder.consumeTypeSpecifierElaborated(IASTCompositeTypeSpecifier.k_union, $getBinding()); $EndBuilder
            $EndAction
          ./
      | 'enum' identifier_or_typedefname
          /.
            $Action
          	  $Resolve  $setBinding($resolve.consumeTypeSpecifierElaborated(IASTElaboratedTypeSpecifier.k_enum));   $EndResolve
          	  $Builder  $builder.consumeTypeSpecifierElaborated(IASTElaboratedTypeSpecifier.k_enum, $getBinding()); $EndBuilder
            $EndAction
          ./
          
          
struct_declaration_list_opt
    ::= struct_declaration_list
      | $empty

struct_declaration_list
    ::= struct_declaration
      | struct_declaration_list struct_declaration
      

struct_declaration
    ::= specifier_qualifier_list <openscope-ast> struct_declarator_list ';' -- regular declarators plus bit fields
          /.
            $Action
          	  $Resolve  $resolve.closeDeclarationScope();  $EndResolve
          	  $Builder  $builder.consumeStructDeclaration(true);  $EndBuilder
            $EndAction
          ./
      | specifier_qualifier_list ';'
          /.
            $Action
          	  $Resolve  $resolve.closeDeclarationScope();  $EndResolve
          	  $Builder  $builder.consumeStructDeclaration(false);  $EndBuilder
            $EndAction
          ./


-- just reuse declaration_specifiers, makes grammar a bit more lenient but thats OK
specifier_qualifier_list
    ::= declaration_specifiers
           

struct_declarator_list
    ::= complete_struct_declarator
      | struct_declarator_list ',' complete_struct_declarator


complete_struct_declarator
    ::= struct_declarator
          /.
            $Action 
              $Resolve  $setBinding($resolve.consumeDeclaratorCompleteField());  $EndResolve 
              $Builder  $builder.consumeDeclaratorCompleteField($getBinding());  $EndBuilder
            $EndAction
          ./
    

struct_declarator
    ::= declarator
      | ':' constant_expression  
          /.$Action $Builder  $builder.consumeStructBitField(false);  $EndBuilder $EndAction./
      | declarator ':' constant_expression		
          /.$Action $Builder  $builder.consumeStructBitField(true);  $EndBuilder $EndAction./
		      
            
enum_specifier
    ::= 'enum' '{' <openscope-name> <openscope-ast> enumerator_list_opt comma_opt '}'
          /.
            $Action
          	  $Resolve  $setBinding($resolve.consumeTypeSpecifierEnumeration(false));   $EndResolve
          	  $Builder  $builder.consumeTypeSpecifierEnumeration(false, $getBinding()); $EndBuilder
            $EndAction
          ./
      | 'enum' identifier_or_typedefname '{' <openscope-name> <openscope-ast> enumerator_list_opt comma_opt '}'
          /.
            $Action
          	  $Resolve  $setBinding($resolve.consumeTypeSpecifierEnumeration(true));   $EndResolve
          	  $Builder  $builder.consumeTypeSpecifierEnumeration(true, $getBinding()); $EndBuilder
            $EndAction
          ./
      
      
      
enumerator_list_opt
    ::= enumerator_list
      | $empty


enumerator_list
    ::= enumerator
      | enumerator_list ',' enumerator
      
      
enumerator
    ::= identifier_or_typedefname
          /.
            $Action
          	  $Resolve  $setBinding($resolve.consumeEnumerator(false));   $EndResolve
          	  $Builder  $builder.consumeEnumerator(false, $getBinding()); $EndBuilder
            $EndAction
          ./
      | identifier_or_typedefname '=' constant_expression
          /.
            $Action
          	  $Resolve  $setBinding($resolve.consumeEnumerator(false));   $EndResolve
          	  $Builder  $builder.consumeEnumerator(false, $getBinding()); $EndBuilder
            $EndAction
          ./
      
      
type_qualifier
    ::= type_qualifier_token
          /.
            $Action
              $Resolve  $resolve.consumeDeclSpecToken();  $EndResolve 
              $Builder  $builder.consumeDeclSpecToken();  $EndBuilder 
            $EndAction
          ./
     
     
type_qualifier_token
    ::= 'const'
      | 'restrict'
      | 'volatile'


function_specifier
    ::= 'inline'    
          /.$Action 
              $Resolve  $resolve.consumeDeclSpecToken();  $EndResolve 
              $Builder  $builder.consumeDeclSpecToken();  $EndBuilder 
            $EndAction
          ./


declarator
    ::= direct_declarator
      | <openscope-ast> pointer direct_declarator
          /.
            $Action
          	  $Resolve  $resolve.consumeDeclaratorWithPointer();  $EndResolve
          	  $Builder  $builder.consumeDeclaratorWithPointer(true);  $EndBuilder
            $EndAction
          ./


direct_declarator
    ::= array_direct_declarator
      | function_prototype_direct_declarator
      | basic_direct_declarator
      

basic_direct_declarator
    ::= 'identifier'
          /.
            $Action
          	  $Resolve  $resolve.consumeDirectDeclaratorIdentifier();  $EndResolve
          	  $Builder  $builder.consumeDirectDeclaratorIdentifier();  $EndBuilder
            $EndAction
          ./
      | '(' declarator ')'
          /.
            $Action
          	  $Resolve  $resolve.consumeDirectDeclaratorBracketed();  $EndResolve
          	  $Builder  $builder.consumeDirectDeclaratorBracketed();  $EndBuilder
            $EndAction
          ./

         
array_direct_declarator
    ::= basic_direct_declarator array_modifier
           /.
            $Action
          	  $Resolve  /*$resolve.consumeDirectDeclaratorArrayDeclarator();*/  $EndResolve
          	  $Builder  $builder.consumeDirectDeclaratorArrayDeclarator();  $EndBuilder
            $EndAction
          ./
      | array_direct_declarator array_modifier
          /.
            $Action
          	  $Resolve  /*$resolve.consumeDirectDeclaratorArrayDeclarator();*/  $EndResolve
          	  $Builder  $builder.consumeDirectDeclaratorArrayDeclarator();  $EndBuilder
            $EndAction
          ./


function_prototype_direct_declarator
    ::= function_direct_declarator
          /.$Action $Resolve  $resolve.closeSymbolScope();  $EndResolve $EndAction./
         

function_direct_declarator
    ::= basic_direct_declarator '(' <openscope-name> <openscope-symbol> <openscope-ast> parameter_type_list ')'
          /.
            $Action
          	  $Resolve  $resolve.consumeDirectDeclaratorFunctionDeclarator();  $EndResolve
          	  $Builder  $builder.consumeDirectDeclaratorFunctionDeclarator(true);  $EndBuilder
            $EndAction
          ./
      | basic_direct_declarator '(' <openscope-name> <openscope-symbol> ')'
          /.
            $Action
          	  $Resolve  $resolve.consumeDirectDeclaratorFunctionDeclarator();  $EndResolve
          	  $Builder  $builder.consumeDirectDeclaratorFunctionDeclarator(false);  $EndBuilder
            $EndAction
          ./


function_declarator
    ::= function_direct_declarator
      | <openscope-ast> pointer function_direct_declarator
          /.
            $Action
          	  $Resolve  $resolve.consumeDeclaratorWithPointer();  $EndResolve
          	  $Builder  $builder.consumeDeclaratorWithPointer(true);  $EndBuilder
            $EndAction
          ./


-- This is a hack because the parser cannot tell the difference between 
-- plain identifiers and types. Because of this an identifier_list would
-- always be parsed as a parameter_type_list instead. In a KnR funciton
-- definition we can use the extra list of declarators to disambiguate.
-- This rule should be merged back into direct_declarator if type info is
-- added to the parser. 
--knr_direct_declarator 
--    ::= basic_direct_declarator '(' <openscope-ast> identifier_list ')'
--        -- /.$ba  consumeDirectDeclaratorFunctionDeclaratorKnR();  $ea./
--
--
--knr_function_declarator
--    ::= knr_direct_declarator
--      | <openscope> pointer knr_direct_declarator
--       -- /.$ba  consumeDeclaratorWithPointer(true);  $ea./
--
--identifier_list
--    ::= 'identifier'
--          -- /.$ba  consumeName();  $ea./
--      | identifier_list ',' 'identifier'
--          -- /.$ba  consumeName();  $ea./
                    

array_modifier 
    ::= '[' ']'
          /.
            $Action
          	  $Resolve  $resolve.consumeDirectDeclaratorArrayModifier();  $EndResolve
          	  $Builder  $builder.consumeDirectDeclaratorArrayModifier(false);  $EndBuilder
            $EndAction
          ./
      | '[' <openscope-ast> array_modifier_type_qualifiers ']'
          /.
            $Action
          	  $Resolve  $resolve.consumeDirectDeclaratorModifiedArrayModifier(false, false, true);  $EndResolve
          	  $Builder  $builder.consumeDirectDeclaratorModifiedArrayModifier(false, false, true, false);  $EndBuilder
            $EndAction
          ./
      | '[' assignment_expression ']'
          /.
            $Action
          	  $Resolve  $resolve.consumeDirectDeclaratorArrayModifier();  $EndResolve
          	  $Builder  $builder.consumeDirectDeclaratorArrayModifier(true);  $EndBuilder
            $EndAction
          ./
      | '[' <openscope-ast> array_modifier_type_qualifiers assignment_expression ']'
          /.
            $Action
          	  $Resolve  $resolve.consumeDirectDeclaratorModifiedArrayModifier(false, false, true);  $EndResolve
          	  $Builder  $builder.consumeDirectDeclaratorModifiedArrayModifier(false, false, true, true);  $EndBuilder
            $EndAction
          ./
      | '[' 'static' assignment_expression ']'
         /.
            $Action
          	  $Resolve  $resolve.consumeDirectDeclaratorModifiedArrayModifier(true, false, false);  $EndResolve
          	  $Builder  $builder.consumeDirectDeclaratorModifiedArrayModifier(true, false, false, true);  $EndBuilder
            $EndAction
          ./
      | '[' 'static' <openscope-ast> array_modifier_type_qualifiers assignment_expression ']'
          /.
            $Action
          	  $Resolve  $resolve.consumeDirectDeclaratorModifiedArrayModifier(true, false, true);  $EndResolve
          	  $Builder  $builder.consumeDirectDeclaratorModifiedArrayModifier(true, false, true, true);  $EndBuilder
            $EndAction
          ./
      | '[' <openscope-ast> array_modifier_type_qualifiers 'static' assignment_expression ']'
          /.
            $Action
          	  $Resolve  $resolve.consumeDirectDeclaratorModifiedArrayModifier(true, false, true);  $EndResolve
          	  $Builder  $builder.consumeDirectDeclaratorModifiedArrayModifier(true, false, true, true);  $EndBuilder
            $EndAction
          ./
      | '[' '*' ']'
          /.
            $Action
          	  $Resolve  $resolve.consumeDirectDeclaratorModifiedArrayModifier(false, true, false);  $EndResolve
          	  $Builder  $builder.consumeDirectDeclaratorModifiedArrayModifier(false, true, false, false);  $EndBuilder
            $EndAction
          ./
      | '[' <openscope-ast> array_modifier_type_qualifiers '*' ']'
          /.
            $Action
          	  $Resolve  $resolve.consumeDirectDeclaratorModifiedArrayModifier(false, true, true);  $EndResolve
          	  $Builder  $builder.consumeDirectDeclaratorModifiedArrayModifier(false, true, true, false);  $EndBuilder
            $EndAction
          ./

         
array_modifier_type_qualifiers
    ::= type_qualifier_list
          /.$Action $Resolve  $resolve.consumeTypeQualifiers();  $EndResolve $EndAction./


<openscope-pointer>
    ::= $empty
          /.$Action $Resolve  $resolve.openPointerScope();  $EndResolve $EndAction./
          
        
pointer
    ::= <openscope-pointer> pointers


pointers
    ::= '*'
          /.
            $Action
          	  $Resolve  $resolve.consumePointer();  $EndResolve
          	  $Builder  $builder.consumePointer();  $EndBuilder
            $EndAction
          ./
      | pointers '*' 
          /.
            $Action
          	  $Resolve  $resolve.consumePointer();  $EndResolve
          	  $Builder  $builder.consumePointer();  $EndBuilder
            $EndAction
          ./
      | '*' <openscope-ast> pointer_type_qualifiers
          /.
            $Action
          	  $Resolve  $resolve.consumePointerTypeQualifierList();  $EndResolve
          	  $Builder  $builder.consumePointerTypeQualifierList();  $EndBuilder
            $EndAction
          ./
      | pointers '*' <openscope-ast> pointer_type_qualifiers
          /.
            $Action
          	  $Resolve  $resolve.consumePointerTypeQualifierList();  $EndResolve
          	  $Builder  $builder.consumePointerTypeQualifierList();  $EndBuilder
            $EndAction
          ./

         
pointer_type_qualifiers
     ::= type_qualifier_list
           /.$Action $Resolve  $resolve.consumeTypeQualifiers();  $EndResolve $EndAction./


type_qualifier_list
    ::= type_qualifier
      | type_qualifier_list type_qualifier


parameter_type_list
    ::= parameter_list
      | parameter_list ',' '...'
      | '...'  -- not spec


parameter_list
    ::= parameter_declaration
      | parameter_list ',' parameter_declaration


parameter_declaration
    ::= declaration_specifiers complete_parameter_declarator
          /.
            $Action
          	  $Builder  $builder.consumeParameterDeclaration();  $EndBuilder
            $EndAction
          ./
      | declaration_specifiers
          /.
            $Action
          	  $Resolve  $setBinding($resolve.consumeParameterDeclarationWithoutDeclarator());  $EndResolve
          	  $Builder  $builder.consumeParameterDeclarationWithoutDeclarator($getBinding());  $EndBuilder
            $EndAction
          ./


complete_parameter_declarator
    ::= declarator
          /.
            $Action
          	  $Resolve  $setBinding($resolve.consumeDeclaratorCompleteParameter());  $EndResolve
          	  $Builder  $builder.consumeDeclaratorCompleteParameter($getBinding());  $EndBuilder
            $EndAction
          ./
      | abstract_declarator
          /.
            $Action
          	  $Resolve  $setBinding($resolve.consumeDeclaratorCompleteParameter());  $EndResolve
          	  $Builder  $builder.consumeDeclaratorCompleteParameter($getBinding());  $EndBuilder
            $EndAction
          ./


-- only used in expressions, eg) sizeof, casts etc...
type_name
    ::= specifier_qualifier_list
          /.
            $Action
          	  $Resolve  $resolve.consumeTypeId();  $EndResolve
          	  $Builder  $builder.consumeTypeId(false);  $EndBuilder
            $EndAction
          ./
      | specifier_qualifier_list abstract_declarator
          /.
            $Action
          	  $Resolve  $resolve.consumeTypeId();  $EndResolve
          	  $Builder  $builder.consumeTypeId(true);  $EndBuilder
            $EndAction
          ./


abstract_declarator  -- a declarator that does not include an identifier
    ::= direct_abstract_declarator
      | <openscope-ast> pointer
          /.
            $Action
          	  $Resolve  $resolve.consumeDeclaratorWithPointer();  $EndResolve
          	  $Builder  $builder.consumeDeclaratorWithPointer(false);  $EndBuilder
            $EndAction
          ./
      | <openscope-ast> pointer direct_abstract_declarator
          /.
            $Action
          	  $Resolve  $resolve.consumeDeclaratorWithPointer();  $EndResolve
          	  $Builder  $builder.consumeDeclaratorWithPointer(true);  $EndBuilder
            $EndAction
          ./


-- rewritten to use the more general array_modifier rule
direct_abstract_declarator
    ::= '(' abstract_declarator ')'
          /.
            $Action
          	  $Builder  $builder.consumeDirectDeclaratorBracketed();  $EndBuilder
            $EndAction
          ./
      | array_modifier
          /.
            $Action
          	  $Resolve  $resolve.consumeAbstractDeclaratorArrayModifier();  $EndResolve
          	  $Builder  $builder.consumeAbstractDeclaratorArrayModifier(false);  $EndBuilder
            $EndAction
          ./
      | direct_abstract_declarator array_modifier
          /.
            $Action
          	  $Resolve  $resolve.consumeAbstractDeclaratorArrayModifier();  $EndResolve
          	  $Builder  $builder.consumeAbstractDeclaratorArrayModifier(true);  $EndBuilder
            $EndAction
          ./
      | '(' ')'
          /.
            $Action
          	  $Resolve  $resolve.consumeAbstractDeclaratorFunctionDeclarator();  $EndResolve
          	  $Builder  $builder.consumeAbstractDeclaratorFunctionDeclarator(false, false);  $EndBuilder
            $EndAction
          ./
      | direct_abstract_declarator '(' ')'
          /.
            $Action
          	  $Resolve  $resolve.consumeAbstractDeclaratorFunctionDeclarator();  $EndResolve
          	  $Builder  $builder.consumeAbstractDeclaratorFunctionDeclarator(true, false);  $EndBuilder
            $EndAction
          ./
      | '(' <openscope-name> <openscope-ast> parameter_type_list ')'
          /.
            $Action
          	  $Resolve  $resolve.consumeAbstractDeclaratorFunctionDeclarator();  $EndResolve
          	  $Builder  $builder.consumeAbstractDeclaratorFunctionDeclarator(false, true);  $EndBuilder
            $EndAction
          ./
      | direct_abstract_declarator '(' <openscope-name> <openscope-ast> parameter_type_list ')'
          /.
            $Action
          	  $Resolve  $resolve.consumeAbstractDeclaratorFunctionDeclarator();  $EndResolve
          	  $Builder  $builder.consumeAbstractDeclaratorFunctionDeclarator(true, true);  $EndBuilder
            $EndAction
          ./



initializer
    ::= assignment_expression
          /.
            $Action 
              $Resolve  $resolve.consumeExpressionInitializer(); $EndResolve
              $Builder  $builder.consumeInitializer();  $EndBuilder 
            $EndAction
          ./
      | '{' <openscope-type> <openscope-ast> initializer_list comma_opt '}'
          /.
            $Action 
              $Resolve  $resolve.consumeExpressionTypeIdInitializer();  $EndResolve
              $Builder  $builder.consumeInitializerList();  $EndBuilder 
            $EndAction
          ./

initializer_list
    ::= positional initializer
      | designated_initializer
      | initializer_list ',' positional initializer
      | initializer_list ',' designated_initializer
            
positional
    ::= $empty
          /.
            $Action 
              $Resolve  $resolve.consumeInitializerStartPositional();  $EndResolve
            $EndAction
          ./

designated_initializer
    ::= <openscope-ast> designation '=' initializer
          /.$Action $Builder  $builder.consumeInitializerDesignated();  $EndBuilder $EndAction./
          
    
designation
    ::= designator_list


designator_list
    ::= designator_base
      | designator_list designator


designator_base
    ::= '[' constant_expression ']'
          /.
            $Action 
              $Resolve  $resolve.consumeDesignatorBaseArray();  $EndResolve
              $Builder  $builder.consumeDesignatorArray();  $EndBuilder 
            $EndAction
          ./
      | '.' identifier_or_typedefname		
          /.
            $Action 
              $Resolve  $setBinding($resolve.consumeDesignatorBaseField());  $EndResolve
              $Builder  $builder.consumeDesignatorField($getBinding());  $EndBuilder 
            $EndAction
          ./

designator
    ::= '[' constant_expression ']'
         /.
            $Action 
              $Resolve  $resolve.consumeExpressionArraySubscript();  $EndResolve
              $Builder  $builder.consumeDesignatorArray();  $EndBuilder 
            $EndAction
          ./
      | '.' identifier_or_typedefname		
         /.
            $Action 
              $Resolve  $setBinding($resolve.consumeExpressionFieldReference(false));  $EndResolve
              $Builder  $builder.consumeDesignatorField($getBinding());  $EndBuilder 
            $EndAction
          ./
		
		
-------------------------------------------------------------------------------------------
-- External Definitions
-------------------------------------------------------------------------------------------

translation_unit
    ::= external_declaration_list
          /.
            $Action 
              $Resolve  $setScope($resolve.getCurrentScope());  $EndResolve
              $Builder  $builder.consumeTranslationUnit($getScope());  $EndBuilder 
            $EndAction
          ./
      | $empty
          /.
            $Action 
              $Resolve  $setScope($resolve.getCurrentScope());  $EndResolve
              $Builder  $builder.consumeTranslationUnit($getScope());  $EndBuilder 
            $EndAction
          ./
          
          
external_declaration_list
    ::= external_declaration
      | external_declaration_list external_declaration


external_declaration
    ::= function_definition
      | declaration
      | ';'
          /.$Action $Builder  $builder.consumeDeclarationEmpty();  $EndBuilder $EndAction./
      | ERROR_TOKEN
          /.$Action $Builder  $builder.consumeDeclarationProblem();  $EndBuilder $EndAction./


declaration_list
    ::= declaration
      | declaration_list declaration

      
-- The extra <openscope-ast> nonterminal before declarator in this rule is only there
-- to avoid a shift/reduce error with the rule for declaration. 
-- The symbol table scoped is opened in the rule for function_definition_direct_declarator
function_definition
    ::= declaration_specifiers <openscope-ast>  function_definition_direct_declarator <openscope-name> function_body
          /.
            $Action
          	  $Resolve  $resolve.consumeFunctionDefinition();  $EndResolve
          	  $Builder  $builder.consumeFunctionDefinition(true);  $EndBuilder
            $EndAction
          ./

         -- this rule is here as a special case (its not C99 spec) just to support implicit int in function definitions
      | <openscope-declaration> <openscope-ast>  function_definition_direct_declarator <openscope-name> function_body
          /.
            $Action
          	  $Resolve  $resolve.consumeFunctionDefinition();  $EndResolve
          	  $Builder  $builder.consumeFunctionDefinition(false);  $EndBuilder
            $EndAction
          ./
      
      
     

-- comment out KnR for now
--| declaration_specifiers <openscope-ast>  knr_function_declarator <openscope-ast> declaration_list compound_statement
--   /.$ba  $resolve.closeDeclarationScope();  $ea./
--         


    
    
-- the symbol table scope that holds the parameter declarations is not closed
-- until after the body of the function has been parsed
function_definition_direct_declarator
    ::= function_direct_declarator
          /.
            $Action 
              $Resolve  $setBinding($resolve.consumeFunctionDefinitionHeader());  $EndResolve 
              $Builder  $builder.consumeFunctionDefinitionHeader($getBinding());  $EndBuilder
            $EndAction
          ./
   
   
-- same syntax as compound_statement but a symbol table scope isn't opened
function_body
    ::= '{' '}' 
          /.
            $Action 
              $Resolve  $setScope($resolve.getCurrentScope());  $EndResolve 
              $Builder  $builder.consumeStatementCompoundStatementEmpty($getScope());  $EndBuilder 
            $EndAction
          ./
      | '{' <openscope-ast> block_item_list '}'
          /.
            $Action 
              $Resolve  $setScope($resolve.getCurrentScope());  $EndResolve 
              $Builder  $builder.consumeStatementCompoundStatement($getScope());  $EndBuilder 
            $EndAction
          ./
          
$End
















