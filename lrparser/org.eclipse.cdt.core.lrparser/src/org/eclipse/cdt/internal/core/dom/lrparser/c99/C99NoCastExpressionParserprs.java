/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99NoCastExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, C99NoCastExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            4,1,1,3,3,3,1,3,3,1,
            3,3,1,3,3,3,3,1,3,3,
            1,3,1,3,1,3,1,3,1,3,
            1,5,1,3,3,3,3,3,3,3,
            3,3,3,3,1,1,2,1,0,1,
            3,1,1,1,1,1,1,1,1,3,
            3,2,2,4,1,2,1,1,1,2,
            5,7,5,1,0,7,5,9,8,3,
            2,2,2,3,2,4,2,2,2,2,
            2,1,1,1,1,2,1,2,2,2,
            1,2,2,1,2,2,1,2,2,1,
            2,2,1,3,1,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            5,5,6,6,2,2,2,1,0,1,
            2,4,2,1,1,3,1,1,2,3,
            6,7,1,0,1,3,1,3,1,1,
            1,1,1,1,3,1,1,1,1,1,
            3,1,2,2,1,5,3,1,3,5,
            1,3,1,3,2,4,3,5,4,6,
            6,3,5,1,1,2,3,4,1,2,
            1,3,1,1,3,2,1,1,1,1,
            2,1,2,3,1,1,1,3,1,2,
            2,2,3,4,5,1,5,1,1,3,
            3,4,1,1,2,3,2,3,2,1,
            0,1,2,1,1,1,1,1,2,4,
            3,6,2,4,1,1,-32,0,0,0,
            0,0,0,0,0,-2,0,0,0,0,
            0,0,0,0,0,0,0,0,-5,0,
            0,0,0,0,0,0,0,0,-121,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-177,
            0,-12,0,0,0,0,0,0,0,0,
            0,-13,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-127,-4,-15,-140,-169,
            -104,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-16,0,-170,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-165,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-33,
            -34,-29,-30,-3,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-17,0,-49,0,0,0,0,0,0,
            0,0,-18,0,0,0,-70,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-69,0,0,0,
            -19,-20,-21,-22,0,-107,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-126,0,0,0,0,
            0,0,0,0,-23,0,0,0,0,0,
            0,0,0,0,0,0,-24,-25,0,-185,
            0,0,0,0,0,0,0,0,-26,0,
            0,0,0,0,0,0,0,0,0,-27,
            0,0,0,0,0,0,0,0,-68,0,
            0,0,0,0,0,0,0,0,0,-83,
            -84,-139,-87,-56,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-57,0,0,0,0,0,0,
            0,0,-88,0,0,0,0,0,0,0,
            0,0,0,-58,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-59,0,0,0,0,0,0,
            0,0,-89,0,0,0,0,0,0,0,
            0,0,0,-60,0,0,0,0,0,0,
            0,0,-90,0,0,0,0,0,0,0,
            0,0,0,-61,0,0,0,0,0,0,
            0,0,-91,0,0,0,0,0,0,0,
            0,0,0,-62,0,0,0,0,0,0,
            0,0,-92,0,0,0,0,0,0,0,
            0,0,0,-63,0,0,0,0,0,0,
            0,0,-93,0,0,0,0,0,0,0,
            0,0,0,-64,0,0,0,0,0,0,
            0,0,-191,0,0,0,0,0,0,0,
            0,0,0,-65,0,0,0,0,0,0,
            0,0,-94,0,0,0,0,0,0,0,
            0,0,0,-66,0,0,0,0,0,0,
            0,0,-130,0,0,0,0,0,0,0,
            0,0,0,-46,0,0,0,0,0,0,
            0,0,0,0,-95,-96,-97,-98,-77,0,
            0,0,0,0,-144,0,0,0,0,0,
            0,0,0,-99,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-100,-101,-102,
            -151,-103,-78,0,0,0,0,-6,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -145,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -168,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-182,
            0,0,0,0,0,0,0,0,-114,0,
            0,0,0,0,0,0,0,0,-37,0,
            0,0,0,0,0,0,0,-47,0,0,
            0,0,0,0,0,0,-188,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-192,0,0,0,0,
            0,0,0,0,-80,0,0,0,0,0,
            0,0,0,0,-38,0,0,0,0,0,
            0,0,0,-7,0,0,0,0,0,0,
            -116,0,-202,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-120,0,0,0,0,0,0,0,0,
            -119,0,0,0,0,0,0,0,0,0,
            -129,-8,0,0,0,0,0,0,0,0,
            -51,0,0,0,0,0,0,0,0,-155,
            0,0,0,0,0,0,-131,-72,-123,-161,
            -142,-148,-73,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-203,0,0,0,
            0,0,0,0,-113,-67,0,0,-162,-166,
            0,-193,-106,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-204,
            0,0,-54,0,0,0,0,0,0,0,
            0,-160,0,0,0,0,0,0,0,-55,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-52,0,0,0,0,
            0,0,0,0,-82,0,0,0,0,-74,
            -179,-9,0,0,0,0,0,0,-115,0,
            0,-143,0,0,0,0,-167,0,-85,0,
            0,-171,0,0,0,0,-86,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-184,0,0,0,0,0,
            0,0,-75,0,-111,0,0,0,0,-48,
            0,0,0,0,0,0,0,0,-201,0,
            0,0,0,0,-159,-152,0,0,0,0,
            0,0,0,0,0,0,-50,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-10,0,
            0,0,0,0,0,0,-42,0,0,0,
            0,0,0,0,0,0,0,-43,0,0,
            0,0,0,0,0,0,-117,0,-11,0,
            0,0,0,0,0,0,0,0,-44,0,
            0,0,0,0,0,0,0,-108,0,-45,
            0,0,0,0,0,0,0,0,-194,0,
            -71,-187,-156,-109,-118,-31,-124,0,0,0,
            0,0,0,0,0,-110,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -147,0,0,0,0,0,0,-14,-28,-35,
            0,0,-122,-76,0,0,0,0,0,0,
            0,0,0,0,-39,0,0,0,0,0,
            0,0,0,0,0,0,-189,0,0,0,
            0,0,0,0,0,-183,-125,0,0,0,
            -79,-128,0,0,-40,0,0,0,0,0,
            0,-41,0,0,0,0,0,0,-81,0,
            0,0,0,0,-133,-36,0,0,0,0,
            0,0,-112,0,0,-153,-135,0,0,0,
            0,0,-134,0,-136,0,0,0,0,0,
            -176,0,-138,0,-154,-174,0,0,-137,0,
            0,0,-105,0,-158,0,0,0,0,-149,
            0,-190,0,0,0,-164,0,0,0,0,
            0,0,0,0,-175,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-1,0,0,
            0,-150,0,-132,-178,-53,0,-163,-157,0,
            0,0,0,0,0,-146,-141,0,0,-195,
            0,-172,-180,0,0,0,0,0,0,0,
            0,0,0,0,0,-173,-186,0,0,-181,
            0,-196,0,-197,0,0,0,0,0,-198,
            0,-199,-200,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            83,9,23,23,22,22,26,26,67,67,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,51,51,68,
            68,5,5,5,5,5,5,5,5,5,
            5,5,6,7,7,7,7,8,8,8,
            10,10,10,11,11,11,11,11,12,12,
            12,13,13,14,14,15,15,16,16,17,
            17,18,18,19,19,19,19,19,19,19,
            19,19,19,19,19,93,45,40,84,84,
            71,71,46,94,94,94,94,94,94,94,
            95,95,95,96,96,101,101,102,102,97,
            97,98,98,98,104,104,99,99,99,99,
            100,100,100,100,100,103,103,24,24,24,
            24,24,28,28,28,77,77,72,72,72,
            72,73,73,73,74,74,74,75,75,75,
            76,76,76,105,105,106,106,107,29,31,
            31,31,31,31,52,54,54,54,54,54,
            54,54,54,54,54,54,54,64,64,27,
            27,61,61,61,61,62,62,62,55,55,
            56,56,48,48,32,85,85,78,79,79,
            79,63,63,80,80,81,81,65,65,20,
            21,21,21,30,47,47,33,33,33,33,
            36,36,38,34,34,35,39,39,108,108,
            37,109,109,86,86,25,25,25,25,25,
            25,25,25,25,82,49,49,49,49,58,
            58,57,57,57,59,59,50,50,87,87,
            69,69,60,60,60,41,41,41,42,43,
            43,43,44,44,44,44,53,53,70,70,
            70,70,66,88,89,89,90,90,91,91,
            110,110,111,111,112,112,112,112,114,114,
            113,113,113,115,115,83,83,1,14,19,
            15,388,579,43,482,408,219,521,493,523,
            522,555,524,568,567,73,90,133,209,342,
            14,19,15,388,40,135,132,134,158,270,
            14,19,15,388,579,43,482,408,389,521,
            493,523,522,555,524,568,567,73,276,137,
            432,164,318,14,19,15,388,33,141,144,
            147,150,318,14,19,15,388,32,387,1210,
            1263,1444,1481,1499,1205,269,549,371,496,580,
            597,6,278,215,1550,217,1592,219,220,225,
            339,264,1103,1098,267,279,250,209,191,612,
            270,14,19,15,388,579,43,482,408,389,
            521,493,523,522,555,524,568,567,73,276,
            195,14,19,15,388,579,43,482,408,389,
            521,493,523,522,555,524,568,567,73,276,
            98,98,334,334,318,14,19,15,388,579,
            43,482,408,278,521,493,523,522,555,524,
            568,567,73,90,599,16,279,1130,390,284,
            1467,285,51,280,318,14,19,15,388,42,
            43,482,408,10,521,846,281,145,14,19,
            15,388,579,43,482,408,1384,521,493,523,
            522,555,524,568,567,73,1368,166,23,22,
            235,36,22,476,115,387,366,14,19,15,
            388,579,43,482,408,1387,521,493,523,522,
            555,524,568,567,73,1477,170,14,19,15,
            388,579,43,482,408,286,521,493,523,522,
            555,524,568,567,73,1606,1543,211,262,236,
            294,14,19,15,388,579,43,482,408,382,
            521,493,523,522,555,524,568,567,73,276,
            318,14,19,15,388,579,43,482,408,373,
            521,493,523,522,555,524,568,567,73,91,
            390,420,609,127,318,14,19,15,388,579,
            43,482,408,282,521,493,523,522,555,524,
            568,567,73,84,318,14,19,15,388,579,
            43,482,408,251,521,493,523,522,555,524,
            568,567,73,83,318,14,19,15,388,579,
            43,482,408,1556,521,493,523,522,555,524,
            568,567,73,82,318,14,19,15,388,579,
            43,482,408,245,521,493,523,522,555,524,
            568,567,73,81,318,14,19,15,388,579,
            43,482,408,408,521,493,523,522,555,524,
            568,567,73,80,318,14,19,15,388,579,
            43,482,408,550,521,493,523,522,555,524,
            568,567,73,79,318,14,19,15,388,579,
            43,482,408,554,521,493,523,522,555,524,
            568,567,73,78,318,14,19,15,388,579,
            43,482,408,564,521,493,523,522,555,524,
            568,567,73,77,318,14,19,15,388,579,
            43,482,408,237,521,493,523,522,555,524,
            568,567,73,76,318,14,19,15,388,579,
            43,482,408,573,521,493,523,522,555,524,
            568,567,73,75,318,14,19,15,388,579,
            43,482,408,49,521,493,523,522,555,524,
            568,567,73,74,318,14,19,15,388,42,
            43,482,763,133,209,518,30,66,350,31,
            192,135,132,134,158,318,14,19,15,388,
            579,43,482,408,598,521,493,523,522,555,
            524,568,567,73,1612,137,949,164,220,310,
            387,166,400,110,141,144,147,150,318,14,
            19,15,388,42,39,1210,1263,1444,1481,1499,
            1205,318,14,19,15,388,579,43,482,408,
            1031,521,493,523,522,555,524,568,567,73,
            1626,318,14,19,15,388,42,43,482,408,
            360,521,493,523,522,555,524,568,567,92,
            318,14,19,15,388,42,43,482,408,442,
            521,493,523,522,555,524,568,567,92,318,
            14,19,15,388,42,43,613,1627,318,14,
            19,15,388,42,43,482,803,318,14,19,
            15,388,42,43,482,408,208,521,493,523,
            522,555,524,568,567,92,318,14,19,15,
            388,42,43,482,408,409,521,493,523,522,
            555,524,568,567,92,318,14,19,15,388,
            42,43,643,1634,318,14,19,15,388,42,
            38,591,1061,318,14,19,15,388,42,43,
            482,408,199,521,493,523,522,555,524,568,
            567,92,318,14,19,15,388,42,43,482,
            408,608,521,493,523,522,555,524,568,567,
            72,69,318,14,19,15,388,42,37,200,
            881,318,14,19,15,388,42,43,482,408,
            590,521,493,523,522,848,269,607,194,540,
            504,540,402,349,214,1550,217,1592,219,220,
            225,1565,262,1103,1098,267,182,151,258,249,
            209,249,209,270,272,587,334,269,271,617,
            576,259,615,535,1594,214,1550,217,1592,219,
            220,225,1099,262,1103,1098,267,273,882,1536,
            215,1550,217,1592,219,220,225,1222,256,1232,
            252,1694,1265,318,14,19,15,388,42,43,
            482,408,614,521,493,523,522,555,524,879,
            318,14,19,15,388,42,43,482,408,1694,
            521,493,523,522,555,880,318,14,19,15,
            388,42,43,482,408,49,521,493,523,864,
            97,513,318,14,19,15,388,42,36,6,
            1610,1694,559,1630,1694,133,209,323,1523,334,
            133,209,563,136,132,134,158,478,140,132,
            134,158,250,209,214,1550,217,1592,219,220,
            225,21,250,209,287,614,1694,138,1132,164,
            20,1694,139,461,164,334,142,145,148,151,
            318,14,19,15,388,42,43,482,408,513,
            521,493,845,133,209,590,613,268,1610,195,
            197,143,132,134,158,823,783,318,14,19,
            15,388,42,43,482,408,1632,521,847,1694,
            1071,181,214,1550,217,1592,219,220,225,318,
            14,19,15,388,42,35,1132,318,14,19,
            15,388,42,43,482,408,255,683,318,14,
            19,15,388,42,43,482,408,6,703,318,
            14,19,15,388,42,34,1525,196,197,318,
            14,19,15,388,42,43,482,408,478,723,
            318,14,19,15,388,42,43,482,408,227,
            743,529,323,599,540,6,462,540,1610,1694,
            1513,237,1211,1694,1539,517,221,14,19,15,
            388,42,35,272,249,209,269,249,209,289,
            1694,269,214,1550,217,1592,219,220,225,242,
            1694,1694,262,1103,1098,267,1536,262,1103,1098,
            267,221,14,19,15,388,42,35,6,6,
            470,1265,386,545,466,386,261,307,307,454,
            193,1694,1101,1694,243,318,14,19,15,388,
            42,46,194,194,133,209,546,609,1694,855,
            1386,1386,146,132,134,158,323,478,86,86,
            88,495,334,453,453,318,14,19,15,388,
            42,45,318,14,19,15,388,42,44,500,
            239,133,209,1100,274,6,6,452,1126,149,
            132,134,158,372,1535,454,334,6,1640,133,
            209,1694,823,588,1229,588,1545,152,132,134,
            158,587,823,6,823,588,334,1071,275,128,
            1552,206,1598,530,823,588,86,194,1694,194,
            611,1237,79,227,823,1383,590,1383,221,194,
            1694,823,1543,254,1694,372,1100,1383,269,194,
            1482,190,1097,190,823,224,1071,1383,1090,1599,
            1285,1599,26,190,264,1103,1098,267,246,1071,
            1595,1599,594,190,391,590,6,454,128,600,
            1613,1599,254,823,205,454,478,6,823,1642,
            166,1097,478,590,360,254,410,223,1071,1172,
            1129,184,1482,194,1097,1100,478,478,86,238,
            590,1383,590,305,478,240,86,1694,1643,183,
            590,878,334,572,254,1694,1694,191,1694,241,
            286,1516,1694,1097,1694,1694,201,288,202,1117,
            1694,1694,1694,205,226,230,277,1694,1694,1694,
            1694,316,1694,1694,1694,1694,1694,1694,1255,1129,
            1694,0,17,178,0,18,177,0,1,1916,
            0,1,1927,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,0,
            10,11,12,13,14,15,16,17,18,19,
            20,0,22,23,24,25,26,27,28,0,
            0,1,0,12,4,0,36,37,38,39,
            40,41,42,43,44,45,46,47,0,1,
            0,21,4,3,6,7,8,57,58,59,
            51,52,53,54,16,0,31,32,0,1,
            2,3,24,25,26,27,28,9,0,1,
            51,52,53,54,36,37,38,39,40,41,
            42,43,44,45,46,47,0,0,1,49,
            50,4,6,7,8,57,58,59,0,0,
            1,33,16,4,0,0,51,52,53,54,
            24,25,26,27,28,0,0,0,1,3,
            21,4,36,37,38,39,40,41,42,43,
            44,45,46,47,0,1,2,3,4,5,
            0,1,2,3,10,11,12,13,14,15,
            16,17,18,19,20,0,22,23,3,0,
            1,2,3,4,5,49,50,63,34,10,
            11,12,13,14,15,16,17,18,19,20,
            0,22,23,0,0,1,2,3,4,5,
            10,11,9,34,10,11,12,13,14,15,
            0,17,18,19,20,21,22,23,0,0,
            0,1,2,3,4,5,0,1,2,35,
            10,11,12,13,14,15,0,17,18,19,
            20,5,22,23,0,0,1,2,3,4,
            0,0,1,3,34,10,11,12,13,14,
            15,0,17,18,19,20,30,22,23,0,
            1,2,3,4,55,31,32,67,68,10,
            11,12,13,14,15,0,17,18,19,20,
            21,22,23,0,1,2,3,4,80,49,
            50,65,0,10,11,12,13,14,15,0,
            17,18,19,20,21,22,23,0,1,2,
            3,4,0,1,79,64,4,10,11,12,
            13,14,15,0,17,18,19,20,5,22,
            23,0,1,2,3,4,0,62,0,0,
            2,10,11,12,13,14,15,9,17,18,
            19,20,29,22,23,0,1,2,3,4,
            0,0,0,64,3,10,11,12,13,14,
            15,0,17,18,19,20,0,22,23,0,
            0,2,3,21,5,6,7,8,9,0,
            30,0,1,2,33,16,5,0,0,1,
            9,62,4,24,25,26,27,28,29,0,
            21,2,3,33,5,6,7,8,9,21,
            29,0,1,2,3,16,0,56,31,32,
            9,0,0,24,25,26,27,28,29,63,
            69,70,71,72,73,74,75,76,77,78,
            0,0,21,2,3,0,6,7,8,0,
            9,6,7,8,5,0,16,0,0,0,
            1,16,5,4,24,25,26,27,28,24,
            25,26,27,28,0,0,0,2,29,0,
            6,7,8,0,9,6,7,8,13,14,
            16,34,0,1,2,16,0,0,24,25,
            26,27,28,24,25,26,27,28,0,0,
            2,2,3,5,0,60,61,9,9,0,
            6,7,8,48,0,6,7,8,0,0,
            6,7,8,0,6,7,8,29,0,56,
            0,66,0,0,6,7,8,55,6,7,
            8,0,0,10,11,0,5,60,61,0,
            31,32,10,11,31,32,0,0,9,0,
            0,5,5,0,5,2,0,0,0,0,
            29,30,9,5,5,9,0,0,0,12,
            0,21,0,0,0,29,0,0,0,9,
            0,0,35,0,35,0,0,48,21,0,
            0,56,0,0,35,0,30,0,30,0,
            0,0,0,30,48,33,30,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,65,0,0,0,0,0,55,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1694,610,1438,1319,611,1,1904,1905,1906,58,
            1212,1072,1349,372,362,329,1855,1704,1705,1706,
            1707,63,1024,888,1856,1854,1907,1857,1853,60,
            1694,1873,1694,1270,1874,53,1860,1865,1864,1862,
            1863,1861,1866,1867,1859,1868,1869,1870,1694,1872,
            47,1219,1871,1492,1904,1905,1906,1005,883,849,
            1370,1359,1338,1327,1855,59,834,968,257,1916,
            1102,1,1856,1854,1907,1857,1853,497,1,1691,
            1370,1359,1338,1327,1860,1865,1864,1862,1863,1861,
            1866,1867,1859,1868,1869,1870,127,1694,1723,1485,
            1455,1724,1904,1905,1906,1005,883,849,1694,1694,
            1873,1947,1855,1874,67,1694,1370,1359,1338,1327,
            1856,1854,1907,1857,1853,1694,49,204,1873,1492,
            1347,1874,1860,1865,1864,1862,1863,1861,1866,1867,
            1859,1868,1869,1870,1,1711,1438,1396,1712,1697,
            1694,1916,1379,1443,1212,1072,1349,372,362,329,
            526,1704,1705,1706,1707,1694,1024,888,1133,1694,
            1711,1438,1431,1712,1697,1485,1455,1081,1696,1212,
            1072,1349,372,362,329,901,1704,1705,1706,1707,
            50,1024,888,266,1,1711,1438,1319,1712,27,
            1015,959,497,1696,1212,1072,1349,372,362,329,
            71,1704,1705,1706,1707,1607,1024,888,1694,1694,
            1694,1711,1438,1319,1712,1697,1,1916,1379,27,
            1212,1072,1349,372,362,329,1694,1704,1705,1706,
            1707,1703,1024,888,57,1694,1,1,1,1,
            48,1694,1928,1492,1696,1,1,1,1,1,
            1,69,1,1,1,1,1279,1,1,1,
            1711,1438,1319,1712,1052,834,968,1163,1596,1212,
            1072,1349,372,362,329,65,1704,1705,1706,1707,
            1607,1024,888,1694,1711,1438,1319,1712,1681,1485,
            1455,1702,1694,1212,1072,1349,372,362,329,70,
            1704,1705,1706,1707,1607,1024,888,1694,1711,1438,
            1319,1712,1694,1873,2000,1180,1874,1212,1072,1349,
            372,362,329,1694,1704,1705,1706,1707,1699,1024,
            888,1694,1711,1439,1319,1712,1694,1196,265,66,
            1125,1212,1072,1349,372,362,329,497,1704,1705,
            1706,1707,1698,1024,888,1,1711,1438,1319,1712,
            87,1,1694,1180,1133,1212,1072,1349,372,362,
            329,42,1704,1705,1706,1707,68,1024,888,17,
            1,1682,1682,391,1682,178,178,178,1682,41,
            590,1,1688,1102,1947,178,1699,56,1694,1873,
            497,1196,1874,178,178,178,178,178,1682,18,
            391,1685,1685,1947,1685,177,177,177,1685,1385,
            1698,263,1916,1102,1443,177,1694,814,834,968,
            497,186,1694,177,177,177,177,177,1685,1081,
            794,774,754,734,714,674,694,654,634,614,
            128,260,1505,1381,1,129,1904,1905,1906,1,
            497,1904,1905,1906,89,61,1855,1694,1694,203,
            1476,1855,1697,1476,1856,1854,1907,1857,1853,1856,
            1854,1907,1857,1853,130,31,1694,1440,89,131,
            1904,1905,1906,207,1506,1904,1905,1906,1718,1719,
            1855,1696,1,1916,1379,1855,1694,62,1856,1854,
            1907,1857,1853,1856,1854,1907,1857,1853,1,263,
            1381,1381,1443,1699,245,1297,484,497,497,1694,
            1,1,1,451,246,1904,1905,1906,244,55,
            1,1,1,54,1904,1905,1906,1698,247,940,
            1694,450,248,52,1904,1905,1906,996,1904,1905,
            1906,1694,51,1015,959,1694,1699,1297,484,1694,
            834,968,1015,959,834,968,1,1,921,1694,
            185,1699,189,218,1701,1531,283,64,1,1,
            1698,1160,497,1703,188,977,251,187,28,1270,
            216,1517,1,28,198,1698,203,1694,1694,497,
            1694,1694,189,1694,1700,1694,1694,1227,1533,1694,
            1694,570,1694,1694,188,1694,1286,1694,430,1694,
            1694,1694,1694,1721,1382,1946,2480,1694,1694,1694,
            1694,1694,1694,1694,1694,1694,1694,1694,1694,1694,
            1694,1694,1694,1702,1694,1694,1694,1694,1694,1033
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            426,1,80,41,80,80,80,80,80,80,
            80,80,80,337,3,181,178,185,183,191,
            189,193,192,195,194,10,80,337,163,163,
            256,337,321,321,378,80,80,80,80,80,
            80,80,80,80,80,80,80,80,80,80,
            80,80,80,80,80,80,80,80,80,80,
            80,80,80,80,80,80,163,72,260,74,
            291,161,160,231,243,243,70,70,243,70,
            243,351,117,117,163,45,178,178,183,183,
            183,183,181,181,189,185,185,192,191,224,
            194,193,166,54,256,251,97,45,374,78,
            163,397,294,206,262,206,262,331,206,80,
            54,251,374,374,45,77,74,163,254,351,
            162,296,262,262,262,262,331,331,333,49,
            54,374,251,80,80,45,78,291,219,218,
            260,296,163,262,288,324,262,262,288,333,
            226,333,331,288,52,229,321,80,48,54,
            251,45,45,163,397,294,254,288,326,288,
            288,80,321,333,56,45,321,80,333,296,
            202,80,201,93,260,288,45,288,163,162,
            326,80,93,322
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,65,9,2,48,66,13,14,12,
            3,10,11,49,50,31,32,51,52,53,
            54,60,61,62,63,64,67,68,35,56,
            69,70,71,72,73,75,74,76,77,78,
            55,29,80,30,34,5,0,56,9,48,
            0,5,35,9,48,13,14,12,3,10,
            11,22,23,15,2,17,18,19,20,1,
            4,21,0,6,7,8,16,34,5,17,
            18,19,20,4,13,14,12,10,11,22,
            23,15,3,2,1,0,6,7,8,2,
            17,18,19,20,1,4,13,14,12,3,
            10,11,22,23,15,0,7,16,28,8,
            27,26,25,6,24,48,66,13,14,12,
            10,11,49,50,31,32,51,52,53,54,
            60,61,62,63,64,67,68,56,69,70,
            71,72,73,74,75,76,77,78,3,2,
            9,30,29,5,0,56,69,70,71,72,
            73,74,75,76,77,78,21,3,49,50,
            10,11,32,31,51,52,53,54,60,61,
            12,62,63,64,34,29,35,80,67,68,
            55,65,5,30,0,24,6,25,26,27,
            7,16,28,8,1,3,21,2,5,30,
            29,65,9,55,0,5,30,35,56,0,
            44,36,41,39,40,38,37,42,43,45,
            46,47,55,65,28,25,16,24,27,26,
            6,7,8,30,1,5,29,2,9,3,
            0,24,36,6,37,57,25,38,26,39,
            40,27,7,41,42,16,58,28,59,43,
            44,8,45,46,47,1,4,35,5,0,
            3,2,9,29,5,24,36,6,37,57,
            25,38,26,39,40,27,7,41,42,16,
            58,28,59,43,44,8,45,46,47,33,
            4,1,0,65,5,3,1,2,55,0,
            1,4,5,35,30,0,15,17,18,19,
            20,2,13,14,12,3,10,11,22,23,
            4,1,57,58,59,44,36,41,39,40,
            38,37,42,43,45,46,47,28,25,16,
            24,27,26,6,7,8,0,5,29,15,
            17,18,19,20,1,4,2,13,14,12,
            3,10,11,22,23,0,24,36,6,37,
            57,25,38,26,39,40,27,7,41,42,
            16,58,28,59,43,44,8,45,46,47,
            1,4,33,3,0,15,17,18,19,20,
            1,4,2,13,14,12,3,10,11,22,
            23,79,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            83,8,17,8,17,17,17,17,17,17,
            17,17,17,64,8,8,8,8,8,8,
            8,8,8,8,8,8,17,64,41,41,
            55,1,19,19,68,65,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,65,17,17,17,17,17,17,17,
            17,17,17,17,17,17,41,8,73,21,
            54,31,31,47,48,48,27,27,48,27,
            48,43,8,8,41,23,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,81,56,81,16,23,62,22,
            41,71,40,8,81,8,81,81,8,17,
            16,81,62,62,23,22,9,41,34,2,
            8,80,81,75,81,75,27,81,25,11,
            81,62,9,17,17,23,22,33,31,31,
            73,80,41,75,29,59,86,75,29,25,
            8,8,27,29,15,8,27,17,13,16,
            9,23,23,41,71,40,35,29,50,29,
            29,17,27,25,17,23,27,17,25,79,
            60,17,8,50,73,29,23,29,41,41,
            50,17,37,8
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,77,76,75,74,73,72,0,20,0,
            89,0,91,0,66,9,4,0,68,0,
            9,4,23,0,51,0,27,0,26,0,
            25,0,22,9,43,42,36,34,0,9,
            22,0,61,62,63,64,52,28,0,9,
            36,34,0,22,9,43,42,0,9,67,
            0,58,0,32,9,45,0,9,84,0,
            9,24,49,0,56,9,32,0,86,24,
            9,0,9,83,0,9,32,48,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,9,86,87,48,64,76,1,10,
            11,8,6,7,68,69,81,82,83,84,
            3,12,13,44,55,60,63,72,90,42,
            16,17,30,89,91,47,52,56,61,62,
            66,67,74,75,78,79,80,4,14,15,
            18,19,20,21,29,31,54,70,73,22,
            23,24,25,26,92,5,27,28,32,33,
            34,35,36,37,38,39,40,41,93,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,101,105,106,107,108,0,109,
            110,111,112,113,114,115,116,117,118,129,
            0,97,96,122,149,98,121,128,0,0,
            0,140,145,147,0,148,0,0,0,0,
            158,159,160,0,100,120,137,139,146,155,
            0,131,136,0,0,138,150,153,154,157,
            132,133,134,135,144,161,99,102,103,104,
            119,123,124,125,126,127,130,142,0,0,
            143,152,95,0,141,151,156,162,163,0,
            164,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            158,80,33,39,87,107,113,138,12,19,
            49,67,119,124,26,45,97,154,176,180,
            147,1,1,30,54,77,184,6,101,129,
            166,93,57,57,57
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            17,17,4,4,17,17,17,144,17,24,
            4,24,17,17,24,4,95,24,24,4,
            151,4,4,24,4,24,24,9,104,132,
            169,95,64,59,72
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            4,63,25,25,63,61,61,98,53,44,
            25,39,61,61,44,25,48,5,4,4,
            18,91,90,42,25,36,2,66,48,99,
            4,48,39,37,39
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            35,35,34,34,35,35,35,86,35,29,
            34,29,35,35,29,34,65,29,29,34,
            55,34,34,29,34,29,29,56,1,92,
            29,65,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            34,19,23,23,19,19,19,-1,88,27,
            23,11,19,19,27,23,5,34,34,34,
            63,1,3,27,23,11,34,89,5,-1,
            34,5,11,11,11
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            139,9,0,96,0,181,102,0,31,136,
            0,144,163,102,21,0,98,0,150,102,
            2,135,0,97,0,150,102,2,0,153,
            2,0,112,16,175,102,9,0,112,175,
            102,16,9,0,112,16,9,0,112,175,
            102,9,0,112,9,0,129,0,2,0,
            151,97,0,2,97,0,150,102,2,129,
            0,2,0,150,97,0,140,2,0,144,
            173,102,21,120,57,0,144,173,102,21,
            57,0,125,0,99,0,178,102,125,0,
            102,125,0,141,99,0,148,102,21,120,
            59,0,148,102,21,120,58,0,148,102,
            21,59,0,148,102,21,58,0,187,85,
            0,77,2,100,97,99,0,187,115,138,
            2,89,0,53,0,0,138,68,110,0,
            29,117,0,162,2,15,0,144,163,102,
            21,115,162,2,0,162,2,0,97,3,
            0,104,0,98,0,177,2,97,0,138,
            9,97,0,138,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            390,0,389,0,1545,1599,1535,1525,1523,0,
            1117,1279,1379,1211,360,1102,1071,0,823,1205,
            307,0,1592,1550,1103,1098,360,1102,1071,1543,
            1381,1386,0,1431,1396,1180,1163,1196,1081,1297,
            484,1270,968,834,1370,1359,1338,1327,1492,1485,
            1455,1015,959,372,362,1349,1319,1212,1072,1024,
            888,329,1033,996,977,940,921,901,855,546,
            1052,526,497,814,794,774,754,734,714,694,
            674,654,634,614,307,590,454,570,410,430,
            339,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,176,102,164,15,23,22,11,10,3,
            12,14,13,2,97,101,100,104,103,106,
            105,108,107,110,109,98,30,2,162,138,
            125,102,66,48,2,9,11,10,50,49,
            3,54,53,52,51,31,32,12,61,60,
            63,62,68,67,64,78,77,76,74,75,
            73,72,71,70,69,56,162,115,102,9,
            2,136,135,165,166,167,59,58,168,57,
            169,170,1,4,177,138,100,100,103,103,
            103,103,101,101,105,104,104,107,106,138,
            109,108,115,21,142,3,16,112,102,3,
            153,102,2,120,21,120,21,21,120,55,
            102,3,102,102,112,175,151,150,117,102,
            152,102,21,102,21,102,102,21,163,102,
            21,102,151,175,16,112,3,2,127,129,
            102,30,150,102,148,125,149,102,148,173,
            120,174,102,144,30,181,48,9,182,102,
            151,112,112,140,102,2,142,148,102,148,
            144,56,30,173,56,139,48,9,163,102,
            178,55,140,2,102,144,139,144,150,179,
            30,55,142,30
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_cast_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_name",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_or_typedefname",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 79,
           SCOPE_UBOUND      = 34,
           SCOPE_SIZE        = 35,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 204,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2000,
           MAX_LA            = 2,
           NUM_RULES         = 306,
           NUM_NONTERMINALS  = 115,
           NUM_SYMBOLS       = 208,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1588,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1681,
           ERROR_ACTION      = 1694;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
