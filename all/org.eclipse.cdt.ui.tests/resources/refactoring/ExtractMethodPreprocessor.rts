//!ExtractFunctionRefactoringTest with FunctionStyleMacro2
//#org.eclipse.cdt.ui.tests.refactoring.extractfunction.ExtractFunctionRefactoringTest
//@A.h
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	int foo();
	
private:
	int help();
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	int foo();
	
private:
	int help();
    void exp(int & ii);
};

#endif /*A_H_*/

//@A.cpp
#include "A.h"

#define ADD(a,ab) a + ab + 2 + a

A::A()
{
}

A::~A()
{
}
int A::foo()
{
	int ii = 2;
	/*$*/++ii;
	ii = ADD(ii, 42);
	help();/*$$*/
	return ii;
}

int A::help()
{
	return 42;
}	

//=
#include "A.h"

#define ADD(a,ab) a + ab + 2 + a

A::A()
{
}

A::~A()
{
}
void A::exp(int & ii)
{
    ++ii;
    ii = ADD(ii, 42);
    help();
}

int A::foo()
{
	int ii = 2;
    exp(ii);
	return ii;
}

int A::help()
{
	return 42;
}	

//!Extract Method return value assinged to Macrocall Bug
//#org.eclipse.cdt.ui.tests.refactoring.extractfunction.ExtractFunctionRefactoringTest
//@.config
returnvalue=true
returnparameterindex=1
//@A.h
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	int foo();
private:
    int help();
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	int foo();
private:
    int help();
    int exp(int & i, int b);
};

#endif /*A_H_*/

//@A.cpp
#include "A.h"

#define ADD(b) b = b + 2

A::A()
{
}

A::~A()
{
}
int A::foo()
{
	int i = 2;
	int b = 42;
	/*$*/++i;
    help();
    ADD(b);/*$$*/
	b += 2;
	return i;
}

int A::help()
{
	return 42;
}	

//=
#include "A.h"

#define ADD(b) b = b + 2

A::A()
{
}

A::~A()
{
}
int A::exp(int & i, int b)
{
    ++i;
    help();
    ADD(b);
    return b;
}

int A::foo()
{
	int i = 2;
	int b = 42;
    b = exp(i, b);
	b += 2;
	return i;
}

int A::help()
{
	return 42;
}	

//!Extract Method Methodlength with more than 1 Macrocall Bug
//#org.eclipse.cdt.ui.tests.refactoring.extractfunction.ExtractFunctionRefactoringTest
//@.config
returnvalue=true
returnparameterindex=0
replaceduplicates=true
//@A.h
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	int foo();
private:
    int help();
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	int foo();
private:
    int help();
    int exp(int bb);
};

#endif /*A_H_*/

//@A.cpp
#include "A.h"

#define ADD(b) b = b + 2

A::A()
{
}

A::~A()
{
}
int A::foo()
{
	int i = 2;
	int bb = 42;
	++i;
    /*$*/ADD(bb);
    ADD(bb);/*$$*/
	bb += 2;
	return i;
}

int A::help()
{
	return 42;
}	

//=
#include "A.h"

#define ADD(b) b = b + 2

A::A()
{
}

A::~A()
{
}
int A::exp(int bb)
{
    ADD(bb);
    ADD(bb);
    return bb;
}

int A::foo()
{
	int i = 2;
	int bb = 42;
	++i;
    bb = exp(bb);
	bb += 2;
	return i;
}

int A::help()
{
	return 42;
}	

