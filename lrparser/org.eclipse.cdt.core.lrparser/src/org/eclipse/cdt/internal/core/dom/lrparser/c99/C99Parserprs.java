/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99Parserprs implements lpg.lpgjavaruntime.ParseTable, C99Parsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,0,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,3,1,1,
            1,4,4,3,3,2,2,8,1,0,
            1,1,1,1,2,2,2,2,2,2,
            2,2,2,4,1,4,1,3,3,3,
            1,3,3,1,3,3,1,3,3,3,
            3,1,3,3,1,3,1,3,1,3,
            1,3,1,3,1,5,1,3,3,3,
            3,3,3,3,3,3,3,3,1,1,
            2,1,0,1,3,1,1,1,1,1,
            1,1,1,3,3,2,3,5,1,2,
            1,1,1,2,5,7,5,1,0,7,
            5,10,9,3,2,2,2,3,2,4,
            3,3,3,3,3,1,1,1,1,2,
            1,2,2,2,1,2,2,1,2,2,
            1,2,2,1,2,2,1,3,1,3,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,5,5,6,6,2,
            2,2,1,0,1,2,4,2,1,1,
            3,1,1,2,3,6,7,1,0,1,
            3,1,3,1,1,1,1,1,1,3,
            1,1,1,1,1,3,1,2,2,1,
            6,4,1,3,6,1,3,1,3,2,
            4,3,5,4,6,6,3,5,1,1,
            2,3,4,1,2,1,3,1,1,3,
            2,1,1,1,1,2,1,2,3,3,
            1,2,2,3,4,5,1,5,1,1,
            3,3,4,1,1,2,3,2,3,2,
            1,0,1,2,1,1,1,1,1,2,
            4,4,6,2,4,-6,0,-167,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-3,0,-2,0,
            -260,0,-12,0,0,-113,0,0,0,-163,
            -39,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-58,
            0,0,0,0,0,-37,-20,0,-26,-4,
            0,0,0,0,0,0,0,-27,0,0,
            0,0,0,0,-29,-30,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-264,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-248,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-21,0,-160,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-31,
            -46,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-33,
            -13,0,0,0,0,-44,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-161,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-62,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -32,0,-101,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-18,-36,-125,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-177,0,-154,0,0,0,0,0,
            0,0,0,0,0,0,-268,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-143,0,0,0,-65,
            -24,-185,-48,0,-165,-76,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-61,
            0,-28,0,-92,0,-77,0,-118,0,0,
            0,0,0,0,0,-109,0,0,0,-56,
            0,-221,0,0,0,-138,0,-15,0,0,
            -87,0,-78,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-79,0,0,0,-150,-121,0,
            0,0,0,0,0,0,0,-105,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-127,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-156,-40,0,0,0,0,0,0,
            0,0,0,0,0,0,-240,0,0,0,
            0,0,0,0,0,-72,-80,0,0,0,
            0,0,0,0,0,0,0,0,0,-128,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -129,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-34,
            0,-130,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -35,0,-131,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-38,0,-132,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-49,0,-133,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-51,0,-134,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-54,0,-135,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-55,0,-136,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-60,0,-137,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-88,0,-184,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-191,-8,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-81,-22,-155,
            0,0,0,0,0,0,0,0,0,0,
            0,-82,-186,-83,-192,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-144,-84,-226,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-228,0,-162,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-41,0,0,0,0,0,0,0,
            0,-23,-63,-67,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-85,
            0,-157,0,0,0,0,0,0,0,0,
            0,0,-86,-45,0,-90,0,-91,-230,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-251,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-93,0,-126,
            -259,0,-158,-187,0,0,0,0,0,0,
            0,0,0,-25,0,-97,0,0,-96,0,
            0,0,-139,0,0,0,0,0,0,-196,
            0,0,0,-117,0,0,0,0,0,0,
            0,0,0,0,-94,-99,0,-159,0,0,
            0,0,0,0,0,0,0,0,-234,-100,
            0,0,0,0,-261,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-271,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-74,0,0,0,0,0,0,-7,
            0,-103,-220,0,-19,0,-108,-140,0,-245,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-124,0,
            0,0,0,-98,0,0,0,0,-95,-104,
            -188,0,0,0,0,0,-197,0,0,0,
            0,0,0,0,0,-106,0,0,0,0,
            -179,0,0,0,0,0,0,-53,-5,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-189,0,0,-102,0,0,0,-169,0,
            0,0,0,0,0,-112,0,0,0,0,
            0,0,0,0,0,-47,-193,0,-199,-114,
            -233,0,0,0,0,-152,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-115,
            0,-120,0,0,0,-168,0,0,0,0,
            0,0,0,0,-239,-180,0,-172,0,0,
            0,0,0,0,0,0,0,0,-253,0,
            0,0,0,-170,-64,0,0,-151,0,0,
            0,0,0,0,0,0,0,0,0,-200,
            0,0,0,0,0,-255,0,0,0,-145,
            0,0,0,0,0,0,0,0,0,0,
            0,-175,0,0,0,0,-182,-110,-183,0,
            0,0,-256,0,-75,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-202,
            0,0,0,-201,0,-146,0,0,0,-280,
            0,0,0,0,-238,0,-176,-250,0,0,
            0,0,0,0,0,0,-178,0,0,0,
            0,0,0,0,0,0,-286,0,0,0,
            -116,-17,0,-219,-222,0,0,0,0,0,
            0,0,-229,-190,-203,0,0,-224,-204,-205,
            0,0,0,-288,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-122,
            0,0,0,0,-236,-225,-257,0,0,0,
            0,0,0,0,0,-181,0,-232,-252,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -241,-263,0,0,0,0,0,0,0,-43,
            0,0,0,0,0,-206,-237,-207,0,0,
            0,0,-265,-208,0,0,-209,0,-123,-276,
            -210,-57,0,0,0,-211,0,0,-164,0,
            0,0,0,0,0,0,0,0,0,-1,
            0,-9,0,0,0,0,0,0,0,0,
            -247,0,0,0,0,0,0,0,0,0,
            0,-212,0,-59,0,0,0,0,0,0,
            0,-269,-213,-267,-272,-214,0,0,0,-66,
            0,-215,-258,0,0,0,0,0,0,0,
            0,0,0,0,0,-141,0,0,0,0,
            0,0,0,-142,0,0,0,0,0,-270,
            -274,0,-279,-282,0,0,0,-216,0,-10,
            -217,-218,0,0,0,-223,0,-231,-277,0,
            0,0,0,0,0,-243,0,0,-153,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-227,0,-11,-194,0,0,0,
            0,0,0,0,-14,-50,-235,0,0,0,
            0,-16,0,0,0,0,0,-278,-284,-287,
            0,-244,-246,0,0,-249,0,0,0,0,
            0,-273,0,0,0,-52,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-283,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-68,0,0,0,0,
            0,0,0,0,0,-69,-107,0,0,0,
            0,0,0,0,0,0,0,0,-70,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-71,0,0,0,0,
            0,0,0,-73,0,0,0,0,0,0,
            0,-89,0,0,0,0,0,0,0,-111,
            0,0,0,0,0,0,-147,0,0,0,
            0,0,0,0,0,0,-166,0,0,0,
            0,-148,0,0,0,0,0,0,0,-149,
            0,0,0,0,0,0,0,0,-195,0,
            0,0,0,0,0,0,-198,0,-242,0,
            0,-262,0,0,-42,0,0,0,0,-119,
            0,0,-266,0,-275,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-281,0,-285,0,
            -171,0,-173,0,-174,0,-254,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            100,1,26,21,34,34,24,24,35,35,
            19,19,2,2,2,2,3,3,3,4,
            4,5,5,5,5,5,5,5,5,64,
            64,81,81,81,6,6,6,6,6,6,
            6,6,6,6,6,7,7,8,8,8,
            8,9,9,9,10,10,10,11,11,11,
            11,11,12,12,12,13,13,14,14,15,
            15,16,16,17,17,18,18,22,22,22,
            22,22,22,22,22,22,22,22,22,36,
            27,20,101,101,102,102,56,37,37,37,
            37,37,37,37,38,38,38,30,30,83,
            83,65,65,39,39,40,40,40,59,59,
            41,41,41,41,42,42,42,42,42,48,
            48,23,23,23,23,23,49,49,49,90,
            90,85,85,85,85,86,86,86,87,87,
            87,88,88,88,89,89,89,84,84,77,
            77,78,50,53,53,53,53,53,66,67,
            67,67,67,67,67,67,67,67,67,67,
            67,76,76,25,25,25,73,73,73,73,
            74,74,74,68,68,69,69,61,61,54,
            103,103,91,92,92,92,75,75,93,93,
            94,94,79,79,28,29,29,29,51,52,
            52,43,43,43,43,31,31,32,44,44,
            45,33,33,95,95,46,105,105,104,104,
            47,47,47,47,47,47,47,47,47,96,
            55,55,55,55,70,70,62,62,62,63,
            63,57,57,106,106,72,72,71,71,71,
            58,58,58,58,58,58,58,60,60,82,
            82,82,82,80,107,108,108,109,109,110,
            110,100,100,111,111,97,97,97,97,112,
            112,98,98,98,99,99,772,562,1075,672,
            16,21,17,626,620,47,656,704,683,1048,
            787,1064,1062,1150,1085,1163,77,104,306,43,
            277,751,764,1210,137,214,809,367,225,233,
            1170,890,16,21,17,626,45,47,656,704,
            683,1048,787,1064,1798,139,136,138,460,162,
            1296,2030,1224,225,230,226,310,585,279,844,
            1295,1320,141,168,219,621,222,224,625,145,
            148,151,154,1808,232,1211,837,623,280,129,
            1323,1722,1800,1836,1845,1852,1592,367,225,234,
            1529,1030,1075,672,16,21,17,626,620,47,
            656,704,683,1048,787,1064,1062,1150,1085,1163,
            77,304,201,202,277,987,672,16,21,17,
            626,620,47,656,704,683,1048,787,1064,1062,
            1150,1085,1163,77,104,2025,1170,277,16,21,
            17,626,45,47,656,704,683,1048,787,1753,
            628,966,279,16,21,17,626,620,47,656,
            704,683,1048,787,1064,1062,1150,1085,1163,77,
            667,1220,280,277,1700,281,920,1485,16,21,
            17,626,620,47,656,704,683,1048,787,1064,
            1062,1150,1085,1163,77,282,480,1170,1133,16,
            21,17,626,45,47,656,704,683,1048,1756,
            240,160,1113,1699,16,21,17,626,620,47,
            656,704,683,1048,787,1064,1062,1150,1085,1163,
            77,104,1846,1170,1349,16,21,17,626,620,
            47,656,704,683,1048,787,1064,1062,1150,1085,
            1163,77,178,899,945,94,16,21,17,626,
            620,47,656,704,683,1048,787,1064,1062,1150,
            1085,1163,77,837,1105,1170,1427,16,21,17,
            626,45,47,656,704,683,1688,966,241,16,
            21,17,626,620,47,656,704,683,1048,787,
            1064,1062,1150,1085,1163,77,1249,366,107,277,
            309,423,1238,184,543,1170,1208,16,21,17,
            626,45,47,656,704,683,1048,787,1064,1062,
            1150,1802,113,89,987,1522,650,1430,1376,1322,
            1295,1630,178,98,1,543,1213,283,1237,1405,
            111,97,99,100,101,102,1295,1646,229,129,
            1223,112,1279,113,89,987,890,650,1228,1376,
            1322,1296,1987,804,98,198,255,214,109,305,
            1405,111,97,99,100,101,102,25,254,214,
            2009,211,112,563,584,232,654,1426,1170,827,
            16,21,17,626,45,47,656,1605,1170,110,
            16,21,17,626,45,47,656,704,683,1048,
            787,1064,1062,1150,1085,1163,96,137,214,1170,
            658,16,21,17,626,620,47,656,704,683,
            1048,787,1064,1062,1150,1085,1163,77,139,136,
            138,88,162,1170,178,16,21,17,626,45,
            47,656,704,1697,1577,141,168,1296,2033,1866,
            1649,285,145,148,151,154,1012,298,16,21,
            17,626,45,38,1722,1800,1836,1845,1852,1592,
            1170,274,16,21,17,626,620,47,656,704,
            683,1048,787,1064,1062,1150,1085,1163,77,1702,
            247,1170,87,16,21,17,626,620,47,656,
            704,683,1048,787,1064,1062,1150,1085,1163,77,
            104,1876,1170,86,16,21,17,626,620,47,
            656,704,683,1048,787,1064,1062,1150,1085,1163,
            77,104,1388,1170,85,16,21,17,626,620,
            47,656,704,683,1048,787,1064,1062,1150,1085,
            1163,77,985,670,1170,84,16,21,17,626,
            620,47,656,704,683,1048,787,1064,1062,1150,
            1085,1163,77,104,1917,1170,83,16,21,17,
            626,620,47,656,704,683,1048,787,1064,1062,
            1150,1085,1163,77,104,1970,1170,82,16,21,
            17,626,620,47,656,704,683,1048,787,1064,
            1062,1150,1085,1163,77,104,1591,1170,81,16,
            21,17,626,620,47,656,704,683,1048,787,
            1064,1062,1150,1085,1163,77,1010,1244,1170,80,
            16,21,17,626,620,47,656,704,683,1048,
            787,1064,1062,1150,1085,1163,77,104,709,1170,
            79,16,21,17,626,620,47,656,704,683,
            1048,787,1064,1062,1150,1085,1163,77,104,308,
            1170,78,16,21,17,626,45,47,656,704,
            683,1048,787,1064,1062,1150,1085,1163,96,1170,
            583,16,21,17,626,620,47,656,704,683,
            1048,787,1064,1062,1150,1085,1163,77,789,583,
            1170,1635,16,21,17,626,45,47,656,704,
            683,1694,593,809,776,1170,213,16,21,17,
            626,620,47,656,704,683,1048,787,1064,1062,
            1150,1085,1163,77,1249,239,1170,1687,16,21,
            17,626,620,47,656,704,683,1048,787,1064,
            1062,1150,1085,1163,77,243,543,1170,95,16,
            21,17,626,45,47,656,704,683,1048,787,
            1064,1062,1762,165,113,89,987,1648,650,302,
            1376,1322,1232,797,1151,98,16,21,17,626,
            43,1405,111,97,99,100,101,102,301,360,
            338,130,1170,112,16,21,17,626,45,47,
            656,704,1701,544,165,24,1221,242,1062,1170,
            109,16,21,17,626,45,47,656,704,683,
            1048,787,1064,1062,1150,1085,1163,96,1211,1170,
            681,16,21,17,626,45,47,656,704,683,
            1048,787,1064,1062,1150,1085,1163,96,1295,543,
            1242,123,543,1170,1248,16,21,17,626,45,
            47,656,704,1706,378,204,709,127,90,1238,
            113,89,987,890,650,1409,1376,1322,255,214,
            178,98,255,214,1223,1752,108,1405,111,97,
            99,100,101,102,1484,1300,813,18,1170,112,
            16,21,17,626,45,47,656,704,1742,178,
            964,228,254,214,126,1170,110,16,21,17,
            626,45,47,656,704,683,1048,787,1064,1062,
            1150,1085,1163,96,1170,1465,16,21,17,626,
            45,47,656,704,683,1048,787,1064,1062,1150,
            1085,1163,96,1189,1214,16,21,17,626,36,
            367,652,754,1313,1672,367,764,1116,501,1240,
            1170,205,16,21,17,626,45,47,656,704,
            683,1048,787,1064,1062,1150,1085,1163,76,797,
            1858,1224,225,378,436,543,1224,225,230,1300,
            226,890,187,219,621,222,385,421,219,621,
            222,224,161,113,89,271,1277,341,125,1376,
            1322,478,543,244,98,231,1367,1731,370,361,
            1405,1468,97,99,100,101,102,157,369,266,
            113,89,315,1269,1132,1300,1376,1322,297,1300,
            327,98,370,1430,272,1049,1116,1405,104,97,
            99,100,101,102,114,444,310,797,128,890,
            845,805,2022,1224,225,230,1170,296,16,21,
            17,626,45,47,1610,219,621,222,224,271,
            1236,186,1063,1816,263,273,62,1224,225,1168,
            1367,243,1224,225,230,546,1116,210,467,220,
            621,222,1166,264,219,621,222,224,271,520,
            543,336,1450,341,1300,1223,294,295,1170,1367,
            16,21,17,626,45,47,656,1609,113,89,
            890,189,1671,124,1376,1322,562,543,261,98,
            1301,543,271,254,214,1405,121,97,99,100,
            101,102,1306,1693,1862,113,89,1116,1135,1116,
            92,1376,1322,604,543,1189,98,16,21,17,
            626,35,1405,117,97,99,100,101,102,987,
            797,199,113,89,890,1210,104,543,1376,1322,
            646,543,188,98,206,104,402,1034,1238,1405,
            1872,97,99,100,101,102,90,1307,23,113,
            89,564,666,1550,22,1376,1322,688,543,196,
            98,370,827,288,1253,890,1405,116,97,99,
            100,101,102,1285,1309,668,113,89,890,711,
            1274,1554,1376,1322,730,543,1430,98,235,1479,
            137,214,197,1405,123,97,99,100,101,102,
            367,764,1506,113,89,797,890,1290,543,1376,
            1322,140,136,138,98,162,751,764,1116,1286,
            1405,122,97,99,100,101,102,90,142,168,
            1533,1224,225,230,118,146,149,152,155,245,
            210,890,458,219,621,222,224,1224,225,230,
            367,764,161,207,1063,1450,1280,797,831,219,
            621,222,224,507,869,270,1791,1009,1808,1223,
            1313,1255,310,1224,225,230,1261,157,369,104,
            543,1224,225,230,1132,220,621,222,224,271,
            302,246,865,219,621,222,224,254,214,90,
            1693,1116,161,1224,225,230,1801,200,202,297,
            272,327,1267,370,1060,220,621,222,224,1603,
            137,214,797,1065,890,890,466,158,369,286,
            1132,543,431,1300,1890,987,278,650,296,1210,
            1452,144,136,138,303,162,1132,543,275,1793,
            90,987,2035,199,1132,543,287,1233,143,168,
            1238,1300,300,1300,1300,1029,90,987,635,199,
            313,1312,551,1233,90,987,1038,199,1316,890,
            2097,1233,120,2099,1328,290,1064,293,295,1170,
            329,16,21,17,626,45,47,1686,137,214,
            1328,1389,676,276,1041,543,403,1012,1328,16,
            21,17,626,45,38,757,1037,1272,1429,147,
            136,138,812,162,90,987,1500,650,797,890,
            890,118,1317,759,137,214,1322,987,987,199,
            1402,248,377,137,214,2177,1037,2177,2177,2177,
            137,214,1637,1587,1614,150,136,138,2177,162,
            1116,2177,289,1763,153,136,138,987,162,199,
            666,156,136,138,260,162,1170,195,16,21,
            17,626,45,42,1327,1528,1170,1037,16,21,
            17,626,45,41,2177,28,2177,2177,2177,1170,
            666,16,21,17,626,45,40,195,987,2177,
            199,2177,2177,2177,1416,1528,1170,2177,16,21,
            17,626,45,39,1170,2177,16,21,17,626,
            45,37,1170,2177,16,21,17,626,45,38,
            1037,666,2177,2177,2177,2177,2177,1170,195,16,
            21,17,626,45,50,1466,1528,790,2177,2177,
            2177,987,1170,199,16,21,17,626,45,49,
            1170,2177,16,21,17,626,45,48,987,1094,
            1402,16,21,17,626,45,46,714,2019,56,
            2177,2177,56,2177,666,308,2177,2177,2177,2177,
            1262,195,2177,1262,2177,1290,543,2177,1527,1528,
            987,273,1402,987,259,1402,987,2177,650,1361,
            1604,987,2177,1402,987,90,1402,2177,2177,2177,
            2177,2177,118,2177,271,2177,2177,2177,2177,2177,
            2177,2177,2177,299,1465,1367,259,1672,2177,259,
            2177,1754,1604,2177,1754,1604,2177,259,1671,2177,
            259,1594,1361,1604,1794,1809,1604,1290,543,1290,
            543,104,543,104,543,104,543,104,543,2177,
            2177,2177,2177,2177,2177,2177,2177,90,2177,90,
            2177,90,2177,90,118,90,118,90,1595,2177,
            1608,2177,1636,2177,1755,2177,2177,1744,2177,2177,
            2177,2177,2177,2177,2177,2177,2177,2177,2177,2177,
            2177,2177,2177,2177,2177,2177,1859,2177,1860,2177,
            0,2186,1,0,3,1,2362,0,3,1,
            0,9,11,0,115,1560,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,0,43,44,45,46,47,48,49,
            50,51,52,53,54,0,56,57,58,4,
            60,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,0,43,44,45,46,47,48,
            49,50,51,52,53,54,74,56,57,58,
            65,60,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,0,43,44,45,46,47,
            48,49,50,51,52,53,54,0,56,57,
            58,4,60,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,0,43,44,45,46,
            47,48,49,50,51,52,53,54,0,56,
            57,58,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,59,43,44,45,46,47,
            48,49,50,51,52,53,54,0,56,57,
            58,0,1,2,3,4,5,0,0,0,
            1,2,0,4,0,1,2,79,4,0,
            19,20,21,22,23,24,25,26,27,0,
            29,30,31,21,22,23,24,0,26,27,
            0,29,30,31,43,44,45,46,47,48,
            49,50,51,52,53,54,42,56,57,58,
            0,1,2,3,4,5,0,1,2,0,
            62,2,75,76,5,74,0,0,1,19,
            20,21,22,23,24,25,26,27,19,29,
            30,31,84,85,86,87,88,89,90,91,
            92,93,0,43,44,45,46,47,48,49,
            50,51,52,53,54,78,56,57,58,42,
            0,1,0,21,22,23,24,0,26,27,
            0,29,30,31,74,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,80,0,1,2,
            25,4,42,28,42,0,0,32,33,34,
            35,36,37,38,39,40,41,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,32,42,
            0,1,25,0,4,28,0,1,78,32,
            33,34,35,36,37,38,39,40,41,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            75,76,42,0,25,0,1,28,42,4,
            0,32,33,34,35,36,37,38,39,40,
            41,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,0,0,0,1,25,42,6,28,
            7,8,0,32,33,34,35,36,37,38,
            39,40,41,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,0,82,83,0,25,79,
            6,28,0,6,0,32,33,34,35,36,
            37,38,39,40,41,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,0,0,0,77,
            25,0,6,28,7,8,0,32,33,34,
            35,36,37,38,39,40,41,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,0,1,
            0,77,25,0,1,28,3,7,8,32,
            33,34,35,36,37,38,39,40,41,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            0,1,2,0,25,42,0,28,0,6,
            2,32,33,34,35,36,37,38,39,40,
            41,0,1,2,61,0,5,21,22,23,
            24,28,26,27,9,29,30,31,0,0,
            19,2,21,22,23,24,0,26,27,3,
            29,30,31,0,0,1,2,3,0,59,
            0,0,0,1,43,44,45,46,47,48,
            49,50,51,52,53,54,0,56,57,58,
            0,5,21,22,23,24,0,26,27,3,
            29,30,31,0,0,19,42,21,22,23,
            24,0,26,27,65,29,30,31,70,71,
            72,73,66,55,0,61,63,64,0,43,
            44,45,46,47,48,49,50,51,52,53,
            54,0,56,57,58,21,22,23,24,0,
            26,27,3,29,30,31,60,0,0,0,
            70,71,72,73,6,62,62,43,44,45,
            46,47,48,49,50,51,52,53,54,0,
            1,2,3,4,5,0,7,8,9,10,
            11,12,13,14,15,16,17,18,70,71,
            72,73,0,24,0,1,2,3,4,5,
            61,7,8,9,10,11,12,13,14,15,
            16,17,18,0,1,0,1,2,24,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,0,66,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,21,22,23,0,0,
            66,0,1,2,3,4,5,0,7,8,
            9,10,11,12,13,14,15,16,17,18,
            21,22,23,0,1,0,0,0,1,3,
            0,1,2,3,4,5,60,7,8,9,
            10,11,12,13,14,15,16,17,18,0,
            20,0,0,0,0,6,0,6,6,6,
            0,63,64,9,0,1,2,66,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,0,1,2,60,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,0,1,2,0,4,5,3,7,
            8,9,10,11,12,13,14,15,16,17,
            18,0,1,2,0,4,5,3,7,8,
            9,10,11,12,13,14,15,16,17,18,
            0,1,2,0,4,5,0,7,8,9,
            10,11,12,13,14,15,16,17,18,0,
            1,2,0,4,5,60,7,8,9,10,
            11,12,13,14,15,16,17,18,0,1,
            2,0,4,5,60,7,8,9,10,11,
            12,13,14,15,16,17,18,0,1,0,
            0,2,0,3,5,6,4,10,11,0,
            0,2,0,3,5,6,0,0,19,2,
            20,0,5,6,3,0,0,0,19,2,
            20,0,5,21,22,23,19,0,0,42,
            2,20,0,5,0,3,19,21,22,23,
            0,0,21,22,23,55,0,19,21,22,
            23,0,62,0,67,55,0,4,0,0,
            68,69,62,4,0,0,55,3,81,0,
            55,0,3,2,0,0,5,3,3,0,
            0,0,3,3,20,0,0,55,0,20,
            19,0,0,61,20,0,0,63,64,20,
            42,0,6,63,64,0,65,42,0,63,
            64,0,0,0,0,59,65,0,0,55,
            0,68,69,0,0,67,0,68,69,0,
            61,0,67,0,0,0,61,0,0,0,
            55,61,0,55,0,59,0,55,0,0,
            59,0,0,0,59,0,0,0,0,0,
            0,0,0,62,59,0,0,59,0,0,
            59,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            2177,1,3811,1456,1,2164,2,1,1,1,
            1,1,1,1,1,1,1,1,1,3808,
            2187,3,3,3,3,2280,3,3,2,3,
            3,3,1226,1255,718,1359,1360,1354,1229,1270,
            1208,1256,2177,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,882,
            2185,9,2171,2171,2171,2171,2171,2171,2171,2171,
            2171,2171,2171,2171,2171,2171,2171,2171,2171,2171,
            2171,2171,2171,2171,2171,2171,2171,2171,2171,2171,
            2171,2171,2171,2171,2171,2171,2171,2171,2171,2171,
            2171,2171,2171,1,2171,2171,2171,2171,2171,2171,
            2171,2171,2171,2171,2171,2171,2160,2171,2171,2171,
            2435,2171,2177,1,3811,1456,1,2164,2,1,
            1,1,1,1,1,1,1,1,1,1,
            1,3808,2187,3,3,3,3,2280,3,3,
            2,3,3,3,1226,1255,718,1359,1360,1354,
            1229,1270,1208,1256,2,3,3,3,3,3,
            3,3,3,3,3,3,3,2177,3,3,
            3,882,2185,2177,1,3811,2188,1,2164,2,
            1,1,1,1,1,1,1,1,1,1,
            1,1,3808,2187,3,3,3,3,2280,3,
            3,2,3,3,3,1226,1255,718,1359,1360,
            1354,1229,1270,1208,1256,2177,3,3,3,3,
            3,3,3,3,3,3,3,3,73,3,
            3,3,2177,1,3811,2188,1,2164,2,1,
            1,1,1,1,1,1,1,1,1,1,
            1,3808,2187,3,3,3,3,2280,3,3,
            2,3,3,3,1226,1255,718,1359,1360,1354,
            1229,1270,1208,1256,2283,3,3,3,3,3,
            3,3,3,3,3,3,3,65,3,3,
            3,2177,3,3,2188,3,3,3,45,2177,
            1325,2404,132,966,262,1431,2404,1107,1,2177,
            3,2187,3,3,3,3,2475,3,3,2177,
            3,3,3,2392,2393,2394,2342,71,2343,2341,
            2177,2395,2344,2340,3,3,3,3,3,3,
            3,3,3,3,3,3,486,3,3,3,
            2177,3,3,2188,3,3,1,1325,2404,209,
            989,2360,1050,585,2362,292,115,223,1164,3,
            2187,3,3,3,3,2475,3,3,2361,3,
            3,3,968,947,926,905,884,842,863,821,
            800,739,133,3,3,3,3,3,3,3,
            3,3,3,3,3,340,3,3,3,486,
            267,777,221,2392,2393,2394,2342,2177,2343,2341,
            72,2395,2344,2340,291,2177,1,3811,2188,1,
            3814,2,1,1,1,1,1,1,1,1,
            1,1,1,1,2361,2187,2174,268,1431,2404,
            2280,966,486,2,486,66,2177,1226,1255,718,
            1359,1360,1354,1229,1270,1208,1256,2177,1,3811,
            2188,1,3814,2,1,1,1,1,1,1,
            1,1,1,1,1,1,2361,2187,1806,486,
            265,2017,2280,2177,1,2,269,777,340,1226,
            1255,718,1359,1360,1354,1229,1270,1208,1256,2177,
            1,3811,2188,1,3814,2,1,1,1,1,
            1,1,1,1,1,1,1,1,2361,2187,
            1050,585,486,75,2280,268,2017,2,486,966,
            74,1226,1255,718,1359,1360,1354,1229,1270,1208,
            1256,2177,1,3811,2188,1,3814,2,1,1,
            1,1,1,1,1,1,1,1,1,1,
            2361,2187,2177,54,2177,1123,2280,486,386,2,
            1819,1436,69,1226,1255,718,1359,1360,1354,1229,
            1270,1208,1256,2177,1,3811,2188,1,3814,2,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2361,2187,230,625,1709,191,2280,1107,
            233,2,2177,903,70,1226,1255,718,1359,1360,
            1354,1229,1270,1208,1256,2177,1,3811,2188,1,
            3814,2,1,1,1,1,1,1,1,1,
            1,1,1,1,2361,2187,190,56,2177,446,
            2280,2177,924,2,1819,1436,2177,1226,1255,718,
            1359,1360,1354,1229,1270,1208,1256,2177,1,3811,
            2188,1,3814,2,1,1,1,1,1,1,
            1,1,1,1,1,1,2361,2187,2177,2101,
            55,446,2280,1,2017,2,2184,1819,1436,1226,
            1255,718,1359,1360,1354,1229,1270,1208,1256,2177,
            1,3811,2188,1,3814,2,1,1,1,1,
            1,1,1,1,1,1,1,1,2361,2187,
            1,1325,2404,2177,2280,486,134,2,2177,583,
            2416,1226,1255,718,1359,1360,1354,1229,1270,1208,
            1256,1,1325,2404,2183,67,2359,2392,2393,2394,
            2342,1567,2343,2341,507,2395,2344,2340,62,3,
            2358,2415,2392,2393,2394,2342,2177,2343,2341,2182,
            2395,2344,2340,57,1,1431,2404,2184,30,1169,
            2177,135,2177,2103,2347,2352,2351,2349,2350,2348,
            2353,2354,2346,2355,2356,2357,2177,678,481,333,
            64,2359,2392,2393,2394,2342,1,2343,2341,2161,
            2395,2344,2340,159,212,2358,486,2392,2393,2394,
            2342,2177,2343,2341,2435,2395,2344,2340,1258,1213,
            1152,763,2181,2206,131,2183,708,1488,63,2347,
            2352,2351,2349,2350,2348,2353,2354,2346,2355,2356,
            2357,2177,678,481,333,2392,2393,2394,2342,2177,
            2343,2341,2184,2395,2344,2340,2185,2177,192,2177,
            1258,1213,1152,763,945,461,1010,2347,2352,2351,
            2349,2350,2348,2353,2354,2346,2355,2356,2357,1,
            1760,2196,2182,786,2197,2177,1946,1929,1954,1535,
            1313,1134,2189,2190,2191,2192,1916,1906,1258,1213,
            1152,763,2177,522,2177,1760,2196,2182,1837,2197,
            2183,1946,1929,1954,1535,1313,1134,2189,2190,2191,
            2192,1916,1906,2177,2105,2177,1760,2196,1065,1962,
            2197,1008,1946,1929,1954,1535,1313,1134,2189,2190,
            2191,2192,1916,1906,250,2181,1,1760,2196,29,
            1962,2197,1008,1946,1929,1954,1535,1313,1134,2189,
            2190,2191,2192,1916,1906,1,1,1,61,251,
            2181,2177,1760,2196,2182,1962,2197,2177,1946,1929,
            1954,1535,1313,1134,2189,2190,2191,2192,1916,1906,
            1,1,1,2177,1834,2177,3,2177,2107,194,
            3,1,1,119,1,2168,29,1,1,1,
            1,1,1,1,1,1,1,1,1,3,
            119,230,2177,44,68,2,2177,234,583,1565,
            2177,708,1488,507,1,1760,2196,2181,1962,2197,
            1008,1946,1929,1954,1535,1313,1134,2189,2190,2191,
            2192,1916,1906,2177,1760,2196,194,1962,2197,1565,
            1946,1929,1954,1535,1313,1134,2189,2190,2191,2192,
            1916,1906,1,1760,2196,2177,1962,2197,2186,1946,
            1929,1954,1535,1313,1134,2189,2190,2191,2192,1916,
            1906,3,1,1,3,1,2168,193,1,1,
            1,1,1,1,1,1,1,1,1,1,
            2177,1776,2196,2177,1962,2197,2177,1946,1929,1954,
            1535,1313,1134,2189,2190,2191,2192,1916,1906,2177,
            1760,2196,2177,1962,2197,2185,1946,1929,1954,1535,
            1313,1134,2189,2190,2191,2192,1916,1906,2177,1784,
            2196,2177,1962,2197,193,1946,1929,1954,1535,1313,
            1134,2189,2190,2191,2192,1916,1906,34,1510,2177,
            236,2360,51,224,2362,541,2000,2203,2204,2177,
            237,2360,2177,224,2362,840,2177,2177,2361,2360,
            224,2177,2362,861,2188,208,252,2177,2361,2360,
            224,249,2362,2392,2393,2394,2361,253,2177,1556,
            2208,2187,2177,2210,60,2184,2361,2392,2393,2394,
            59,3,2392,2393,2394,224,58,2209,2392,2393,
            2394,3,224,53,1084,224,2177,2000,2177,52,
            1992,1977,224,2000,2177,284,1680,2188,616,1,
            3774,208,119,622,1,1,622,2188,2184,2177,
            1,2177,2188,93,2187,91,2177,1863,256,119,
            622,2177,30,2183,2187,203,2177,708,1488,2187,
            1189,2177,1565,708,1488,3,2435,1294,1,708,
            1488,1,2177,2177,2177,1381,2434,2177,2177,331,
            2177,1992,1977,2177,2177,1568,2177,1992,1977,2177,
            119,2177,1790,2177,2177,2177,2183,2177,2177,2177,
            1086,93,2177,1847,2177,2282,2177,425,2177,2177,
            1330,2177,2177,2177,1275,2177,2177,2177,2177,2177,
            2177,2177,2177,597,2361,2177,2177,2360,2177,2177,
            2362
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            410,1,355,438,410,355,440,501,444,456,
            456,3,3,456,3,456,358,569,440,284,
            358,501,193,236,235,537,536,569,8,327,
            61,124,61,124,197,61,440,464,472,569,
            295,358,440,81,204,43,440,328,124,124,
            124,124,197,197,464,381,440,295,475,358,
            438,104,101,381,159,343,269,269,269,269,
            269,85,269,269,269,153,170,175,173,181,
            177,184,183,186,185,187,204,41,269,8,
            536,327,267,194,194,231,284,253,284,284,
            269,194,244,79,269,79,124,150,74,124,
            124,150,200,286,200,197,381,464,297,501,
            358,440,381,101,84,81,269,269,269,269,
            269,269,269,269,269,269,269,472,472,247,
            343,343,231,231,387,269,269,269,269,269,
            269,269,269,269,269,269,269,269,269,269,
            269,269,269,269,269,206,41,325,194,194,
            269,385,269,269,190,284,327,79,253,150,
            76,150,150,269,231,200,464,472,467,471,
            269,269,101,85,43,569,469,292,472,472,
            472,101,173,173,170,170,177,177,175,175,
            175,175,183,181,185,184,79,186,471,200,
            407,472,284,472,472,269,341,328,193,269,
            192,150,291,569,297,101,101,41,247,295,
            472,542,503,501,269,442,150,39,540,231,
            269,406,253,269,253,253,267,194,327,76,
            269,542,467,41,469,297,472,43,101,231,
            269,472,326,194,267,200,472,101,194,253,
            387,194,150,472,387,253,472,253
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            74,0,2,19,5,6,0,26,43,21,
            44,56,27,45,29,46,47,30,22,48,
            49,24,57,31,58,50,51,23,52,53,
            54,19,5,3,62,55,20,0,3,60,
            42,67,1,13,14,15,16,2,5,10,
            11,9,4,7,8,17,18,12,6,0,
            26,21,27,29,30,22,24,31,23,42,
            55,61,6,20,3,4,2,1,59,0,
            21,22,23,24,10,11,9,4,7,8,
            17,18,12,1,2,5,13,14,15,16,
            66,3,0,21,22,23,10,11,9,4,
            7,8,17,18,12,1,2,5,13,14,
            15,16,0,26,43,21,44,56,27,45,
            29,46,47,30,22,48,49,24,57,31,
            58,50,51,23,52,53,54,19,5,60,
            3,0,42,1,67,81,10,11,62,84,
            85,86,87,88,90,89,91,92,93,4,
            68,69,7,8,64,63,70,71,72,73,
            75,76,9,77,78,79,60,82,83,66,
            61,59,55,20,3,0,2,19,5,3,
            60,55,0,3,61,26,43,21,44,56,
            27,45,29,46,47,30,22,48,49,24,
            57,31,58,50,51,23,52,53,54,65,
            2,19,5,0,1,3,59,62,55,61,
            20,42,0,6,28,0,3,61,4,1,
            42,0,28,6,34,36,19,39,41,37,
            32,38,35,33,40,25,20,3,13,14,
            15,16,2,5,10,11,9,4,7,8,
            17,18,12,1,0,3,55,60,62,0,
            2,4,1,42,3,61,26,43,21,44,
            56,27,45,29,46,47,30,22,48,49,
            24,57,31,58,50,51,23,52,53,54,
            19,5,65,0,74,80,60,28,6,34,
            36,39,41,37,32,38,35,33,40,25,
            20,3,13,14,15,16,12,10,11,9,
            7,8,17,18,2,1,4,19,5,56,
            57,58,51,43,48,46,47,45,44,49,
            50,52,53,54,31,27,24,26,30,29,
            21,22,23,0,32,0,3,61,12,13,
            14,15,16,2,5,1,10,11,9,4,
            7,8,17,18,0,62,42,67,0,74,
            26,43,21,44,56,27,45,29,46,47,
            30,22,48,49,24,57,31,58,50,51,
            23,52,53,54,19,5,25,20,3,4,
            1,2,0,51,43,48,46,47,45,44,
            49,50,52,53,54,59,20,31,27,24,
            26,30,29,21,22,23,4,2,42,1,
            55,61,3,0,26,43,21,44,56,27,
            45,29,46,47,30,22,48,49,24,57,
            31,58,50,51,23,52,53,54,19,5,
            6,0,9,4,7,8,68,69,63,64,
            70,71,72,73,75,76,77,78,79,82,
            83,59,84,85,86,87,88,89,90,91,
            92,93,66,61,60,6,3,55,20,62,
            0,26,43,21,44,56,27,45,29,46,
            47,30,22,48,49,24,57,31,58,50,
            51,23,52,53,54,19,5,65,4,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            102,10,121,57,76,1,60,54,97,98,
            98,74,74,98,74,98,93,137,66,10,
            121,54,58,29,29,10,10,137,10,16,
            10,121,10,121,121,10,63,121,14,137,
            37,139,66,23,37,21,61,31,121,123,
            121,123,74,121,121,50,83,13,106,121,
            57,20,25,50,10,112,21,21,21,21,
            21,24,21,21,21,10,10,10,10,10,
            10,10,10,10,10,10,13,121,21,10,
            10,39,56,58,58,74,10,70,10,10,
            21,58,10,10,21,10,123,17,57,89,
            123,17,11,10,10,74,50,48,45,10,
            4,66,50,25,24,48,21,21,21,21,
            21,21,21,21,21,21,21,14,14,132,
            112,112,27,27,86,114,21,21,21,21,
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,114,21,127,20,10,58,58,
            114,10,114,114,10,10,16,10,70,17,
            66,17,17,21,74,11,48,14,81,10,
            21,21,25,24,21,137,29,131,14,14,
            14,25,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,14,11,
            52,14,10,14,14,21,117,31,58,21,
            10,17,80,137,45,25,25,121,133,13,
            14,135,10,10,21,10,17,19,10,74,
            21,100,70,114,70,70,120,58,39,66,
            21,135,82,20,29,45,14,21,25,74,
            21,14,10,58,120,11,14,25,58,70,
            120,58,17,14,120,70,14,70
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            31,1,95,90,89,88,87,86,85,0,
            64,0,1,24,0,1,35,0,80,1,
            5,0,1,5,34,0,81,0,47,0,
            21,23,25,36,1,83,26,0,26,1,
            36,25,65,35,21,23,0,28,0,70,
            0,108,0,99,0,27,1,19,0,1,
            44,46,31,33,0,44,31,1,0,26,
            36,1,37,25,0,23,21,97,0,24,
            1,58,31,44,0,1,101,0,21,54,
            61,0,73,74,75,76,66,49,0,110,
            0,111,23,21,0,26,21,23,48,30,
            0,21,54,1,27,0,21,23,48,59,
            1,0,69,21,54,0,104,21,23,0,
            24,1,58,0,21,23,55,0,23,21,
            112,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            2,85,88,9,87,3,10,11,8,6,
            7,68,81,82,83,84,12,13,86,93,
            48,64,76,69,94,44,55,57,60,63,
            72,77,45,46,49,50,51,58,59,65,
            71,1,47,52,56,61,62,66,67,74,
            75,78,79,80,42,54,70,73,29,92,
            91,31,16,17,30,90,4,14,15,18,
            19,20,21,95,22,23,24,25,26,53,
            5,27,28,32,33,34,35,36,37,38,
            39,40,41,89
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,0,101,105,106,107,108,109,
            110,111,112,113,114,115,116,117,99,0,
            0,118,128,97,124,0,100,136,0,123,
            157,0,160,96,98,119,122,0,0,0,
            0,0,154,156,0,158,159,127,135,0,
            0,146,0,149,155,121,168,171,0,145,
            148,161,167,0,126,138,0,0,147,166,
            170,103,139,140,141,142,143,144,153,172,
            102,104,125,129,130,131,132,133,134,137,
            151,0,0,152,162,165,177,0,179,0,
            0,120,150,163,164,169,173,174,0,175,
            176,178,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            173,84,33,39,69,91,111,117,142,12,
            19,49,123,128,151,26,45,101,169,188,
            192,156,1,1,30,54,81,196,6,105,
            163,133,163,97,57,57,57
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            17,17,4,4,24,17,17,17,148,17,
            24,4,17,17,17,24,4,99,24,24,
            4,160,4,4,24,4,24,24,9,108,
            166,136,181,99,65,59,75
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            5,75,47,47,33,75,73,73,40,60,
            58,47,73,73,30,58,47,61,6,5,
            5,18,110,109,58,47,31,3,80,61,
            7,41,5,61,33,46,33
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            60,60,66,66,61,60,60,60,80,60,
            61,66,60,60,60,61,66,20,61,61,
            66,59,66,66,61,66,61,61,62,2,
            61,32,61,20,1,1,1
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            25,111,86,86,97,111,111,111,12,80,
            90,86,111,111,11,90,86,5,25,25,
            25,55,1,3,90,86,97,25,82,5,
            28,12,25,5,97,99,97
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            150,42,0,96,0,201,95,0,31,145,
            0,158,176,95,6,0,98,0,156,95,
            1,152,0,97,0,156,95,1,0,165,
            1,0,116,24,190,95,42,0,116,190,
            95,24,42,0,116,24,42,0,116,190,
            95,42,0,116,42,0,125,0,2,0,
            0,163,97,0,2,0,97,0,156,95,
            120,1,125,0,2,0,0,161,97,0,
            146,1,0,158,187,95,6,119,56,0,
            158,187,95,6,56,0,148,0,99,0,
            197,95,148,0,95,148,0,150,99,0,
            162,95,6,119,58,0,162,95,6,119,
            57,0,162,95,6,58,0,162,95,6,
            57,0,131,37,0,77,2,100,97,99,
            0,131,118,121,1,39,0,53,122,0,
            177,95,6,120,0,121,83,111,0,29,
            117,0,166,1,0,97,106,0,166,1,
            12,0,158,176,95,6,118,166,1,0,
            97,3,0,104,0,98,0,195,1,99,
            0,121,42,99,0,121,1,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1649,0,672,0,1970,1528,1917,1876,1846,0,
            1744,1614,1587,1560,1211,1533,1506,1479,1105,1381,
            1354,654,623,0,1535,1313,1134,2009,1837,625,
            340,1107,507,446,1258,1213,1152,763,1050,585,
            1819,1436,1488,708,2000,1992,1977,1962,1954,786,
            1946,1929,1916,1906,1294,1275,1189,1330,1169,1086,
            1065,1029,1010,989,968,947,926,905,884,863,
            842,821,800,739,564,718,543,522,486,597,
            461,402,425,308,0,1693,1367,1224,621,1672,
            1465,1431,2017,1402,1328,0,366,306,1672,331,
            1431,1402,1646,1630,1702,1426,1680,1325,1320,0,
            709,1592,306,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,194,115,117,205,95,95,189,179,180,
            181,58,57,182,56,183,184,95,1,125,
            199,189,178,138,125,172,127,95,140,6,
            119,6,119,6,6,119,149,4,146,95,
            1,95,55,42,1,62,149,95,6,95,
            6,95,95,6,4,95,149,120,206,115,
            117,24,116,95,100,1,12,18,17,8,
            7,4,9,11,10,99,102,104,103,106,
            105,108,107,110,109,111,120,6,4,140,
            127,177,40,33,35,38,32,37,41,39,
            95,130,120,36,34,119,95,162,148,163,
            95,162,187,119,188,95,95,164,95,120,
            95,95,95,116,190,164,93,92,91,89,
            90,88,87,86,85,84,62,166,121,148,
            1,1,81,67,1,42,69,68,4,63,
            64,8,7,76,75,73,72,71,70,77,
            9,79,78,83,82,95,95,3,121,119,
            1,131,1,1,196,28,6,150,59,162,
            95,162,158,62,55,187,164,156,117,157,
            190,24,116,4,118,95,152,1,166,166,
            195,121,103,103,102,102,105,105,104,104,
            104,104,107,106,109,108,121,110,198,176,
            95,121,32,121,121,55,1,95,197,59,
            146,158,1,95,55,116,116,6,149,1,
            165,95,118,118,59,55,158,55,201,67,
            42,202,118,1,118,118,142,153,177,55,
            59,95,149,95,152,95,156,62,150,67,
            42,121,131,153,113,176,156,150,118,80,
            113,153,158,153,113,118,153,118
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "TypedefName",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_name",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_in_statement",
            "expression_list_actual",
            "constant_expression",
            "statement",
            "compound_statement",
            "identifier_or_typedefname",
            "block_item_list",
            "block_item",
            "declaration",
            "declaration_specifiers",
            "init_declarator_list",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "init_declarator",
            "complete_declarator",
            "initializer",
            "declarator",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer",
            "array_direct_declarator",
            "basic_direct_declarator",
            "knr_direct_declarator",
            "array_modifier",
            "function_direct_declarator",
            "parameter_type_list",
            "function_declarator",
            "identifier_list",
            "knr_function_declarator",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "external_declaration_list",
            "external_declaration",
            "declaration_list",
            "function_body"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 25,
           SCOPE_UBOUND      = 36,
           SCOPE_SIZE        = 37,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 288,
           NT_OFFSET         = 94,
           LA_STATE_OFFSET   = 2482,
           MAX_LA            = 2147483647,
           NUM_RULES         = 305,
           NUM_NONTERMINALS  = 113,
           NUM_SYMBOLS       = 207,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1720,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 74,
           EOLT_SYMBOL       = 74,
           ACCEPT_ACTION     = 2160,
           ERROR_ACTION      = 2177;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
