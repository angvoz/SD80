/* Generated By:JavaCC: Do not edit this line. CPPParserTokenManager.java */
package org.eclipse.cdt.internal.parser.generated;

import org.eclipse.cdt.internal.parser.ParserCallback;
// redirect to a fixed class
import org.eclipse.cdt.internal.parser.ASCII_CharStream;

public class CPPParserTokenManager implements CPPParserConstants
{
   static int beginLine;
   static int beginCol;
   static boolean lineDirective = false;

   static void resetBeginLineCol()
   {
   }
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
static private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(1, 0);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xfffffffeffffd9ffL & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAdd(0);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if ((0xfffffffeffffd9ffL & l) == 0L)
                     break;
                  kind = 12;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 3:
                  if (curChar == 10 && kind > 14)
                     kind = 14;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  kind = 12;
                  jjCheckNAdd(0);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(0);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
static private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 18;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_4()
{
   return jjMoveNfa_4(0, 0);
}
static private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 19)
                     kind = 19;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(1, 0);
}
static private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xbffffffbffffdbffL & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                     jjCheckNAdd(0);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  else if ((0x4000000400000000L & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if ((0xbffffffbffffdbffL & l) == 0L)
                     break;
                  kind = 15;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 3:
                  if (curChar == 10 && kind > 17)
                     kind = 17;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  kind = 15;
                  jjCheckNAdd(0);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(0);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_6()
{
   return jjMoveNfa_6(0, 0);
}
static private final int jjMoveNfa_6(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 22)
                     kind = 22;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0xa00L) != 0L)
            return 1;
         if ((active1 & 0xffffffffffffe000L) != 0L)
         {
            jjmatchedKind = 144;
            return 33;
         }
         if ((active0 & 0x800L) != 0L)
            return 109;
         return -1;
      case 1:
         if ((active1 & 0xfffffffeff3fe000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 144;
               jjmatchedPos = 1;
            }
            return 33;
         }
         if ((active1 & 0x100c00000L) != 0L)
            return 33;
         return -1;
      case 2:
         if ((active1 & 0xffefffeadfbfe000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 2;
            return 33;
         }
         if ((active1 & 0x10001420000000L) != 0L)
            return 33;
         return -1;
      case 3:
         if ((active1 & 0x220800088302a000L) != 0L)
            return 33;
         if ((active1 & 0xdde7ffe25cbd4000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 3;
            return 33;
         }
         return -1;
      case 4:
         if ((active1 & 0xc841080010054000L) != 0L)
            return 33;
         if ((active1 & 0x15a6f7e24cb80000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 4;
            return 33;
         }
         return -1;
      case 5:
         if ((active1 & 0x15a4036008180000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 5;
            return 33;
         }
         if ((active1 & 0x2f48244a00000L) != 0L)
            return 33;
         return -1;
      case 6:
         if ((active1 & 0x120002008100000L) != 0L)
            return 33;
         if ((active1 & 0x1484034000080000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 6;
            return 33;
         }
         return -1;
      case 7:
         if ((active1 & 0x1484020000080000L) != 0L)
            return 33;
         if ((active1 & 0x14000000000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 7;
            return 33;
         }
         return -1;
      case 8:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 8;
            return 33;
         }
         if ((active1 & 0x4000000000L) != 0L)
            return 33;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 35:
         return jjStartNfaWithStates_0(0, 11, 109);
      case 37:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 38:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x11000000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 32);
      case 41:
         return jjStopAtPos(0, 33);
      case 42:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 43:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x20L);
      case 44:
         return jjStopAtPos(0, 37);
      case 45:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x1440L);
      case 46:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x800L);
      case 47:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x40000000060L, 0x0L);
      case 58:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 36);
      case 60:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x5000400000000000L, 0x0L);
      case 61:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0xa000800000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 38);
      case 91:
         return jjStopAtPos(0, 30);
      case 93:
         return jjStopAtPos(0, 31);
      case 94:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000f8000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf00000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000078000000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x700000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x70000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2f80000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa03c000000000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc0000000000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x700000000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000000L);
      case 123:
         return jjStopAtPos(0, 28);
      case 124:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0xc000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 29);
      case 126:
         return jjStopAtPos(0, 71);
      default :
         return jjMoveNfa_0(32, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         break;
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      case 43:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         break;
      case 45:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 58:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         break;
      case 60:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      case 61:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 62:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000018000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4071000300000L);
      case 102:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 96, 33);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8808080000020000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100300008000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000011000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc0000602000000L);
      case 111:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x6000008a08c0000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2010006040004000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc00000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000002000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000000000L);
      case 124:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(2, 76);
         break;
      case 46:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(2, 39);
         break;
      case 61:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(2, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(2, 47);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1400000020000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000004000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x120000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xa4a002040000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4400000200200000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8080c0000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x84010000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000000000L);
      case 114:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 93, 33);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8100800000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000001008000L);
      case 116:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 98, 33);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40084012000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000002800000L);
      case 119:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 100, 33);
         break;
      case 121:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 116, 33);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, 0L, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active1, 0x400000018104000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active1, 0x800000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active1, 0x10000L);
      case 100:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 121, 33);
         break;
      case 101:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 33);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 88, 33);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 125, 33);
         return jjMoveStringLiteralDfa4_0(active1, 0x20210044200000L);
      case 103:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 33);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active1, 0x80020200000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active1, 0x800008000000000L);
      case 109:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 33);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active1, 0x100000000000L);
      case 111:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 33);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 95, 33);
         return jjMoveStringLiteralDfa4_0(active1, 0x8040000000000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active1, 0x4000000000000L);
      case 114:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 33);
         return jjMoveStringLiteralDfa4_0(active1, 0x1000080000000000L);
      case 115:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 115, 33);
         return jjMoveStringLiteralDfa4_0(active1, 0x4001000000040000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active1, 0x102404000080000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active1, 0x840000000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active1, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, 0L, active1, 0L);
}
static private final int jjMoveStringLiteralDfa4_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(2, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, 0L, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active1, 0x1000002000000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active1, 0x2810000000000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active1, 0x20000000000000L);
      case 101:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 123, 33);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 126, 33);
         return jjMoveStringLiteralDfa5_0(active1, 0x104000000000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active1, 0x80000000000000L);
      case 104:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 33);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active1, 0x408000080000L);
      case 107:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 78, 33);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active1, 0x4000008800000L);
      case 110:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 118, 33);
         return jjMoveStringLiteralDfa5_0(active1, 0x240000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active1, 0x200000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active1, 0x40004000000L);
      case 115:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 112, 33);
         return jjMoveStringLiteralDfa5_0(active1, 0x20000000000L);
      case 116:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 33);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 33);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 107, 33);
         return jjMoveStringLiteralDfa5_0(active1, 0x400000000200000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active1, 0x100000000100000L);
      case 119:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 127, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, 0L, active1, 0L);
}
static private final int jjMoveStringLiteralDfa5_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(3, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, 0L, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active1, 0x104000000000000L);
      case 99:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 103, 33);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 110, 33);
         return jjMoveStringLiteralDfa6_0(active1, 0x4000000000L);
      case 100:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 94, 33);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 108, 33);
         break;
      case 101:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 33);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 33);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 97, 33);
         return jjMoveStringLiteralDfa6_0(active1, 0x20000000000000L);
      case 102:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 109, 33);
         break;
      case 104:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 113, 33);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active1, 0x400000000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active1, 0x10008100000L);
      case 110:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 90, 33);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 33);
         return jjMoveStringLiteralDfa6_0(active1, 0x80000000080000L);
      case 116:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 111, 33);
         return jjMoveStringLiteralDfa6_0(active1, 0x1000022000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, 0L, active1, 0L);
}
static private final int jjMoveStringLiteralDfa6_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(4, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, 0L, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active1, 0x10000000000L);
      case 101:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 101, 33);
         return jjMoveStringLiteralDfa7_0(active1, 0x80020000000000L);
      case 102:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 117, 33);
         break;
      case 108:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 120, 33);
         return jjMoveStringLiteralDfa7_0(active1, 0x400000000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active1, 0x1000000000000000L);
      case 116:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 84, 33);
         return jjMoveStringLiteralDfa7_0(active1, 0x4004000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active1, 0x80000L);
      case 121:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 91, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, 0L, active1, 0L);
}
static private final int jjMoveStringLiteralDfa7_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(5, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 119, 33);
         break;
      case 101:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 83, 33);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 114, 33);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 122, 33);
         return jjMoveStringLiteralDfa8_0(active1, 0x4000000000L);
      case 114:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 105, 33);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 124, 33);
         return jjMoveStringLiteralDfa8_0(active1, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1, 0L);
}
static private final int jjMoveStringLiteralDfa8_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(6, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 102, 33);
         break;
      case 101:
         return jjMoveStringLiteralDfa9_0(active1, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1, 0L);
}
static private final int jjMoveStringLiteralDfa9_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(7, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 104, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, 0L);
}
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 109;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 5);
                  else if (curChar == 35)
                     jjCheckNAddStates(6, 13);
                  else if (curChar == 34)
                     jjCheckNAddStates(14, 16);
                  else if (curChar == 39)
                     jjAddStates(17, 18);
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAddStates(19, 26);
                  }
                  else if (curChar == 48)
                     jjAddStates(27, 30);
                  if (curChar == 48)
                  {
                     if (kind > 128)
                        kind = 128;
                     jjCheckNAddStates(31, 38);
                  }
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  else if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(53, 60);
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(42, 52);
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(35, 39);
                  break;
               case 0:
                  if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(39, 41);
                  break;
               case 3:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
                  if (curChar == 39)
                     jjAddStates(17, 18);
                  break;
               case 7:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if (curChar == 39 && kind > 142)
                     kind = 142;
                  break;
               case 10:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 11:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(12, 8);
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 8);
                  break;
               case 13:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 8);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 8);
                  break;
               case 15:
                  if (curChar == 48)
                     jjAddStates(42, 43);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(17, 8);
                  break;
               case 19:
                  if (curChar == 34)
                     jjCheckNAddStates(14, 16);
                  break;
               case 20:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 22:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 23:
                  if (curChar == 34 && kind > 143)
                     kind = 143;
                  break;
               case 24:
                  if (curChar == 48)
                     jjCheckNAddStates(44, 47);
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(44, 47);
                  break;
               case 26:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(48, 51);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(48, 51);
                  break;
               case 28:
                  if (curChar == 48)
                     jjAddStates(52, 53);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(54, 57);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 34:
                  if (curChar == 35)
                     jjCheckNAddStates(6, 13);
                  break;
               case 35:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(35, 39);
                  break;
               case 40:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 42:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(42, 52);
                  break;
               case 44:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(58, 59);
                  break;
               case 45:
                  if ((0x1000000400000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(46);
                  break;
               case 53:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(53, 60);
                  break;
               case 55:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 61:
                  if (curChar != 48)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAddStates(31, 38);
                  break;
               case 62:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(62);
                  break;
               case 63:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 65:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 67:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(60, 62);
                  break;
               case 72:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAddStates(19, 26);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(73);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 75);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(76, 77);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(63, 65);
                  break;
               case 83:
                  if (curChar == 48)
                     jjAddStates(27, 30);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjAddStates(66, 67);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(68, 69);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(70, 72);
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 5);
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(99, 100);
                  break;
               case 100:
                  if (curChar != 46)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(73, 75);
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(73, 75);
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(102, 0);
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(103, 104);
                  break;
               case 105:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(106);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  jjCheckNAddTwoStates(106, 107);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 144)
                        kind = 144;
                     jjCheckNAdd(33);
                  }
                  if (curChar == 76)
                     jjAddStates(76, 77);
                  break;
               case 109:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 59;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 51;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(78, 79);
                  break;
               case 5:
                  if ((0x104000001040L & l) != 0L && kind > 140)
                     kind = 140;
                  break;
               case 7:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 9:
                  if (curChar == 92)
                     jjAddStates(80, 83);
                  break;
               case 10:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 16:
                  if (curChar == 120)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(17, 8);
                  break;
               case 18:
                  if (curChar == 88)
                     jjCheckNAdd(17);
                  break;
               case 20:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 21:
                  if (curChar == 92)
                     jjAddStates(84, 87);
                  break;
               case 22:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 29:
                  if (curChar == 120)
                     jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(54, 57);
                  break;
               case 31:
                  if (curChar == 88)
                     jjCheckNAdd(30);
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(33);
                  break;
               case 36:
                  if (curChar == 101 && kind > 7)
                     kind = 7;
                  break;
               case 37:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 43:
                  if (curChar == 101)
                     jjAddStates(58, 59);
                  break;
               case 47:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 48:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 54:
                  if (curChar != 101)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 56:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 57:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 64:
                  if ((0x100000001000L & l) != 0L && kind > 129)
                     kind = 129;
                  break;
               case 66:
                  if ((0x20000000200000L & l) != 0L && kind > 130)
                     kind = 130;
                  break;
               case 68:
                  if ((0x100000001000L & l) != 0L && kind > 131)
                     kind = 131;
                  break;
               case 69:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if ((0x20000000200000L & l) != 0L && kind > 131)
                     kind = 131;
                  break;
               case 71:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 75:
                  if ((0x20100000201000L & l) != 0L && kind > 133)
                     kind = 133;
                  break;
               case 77:
                  if ((0x20000000200000L & l) != 0L && kind > 134)
                     kind = 134;
                  break;
               case 79:
                  if ((0x100000001000L & l) != 0L && kind > 135)
                     kind = 135;
                  break;
               case 80:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x20000000200000L & l) != 0L && kind > 135)
                     kind = 135;
                  break;
               case 82:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 84:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(85);
                  break;
               case 85:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAdd(85);
                  break;
               case 86:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(87);
                  break;
               case 87:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAddTwoStates(87, 88);
                  break;
               case 88:
                  if ((0x20100000201000L & l) != 0L && kind > 137)
                     kind = 137;
                  break;
               case 89:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(90);
                  break;
               case 90:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(90, 91);
                  break;
               case 91:
                  if ((0x20000000200000L & l) != 0L && kind > 138)
                     kind = 138;
                  break;
               case 92:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(93);
                  break;
               case 93:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(70, 72);
                  break;
               case 94:
                  if ((0x100000001000L & l) != 0L && kind > 139)
                     kind = 139;
                  break;
               case 95:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if ((0x20000000200000L & l) != 0L && kind > 139)
                     kind = 139;
                  break;
               case 97:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 104:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(88, 89);
                  break;
               case 107:
                  if ((0x104000001040L & l) != 0L && kind > 141)
                     kind = 141;
                  break;
               case 108:
                  if (curChar == 76)
                     jjAddStates(76, 77);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(14, 16);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 109 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_7(0x1000000L);
      default :
         return 1;
   }
}
static private final int jjMoveStringLiteralDfa1_7(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         break;
      default :
         return 2;
   }
   return 2;
}
static private final int jjMoveStringLiteralDfa0_8()
{
   return jjMoveNfa_8(0, 0);
}
static private final int jjMoveNfa_8(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 26)
                     kind = 26;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_5()
{
   return 1;
}
static final int[] jjnextStates = {
   99, 100, 102, 0, 103, 104, 35, 39, 40, 41, 42, 52, 53, 60, 20, 21, 
   23, 7, 9, 73, 74, 75, 76, 77, 78, 80, 82, 84, 86, 89, 92, 62, 
   63, 64, 65, 66, 67, 69, 71, 1, 2, 5, 16, 18, 20, 21, 25, 23, 
   20, 21, 27, 23, 29, 31, 20, 21, 30, 23, 44, 45, 67, 69, 71, 78, 
   80, 82, 87, 88, 90, 91, 93, 95, 97, 101, 2, 5, 6, 19, 3, 4, 
   10, 11, 13, 15, 22, 24, 26, 28, 105, 106, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\173", "\175", "\133", "\135", "\50", "\51", "\72\72", "\72", "\73", "\54", 
"\77", "\56\56\56", "\75", "\52\75", "\57\75", "\45\75", "\53\75", "\55\75", 
"\74\74\75", "\76\76\75", "\46\75", "\136\75", "\174\75", "\174\174", "\46\46", "\174", 
"\136", "\46", "\75\75", "\41\75", "\74", "\76", "\74\75", "\76\75", "\74\74", 
"\76\76", "\53", "\55", "\52", "\57", "\45", "\53\53", "\55\55", "\176", "\41", "\56", 
"\55\76", "\56\52", "\55\76\52", "\141\165\164\157", "\142\162\145\141\153", 
"\143\141\163\145", "\143\141\164\143\150", "\143\150\141\162", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\145\154\145\164\145", "\144\157", 
"\144\157\165\142\154\145", "\145\154\163\145", "\145\156\165\155", "\145\170\164\145\162\156", 
"\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", "\146\162\151\145\156\144", 
"\147\157\164\157", "\151\146", "\151\156\154\151\156\145", "\151\156\164", "\154\157\156\147", 
"\156\145\167", "\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", 
"\160\165\142\154\151\143", "\162\145\144\145\143\154\141\162\145\144", 
"\162\145\147\151\163\164\145\162", "\162\145\164\165\162\156", "\163\150\157\162\164", 
"\163\151\147\156\145\144", "\163\151\172\145\157\146", "\163\164\141\164\151\143", 
"\163\164\162\165\143\164", "\143\154\141\163\163", "\163\167\151\164\143\150", 
"\164\145\155\160\154\141\164\145", "\164\150\151\163", "\164\162\171", "\164\171\160\145\144\145\146", 
"\165\156\151\157\156", "\165\156\163\151\147\156\145\144", "\166\151\162\164\165\141\154", 
"\166\157\151\144", "\166\157\154\141\164\151\154\145", "\167\150\151\154\145", 
"\157\160\145\162\141\164\157\162", "\164\162\165\145", "\146\141\154\163\145", "\164\150\162\157\167", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "DEFINE_STMT", 
   "INCLUDE_STMT", 
   "LINE_NUMBER", 
   "LINE_DIRECTIVE", 
   "AFTER_LINE_DIRECTIVE", 
   "IN_LINE_COMMENT", 
   "IN_COMMENT", 
   "PREPROCESSOR_OUTPUT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 6, 7, 3, 3, 2, 1, 8, -1, 8, 0, -1, 8, 0, 4, 5, -1, 0, 0, -1, 0, 
   -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffff0000001L, 0xffffffffffffffffL, 0x1ffffL, 
};
static final long[] jjtoSkip = {
   0x57ffffeL, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0xa800000L, 0x0L, 0x0L, 
};
static private ASCII_CharStream input_stream;
static private final int[] jjrounds = new int[109];
static private final int[] jjstateSet = new int[218];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected char curChar;
public CPPParserTokenManager(ASCII_CharStream stream)
{
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public CPPParserTokenManager(ASCII_CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(ASCII_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 109; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(ASCII_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 9 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 20)
         {
            jjmatchedKind = 20;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 21)
         {
            jjmatchedKind = 21;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 23)
         {
            jjmatchedKind = 23;
         }
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         if (jjmatchedPos == 0 && jjmatchedKind > 25)
         {
            jjmatchedKind = 25;
         }
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         if (jjmatchedPos == 0 && jjmatchedKind > 27)
         {
            jjmatchedKind = 27;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static final void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 8 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                                     input_stream.backup(1);
         break;
      case 12 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
       String defineName= image.toString();
           CPPParser.fgCallback.defineDecl(defineName, input_stream.getBeginLine(), input_stream.getBeginColumn());
         break;
      case 15 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
       String includeName= image.toString(); // substring(0, image.length()-1).trim();
           CPPParser.fgCallback.includeDecl(includeName, input_stream.getBeginLine(), input_stream.getBeginColumn());
         break;
      case 18 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
     try
     {
        beginLine = Integer.parseInt(image.toString());
     }
     catch(NumberFormatException e) { }
         break;
      case 21 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
     input_stream.adjustBeginLineColumn(beginLine, 1);
     input_stream.backup(1);
         break;
      default :
         break;
   }
}
}
