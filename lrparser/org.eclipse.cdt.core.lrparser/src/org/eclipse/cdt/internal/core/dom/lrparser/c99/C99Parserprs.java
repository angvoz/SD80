/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99Parserprs implements lpg.lpgjavaruntime.ParseTable, C99Parsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,8,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,4,1,4,1,3,3,3,1,3,
            3,1,3,3,1,3,3,3,3,1,
            3,3,1,3,1,3,1,3,1,3,
            1,3,1,5,1,3,3,3,3,3,
            3,3,3,3,3,3,1,1,2,1,
            0,1,3,1,1,1,1,1,1,1,
            1,3,4,3,2,4,1,2,1,1,
            1,2,5,7,5,1,0,7,5,9,
            8,3,2,2,2,3,2,4,2,2,
            2,2,2,1,1,1,1,2,1,2,
            2,2,1,2,2,1,2,2,1,2,
            2,1,2,2,1,3,1,3,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,6,
            8,0,0,1,1,3,3,3,0,1,
            0,1,2,4,2,1,1,1,3,1,
            1,2,3,7,8,0,1,0,1,3,
            1,3,1,1,1,1,1,1,3,1,
            1,1,1,1,3,1,2,2,1,5,
            3,1,3,5,1,3,1,3,2,4,
            3,5,4,6,6,3,5,1,3,4,
            5,6,0,1,2,1,3,1,1,3,
            2,1,1,1,1,2,1,2,3,1,
            1,1,3,1,2,2,2,3,4,5,
            1,7,3,0,0,1,1,3,3,4,
            1,1,2,3,2,3,2,1,0,1,
            2,1,1,1,1,1,2,4,3,6,
            2,4,-73,0,-2,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -28,0,0,-6,0,-23,0,0,0,-185,
            0,-48,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-4,-82,0,
            0,0,0,0,-24,0,0,0,0,0,
            -37,-3,0,0,0,0,0,0,-190,-193,
            0,0,0,0,0,0,0,-18,0,0,
            0,0,0,0,0,0,0,0,0,-110,
            0,0,0,-19,0,-34,0,0,0,0,
            0,-86,0,-9,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-25,0,0,0,
            0,0,0,0,0,0,0,-163,0,0,
            0,0,0,0,0,-182,0,-20,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-242,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-30,0,0,-11,0,-273,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-59,0,-183,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-118,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-146,0,0,0,
            0,-29,0,0,0,-180,0,-38,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-207,0,0,-39,0,-276,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-41,0,0,-22,
            0,0,-51,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-45,0,-181,0,-47,0,0,
            0,0,0,0,0,0,0,0,0,-62,
            0,0,0,-55,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-35,0,0,0,-287,0,
            -266,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-60,0,0,-63,
            0,-174,0,-14,0,0,0,0,0,0,
            0,0,0,0,0,-121,0,0,-147,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-12,
            0,0,0,-26,0,0,-81,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-241,0,0,-43,0,-108,
            0,-145,0,-65,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-17,0,0,0,0,0,0,-66,
            0,0,0,0,-27,0,0,0,0,0,
            0,0,-209,-50,0,0,-69,0,0,0,
            0,0,0,0,0,0,-71,-44,0,0,
            -68,0,0,0,-61,0,0,0,0,0,
            0,0,0,0,-36,0,-32,0,0,0,
            0,0,0,-70,0,-144,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-148,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-93,0,-74,
            0,0,0,0,0,-149,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-33,0,0,-280,0,-150,0,
            -106,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-84,0,0,0,
            0,-151,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-142,0,-152,0,-158,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-159,0,0,0,0,-153,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-186,0,
            -154,0,-187,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-195,0,
            0,-95,0,-155,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-156,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-197,0,0,-198,0,-157,
            0,-218,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-201,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -219,0,0,-133,0,-206,0,-137,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-211,0,-220,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-96,0,-94,
            0,0,0,0,0,0,0,-212,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-97,0,
            -251,0,-98,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-99,0,
            0,-262,0,-204,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-78,
            0,0,-46,0,0,-100,-77,0,-76,-165,
            0,0,-272,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-279,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-278,0,-136,0,-21,-239,
            0,-53,-101,0,-290,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-58,0,0,-164,
            0,-42,0,0,0,0,0,0,-102,-67,
            0,0,0,0,0,0,0,0,0,0,
            0,-254,0,0,-83,0,0,0,0,0,
            0,0,0,0,0,0,0,-72,-134,0,
            0,-117,-103,-57,0,0,0,0,0,0,
            0,-104,0,0,0,0,0,-141,-107,0,
            0,0,0,-105,0,0,0,0,-109,0,
            0,0,0,0,0,0,0,0,0,-213,
            -143,0,0,0,0,-79,-111,0,0,0,
            0,-238,0,0,0,0,0,0,-112,0,
            0,0,0,0,0,0,0,-125,0,0,
            0,-160,0,0,0,0,0,0,0,0,
            -132,-188,0,0,-114,0,0,-115,0,-119,
            -265,0,0,-191,0,0,0,0,0,0,
            0,0,0,-194,0,-87,0,0,0,0,
            0,0,0,0,0,0,-31,0,0,0,
            0,0,-116,0,0,0,0,0,0,0,
            0,0,0,0,0,-123,0,0,0,0,
            0,0,0,-199,0,0,-135,0,0,-140,
            -122,0,0,-127,-16,0,0,0,0,-264,
            0,0,0,-217,0,0,-192,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-257,0,0,0,-130,0,-131,-175,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-289,0,-205,0,
            -221,-243,0,-64,0,0,0,-269,0,-40,
            0,0,0,0,0,0,0,0,0,0,
            -249,0,-253,0,0,-126,0,0,-285,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-274,-138,0,-139,0,0,-128,0,0,
            -129,-255,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-91,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-200,0,0,-196,0,0,0,
            -250,0,0,0,0,0,0,-256,-210,-222,
            -189,0,0,-203,0,0,0,-223,0,-275,
            -293,0,0,0,0,0,0,0,0,-176,
            0,-268,0,0,0,0,0,0,0,0,
            0,-245,0,0,0,0,0,0,-286,0,
            0,0,0,-208,0,0,0,0,0,0,
            0,0,0,0,-283,0,-247,0,0,0,
            0,0,0,0,0,0,0,-224,0,0,
            -225,-244,0,0,0,-88,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-248,0,0,-281,-292,0,-216,
            0,0,-214,0,-226,0,0,0,0,0,
            0,0,-227,0,0,-284,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-228,
            -229,-230,0,0,-288,0,0,-291,0,0,
            -231,-232,0,0,0,0,0,0,0,0,
            0,-233,0,0,-234,0,-294,-235,0,-295,
            0,0,-54,-236,0,0,0,0,0,0,
            0,0,0,-271,0,0,-237,0,-89,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-252,0,-260,-261,0,
            0,0,-270,-277,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-177,0,0,0,0,0,0,
            0,0,0,0,0,-170,0,0,0,0,
            0,0,0,0,0,0,0,0,-178,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-49,0,0,0,0,
            0,0,-179,0,-7,0,0,0,0,0,
            0,0,0,0,-171,0,0,0,0,0,
            0,0,0,0,0,-1,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-56,0,0,0,0,-124,0,0,0,
            0,0,0,0,0,0,-172,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-173,0,0,
            0,0,0,0,0,0,0,-90,0,0,
            0,0,0,0,0,0,-92,0,0,0,
            0,0,0,0,0,-113,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-167,0,0,0,0,0,0,0,
            0,0,0,-168,0,0,0,0,0,0,
            0,0,-169,0,-8,0,0,0,0,0,
            0,-215,0,0,0,0,0,0,0,0,
            -240,-5,0,0,-259,0,0,0,0,0,
            0,0,0,-10,0,0,-166,0,0,0,
            0,0,0,0,0,0,-13,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-15,0,0,0,0,-75,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-80,
            0,0,0,0,0,-85,-120,0,0,0,
            0,0,0,0,-161,-162,0,0,0,-202,
            -258,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-52,0,0,-263,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-267,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-282,-184,0,0,-246,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            106,2,123,40,40,23,23,41,41,18,
            18,1,1,3,3,3,3,4,4,4,
            5,6,6,6,6,6,6,6,6,68,
            68,90,7,7,7,7,7,7,7,7,
            7,7,7,8,8,9,9,9,9,10,
            10,10,11,11,11,12,12,12,12,12,
            13,13,13,14,14,15,15,16,16,17,
            17,19,19,20,20,22,22,22,22,22,
            22,22,22,22,22,22,22,29,27,21,
            107,107,92,92,54,30,30,30,30,30,
            30,30,31,31,31,28,28,93,93,69,
            69,32,32,33,33,33,61,61,34,34,
            34,34,35,35,35,35,35,47,47,24,
            24,24,24,24,48,48,48,83,83,78,
            78,78,78,79,79,79,80,80,80,81,
            81,81,82,82,82,94,94,84,84,85,
            49,51,51,51,51,51,62,64,64,64,
            64,64,64,64,64,64,64,64,64,73,
            70,70,108,109,74,74,71,71,71,86,
            95,95,96,96,87,87,87,55,110,110,
            97,98,98,98,72,72,111,99,99,100,
            100,88,88,25,26,26,26,50,52,52,
            42,42,42,42,37,37,38,43,43,44,
            39,39,101,101,45,113,113,112,112,46,
            46,46,46,46,46,46,46,46,102,53,
            53,53,53,36,75,75,65,65,65,66,
            66,56,56,114,114,77,77,76,76,76,
            57,57,57,58,59,59,59,60,60,60,
            60,63,63,63,67,115,91,91,91,91,
            89,116,117,117,118,118,119,119,106,106,
            120,120,103,103,103,103,121,121,104,104,
            104,105,105,292,1568,754,17,21,18,1042,
            947,45,1178,1213,1209,1256,1229,1349,1313,1392,
            1383,622,1404,75,324,92,322,768,135,213,
            1407,20,331,17,21,18,1042,43,45,1178,
            1213,1209,1256,1229,1349,1313,1392,1867,419,359,
            1309,137,134,136,160,587,187,638,458,224,
            233,892,1051,179,793,139,127,166,1426,1485,
            1110,770,539,143,146,149,152,414,581,128,
            1497,1965,2115,2144,2157,2173,1535,135,213,241,
            829,88,770,1399,296,1566,908,116,2255,458,
            224,232,1445,20,176,17,21,18,1042,41,
            137,134,136,160,1378,847,224,229,310,231,
            218,924,221,223,139,260,166,587,186,309,
            492,1592,143,146,149,152,414,307,587,31,
            1965,2115,2144,2157,2173,1535,1407,20,314,17,
            21,18,1042,43,45,1178,1213,1209,1256,1229,
            1349,1313,1845,334,1350,20,681,17,21,18,
            1042,947,45,1178,1213,1209,1256,1229,1349,1313,
            1392,1383,440,1404,75,355,281,1369,20,681,
            17,21,18,1042,947,45,1178,1213,1209,1256,
            1229,1349,1313,1392,1383,225,1404,75,986,281,
            1407,20,336,17,21,18,1042,43,45,1178,
            1213,1209,1256,1229,1349,1848,124,286,25,1407,
            20,1439,17,21,18,1042,947,45,1178,1213,
            1209,1256,1229,1349,1313,1392,1383,1161,1404,75,
            286,92,746,287,1439,1471,1407,20,357,17,
            21,18,1042,43,45,1178,1213,1209,1256,1229,
            1832,365,255,213,587,1633,287,501,1619,1265,
            20,681,17,21,18,1042,947,45,1178,1213,
            1209,1256,1229,1349,1313,1392,1383,442,1404,75,
            833,281,1342,1199,20,1365,17,21,18,1042,
            947,45,1178,1213,1209,1256,1229,1349,1313,1392,
            1383,1566,1404,75,626,359,1407,20,788,17,
            21,18,1042,43,45,1178,1213,1209,1256,1842,
            708,311,288,239,1242,20,1439,17,21,18,
            1042,947,45,1178,1213,1209,1256,1229,1349,1313,
            1392,1383,210,1404,75,421,281,1312,289,1388,
            20,412,17,21,18,1042,947,45,1178,1213,
            1209,1256,1229,1349,1313,1392,1383,986,1404,75,
            747,281,1407,20,541,17,21,18,1042,43,
            45,1178,1213,1209,1795,123,421,158,539,1407,
            20,1439,17,21,18,1042,947,45,1178,1213,
            1209,1256,1229,1349,1313,1392,1383,88,1404,75,
            505,86,290,1039,326,634,1439,1426,20,1421,
            17,21,18,1042,947,45,1178,1213,1209,1256,
            1229,1349,1313,1392,1383,1115,1404,75,443,856,
            1108,179,1223,20,790,17,21,18,1042,947,
            45,1178,1213,1209,1256,1229,1349,1313,1392,1383,
            805,1404,75,331,1420,135,213,1894,927,292,
            794,638,847,224,229,587,188,219,924,221,
            223,274,240,1295,908,744,2210,54,137,134,
            136,160,269,1019,1023,272,437,58,421,562,
            2178,833,139,1448,166,587,1470,231,255,213,
            143,146,149,152,414,324,331,1059,1965,2115,
            2144,2157,2173,1535,1407,20,359,17,21,18,
            1042,43,45,1178,1213,1209,1256,1229,1349,1313,
            1392,1383,105,1404,94,1407,20,900,17,21,
            18,1042,947,45,1178,1213,1209,1256,1229,1349,
            1313,1392,1383,227,1404,75,243,85,1464,20,
            828,17,21,18,1042,34,1407,20,1534,17,
            21,18,1042,947,45,1178,1213,1209,1256,1229,
            1349,1313,1392,1383,913,1404,75,1484,84,1407,
            20,440,17,21,18,1042,947,45,1178,1213,
            1209,1256,1229,1349,1313,1392,1383,384,1404,75,
            308,83,1407,20,230,17,21,18,1042,947,
            45,1178,1213,1209,1256,1229,1349,1313,1392,1383,
            228,1404,75,1006,82,1407,20,440,17,21,
            18,1042,947,45,1178,1213,1209,1256,1229,1349,
            1313,1392,1383,440,1404,75,234,81,1407,20,
            2122,17,21,18,1042,947,45,1178,1213,1209,
            1256,1229,1349,1313,1392,1383,19,1404,75,1176,
            80,1407,20,1285,17,21,18,1042,947,45,
            1178,1213,1209,1256,1229,1349,1313,1392,1383,440,
            1404,75,1490,79,1407,20,293,17,21,18,
            1042,947,45,1178,1213,1209,1256,1229,1349,1313,
            1392,1383,1722,1404,75,276,78,1407,20,275,
            17,21,18,1042,947,45,1178,1213,1209,1256,
            1229,1349,1313,1392,1383,440,1404,75,440,77,
            1407,20,440,17,21,18,1042,947,45,1178,
            1213,1209,1256,1229,1349,1313,1392,1383,1747,1404,
            75,1784,76,1407,20,1888,17,21,18,1042,
            947,45,1178,1213,1209,1256,1229,1349,1313,1392,
            1383,440,1404,75,1511,93,1407,20,1056,17,
            21,18,1042,43,45,1178,1213,1209,1256,1229,
            1349,1313,1392,1383,1889,1404,94,1407,20,440,
            17,21,18,1042,947,45,1178,1213,1209,1256,
            1229,1349,1313,1392,1383,180,1404,75,1055,1642,
            1464,20,23,17,21,18,1042,33,1407,20,
            212,17,21,18,1042,947,45,1178,1213,1209,
            1256,1229,1349,1313,1392,1383,1589,1404,75,935,
            1688,1407,20,663,17,21,18,1042,43,45,
            1178,1213,1209,1256,1229,1349,1313,1392,1383,630,
            1404,94,1407,20,1056,17,21,18,1042,947,
            45,1178,1213,1209,1256,1229,1349,1313,1392,1383,
            331,1404,75,421,74,1257,345,628,1633,421,
            1313,1307,539,1407,20,202,17,21,18,1042,
            43,45,1178,1213,1209,1256,1229,1349,1313,1392,
            1383,90,1404,94,1407,20,1530,17,21,18,
            1042,43,45,1178,1213,1209,1256,1229,1349,1313,
            1392,1383,1613,1404,94,587,295,628,1633,581,
            440,1600,421,509,770,1407,20,203,17,21,
            18,1042,43,45,1178,1213,1209,1256,1229,1349,
            1313,1392,1383,273,1404,94,1378,419,1825,539,
            587,31,178,827,313,209,847,224,587,931,
            986,218,924,221,607,125,1138,1635,88,306,
            111,159,1486,87,1382,1119,1378,1159,112,1847,
            96,1350,109,95,97,98,99,100,419,419,
            1641,1694,986,288,1,827,313,255,213,110,
            254,213,463,155,568,209,127,195,1119,946,
            126,1691,111,371,591,87,1234,1635,1378,1000,
            845,107,96,1350,109,95,97,98,99,100,
            359,1119,675,254,213,312,890,421,1398,1474,
            24,110,908,400,2258,1384,847,224,229,1067,
            557,218,924,221,223,274,254,213,235,827,
            313,263,1339,108,1790,278,267,1019,1023,272,
            242,421,941,2230,2131,1064,111,772,1069,87,
            986,1502,1378,813,1511,264,96,1350,109,95,
            97,98,99,100,986,277,1407,20,122,17,
            21,18,1042,43,40,110,557,331,274,847,
            224,229,1762,60,218,924,221,223,274,267,
            1019,1023,272,261,492,283,421,107,539,267,
            1019,1023,272,1157,119,827,313,933,266,770,
            1124,876,1734,562,172,1108,179,88,1310,1700,
            440,1524,111,1085,1005,87,2135,421,1378,474,
            1956,197,96,1350,109,95,97,98,99,100,
            135,213,421,279,497,106,1027,277,360,1407,
            20,110,17,21,18,1042,43,45,1178,1213,
            1209,1803,1379,138,134,136,160,587,297,1511,
            274,359,986,108,480,827,539,140,440,166,
            331,267,1019,1023,272,144,147,150,153,414,
            2292,1511,111,1511,193,87,521,827,539,1502,
            1310,1745,96,1350,1531,95,97,98,99,100,
            204,22,440,1118,111,1205,562,87,562,827,
            539,581,359,1497,96,1350,104,95,97,98,
            99,100,181,2002,205,280,111,1289,20,87,
            17,21,18,1042,43,36,96,1350,102,95,
            97,98,99,100,603,827,539,905,847,224,
            229,1126,244,218,924,221,223,1701,359,1141,
            706,331,111,159,868,87,1497,246,745,194,
            1511,1511,96,1350,103,95,97,98,99,100,
            1407,20,986,17,21,18,1042,43,45,1178,
            1213,1820,644,827,539,155,568,562,245,459,
            2306,847,224,229,1119,371,218,924,221,223,
            111,1729,28,87,765,986,1886,685,827,539,
            96,1350,119,95,97,98,99,100,1498,254,
            213,1504,1110,118,539,111,1407,20,87,17,
            21,18,1042,43,39,96,1350,115,95,97,
            98,99,100,88,726,827,539,440,440,116,
            331,198,200,1289,20,367,17,21,18,1042,
            43,36,111,477,1681,87,767,827,539,1362,
            1828,1850,96,1350,1893,95,97,98,99,100,
            1284,1286,1470,1712,111,359,562,87,808,827,
            539,1483,1177,247,96,1350,114,95,97,98,
            99,100,712,2231,282,795,111,359,755,87,
            849,827,539,581,1045,1497,96,1350,121,95,
            97,98,99,100,868,294,1497,1185,111,1407,
            20,87,17,21,18,1042,43,38,96,1350,
            120,95,97,98,99,100,1499,296,1312,1512,
            847,224,229,1261,1514,218,924,221,223,2391,
            2391,847,224,229,2391,159,218,924,221,223,
            2391,2391,2391,2391,1407,20,1886,17,21,18,
            1042,43,45,1178,1213,1821,1407,20,2391,17,
            21,18,1042,43,45,1178,1690,156,568,1407,
            20,2391,17,21,18,1042,43,45,1178,1213,
            1822,2391,2391,2391,2391,2391,622,2391,2391,2391,
            2391,199,200,1407,20,1146,17,21,18,1042,
            43,45,1178,1213,1831,1407,20,2391,17,21,
            18,1042,43,45,1178,1698,349,2391,372,2391,
            135,213,638,847,224,229,2391,2391,219,924,
            221,223,622,2391,304,2391,2391,421,2391,539,
            358,2391,2391,142,134,136,160,1407,20,2391,
            17,21,18,1042,43,45,1758,141,88,166,
            2391,2391,2391,303,1088,2391,2391,2391,638,847,
            224,1468,2391,2391,219,924,221,1465,1407,20,
            2391,17,21,18,1042,43,45,1761,1407,20,
            2391,17,21,18,1042,43,37,1407,20,2391,
            17,21,18,1042,43,35,1407,20,2391,17,
            21,18,1042,43,36,2391,2391,2391,2391,300,
            302,2391,315,1407,20,2391,17,21,18,1042,
            43,48,2391,2391,1407,20,2132,17,21,18,
            1042,43,47,1407,20,944,17,21,18,1042,
            43,46,1319,20,2391,17,21,18,1042,43,
            44,950,406,770,372,950,2391,770,2391,2391,
            135,213,2391,2391,1003,2391,2391,421,2391,539,
            304,2391,2391,2391,2391,1399,358,1062,2391,1399,
            2391,2391,2391,145,134,136,160,562,88,135,
            213,562,2391,1468,1591,2391,2391,2391,874,303,
            770,2391,135,213,765,2391,2391,259,2231,2391,
            2391,259,148,134,136,160,1540,1409,135,213,
            1540,1409,197,2391,2391,151,134,136,160,2391,
            938,2391,770,2391,2391,2391,421,1110,313,313,
            2391,154,134,136,160,421,421,313,313,2391,
            992,1508,770,1379,1399,301,302,88,88,2391,
            197,1378,2391,993,116,2391,88,88,2391,197,
            197,2391,993,993,197,402,2391,770,402,2391,
            770,2391,2391,2391,380,192,259,638,2391,2391,
            2391,1452,2391,1134,1527,931,1409,274,1484,1399,
            1452,1452,1399,2391,2391,1379,2391,2391,269,1019,
            1023,272,1110,977,539,2391,2391,2391,2391,2391,
            2391,2391,1092,1131,2391,2391,1110,421,539,539,
            421,259,539,88,259,2391,2391,192,2391,116,
            931,1409,973,1632,1409,1611,1527,88,88,2391,
            2391,88,2391,116,1854,2391,2391,1598,2391,2391,
            2391,2391,2391,2391,2391,2391,2391,2391,2391,2391,
            2391,2391,2391,1787,2391,2391,2391,2391,2391,2391,
            2391,2391,2391,2391,2391,2391,2391,1788,2391,0,
            11,226,0,2399,1,0,1,2628,0,8,
            10,0,179,20,0,1,2617,0,113,1806,
            0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,0,54,55,56,0,58,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,59,54,55,56,59,58,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,0,54,55,56,0,58,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            59,54,55,56,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,0,54,55,
            56,0,1,2,3,0,5,2,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,0,23,2,25,26,27,28,
            29,0,1,0,3,0,1,6,3,6,
            0,6,41,42,43,44,45,46,47,48,
            49,50,51,52,0,54,55,56,0,1,
            2,3,4,5,0,1,0,3,0,0,
            1,2,4,4,5,78,0,19,20,21,
            22,23,24,25,26,27,28,29,19,20,
            21,22,23,0,25,26,27,28,29,41,
            42,43,44,45,46,47,48,49,50,51,
            52,0,54,55,56,0,1,2,3,4,
            5,0,53,69,70,71,72,61,0,60,
            0,73,4,65,19,20,21,22,23,24,
            25,26,27,28,29,69,70,71,72,0,
            22,0,0,4,61,4,41,42,43,44,
            45,46,47,48,49,50,51,52,0,54,
            55,56,0,22,53,64,83,84,85,86,
            87,88,89,90,91,92,0,66,73,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,57,60,
            0,22,61,24,0,1,6,3,0,30,
            31,32,33,34,35,36,37,38,39,40,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,77,
            0,1,22,3,24,69,70,71,72,0,
            30,31,32,33,34,35,36,37,38,39,
            40,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            0,1,2,22,76,24,0,1,0,3,
            0,30,31,32,33,34,35,36,37,38,
            39,40,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,0,1,2,22,0,24,0,1,0,
            3,6,30,31,32,33,34,35,36,37,
            38,39,40,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,0,0,1,22,3,24,0,7,
            8,81,82,30,31,32,33,34,35,36,
            37,38,39,40,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,74,75,0,22,0,24,2,
            0,0,7,8,30,31,32,33,34,35,
            36,37,38,39,40,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,0,0,0,22,2,24,
            5,7,8,0,0,30,31,32,33,34,
            35,36,37,38,39,40,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,74,75,0,22,0,
            24,2,5,0,0,2,30,31,32,33,
            34,35,36,37,38,39,40,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,73,0,0,22,
            76,24,0,6,6,0,4,30,31,32,
            33,34,35,36,37,38,39,40,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,0,1,2,
            22,77,24,0,1,0,3,4,30,31,
            32,33,34,35,36,37,38,39,40,0,
            58,0,19,20,21,4,23,24,25,26,
            27,28,29,0,0,30,2,0,19,20,
            21,4,0,22,41,42,43,44,45,46,
            47,48,49,50,51,52,59,54,55,56,
            0,58,0,1,0,3,4,0,1,9,
            0,1,2,0,4,0,1,2,57,0,
            5,19,20,21,5,23,24,25,26,27,
            28,29,19,20,21,53,23,60,25,26,
            27,28,29,41,42,43,44,45,46,47,
            48,49,50,51,52,0,54,55,56,4,
            58,0,1,53,3,4,62,63,53,0,
            60,64,0,0,0,0,2,22,4,4,
            19,20,21,64,23,24,25,26,27,28,
            29,19,20,21,0,23,0,25,26,27,
            28,29,41,42,43,44,45,46,47,48,
            49,50,51,52,0,54,55,56,0,58,
            0,1,2,3,0,0,57,53,0,5,
            2,0,57,0,60,60,0,4,0,19,
            20,21,6,23,6,25,26,27,28,29,
            19,20,21,57,23,22,25,26,27,28,
            29,41,42,43,44,45,46,47,48,49,
            50,51,52,59,54,55,56,0,1,0,
            3,53,57,4,0,1,2,0,0,5,
            57,67,68,0,61,0,19,20,21,4,
            23,22,25,26,27,28,29,19,20,21,
            0,1,19,20,21,0,0,22,41,42,
            43,44,45,46,47,48,49,50,51,52,
            0,54,55,56,19,20,21,53,23,60,
            25,26,27,28,29,0,0,2,61,19,
            20,21,57,0,0,9,41,42,43,44,
            45,46,47,48,49,50,51,52,0,1,
            2,3,4,5,0,7,8,9,10,11,
            12,13,14,15,16,17,18,0,0,0,
            0,23,0,1,2,3,4,5,53,7,
            8,9,10,11,12,13,14,15,16,17,
            18,0,1,2,3,23,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            0,57,78,65,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,0,0,0,0,65,0,1,
            2,3,4,5,0,7,8,9,10,11,
            12,13,14,15,16,17,18,0,0,0,
            0,0,0,19,20,21,4,6,0,1,
            2,3,58,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,53,0,79,
            2,0,0,5,0,62,63,62,63,0,
            1,2,3,65,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,0,1,
            2,3,60,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,0,1,2,
            3,53,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,0,1,2,3,
            0,5,0,7,8,9,10,11,12,13,
            14,15,16,17,18,0,1,2,3,0,
            5,0,7,8,9,10,11,12,13,14,
            15,16,17,18,0,1,2,3,0,5,
            0,7,8,9,10,11,12,13,14,15,
            16,17,18,0,1,2,3,0,5,0,
            7,8,9,10,11,12,13,14,15,16,
            17,18,0,0,0,0,19,20,21,0,
            23,2,25,26,27,28,29,0,0,10,
            11,0,5,0,19,20,21,0,5,2,
            0,0,5,0,4,0,0,6,0,4,
            0,0,6,0,6,0,6,0,0,0,
            0,62,63,0,0,0,53,0,0,0,
            0,0,53,0,62,63,0,0,64,66,
            0,0,0,0,0,66,0,59,57,0,
            53,0,0,0,67,68,0,0,58,80,
            67,68,0,58,61,0,0,0,0,0,
            59,0,59,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            2391,4227,1,4225,1503,1,831,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2400,1,2492,1,1,1,1,1,
            700,518,854,697,817,1594,650,835,800,1337,
            774,1,1,1,1,1,1,1,1,1,
            1,1,1,2391,1,1,1,2391,2398,8,
            2379,2379,2379,2379,2379,2379,2379,2379,2379,2379,
            2379,2379,2379,2379,2379,2379,2379,2379,2379,2379,
            2379,2379,2379,2379,2379,2379,2379,2379,2379,2379,
            2379,2379,2379,2379,2379,2379,2379,2379,2379,2379,
            2379,2379,2379,2379,2379,2379,2379,2379,2379,2379,
            2379,2379,1616,2379,2379,2379,1638,2379,2391,4227,
            1,4225,1503,1,831,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            2400,1,2492,1,1,1,1,1,700,518,
            854,697,817,1594,650,835,800,1337,774,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2391,1,1,1,182,2398,2391,4227,1,
            4225,2401,1,831,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2400,
            1,2492,1,1,1,1,1,700,518,854,
            697,817,1594,650,835,800,1337,774,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1674,1,1,1,2391,4227,1,4225,2401,1,
            831,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,2400,1,2492,1,
            1,1,1,1,700,518,854,697,817,1594,
            650,835,800,1337,774,1,1,1,1,1,
            1,1,1,1,1,1,1,71,1,1,
            1,2391,2402,2216,2403,11,2076,2370,2058,1869,
            2067,1180,898,412,2404,2405,2406,2407,1766,1486,
            2605,2606,2607,2391,2554,406,2555,2553,2608,2556,
            2552,2391,2402,2391,2403,2391,2402,828,2403,610,
            253,1253,2559,2564,2563,2561,2562,2560,2565,2566,
            2558,2567,2568,2569,60,704,740,495,2391,1,
            1,1,2401,1,185,4220,157,4220,2391,20,
            179,2382,2395,2382,2382,456,62,1,1,1,
            2400,1,2696,1,1,1,1,1,179,179,
            179,2382,179,43,179,179,179,179,179,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,2391,1,1,1,2401,
            1,2391,2382,1963,1939,1914,1710,654,1,2382,
            1,299,2401,2394,1,1,1,2400,1,2696,
            1,1,1,1,1,1963,1939,1914,1710,2391,
            2400,235,183,2397,1090,223,1,1,1,1,
            1,1,1,1,1,1,1,1,285,1,
            1,1,69,223,1284,2649,1067,1044,1021,998,
            975,929,952,906,875,719,61,1305,298,2391,
            4227,1,4225,2401,1,831,1,1,1,1,
            1,1,1,1,1,1,1,1,223,2396,
            229,2400,223,2492,184,4222,232,4222,67,700,
            518,854,697,817,1594,650,835,800,1337,774,
            2391,4227,1,4225,2401,1,831,1,1,1,
            1,1,1,1,1,1,1,1,1,520,
            206,4224,2400,4224,2492,1963,1939,1914,1710,2391,
            700,518,854,697,817,1594,650,835,800,1337,
            774,2391,4227,1,4225,2401,1,831,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2617,388,2400,566,2492,2391,2402,2391,2403,
            73,700,518,854,697,817,1594,650,835,800,
            1337,774,2391,4227,1,4225,2401,1,831,1,
            1,1,1,1,1,1,1,1,1,1,
            1,253,2617,388,2400,2391,2492,208,2402,63,
            2403,1259,700,518,854,697,817,1594,650,835,
            800,1337,774,2391,4227,1,4225,2401,1,831,
            1,1,1,1,1,1,1,1,1,1,
            1,1,52,207,584,2400,584,2492,2391,2048,
            2017,340,2307,700,518,854,697,817,1594,650,
            835,800,1337,774,2391,4227,1,4225,2401,1,
            831,1,1,1,1,1,1,1,1,1,
            1,1,1,1569,702,54,2400,2391,2492,2217,
            2391,64,2048,2017,700,518,854,697,817,1594,
            650,835,800,1337,774,2391,4227,1,4225,2401,
            1,831,1,1,1,1,1,1,1,1,
            1,1,1,1,53,2391,2391,2400,716,2492,
            342,2048,2017,2391,68,700,518,854,697,817,
            1594,650,835,800,1337,774,2391,4227,1,4225,
            2401,1,831,1,1,1,1,1,1,1,
            1,1,1,1,1,1569,702,2391,2400,2391,
            2492,1516,1250,2391,70,2007,700,518,854,697,
            817,1594,650,835,800,1337,774,2391,4227,1,
            4225,2401,1,831,1,1,1,1,1,1,
            1,1,1,1,1,1,2369,2391,1,2400,
            566,2492,1,1461,831,2391,2373,700,518,854,
            697,817,1594,650,835,800,1337,774,2391,4227,
            1,4225,2401,1,831,1,1,1,1,1,
            1,1,1,1,1,1,1,1,2617,388,
            2400,520,2492,2391,1,2391,1,191,700,518,
            854,697,817,1594,650,835,800,1337,774,249,
            2398,2391,1,1,1,2401,1,2587,1,1,
            1,1,1,2391,2391,1677,2310,1,1,1,
            1,2397,220,2400,1,1,1,1,1,1,
            1,1,1,1,1,1,1211,1,1,1,
            65,191,2391,1,55,1,190,1,2376,636,
            1,2385,1462,130,2397,262,2617,1462,1853,1,
            1,1,1,1,253,1,2587,1,1,1,
            1,1,2605,2606,2607,613,2554,2396,2555,2553,
            2608,2556,2552,1,1,1,1,1,1,1,
            1,1,1,1,1,2391,1,1,1,2401,
            190,2391,1,613,1,191,1926,1975,613,256,
            2396,2649,131,2391,1,2391,1544,2400,2397,2397,
            1,1,1,2649,1,2587,1,1,1,1,
            1,2605,2606,2607,2391,2554,89,2555,2553,2608,
            2556,2552,1,1,1,1,1,1,1,1,
            1,1,1,1,2391,1,1,1,2391,191,
            1,404,388,2403,49,30,379,613,222,2113,
            814,132,1689,236,2396,2396,2391,223,229,2605,
            2606,2607,1547,2554,233,2555,2553,2608,2556,2552,
            2605,2606,2607,1113,2554,223,2555,2553,2608,2556,
            2552,2559,2564,2563,2561,2562,2560,2565,2566,2558,
            2567,2568,2569,1232,704,740,495,2391,2402,1,
            2403,613,2420,117,268,2617,1462,211,2391,253,
            223,2104,2093,250,223,2391,2605,2606,2607,2401,
            2554,117,2555,2553,2608,2556,2552,2605,2606,2607,
            2391,2629,1,1,1,129,2391,2400,2559,2564,
            2563,2561,2562,2560,2565,2566,2558,2567,2568,2569,
            248,704,740,495,2605,2606,2607,613,2554,117,
            2555,2553,2608,2556,2552,270,66,1432,1136,2605,
            2606,2607,1864,2391,72,636,2559,2564,2563,2561,
            2562,2560,2565,2566,2558,2567,2568,2569,1,2402,
            2216,2403,2395,1657,207,2058,1869,2067,1180,898,
            412,2404,2405,2406,2407,1766,1486,2391,2391,2391,
            2391,747,2391,2402,2216,2403,2395,1793,613,2058,
            1869,2067,1180,898,412,2404,2405,2406,2407,1766,
            1486,2391,2402,2216,2403,1188,2076,4219,2058,1869,
            2067,1180,898,412,2404,2405,2406,2407,1766,1486,
            113,3367,456,2394,1,2402,2216,2403,29,2076,
            4219,2058,1869,2067,1180,898,412,2404,2405,2406,
            2407,1766,1486,59,271,58,2391,2394,2391,2402,
            2216,2403,2395,2076,251,2058,1869,2067,1180,898,
            412,2404,2405,2406,2407,1766,1486,2391,2391,2391,
            2391,42,1,2605,2606,2607,91,1562,2391,2402,
            2216,2403,29,2076,1562,2058,1869,2067,1180,898,
            412,2404,2405,2406,2407,1766,1486,613,265,2388,
            1544,2391,2391,1,2391,1926,1975,1926,1975,1,
            2402,2216,2403,2394,2076,4219,2058,1869,2067,1180,
            898,412,2404,2405,2406,2407,1766,1486,1,2402,
            2216,2403,91,2076,4219,2058,1869,2067,1180,898,
            412,2404,2405,2406,2407,1766,1486,2391,2402,2216,
            2403,613,2076,4219,2058,1869,2067,1180,898,412,
            2404,2405,2406,2407,1766,1486,2391,2402,2216,2403,
            2391,2076,2391,2058,1869,2067,1180,898,412,2404,
            2405,2406,2407,1766,1486,1,2402,2216,2403,2391,
            2076,2391,2058,1869,2067,1180,898,412,2404,2405,
            2406,2407,1766,1486,2391,2402,2225,2403,2391,2076,
            2391,2058,1869,2067,1180,898,412,2404,2405,2406,
            2407,1766,1486,2391,2402,2226,2403,133,2076,57,
            2058,1869,2067,1180,898,412,2404,2405,2406,2407,
            1766,1486,56,291,1,252,2605,2606,2607,32,
            2554,1260,2555,2553,2608,2556,2552,51,201,2417,
            2418,30,2113,50,2605,2606,2607,268,2113,1544,
            2391,2391,253,2391,2399,284,189,1562,189,1427,
            189,1,185,1,184,2391,206,2391,2391,2391,
            2391,1926,1975,2391,2391,2391,1315,2391,2391,2391,
            2391,2391,2147,2391,1926,1975,2391,2391,2648,1587,
            2391,2391,2391,2391,2391,1340,2391,1263,589,2391,
            613,2391,2391,2391,2104,2093,2391,2391,2398,448,
            2104,2093,2391,1427,679,2391,2391,2391,2391,2391,
            2403,2391,2402
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            509,1,315,391,509,29,478,490,27,490,
            27,27,490,27,490,317,427,393,382,540,
            393,287,27,282,282,27,282,393,427,506,
            427,157,158,255,317,29,210,473,472,427,
            53,288,29,127,29,214,427,498,393,255,
            84,257,317,393,35,393,287,410,211,211,
            282,540,540,397,540,540,211,287,164,412,
            164,391,303,29,127,214,214,498,498,257,
            107,104,340,176,303,412,412,412,412,412,
            88,412,412,412,170,187,192,190,198,194,
            201,200,203,202,204,506,501,317,505,3,
            154,29,412,53,472,285,211,412,211,301,
            412,344,412,412,288,397,164,397,393,207,
            346,127,154,239,127,214,216,429,216,498,
            340,505,340,104,87,84,412,412,412,412,
            412,412,412,412,412,412,412,506,506,246,
            303,303,282,282,220,412,412,412,412,412,
            412,412,412,412,412,412,412,412,412,412,
            412,412,412,412,412,503,504,252,427,257,
            154,33,410,211,506,540,506,506,287,397,
            412,127,241,216,154,412,282,340,498,395,
            412,412,104,88,35,427,252,506,506,506,
            104,190,190,187,187,194,194,192,192,192,
            192,200,198,202,201,164,203,255,506,542,
            501,33,211,410,397,412,397,397,154,210,
            412,209,154,498,104,104,33,246,542,439,
            29,412,257,506,216,167,220,211,506,286,
            241,412,33,506,154,31,476,282,412,166,
            506,220,211,397,216,434,35,104,282,412,
            397,506,154,104,397
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            73,0,25,41,19,42,54,26,43,27,
            44,45,28,20,46,47,23,55,29,56,
            48,49,21,50,51,52,1,3,6,0,
            4,58,53,66,2,13,14,15,16,1,
            3,10,11,9,5,7,8,17,18,12,
            6,0,25,41,19,42,54,26,43,27,
            44,45,28,20,46,47,23,55,29,56,
            48,49,21,50,51,52,1,3,4,61,
            57,22,0,19,20,21,23,10,11,9,
            5,7,8,17,18,12,2,1,3,13,
            14,15,16,65,4,0,19,20,21,10,
            11,9,5,7,8,17,18,12,2,1,
            3,13,14,15,16,0,25,41,19,42,
            54,26,43,27,44,45,28,20,46,47,
            23,55,29,56,48,49,21,50,51,52,
            1,3,24,4,58,0,2,4,61,57,
            60,22,53,59,0,61,53,66,0,53,
            2,66,80,10,11,61,83,84,85,86,
            87,89,88,90,91,92,5,67,68,7,
            8,63,62,69,70,71,72,74,75,9,
            76,77,78,58,81,82,65,60,59,57,
            22,4,0,1,3,4,58,57,0,4,
            60,12,13,14,15,16,1,3,2,10,
            11,9,5,7,8,17,18,0,22,4,
            5,1,2,59,0,4,60,5,2,53,
            0,5,2,53,60,4,25,41,19,42,
            54,26,43,27,44,45,28,20,46,47,
            23,55,29,56,48,49,21,50,51,52,
            64,1,3,0,73,79,58,32,34,6,
            38,40,35,30,36,37,33,31,39,24,
            4,22,13,14,15,16,10,11,9,7,
            8,17,18,12,5,2,1,3,54,55,
            56,49,41,46,44,45,43,42,47,48,
            50,51,52,29,26,23,25,28,27,19,
            20,21,0,30,0,66,80,10,11,9,
            7,8,67,68,62,63,69,70,71,72,
            74,75,76,77,78,81,82,61,83,84,
            85,86,87,88,89,90,91,92,57,53,
            60,25,19,26,27,28,20,23,29,21,
            22,4,5,2,1,0,32,34,6,38,
            40,35,30,36,37,33,31,39,24,22,
            4,10,11,9,7,8,17,18,12,2,
            1,3,13,14,15,16,5,0,4,57,
            58,61,0,4,57,58,22,0,9,5,
            7,8,67,68,62,63,69,70,71,72,
            74,75,76,77,78,81,82,59,83,84,
            85,86,87,88,89,90,91,92,65,60,
            58,6,4,57,22,61,0,49,41,46,
            44,45,43,42,47,48,50,51,52,59,
            22,29,26,23,25,28,27,19,20,21,
            5,1,2,53,57,60,4,0,73,25,
            41,19,42,54,26,43,27,44,45,28,
            20,46,47,23,55,29,56,48,49,21,
            50,51,52,1,3,5,22,4,24,2,
            0,5,25,41,19,42,54,26,43,27,
            44,45,28,20,46,47,23,55,29,56,
            48,49,21,50,51,52,1,3,64,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            134,25,15,85,149,13,119,120,31,120,
            55,55,120,54,120,114,146,76,25,25,
            74,42,7,7,7,7,7,9,25,125,
            146,65,65,124,108,13,86,25,25,146,
            25,88,63,108,25,108,25,61,140,124,
            45,100,80,76,49,138,96,84,86,86,
            7,25,25,127,25,25,86,42,25,40,
            25,85,1,25,153,108,7,61,108,157,
            39,47,94,25,161,40,40,40,40,40,
            46,40,40,40,25,25,25,25,25,25,
            25,25,25,25,25,125,104,18,25,26,
            108,25,40,25,25,25,86,40,86,165,
            162,25,162,162,88,127,25,127,76,25,
            25,108,43,85,110,7,69,25,25,108,
            94,125,94,47,46,35,40,40,40,40,
            40,40,40,40,40,40,40,125,125,106,
            161,161,33,33,71,162,40,40,40,40,
            40,40,40,40,40,40,40,40,40,40,
            40,40,40,162,40,65,65,103,146,100,
            43,108,167,86,125,25,125,125,96,127,
            40,153,76,69,43,40,7,94,35,25,
            40,40,47,46,40,146,122,125,125,125,
            47,25,25,25,25,25,25,25,25,25,
            25,25,25,25,25,25,25,124,125,144,
            57,38,86,167,127,162,127,127,43,86,
            40,25,43,35,47,47,108,59,144,25,
            25,40,100,125,69,52,167,86,125,25,
            76,40,38,125,43,37,25,7,40,67,
            125,167,86,127,69,132,49,47,7,40,
            127,125,43,47,127
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            83,81,80,74,79,78,1,0,37,39,
            36,0,105,0,37,2,101,83,82,81,
            80,74,79,78,0,2,24,47,28,0,
            108,0,90,0,25,0,89,67,2,6,
            0,2,41,0,2,6,40,0,6,67,
            0,117,0,111,86,0,37,43,59,58,
            36,0,109,0,46,0,119,0,68,0,
            2,107,0,45,39,43,37,2,0,24,
            2,121,0,27,2,18,0,2,24,1,
            29,93,0,75,0,29,1,69,41,2,
            24,0,23,37,43,58,59,2,0,2,
            55,87,0,74,70,71,72,73,62,48,
            0,58,59,2,23,0,1,29,2,30,
            0,115,0,120,24,2,0,39,45,37,
            43,36,0,2,24,36,53,0,24,2,
            103,0,96,2,55,0,112,2,24,0,
            55,2,27,0,24,47,2,61,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,87,9,3,10,11,8,6,
            7,68,81,82,83,84,12,13,48,64,
            76,92,69,93,44,55,60,63,72,77,
            45,46,49,50,51,57,58,59,65,71,
            47,52,56,61,62,66,67,74,75,78,
            79,80,1,54,70,73,42,91,29,90,
            31,16,17,30,89,4,14,15,18,19,
            20,21,94,22,23,24,25,26,53,5,
            27,28,32,33,34,35,36,37,38,39,
            40,41,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            99,0,0,0,0,101,105,106,107,108,
            109,110,111,112,113,114,115,98,116,0,
            0,117,96,126,134,0,100,122,118,121,
            0,0,0,0,0,0,156,0,159,95,
            97,153,155,0,157,158,125,133,0,0,
            0,144,154,120,148,167,170,171,172,0,
            0,136,143,0,160,166,0,0,124,137,
            138,139,140,145,165,169,103,128,129,130,
            131,132,135,141,142,0,147,152,173,102,
            104,119,123,127,0,146,150,0,0,151,
            161,164,178,0,180,0,0,0,0,149,
            0,162,163,168,0,174,175,0,176,177,
            179,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            82,113,166,92,35,41,121,12,136,21,
            51,69,28,47,103,145,162,181,185,149,
            1,1,32,56,79,189,6,107,156,127,
            156,99,59,59,59
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            90,90,90,90,4,4,90,18,142,26,
            4,26,26,4,101,90,26,26,4,153,
            4,4,26,4,26,26,9,110,159,130,
            174,101,66,61,74
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            72,70,6,72,46,46,70,63,33,60,
            46,39,60,46,87,28,7,6,6,20,
            119,118,58,46,37,4,89,87,8,34,
            6,87,39,45,39
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            58,58,58,58,65,65,58,58,79,60,
            65,60,60,65,22,58,60,60,65,59,
            65,65,60,65,60,60,61,1,60,30,
            60,22,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            112,112,9,112,87,87,112,65,72,91,
            87,98,91,87,5,71,9,9,9,39,
            1,3,91,87,98,9,67,5,12,72,
            9,5,98,100,98
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            147,53,0,95,0,209,95,0,31,143,
            0,161,184,95,6,160,0,97,0,0,
            158,95,2,151,0,96,0,158,95,2,
            0,169,2,0,115,23,195,95,53,0,
            115,195,95,23,53,0,115,23,53,0,
            115,195,95,53,0,115,53,0,130,0,
            2,0,162,96,0,2,96,0,158,95,
            2,130,0,2,0,160,96,0,145,2,
            0,161,192,95,6,94,204,54,0,97,
            0,161,192,95,6,204,54,0,148,0,
            98,0,203,95,148,0,95,148,0,149,
            98,0,188,95,6,202,94,201,167,0,
            188,95,6,201,167,0,123,35,0,77,
            2,100,96,98,0,123,116,120,2,38,
            0,53,121,0,186,95,6,0,120,82,
            112,0,29,117,0,170,2,0,96,106,
            0,170,2,12,0,161,184,95,6,116,
            170,2,0,96,3,0,104,0,97,0,
            200,2,99,0,120,53,99,0,120,2,
            0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            927,0,681,0,2230,1527,2178,0,1180,898,
            412,2122,1793,340,520,456,636,566,1963,1939,
            1914,1710,1569,702,2048,2017,1975,1926,2113,2104,
            2093,2076,2067,1657,2058,1869,1766,1486,1315,1284,
            1263,1232,1211,1188,1157,1136,1113,1090,1067,1044,
            1021,998,975,952,929,906,875,719,772,539,
            747,313,854,613,679,654,589,497,474,0,
            400,1850,1828,1806,1784,1747,1722,1674,1524,1638,
            1616,1448,1594,1384,1342,0,1023,1019,924,847,
            2231,765,1544,1462,1452,1399,0,331,372,1864,
            765,1694,1462,1641,1399,2002,1853,1956,1309,388,
            0,770,313,1535,372,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,199,95,117,213,194,171,172,167,173,
            56,55,174,54,175,176,95,2,1,130,
            95,6,201,179,179,204,179,146,129,145,
            95,130,136,2,206,194,187,178,132,95,
            138,95,94,6,94,6,129,5,146,2,
            53,95,95,57,61,146,186,39,31,33,
            37,36,30,35,40,38,122,6,34,32,
            94,117,95,202,95,6,95,5,129,95,
            23,115,95,100,2,12,18,17,8,7,
            5,9,11,10,99,102,104,103,106,105,
            108,107,110,109,112,158,117,95,159,214,
            6,160,5,138,132,4,120,95,94,2,
            2,123,2,2,95,59,147,59,95,185,
            94,6,188,148,189,95,192,94,193,129,
            95,205,95,115,195,168,92,91,90,88,
            89,87,86,85,84,83,61,170,120,148,
            2,2,80,66,2,53,68,67,5,62,
            63,8,7,75,74,72,71,70,69,76,
            9,78,77,82,81,151,152,2,95,57,
            95,6,140,154,120,30,120,120,186,59,
            57,95,95,192,161,61,57,95,168,57,
            195,23,115,5,116,95,2,170,170,200,
            120,103,103,102,102,105,105,104,104,104,
            104,107,106,109,108,120,110,2,169,95,
            146,95,154,111,116,2,116,116,188,203,
            59,145,161,168,115,115,6,146,95,116,
            116,59,95,158,184,95,111,154,120,123,
            57,59,95,158,161,57,209,66,53,210,
            154,111,116,79,184,134,61,147,66,53,
            116,154,161,147,116
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_in_statement",
            "expression_list_actual",
            "constant_expression",
            "statement",
            "compound_statement",
            "block_item_list",
            "block_item",
            "declaration",
            "declaration_specifiers",
            "init_declarator_list",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "init_declarator",
            "complete_declarator",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "knr_direct_declarator",
            "array_modifier",
            "function_direct_declarator",
            "parameter_type_list",
            "function_declarator",
            "identifier_list",
            "knr_function_declarator",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "external_declaration_list",
            "external_declaration",
            "declaration_list",
            "function_body"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 24,
           SCOPE_UBOUND      = 34,
           SCOPE_SIZE        = 35,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 295,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2703,
           MAX_LA            = 2147483647,
           NUM_RULES         = 312,
           NUM_NONTERMINALS  = 123,
           NUM_SYMBOLS       = 216,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1986,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 73,
           EOLT_SYMBOL       = 73,
           ACCEPT_ACTION     = 2369,
           ERROR_ACTION      = 2391;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
