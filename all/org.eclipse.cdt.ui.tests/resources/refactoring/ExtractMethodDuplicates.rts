//!ExtractFunctionRefactoringTest with duplicates
//#org.eclipse.cdt.ui.tests.refactoring.extractfunction.ExtractFunctionRefactoringTest
//@.config
replaceduplicates=true
//@A.h
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	int foo();
	
private:
	int help();
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	int foo();
	
private:
	int help();
    void exp(int & i);
};

#endif /*A_H_*/

//@A.cpp
#include "A.h"

A::A()
{
}

A::~A()
{
	int i = 2;
	++i;
	help();
}int A::foo()
{
	int i = 2;
	/*$*/++i;
	help();/*$$*/
	return i;
}

int A::help()
{
	return 42;
}	

//=
#include "A.h"

A::A()
{
}

A::~A()
{
	int i = 2;
    exp(i);
}void A::exp(int & i)
{
    ++i;
    help();
}

int A::foo()
{
	int i = 2;
    exp(i);
	return i;
}

int A::help()
{
	return 42;
}	

//!ExtractFunctionRefactoringTest duplicates with different Names
//#org.eclipse.cdt.ui.tests.refactoring.extractfunction.ExtractFunctionRefactoringTest
//@.config
replaceduplicates=true
//@A.h
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	int foo();
	
private:
	int help();
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	int foo();
	
private:
	int help();
    void exp(int & i);
};

#endif /*A_H_*/

//@A.cpp
#include "A.h"

A::A()
{
}

A::~A()
{
	int oo = 99;
	++oo;
	help();
}int A::foo()
{
	int i = 2;
	/*$*/++i;
	help();/*$$*/
	return i;
}

int A::help()
{
	return 42;
}	

//=
#include "A.h"

A::A()
{
}

A::~A()
{
	int oo = 99;
    exp(oo);
}void A::exp(int & i)
{
    ++i;
    help();
}

int A::foo()
{
	int i = 2;
    exp(i);
	return i;
}

int A::help()
{
	return 42;
}	

//!ExtractFunctionRefactoringTest dublicate with field
//#org.eclipse.cdt.ui.tests.refactoring.extractfunction.ExtractFunctionRefactoringTest
//@.config
replaceduplicates=true
returnvalue=true
//@A.h
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	void foo();
	int i;
	
private:
	int help();
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	void foo();
	int i;
	
private:
	int help();
    int exp(int j, int & a);
};

#endif /*A_H_*/

//@A.cpp
#include "A.h"

A::A()
{
}

A::~A()
{
	int j = 0;
	i++;
	j++;
	help();
}void A::foo()
{
	int j = 0;
	int a = 1;
	/*$*/j++;
	a++;
	help();/*$$*/
	a++;
	j++;
}

int A::help()
{
	return 42;
}	

//=
#include "A.h"

A::A()
{
}

A::~A()
{
	int j = 0;
	i = exp(i, j);
}int A::exp(int j, int & a)
{
    j++;
    a++;
    help();
    return j;
}

void A::foo()
{
	int j = 0;
	int a = 1;
	j = exp(j, a);
	a++;
	j++;
}

int A::help()
{
	return 42;
}	

//!ExtractFunctionRefactoringTest dublicate with field in marked scope
//#org.eclipse.cdt.ui.tests.refactoring.extractfunction.ExtractFunctionRefactoringTest
//@.config
replaceduplicates=true
returnvalue=true
//@A.h
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	void foo();
	int i;
	int field;
	
private:
	int help();
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	void foo();
	int i;
	int field;
	
private:
	int help();
    int exp(int j);
};

#endif /*A_H_*/

//@A.cpp
#include "A.h"

A::A()
{
}

A::~A()
{
	int j = 0;
	int a = 1;
	a++;
	j++;
	help();
}void A::foo()
{
	int j = 0;

	/*$*/field++;
	j++;
	help();/*$$*/
	field++;
	j++;
}

int A::help()
{
	return 42;
}	

//=
#include "A.h"

A::A()
{
}

A::~A()
{
	int j = 0;
	int a = 1;
	a++;
	j++;
	help();
}int A::exp(int j)
{
    field++;
    j++;
    help();
    return j;
}

void A::foo()
{
	int j = 0;
    j = exp(j);
	field++;
	j++;
}

int A::help()
{
	return 42;
}	

//!ExtractFunctionRefactoringTest duplicates with different Names and return type
//#org.eclipse.cdt.ui.tests.refactoring.extractfunction.ExtractFunctionRefactoringTest
//@.config
replaceduplicates=true
returnvalue=true
//@A.h
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	int foo();
	
private:
	int help();
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	int foo();
	
private:
	int help();
    int exp(int i, float & j);
};

#endif /*A_H_*/

//@A.cpp
#include "A.h"

A::A()
{
}

A::~A()
{
	int oo = 99;
	float blabla = 0;
	++oo;
	blabla += 1;
	help();
	blabla += 1;
}int A::foo()
{
	int i = 2;
	float j = 8989;
	/*$*/++i;
	j+=1;
	help();/*$$*/
	j++;
	return i;
}

int A::help()
{
	return 42;
}	

//=
#include "A.h"

A::A()
{
}

A::~A()
{
	int oo = 99;
	float blabla = 0;
    oo = exp(oo, blabla);
	blabla += 1;
}int A::exp(int i, float & j)
{
    ++i;
    j += 1;
    help();
    return i;
}

int A::foo()
{
	int i = 2;
	float j = 8989;
    i = exp(i, j);
	j++;
	return i;
}

int A::help()
{
	return 42;
}	

//!ExtractFunctionRefactoringTest duplicates with a lot of different Names an variable not used afterwards in the duplicate
//#org.eclipse.cdt.ui.tests.refactoring.extractfunction.ExtractFunctionRefactoringTest
//@.config
replaceduplicates=true
//@A.h
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	int foo();
	
private:
	int help();
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	int foo();
	
private:
	int help();
    void exp(int & i, float j);
};

#endif /*A_H_*/

//@A.cpp
#include "A.h"

A::A()
{
}

A::~A()
{
	int oo = 99;
	float blabla = 0;
	++oo;
	blabla += 1;
	help();
}int A::foo()
{
	int i = 2;
	float j = 8989;
	/*$*/++i;
	j+=1;
	help();/*$$*/
	return i;
}

int A::help()
{
	return 42;
}	

//=
#include "A.h"

A::A()
{
}

A::~A()
{
	int oo = 99;
	float blabla = 0;
    exp(oo, blabla);
}void A::exp(int & i, float j)
{
    ++i;
    j += 1;
    help();
}

int A::foo()
{
	int i = 2;
	float j = 8989;
    exp(i, j);
	return i;
}

int A::help()
{
	return 42;
}	

//!ExtractFunctionRefactoringTest with duplicates name used afterwards in duplicate but not in original selection this is no dublicate
//#org.eclipse.cdt.ui.tests.refactoring.extractfunction.ExtractFunctionRefactoringTest
//@.config
replaceduplicates=true
//@A.h
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	void foo();
	
private:
	int help();
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	void foo();
	
private:
	int help();
    void exp(int i);
};

#endif /*A_H_*/

//@A.cpp
#include "A.h"

A::A()
{
}

A::~A()
{
	int i = 2;
	++i;// No Duplicate
	help();
	++i;// this is the reason
}void A::foo()
{
	int i = 2;
	/*$*/++i;
	help();/*$$*/
}

int A::help()
{
	return 42;
}	

//=
#include "A.h"

A::A()
{
}

A::~A()
{
	int i = 2;
	++i;// No Duplicate
	help();
	++i;// this is the reason
}void A::exp(int i)
{
    ++i;
    help();
}

void A::foo()
{
	int i = 2;
    exp(i);
}

int A::help()
{
	return 42;
}	

//!ExtractFunctionRefactoringTest with Return Value and a lot Ref Parameter and a method call
//#org.eclipse.cdt.ui.tests.refactoring.extractfunction.ExtractFunctionRefactoringTest
//@.config
replaceduplicates=true
returnvalue=true
//@A.h
#ifndef A_H_
#define A_H_

#include "B.h"

class A
{
public:
	A();
	virtual ~A();
	int foo();
	
private:
	int help();
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include "B.h"

class A
{
public:
	A();
	virtual ~A();
	int foo();
	
private:
	int help();
    int exp(int i, B *& b, int & y, float & x);
};

#endif /*A_H_*/

//@A.cpp
#include "A.h"

A::A()
{
}

A::~A()
{
	int i = 2;
	float x = i;
	B* b = new B();
	int y = x + i;
	++i;
	b->hello(y);
	i = i + x;
	help();
	b->hello(y);
	++x;
	i++;
}int A::foo()
{
	int i = 2;
	float x = i;
	B* b = new B();
	int y = x + i;
	/*$*/++i;
	b->hello(y);
	i = i + x;
	help();/*$$*/
	b->hello(y);
	++x;
	return i;
}

int A::help()
{
	return 42;
}	

//=
#include "A.h"

A::A()
{
}

A::~A()
{
	int i = 2;
	float x = i;
	B* b = new B();
	int y = x + i;
    i = exp(i, b, y, x);
	b->hello(y);
	++x;
	i++;
}int A::exp(int i, B *& b, int & y, float & x)
{
    ++i;
    b->hello(y);
    i = i + x;
    help();
    return i;
}

int A::foo()
{
	int i = 2;
	float x = i;
	B* b = new B();
	int y = x + i;
    i = exp(i, b, y, x);
	b->hello(y);
	++x;
	return i;
}

int A::help()
{
	return 42;
}	

//@B.h
#ifndef B_H_
#define B_H_

class B
{
public:
	B();
	virtual ~B();
	void hello(float y);
};

#endif /*B_H_*/

//!ExtractFunctionRefactoringTest with Return Value and a lot Ref Parameter and a method call, duplicate is not similar
//#org.eclipse.cdt.ui.tests.refactoring.extractfunction.ExtractFunctionRefactoringTest
//@.config
replaceduplicates=true
returnvalue=true
//@A.h
#ifndef A_H_
#define A_H_

#include "B.h"

class A
{
public:
	A();
	virtual ~A();
	int foo();
	
private:
	int help();
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

#include "B.h"

class A
{
public:
	A();
	virtual ~A();
	int foo();
	
private:
	int help();
    int exp(int i, B *& b, int & y, float x);
};

#endif /*A_H_*/

//@A.cpp
#include "A.h"

A::A()
{
}

A::~A()
{
	int i = 2;
	float x = i;
	B* b = new B();
	int y = x + i;
	++i;
	b->hello(y);
	i = i + x;
	help();
	b->hello(y);
	++x;
	i++;
}int A::foo()
{
	int i = 2;
	float x = i;
	B* b = new B();
	int y = x + i;
	/*$*/++i;
	b->hello(y);
	i = i + x;
	help();/*$$*/
	b->hello(y);
	return i;
}

int A::help()
{
	return 42;
}	

//=
#include "A.h"

A::A()
{
}

A::~A()
{
	int i = 2;
	float x = i;
	B* b = new B();
	int y = x + i;
	++i;
	b->hello(y);
	i = i + x;
	help();
	b->hello(y);
	++x;
	i++;
}int A::exp(int i, B *& b, int & y, float x)
{
    ++i;
    b->hello(y);
    i = i + x;
    help();
    return i;
}

int A::foo()
{
	int i = 2;
	float x = i;
	B* b = new B();
	int y = x + i;
    i = exp(i, b, y, x);
	b->hello(y);
	return i;
}

int A::help()
{
	return 42;
}	

//@B.h
#ifndef B_H_
#define B_H_

class B
{
public:
	B();
	virtual ~B();
	void hello(float y);
};

#endif /*B_H_*/

//!ExtractFunctionRefactoringTest with duplicates and comments
//#org.eclipse.cdt.ui.tests.refactoring.extractfunction.ExtractFunctionRefactoringTest
//@.config
replaceduplicates=true
//@A.h
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	int foo();
	
private:
	int help();
};

#endif /*A_H_*/

//=
#ifndef A_H_
#define A_H_

class A
{
public:
	A();
	virtual ~A();
	int foo();
	
private:
	int help();
    void exp(int & i);
};

#endif /*A_H_*/

//@A.cpp
#include "A.h"

A::A()
{
}

A::~A()
{
	int i = 2;
	++i;
	help();
}int A::foo()
{
	int i = 2;
	/*$*/++i;
	help();/*$$*/
	return i;
}

int A::help()
{
	return 42;
}	

//=
#include "A.h"

A::A()
{
}

A::~A()
{
	int i = 2;
    exp(i);
}void A::exp(int & i)
{
    ++i;
    help();
}

int A::foo()
{
	int i = 2;
    exp(i);
	return i;
}

int A::help()
{
	return 42;
}	

