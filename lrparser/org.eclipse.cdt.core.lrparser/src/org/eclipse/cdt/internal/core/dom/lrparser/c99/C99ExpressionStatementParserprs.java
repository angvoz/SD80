/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99ExpressionStatementParserprs implements lpg.lpgjavaruntime.ParseTable, C99ExpressionStatementParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            4,1,4,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,3,2,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,5,9,8,
            3,2,2,2,3,2,4,2,2,2,
            2,2,1,1,1,1,2,1,2,2,
            2,1,2,2,1,2,2,1,2,2,
            1,2,2,1,3,1,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,5,5,6,6,2,2,2,1,0,
            1,2,4,2,1,1,3,1,1,2,
            3,6,7,1,0,1,3,1,3,1,
            1,1,1,1,1,3,1,1,1,1,
            1,3,1,2,2,1,5,3,1,3,
            5,1,3,1,3,2,4,3,5,4,
            6,6,3,5,1,1,2,3,4,1,
            2,1,3,1,1,3,2,1,1,1,
            1,2,1,2,3,1,1,1,3,1,
            2,2,2,3,4,5,1,5,1,1,
            3,3,4,1,1,2,3,2,3,2,
            1,0,1,2,1,1,1,1,1,2,
            4,3,6,2,4,2,1,-38,0,0,
            0,0,0,0,0,-3,0,0,0,0,
            0,0,0,0,0,0,0,-2,0,0,
            -5,-15,-31,-82,-17,0,0,0,0,-125,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-39,0,0,0,0,0,0,0,
            0,0,0,0,-18,-19,0,-20,0,0,
            0,0,0,0,0,-7,0,0,0,0,
            0,0,0,-54,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-32,0,
            -174,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -169,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -181,-21,-22,-23,-187,-4,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-35,0,0,-144,
            0,0,-24,0,0,0,0,0,0,0,
            0,-25,0,0,0,0,0,-77,0,-75,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-143,
            -26,0,0,0,-173,-27,0,-111,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-130,0,0,
            0,0,0,0,0,-195,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-189,0,0,0,0,0,0,0,
            -36,0,0,0,0,0,0,0,0,0,
            0,0,-28,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-88,-89,-90,0,0,-58,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-59,0,0,
            0,0,0,0,0,-69,0,0,0,0,
            0,0,0,0,0,0,0,-60,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-61,0,0,
            0,0,0,0,0,-70,0,0,0,0,
            0,0,0,0,0,0,0,-62,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-63,0,0,
            0,0,0,0,0,-71,0,0,0,0,
            0,0,0,0,0,0,0,-64,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-65,0,0,
            0,0,0,0,0,-115,0,0,0,0,
            0,0,0,0,0,0,0,-66,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-67,0,0,
            0,0,0,0,0,-91,0,0,0,0,
            0,0,0,0,0,0,0,-68,0,0,
            0,0,0,0,0,-134,0,0,0,0,
            0,0,0,0,0,0,0,-40,0,0,
            0,0,0,0,0,-74,0,0,-92,-93,
            -94,-83,-95,0,0,0,0,-148,0,0,
            0,0,0,0,0,-85,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -8,0,0,0,0,0,0,-72,0,0,
            0,0,0,-96,0,-97,-98,0,0,0,
            0,0,0,-149,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-172,0,0,0,0,0,0,
            0,-99,0,0,0,0,0,0,0,0,
            0,0,-186,0,0,0,0,0,0,0,
            -100,0,0,0,0,0,0,0,0,0,
            0,-192,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -196,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-206,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-124,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-101,-133,-6,
            0,0,0,0,0,0,0,-57,0,0,
            0,0,0,0,0,-102,0,0,0,0,
            0,0,0,0,-114,0,0,0,0,0,
            0,-152,0,0,0,0,0,0,0,0,
            0,0,0,0,-117,0,-108,-78,0,-110,
            -171,0,0,-33,0,-112,0,0,0,-80,
            -103,0,-131,-104,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-105,0,0,0,0,0,0,0,
            0,0,-56,0,0,0,0,0,0,0,
            -129,0,0,0,0,0,0,0,0,-53,
            0,0,0,0,0,0,0,-87,0,0,
            0,0,0,0,0,-183,-9,0,0,0,
            0,0,0,0,-119,-121,-122,0,0,0,
            -191,-153,0,0,0,0,0,0,0,-48,
            0,0,0,0,0,0,0,-164,0,0,
            0,0,0,0,0,0,0,0,-106,0,
            -107,0,0,-151,0,0,0,0,0,0,
            0,0,0,0,-50,0,0,0,0,0,
            0,0,-205,0,0,0,0,0,-126,-180,
            0,-137,-127,0,0,-132,0,0,0,0,
            0,-51,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-13,0,0,0,0,0,0,
            -52,0,0,0,0,0,0,0,-118,0,
            0,0,-44,0,0,0,0,0,0,0,
            0,0,0,-10,0,0,0,0,0,0,
            0,0,-45,0,0,0,0,0,0,0,
            -154,0,0,-46,0,0,0,0,0,0,
            0,-120,0,0,-47,0,0,0,0,0,
            0,0,-198,0,0,0,-123,-155,-150,-135,
            0,-49,0,0,0,0,0,0,0,-37,
            0,-159,-139,-76,-79,-142,-145,0,-165,-81,
            0,0,0,0,0,-207,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-188,0,0,
            -166,-157,-146,0,-11,0,0,0,0,0,
            0,-12,0,0,0,0,0,0,-16,-178,
            -29,0,-30,0,0,-147,0,-170,0,-197,
            0,-41,0,0,0,0,0,0,-176,0,
            -208,0,0,0,0,0,0,0,0,-160,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-42,0,0,0,0,0,
            0,-43,0,0,0,0,0,0,-84,-193,
            0,0,0,-86,0,-73,0,0,0,0,
            0,0,-199,-116,-163,-1,-168,-113,-182,0,
            0,0,-177,0,0,0,0,0,0,0,
            0,0,0,0,0,-138,0,-140,0,0,
            0,-158,0,0,0,0,0,0,0,0,
            0,-179,-184,0,0,-128,0,-194,0,0,
            0,0,0,0,0,0,-175,0,-141,0,
            0,-162,0,0,0,0,0,0,0,0,
            0,-190,-201,0,-203,0,-109,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-136,
            0,0,-167,0,0,0,0,0,0,0,
            -14,0,0,0,0,0,0,0,0,0,
            0,0,0,-161,-34,0,-55,0,-156,0,
            -204,0,0,0,0,-185,0,-200,0,0,
            -202,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            83,8,24,24,20,20,26,26,61,61,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,51,51,69,
            69,5,5,5,5,5,5,5,5,5,
            5,5,6,6,7,7,7,7,9,9,
            9,10,10,10,11,11,11,11,11,12,
            12,12,13,13,14,14,15,15,16,16,
            17,17,18,18,19,19,19,19,19,19,
            19,19,19,19,19,19,93,41,33,84,
            84,71,71,46,94,94,94,94,94,94,
            94,95,95,95,96,96,101,101,102,102,
            97,97,98,98,98,104,104,99,99,99,
            99,100,100,100,100,100,103,103,23,23,
            23,23,23,28,28,28,77,77,72,72,
            72,72,73,73,73,74,74,74,75,75,
            75,76,76,76,105,105,106,106,107,29,
            31,31,31,31,31,52,54,54,54,54,
            54,54,54,54,54,54,54,54,66,66,
            27,27,63,63,63,63,64,64,64,55,
            55,56,56,48,48,32,85,85,78,79,
            79,79,65,65,80,80,81,81,67,67,
            21,22,22,22,30,47,47,34,34,34,
            34,37,37,39,35,35,36,40,40,108,
            108,38,109,109,86,86,25,25,25,25,
            25,25,25,25,25,82,49,49,49,49,
            58,58,57,57,57,59,59,50,50,87,
            87,62,62,60,60,60,42,42,42,43,
            44,44,44,45,45,45,45,53,53,70,
            70,70,70,68,88,89,89,90,90,91,
            91,110,110,111,111,112,112,112,112,114,
            114,113,113,113,115,115,83,83,1,14,
            19,15,332,526,44,375,539,335,378,376,
            453,452,483,454,521,492,74,91,480,134,
            210,6,433,570,30,465,136,133,135,159,
            295,14,19,15,332,526,44,375,480,335,
            378,376,453,452,483,454,521,492,74,277,
            138,1289,165,341,14,19,15,332,42,44,
            615,142,145,148,151,53,32,306,249,331,
            1365,1100,1370,1499,1504,1158,341,14,19,15,
            332,42,39,279,341,14,19,15,332,42,
            44,375,23,335,378,376,453,1056,280,570,
            520,295,14,19,15,332,526,44,375,480,
            335,378,376,453,452,483,454,521,492,74,
            277,203,14,19,15,332,526,44,375,480,
            335,378,376,453,452,483,454,521,492,74,
            277,552,23,104,137,649,341,14,19,15,
            332,526,44,375,279,335,378,376,453,452,
            483,454,521,492,74,91,270,323,22,280,
            619,1500,1369,163,281,216,1182,218,1321,220,
            221,226,259,265,1088,498,268,1506,177,282,
            155,14,19,15,332,526,44,375,1518,335,
            378,376,453,452,483,454,521,492,74,1096,
            645,235,207,271,236,647,49,331,407,14,
            19,15,332,526,44,375,1556,335,378,376,
            453,452,483,454,521,492,74,1141,179,14,
            19,15,332,526,44,375,443,335,378,376,
            453,452,483,454,521,492,74,1349,1448,525,
            285,1517,237,318,14,19,15,332,526,44,
            375,323,335,378,376,453,452,483,454,521,
            492,74,277,341,14,19,15,332,526,44,
            375,16,335,378,376,453,452,483,454,521,
            492,74,92,429,459,187,286,193,341,14,
            19,15,332,526,44,375,283,335,378,376,
            453,452,483,454,521,492,74,85,341,14,
            19,15,332,526,44,375,323,335,378,376,
            453,452,483,454,521,492,74,84,341,14,
            19,15,332,526,44,375,1209,335,378,376,
            453,452,483,454,521,492,74,83,341,14,
            19,15,332,526,44,375,323,335,378,376,
            453,452,483,454,521,492,74,82,341,14,
            19,15,332,526,44,375,1211,335,378,376,
            453,452,483,454,521,492,74,81,341,14,
            19,15,332,526,44,375,323,335,378,376,
            453,452,483,454,521,492,74,80,341,14,
            19,15,332,526,44,375,21,335,378,376,
            453,452,483,454,521,492,74,79,341,14,
            19,15,332,526,44,375,323,335,378,376,
            453,452,483,454,521,492,74,78,341,14,
            19,15,332,526,44,375,269,335,378,376,
            453,452,483,454,521,492,74,77,341,14,
            19,15,332,526,44,375,255,335,378,376,
            453,452,483,454,521,492,74,76,341,14,
            19,15,332,526,44,375,54,335,378,376,
            453,452,483,454,521,492,74,75,341,14,
            19,15,332,42,44,806,211,134,210,591,
            601,606,441,608,136,133,135,159,341,14,
            19,15,332,526,44,375,558,335,378,376,
            453,452,483,454,521,492,74,1459,138,1332,
            165,341,14,19,15,332,42,38,597,142,
            145,148,151,1347,506,1587,607,416,1365,1100,
            1370,1499,1504,1158,341,14,19,15,332,526,
            44,375,20,335,378,376,453,452,483,454,
            521,492,74,1523,341,14,19,15,332,42,
            44,375,57,335,378,376,453,452,483,454,
            521,492,93,341,14,19,15,332,42,44,
            375,87,335,378,376,453,452,483,454,521,
            492,93,341,14,19,15,332,42,44,375,
            1582,335,378,376,453,452,483,454,521,492,
            93,341,14,19,15,332,42,44,375,209,
            335,378,376,453,452,483,454,521,492,93,
            341,14,19,15,332,42,44,375,1583,335,
            378,376,453,452,483,454,521,492,93,341,
            14,19,15,332,42,44,375,200,335,378,
            376,453,452,483,454,521,492,73,283,65,
            363,14,19,15,332,40,201,1348,341,14,
            19,15,332,42,44,375,496,335,378,376,
            453,452,483,1123,270,227,14,19,15,332,
            42,35,536,215,1182,218,1321,220,221,226,
            1552,263,1088,498,268,615,259,12,449,243,
            568,649,273,1610,277,340,597,270,1243,260,
            466,33,456,584,303,274,215,1182,218,1321,
            220,221,226,272,263,1088,498,268,288,1440,
            238,134,210,372,251,210,257,89,144,133,
            135,159,766,341,14,19,15,332,42,44,
            375,597,335,378,376,453,452,483,454,1104,
            341,14,19,15,332,42,44,375,54,335,
            378,376,453,452,1038,240,73,341,14,19,
            15,332,42,37,1513,12,12,12,726,134,
            210,649,654,1536,1538,1569,137,133,135,159,
            341,14,19,15,332,42,44,375,656,894,
            215,1182,218,1321,220,221,226,225,290,142,
            139,371,165,1450,227,14,19,15,332,42,
            35,143,146,149,152,341,14,19,15,332,
            42,44,375,73,335,378,376,897,244,579,
            615,1513,12,573,196,198,323,1423,1558,1646,
            1542,556,341,14,19,15,332,42,44,375,
            228,335,378,932,250,210,275,215,1182,218,
            1321,220,221,226,385,14,19,15,332,33,
            1450,341,14,19,15,332,42,44,375,373,
            335,378,951,341,14,19,15,332,42,44,
            375,1446,335,849,341,14,19,15,332,42,
            36,197,198,341,14,19,15,332,42,44,
            375,624,335,850,341,14,19,15,332,42,
            44,375,374,335,851,341,14,19,15,332,
            42,44,375,349,335,853,224,390,211,597,
            106,1513,341,14,19,15,332,42,44,375,
            546,896,629,12,540,107,12,12,846,610,
            495,1572,1514,239,1613,411,69,215,1182,218,
            1321,220,221,226,273,270,134,210,183,270,
            1440,134,210,141,133,135,159,451,147,133,
            135,159,263,1088,498,268,263,1088,498,268,
            216,1182,218,1321,220,221,226,140,656,165,
            262,657,323,573,766,341,14,19,15,332,
            42,35,341,14,19,15,332,42,34,12,
            323,12,276,12,250,210,590,308,625,308,
            659,308,341,14,19,15,332,42,47,597,
            222,50,195,1709,195,1709,195,251,210,1648,
            636,1360,87,1360,87,1360,87,1709,1166,1709,
            581,1567,581,241,581,341,14,19,15,332,
            42,46,341,14,19,15,332,42,45,501,
            645,477,1709,646,507,686,272,14,19,15,
            332,42,43,211,609,629,250,629,573,629,
            134,210,826,597,456,134,210,150,133,135,
            159,194,153,133,135,159,611,1039,611,250,
            210,182,611,26,826,185,826,242,1709,87,
            826,1651,609,629,1709,1709,573,316,417,195,
            826,195,1376,1587,255,195,826,595,1470,617,
            1470,1246,611,1350,1470,1039,1103,250,210,184,
            826,1039,597,597,191,323,191,564,251,210,
            191,1362,1634,1515,1634,195,1369,1519,1634,328,
            548,451,255,1709,1470,227,287,289,255,1246,
            627,1350,270,617,1103,1585,1709,1350,826,1709,
            191,385,14,19,15,332,32,1553,1634,265,
            1088,498,268,1039,643,12,206,12,858,628,
            1369,556,826,456,1641,456,629,826,629,1198,
            1421,629,1709,1709,1709,1709,1709,195,1709,1709,
            255,231,1039,1709,1709,1709,1470,1422,87,1350,
            87,1709,202,1709,203,1709,888,278,1101,1709,
            206,1709,192,1709,1709,1709,1709,1709,1709,256,
            1709,1709,1709,1418,1421,1709,0,17,179,0,
            18,178,0,1,1932,0,1,1943,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,0,12,13,14,15,16,17,18,19,
            20,21,0,23,24,25,26,27,28,0,
            1,0,0,4,12,30,36,37,38,39,
            40,41,42,43,44,45,46,47,0,0,
            1,22,0,0,1,3,0,4,58,59,
            60,8,9,10,0,1,2,3,0,1,
            2,3,0,1,2,11,23,24,25,26,
            27,28,51,52,53,54,0,55,0,36,
            37,38,39,40,41,42,43,44,45,46,
            47,49,50,0,56,0,0,51,52,53,
            54,58,59,60,8,9,10,69,70,71,
            72,73,74,75,76,77,78,55,0,23,
            24,25,26,27,28,30,0,51,52,53,
            54,0,36,37,38,39,40,41,42,43,
            44,45,46,47,0,1,2,3,4,5,
            6,7,0,22,61,62,12,13,14,15,
            16,17,18,19,20,21,0,23,0,1,
            2,3,4,5,6,7,0,11,34,3,
            12,13,14,15,16,17,18,19,20,21,
            64,23,0,1,2,3,4,5,6,7,
            0,0,34,3,12,13,14,15,16,17,
            18,19,20,21,22,63,0,1,2,3,
            4,5,6,7,0,49,50,35,12,13,
            14,15,16,17,18,19,20,21,0,0,
            1,2,3,4,0,6,7,3,0,0,
            34,12,13,14,15,16,17,18,19,20,
            21,0,1,2,3,4,0,6,7,31,
            32,5,0,12,13,14,15,16,17,18,
            19,20,21,22,0,1,2,3,4,65,
            6,7,0,49,50,29,12,13,14,15,
            16,17,18,19,20,21,22,0,1,2,
            3,4,0,6,7,67,68,5,79,12,
            13,14,15,16,17,18,19,20,21,22,
            0,1,2,3,4,63,6,7,0,1,
            2,29,12,13,14,15,16,17,18,19,
            20,21,0,1,2,3,4,65,6,7,
            0,0,0,0,12,13,14,15,16,17,
            18,19,20,21,0,1,2,3,4,0,
            6,7,22,0,22,22,12,13,14,15,
            16,17,18,19,20,21,0,1,2,3,
            4,22,6,7,0,0,0,1,12,13,
            14,15,16,17,18,19,20,21,0,0,
            2,3,0,5,2,64,8,9,10,11,
            0,1,0,11,4,13,14,5,0,33,
            2,23,24,25,26,27,28,29,0,11,
            2,3,22,5,0,0,8,9,10,11,
            6,7,30,8,9,10,61,62,0,0,
            48,23,24,25,26,27,28,29,23,24,
            25,26,27,28,0,0,0,0,66,57,
            0,0,8,9,10,0,0,12,8,9,
            10,6,7,0,8,9,10,23,24,25,
            26,27,28,23,24,25,26,27,28,23,
            24,25,26,27,28,0,1,2,0,0,
            5,2,0,5,5,0,11,2,3,0,
            11,0,1,2,3,0,11,0,1,80,
            5,4,11,0,29,2,3,0,29,0,
            1,0,0,4,11,8,9,10,0,22,
            8,9,10,0,29,30,8,9,10,0,
            0,8,9,10,0,57,0,8,9,10,
            0,5,8,9,10,0,0,0,0,0,
            0,3,6,7,0,5,0,1,0,5,
            4,31,32,0,0,2,0,0,0,11,
            34,31,32,5,11,0,31,32,31,32,
            5,33,0,29,0,35,0,5,0,1,
            0,1,4,0,4,0,0,11,0,33,
            33,0,0,35,11,56,48,0,0,0,
            0,0,0,0,30,0,0,35,0,0,
            56,0,0,0,0,30,30,0,0,0,
            0,0,57,0,48,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,55,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1709,613,1439,1425,614,88,1304,1167,1920,1921,
            1922,1,1432,1621,1274,1040,1719,1720,1721,1722,
            881,386,64,1871,1872,1870,1923,1873,1869,1709,
            1889,59,1709,1890,1225,593,1876,1881,1880,1878,
            1879,1877,1882,1883,1875,1884,1885,1886,42,1709,
            1944,1175,48,1709,1888,1492,61,1887,866,852,
            334,1920,1921,1922,258,1932,1072,1,1709,1932,
            1343,1239,1,1932,1343,500,1871,1872,1870,1923,
            1873,1869,1335,1324,1313,1293,60,1019,1709,1876,
            1881,1880,1878,1879,1877,1882,1883,1875,1884,1885,
            1886,1485,1452,62,818,252,128,1335,1324,1313,
            1293,866,852,334,1920,1921,1922,798,778,758,
            738,718,678,698,658,638,618,981,1709,1871,
            1872,1870,1923,1873,1869,1639,68,1335,1324,1313,
            1293,41,1876,1881,1880,1878,1879,1877,1882,1883,
            1875,1884,1885,1886,1,1726,1439,1065,1727,1712,
            1304,1167,66,1087,1281,1252,1432,1621,1274,1040,
            1719,1720,1721,1722,881,386,267,528,1709,1726,
            1439,1214,1727,1712,1304,1167,50,500,1711,1492,
            1432,1621,1274,1040,1719,1720,1721,1722,881,386,
            1150,904,1,1726,1439,1425,1727,27,1304,1167,
            1709,1709,1711,1090,1432,1621,1274,1040,1719,1720,
            1721,1722,881,386,1367,394,1709,1726,1439,1425,
            1727,1712,1304,1167,70,1485,1452,27,1432,1621,
            1274,1040,1719,1720,1721,1722,881,386,54,1709,
            1,1,1,1,49,1,1,1492,72,1709,
            1711,1,1,1,1,1,1,1,1,1,
            1,1709,1726,1439,1425,1727,1,1304,1167,1190,
            1352,90,67,1432,1621,1274,1040,1719,1720,1721,
            1722,881,386,1087,1,1726,1439,1425,1727,1048,
            1304,1167,71,1485,1452,90,1432,1621,1274,1040,
            1719,1720,1721,1722,881,386,1367,1709,1726,1439,
            1425,1727,1709,1304,1167,1133,1637,1714,2016,1432,
            1621,1274,1040,1719,1720,1721,1722,881,386,1367,
            1709,1726,1439,1425,1727,394,1304,1167,1,1932,
            1343,1713,1432,1621,1274,1040,1719,1720,1721,1722,
            881,386,1709,1726,1441,1425,1727,1048,1304,1167,
            1709,69,187,186,1432,1621,1274,1040,1719,1720,
            1721,1722,881,386,1709,1726,1443,1425,1727,188,
            1304,1167,1087,1709,1242,1363,1432,1621,1274,1040,
            1719,1720,1721,1722,881,386,1,1726,1439,1425,
            1727,1366,1304,1167,1709,63,1,1706,1432,1621,
            1274,1040,1719,1720,1721,1722,881,386,17,1709,
            1697,1697,31,1697,1094,1150,179,179,179,1697,
            1709,1889,1709,1635,1890,1733,1734,1718,266,1963,
            1085,179,179,179,179,179,179,1697,18,500,
            1700,1700,1176,1700,51,129,178,178,178,1700,
            838,363,1233,1920,1921,1922,1281,1252,1709,1709,
            409,178,178,178,178,178,178,1700,1871,1872,
            1870,1923,1873,1869,130,65,1709,1709,333,1717,
            131,1709,1920,1921,1922,53,132,1225,1920,1921,
            1922,838,363,1709,1920,1921,1922,1871,1872,1870,
            1923,1873,1869,1871,1872,1870,1923,1873,1869,1871,
            1872,1870,1923,1873,1869,1,1703,1072,1709,1,
            1714,1364,1709,1718,1714,261,500,1364,1,1709,
            500,264,1932,1072,1239,1709,500,1709,1889,1696,
            1714,1890,500,264,1713,1364,1239,246,1713,1709,
            1738,1709,1709,1739,500,1,1,1,247,1177,
            1920,1921,1922,245,1713,1461,1,1,1,248,
            58,1920,1921,1922,249,1717,1709,1920,1921,1922,
            57,1712,1920,1921,1922,56,52,55,1,208,
            1,1090,838,363,1,190,205,1889,1709,1714,
            1890,1190,1352,219,1709,1240,1,1,1709,924,
            1711,1190,1352,1716,500,1,1190,1352,1190,1352,
            1718,1963,1,1713,28,190,284,189,1709,1889,
            204,455,1890,217,455,28,204,962,199,1963,
            1962,1709,1709,1715,500,943,1091,1709,1709,1709,
            1709,1709,1709,1709,431,1709,1709,189,1709,1709,
            573,1709,1709,1709,1709,1736,2667,1709,1709,1709,
            1709,1709,1717,1709,1181,1709,1709,1709,1709,1709,
            1709,1709,1709,1709,1709,1709,1709,1709,1709,1709,
            1709,1709,1709,1000
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            424,1,44,75,40,75,75,75,75,75,
            75,75,75,75,3,345,23,20,27,25,
            33,31,35,34,37,36,9,75,345,345,
            311,311,168,75,162,162,339,345,75,75,
            75,75,75,75,75,75,75,75,75,75,
            75,75,75,75,75,75,75,75,75,75,
            75,75,75,75,75,75,75,75,162,162,
            162,165,51,343,69,281,160,159,314,326,
            326,65,65,326,65,326,359,116,116,20,
            20,25,25,25,25,23,23,31,27,27,
            34,33,279,36,35,222,67,49,339,334,
            96,165,382,73,162,395,284,261,187,261,
            187,216,261,75,49,334,382,382,165,72,
            69,162,337,359,161,286,187,187,187,187,
            216,216,257,93,49,382,334,75,75,165,
            73,281,274,273,343,286,162,187,258,388,
            187,187,258,257,256,257,216,258,47,386,
            311,75,92,49,334,165,165,162,395,284,
            337,258,390,258,258,75,311,257,51,165,
            311,75,257,286,43,75,42,88,343,258,
            165,258,162,161,390,75,88,312
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,11,2,48,66,13,14,56,69,
            70,71,72,73,75,74,76,77,78,3,
            49,50,6,7,32,31,51,52,53,54,
            61,62,12,63,64,65,35,67,68,34,
            29,55,30,57,5,0,5,35,11,48,
            13,14,12,3,6,7,20,21,15,2,
            16,17,18,19,1,4,22,0,8,9,
            10,23,34,5,16,17,18,19,4,13,
            14,12,6,7,20,21,15,3,2,1,
            0,56,11,48,0,8,9,10,2,16,
            17,18,19,1,4,13,14,12,3,6,
            7,20,21,15,0,9,23,28,10,27,
            26,25,8,24,48,66,13,14,12,6,
            7,49,50,31,32,51,52,53,54,61,
            62,63,64,65,67,68,56,69,70,71,
            72,73,74,75,76,77,78,3,2,11,
            30,29,5,0,34,5,0,5,29,15,
            16,17,18,19,1,4,2,13,14,12,
            3,6,7,20,21,0,24,36,8,37,
            58,25,38,26,39,40,27,9,41,42,
            23,59,28,60,43,44,10,45,46,47,
            1,4,5,35,0,1,4,5,30,35,
            0,12,3,6,7,49,50,31,32,51,
            52,53,54,61,62,63,64,65,67,68,
            55,69,70,71,72,73,74,75,76,77,
            78,34,29,57,22,56,30,35,5,0,
            24,8,25,26,27,9,23,28,10,1,
            3,22,2,5,30,29,57,11,55,0,
            3,2,11,29,5,24,36,8,37,58,
            25,38,26,39,40,27,9,41,42,23,
            59,28,60,43,44,10,45,46,47,33,
            4,1,0,44,36,41,39,40,38,37,
            42,43,45,46,47,55,57,28,25,23,
            24,27,26,8,9,10,30,1,5,29,
            2,11,3,0,15,16,17,18,19,2,
            13,14,12,3,6,7,20,21,4,1,
            58,59,60,44,36,41,39,40,38,37,
            42,43,45,46,47,28,25,23,24,27,
            26,8,9,10,0,56,0,57,5,3,
            1,2,55,0,24,36,8,37,58,25,
            38,26,39,40,27,9,41,42,23,59,
            28,60,43,44,10,45,46,47,1,4,
            33,3,0,15,16,17,18,19,1,4,
            2,13,14,12,3,6,7,20,21,79,
            0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            73,8,67,15,8,15,15,15,15,15,
            15,15,15,15,8,62,8,8,8,8,
            8,8,8,8,8,8,8,15,62,62,
            9,9,39,63,37,37,58,1,15,15,
            15,15,15,15,15,15,15,15,15,15,
            15,15,15,15,63,15,15,15,15,15,
            15,15,15,15,15,15,15,15,37,37,
            37,23,15,71,21,57,19,19,48,49,
            49,11,11,49,11,49,44,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,85,59,85,
            14,23,77,22,37,69,36,8,85,8,
            85,85,8,15,14,85,77,77,23,22,
            42,37,30,2,8,84,85,79,85,79,
            11,85,25,17,85,77,42,15,15,23,
            22,29,19,19,71,84,37,79,55,66,
            87,79,55,25,8,8,11,55,13,8,
            11,15,27,14,42,23,23,37,69,36,
            31,55,51,55,55,15,11,25,15,23,
            11,15,25,83,67,15,8,51,71,55,
            23,55,37,37,51,15,33,8
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,77,76,75,74,73,72,0,69,0,
            27,0,68,8,4,0,89,0,25,0,
            8,4,24,0,51,0,91,0,20,8,
            44,43,37,35,0,8,20,0,8,84,
            0,21,0,63,64,65,66,52,28,0,
            8,37,35,0,26,0,20,8,44,43,
            0,32,8,41,0,8,61,0,8,23,
            49,0,8,41,83,0,58,0,56,8,
            32,0,86,23,8,0,8,32,48,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,9,86,87,10,11,48,64,76,
            1,8,6,7,68,81,82,83,84,12,
            13,3,69,44,55,60,63,72,90,42,
            16,17,30,89,91,47,52,56,61,62,
            66,67,74,75,78,79,80,4,14,15,
            18,19,20,21,29,31,92,54,70,73,
            22,23,24,25,26,5,27,28,32,33,
            34,35,36,37,38,39,40,41,93,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,101,105,106,107,0,108,109,
            110,111,112,113,114,115,116,117,118,97,
            129,0,122,96,149,98,121,128,0,0,
            0,140,0,145,147,0,148,0,0,0,
            100,158,159,160,0,120,137,139,146,155,
            0,131,136,0,0,138,150,153,154,157,
            99,103,132,133,134,135,144,161,102,104,
            119,123,124,125,126,127,130,142,0,0,
            143,152,95,0,141,151,156,162,163,0,
            164,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            164,80,33,39,87,107,113,138,12,19,
            49,67,119,124,26,45,97,160,179,183,
            147,1,1,30,54,77,187,6,101,154,
            129,154,93,57,57,57
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            17,17,4,4,17,17,17,144,17,24,
            4,24,17,17,24,4,95,24,24,4,
            151,4,4,24,4,24,24,9,104,157,
            132,172,95,64,59,72
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            4,65,25,25,65,63,63,98,53,45,
            25,40,63,63,45,25,48,5,4,4,
            18,91,90,43,25,37,2,68,48,6,
            99,4,48,40,38,40
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            35,35,34,34,35,35,35,86,35,29,
            34,29,35,35,29,34,57,29,29,34,
            55,34,34,29,34,29,29,56,1,29,
            92,29,57,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            34,19,23,23,19,19,19,-1,89,27,
            23,11,19,19,27,23,5,34,34,34,
            64,1,3,27,23,11,34,90,5,37,
            -1,34,5,11,11,11
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            139,11,0,96,0,181,101,0,31,136,
            0,144,163,101,22,0,98,0,150,101,
            2,136,0,97,0,150,101,2,0,153,
            2,0,112,23,175,101,11,0,112,175,
            101,23,11,0,112,23,11,0,112,175,
            101,11,0,112,11,0,130,0,2,0,
            151,97,0,2,97,0,150,101,2,130,
            0,2,0,150,97,0,140,2,0,144,
            173,101,22,120,58,0,144,173,101,22,
            58,0,125,0,99,0,178,101,125,0,
            101,125,0,141,99,0,148,101,22,120,
            60,0,148,101,22,120,59,0,148,101,
            22,60,0,148,101,22,59,0,187,85,
            0,77,2,100,97,99,0,187,113,134,
            2,89,0,53,0,0,134,68,110,0,
            29,117,0,155,2,0,97,106,0,155,
            2,15,0,144,163,101,22,113,155,2,
            0,97,3,0,104,0,98,0,177,2,
            97,0,134,11,97,0,134,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            525,0,480,0,1572,1634,1542,1538,1536,0,
            1376,1233,1343,1166,451,1072,1039,0,826,1158,
            308,0,1321,1182,1088,498,451,1072,1039,1587,
            1364,1360,0,1621,1274,1040,1214,1065,1506,1048,
            1133,394,1150,1281,1252,1225,1352,1190,1335,1324,
            1313,1293,1492,1485,1452,838,363,1432,1425,1304,
            1167,881,386,1000,981,962,943,924,904,858,
            548,1019,528,500,818,798,778,758,738,718,
            698,678,658,638,618,308,593,456,573,411,
            431,340,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,176,134,101,164,15,21,20,7,6,
            3,12,14,13,97,2,102,100,104,103,
            106,105,108,107,110,109,98,30,2,2,
            66,48,2,11,155,134,125,101,7,6,
            50,49,3,54,53,52,51,31,32,12,
            62,61,64,63,68,67,65,78,77,76,
            74,75,73,72,71,70,69,56,155,155,
            177,134,113,101,11,2,137,136,165,166,
            167,60,59,168,58,169,170,1,4,100,
            100,103,103,103,103,102,102,105,104,104,
            107,106,134,109,108,113,113,22,142,3,
            23,112,101,3,153,101,2,120,22,120,
            22,22,120,55,101,3,101,101,112,175,
            151,150,116,101,152,101,22,101,22,101,
            101,22,163,101,22,101,151,175,23,112,
            3,2,128,130,101,30,150,101,148,125,
            149,101,148,173,120,174,101,144,30,181,
            48,11,182,101,151,112,112,140,101,2,
            142,148,101,148,144,56,30,173,56,139,
            48,11,163,101,178,55,140,2,101,144,
            139,144,150,179,30,55,142,30
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "expression_parser_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_name",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_or_typedefname",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 79,
           SCOPE_UBOUND      = 35,
           SCOPE_SIZE        = 36,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 208,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2016,
           MAX_LA            = 2,
           NUM_RULES         = 307,
           NUM_NONTERMINALS  = 115,
           NUM_SYMBOLS       = 208,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1516,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1696,
           ERROR_ACTION      = 1709;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
