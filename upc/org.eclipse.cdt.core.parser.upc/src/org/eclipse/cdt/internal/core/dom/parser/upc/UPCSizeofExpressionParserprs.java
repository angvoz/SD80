/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.upc;

public class UPCSizeofExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, UPCSizeofExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            1,4,1,3,3,3,1,3,3,1,
            3,3,1,3,3,3,3,1,3,3,
            1,3,1,3,1,3,1,3,1,3,
            1,5,1,3,3,3,3,3,3,3,
            3,3,3,3,1,1,2,1,0,1,
            3,1,1,1,1,1,1,1,1,3,
            3,2,2,4,1,2,1,1,1,2,
            5,7,5,1,0,7,5,9,8,3,
            2,2,2,3,2,4,2,2,2,2,
            2,1,1,1,1,2,1,2,2,2,
            1,2,2,1,2,2,1,2,2,1,
            2,2,1,3,1,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            5,5,6,6,2,2,2,1,0,1,
            2,4,2,1,1,1,3,1,1,2,
            3,6,7,1,0,1,3,1,3,1,
            1,1,1,1,1,3,1,1,1,1,
            1,3,1,2,2,1,5,3,1,3,
            5,1,3,1,3,2,4,3,5,4,
            6,6,3,5,1,1,2,3,4,1,
            2,1,3,1,1,3,2,1,1,1,
            1,2,1,2,3,1,1,1,3,1,
            2,2,2,3,4,5,1,5,1,1,
            3,3,4,1,1,2,3,2,3,2,
            1,0,1,2,1,1,1,1,1,2,
            4,3,6,2,4,1,1,1,1,1,
            2,2,2,1,1,2,1,1,1,3,
            3,2,1,3,2,3,2,3,2,2,
            11,10,10,9,10,9,9,8,10,9,
            9,8,9,8,8,7,10,9,9,8,
            9,8,8,7,1,1,-39,0,0,0,
            0,0,0,0,0,-72,0,0,0,0,
            0,0,0,0,0,0,-2,0,0,0,
            0,-4,-17,-19,-77,0,0,0,0,0,
            -126,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-5,0,0,0,0,0,0,
            0,0,0,-6,0,0,0,0,0,0,
            0,0,0,0,0,0,-3,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-20,-21,0,-22,
            -23,-24,0,-177,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-172,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-7,0,0,0,0,0,0,
            -40,0,0,0,0,0,0,0,0,-25,
            -26,-27,-51,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-28,-29,0,-52,
            0,0,0,0,0,0,0,0,-74,0,
            0,0,-75,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-135,-111,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-89,0,
            -90,-78,-32,0,0,0,0,-192,0,0,
            0,0,0,0,0,0,-91,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -8,0,0,0,0,0,0,0,0,0,
            -9,0,0,0,0,0,0,0,0,0,
            0,0,0,-118,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-131,0,0,0,0,0,
            0,0,0,-92,0,0,0,0,0,0,
            0,0,0,0,0,-93,0,-30,0,0,
            0,0,0,0,0,0,-112,0,0,0,
            0,0,0,0,0,0,0,-59,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-60,0,0,
            0,0,0,0,0,0,-130,0,0,0,
            0,0,0,0,0,0,0,-61,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-62,0,0,
            0,0,0,0,0,0,-138,0,0,0,
            0,0,0,0,0,0,0,-63,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-64,0,0,
            0,0,0,0,0,0,-153,0,0,0,
            0,0,0,0,0,0,0,-65,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-66,0,0,
            0,0,0,0,0,0,-179,0,0,0,
            0,0,0,0,0,0,0,-67,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-68,0,0,
            0,0,0,0,0,0,-94,0,0,0,
            0,0,0,0,0,0,0,-69,0,0,
            0,0,0,0,0,0,-147,0,0,0,
            0,0,0,0,0,0,0,-151,0,0,
            0,0,0,0,0,0,-95,0,0,0,
            0,0,0,0,0,0,0,-152,0,0,
            0,0,0,0,0,0,-146,0,0,0,
            0,0,0,0,0,0,0,-175,0,0,
            0,0,0,0,0,0,-83,0,0,0,
            0,0,0,0,0,0,-189,0,0,0,
            0,0,0,0,0,-167,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-49,0,0,0,0,0,0,0,0,
            -195,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-199,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-96,-97,
            -33,-158,-191,0,-50,0,0,0,0,0,
            0,0,0,-209,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-125,0,0,0,0,0,0,0,
            0,-98,0,0,0,0,0,0,0,0,
            0,-134,0,-99,-84,0,0,-100,-128,-101,
            0,-57,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-155,-117,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-162,
            0,-41,0,0,0,0,0,0,0,0,
            0,0,-180,0,-196,-86,-36,-159,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-15,0,0,0,0,0,
            0,0,-88,0,0,-37,0,-58,0,0,
            0,0,0,0,0,0,-174,0,0,0,
            0,0,0,0,0,0,0,0,-194,0,
            0,-81,0,0,0,0,-54,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-184,0,0,0,0,0,0,0,-102,
            -103,0,0,0,0,0,0,0,0,-55,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-82,-186,-76,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-208,
            -108,-70,-183,-71,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-115,-133,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-104,0,0,-190,-79,-166,0,0,-53,
            0,0,0,0,0,0,0,0,-105,0,
            0,-110,-106,-120,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-45,0,0,0,0,0,0,0,0,
            -80,0,-10,0,0,0,0,0,0,0,
            -210,0,-46,0,0,0,0,0,0,0,
            0,0,0,-47,0,0,0,0,0,0,
            0,0,-85,0,-48,0,0,0,0,0,
            0,0,0,-201,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-107,-38,-122,
            -123,-127,0,0,0,0,-87,0,0,0,
            0,-114,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-140,0,0,0,
            0,0,0,-119,0,0,0,0,0,0,
            -132,-121,0,0,0,0,-139,0,0,0,
            0,0,0,-154,0,0,0,0,0,0,
            0,0,0,0,0,-124,0,-16,0,0,
            0,0,0,0,-11,0,0,0,0,0,
            0,-12,0,0,0,0,0,0,-13,0,
            0,0,0,0,0,-14,0,0,0,0,
            0,0,-18,-31,-42,0,0,0,0,0,
            0,0,0,-43,0,0,0,0,0,0,
            -44,0,0,0,0,0,0,-193,0,0,
            -142,-176,-145,-148,-163,-136,0,0,-113,0,
            -116,0,0,0,0,0,-129,0,-168,0,
            0,0,-73,0,0,0,0,0,0,0,
            0,0,0,-141,-169,-171,0,0,0,0,
            0,-160,0,0,0,-34,-143,-1,-161,-173,
            -204,-165,-156,-181,0,0,0,0,-200,0,
            0,0,0,0,-211,0,0,0,0,0,
            0,0,0,0,0,-109,0,0,0,0,
            0,0,0,0,-182,0,-157,0,-197,0,
            0,0,0,0,0,0,0,0,0,-185,
            0,0,0,0,0,0,0,-137,0,0,
            0,-187,-144,0,0,-170,0,-198,-188,0,
            0,0,0,0,-202,0,0,0,-164,-149,
            0,0,0,0,-150,0,0,0,0,0,
            0,0,-206,0,0,0,0,0,-178,0,
            0,0,0,0,0,0,0,0,0,0,
            -203,0,0,-205,-35,-56,0,0,0,0,
            0,0,0,0,0,0,0,-207,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            85,9,20,20,25,25,28,28,69,69,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,53,53,70,
            70,5,5,5,5,5,5,5,5,5,
            5,6,6,7,7,7,7,8,8,8,
            10,10,10,11,11,11,11,11,12,12,
            12,13,13,14,14,15,15,16,16,17,
            17,18,18,19,19,19,19,19,19,19,
            19,19,19,19,19,96,48,42,86,86,
            73,73,43,97,97,97,97,97,97,97,
            98,98,98,99,99,104,104,105,105,100,
            100,101,101,101,107,107,102,102,102,102,
            103,103,103,103,103,106,106,26,26,26,
            26,26,30,30,30,79,79,74,74,74,
            74,75,75,75,76,76,76,77,77,77,
            78,78,78,108,108,109,109,110,31,33,
            33,33,33,33,54,56,56,56,56,56,
            56,56,56,56,56,56,56,66,66,29,
            29,63,63,63,63,64,64,64,57,57,
            58,58,50,50,50,34,87,87,80,81,
            81,81,65,65,82,82,83,83,67,67,
            21,22,22,22,32,49,49,35,35,35,
            35,38,38,40,36,36,37,41,41,111,
            111,39,112,112,88,88,27,27,27,27,
            27,27,27,27,27,84,51,51,51,51,
            60,60,59,59,59,61,61,52,52,89,
            89,71,71,62,62,62,44,44,44,45,
            46,46,46,47,47,47,47,55,55,72,
            72,72,72,68,90,91,91,92,92,93,
            93,113,113,114,114,115,115,115,115,117,
            117,116,116,116,118,118,85,85,1,1,
            1,5,5,5,21,21,23,23,24,24,
            94,94,94,97,119,119,119,119,119,119,
            119,102,102,102,102,102,102,102,102,102,
            102,102,102,102,102,102,102,102,102,102,
            102,102,102,102,102,120,120,1,14,19,
            15,383,538,43,457,384,982,460,458,462,
            461,521,520,537,522,73,90,230,133,210,
            314,315,353,920,70,38,20,135,132,134,
            158,710,14,19,15,383,538,43,457,384,
            927,460,458,462,461,521,520,537,522,73,
            277,137,271,164,823,14,19,15,383,313,
            141,144,147,150,823,14,19,15,383,312,
            382,1356,1242,1294,1433,1467,1213,786,14,19,
            15,383,538,43,457,384,279,460,458,462,
            461,521,520,537,522,73,90,483,305,280,
            68,223,333,967,710,14,19,15,383,538,
            43,457,384,927,460,458,462,461,521,520,
            537,522,73,277,470,14,19,15,383,538,
            43,457,384,927,460,458,462,461,521,520,
            537,522,73,277,823,14,19,15,383,311,
            382,786,14,19,15,383,41,43,617,279,
            14,296,105,786,14,19,15,383,41,43,
            457,384,280,460,458,1124,1185,166,228,281,
            786,14,19,15,383,41,43,457,384,441,
            460,1128,282,394,14,19,15,383,538,43,
            457,384,1599,460,458,462,461,521,520,537,
            522,73,707,236,340,860,14,19,15,383,
            538,43,457,384,1607,460,458,462,461,521,
            520,537,522,73,747,133,210,314,315,897,
            1666,919,114,141,135,132,134,158,748,14,
            19,15,383,538,43,457,384,803,460,458,
            462,461,521,520,537,522,73,277,137,272,
            164,823,14,19,15,383,40,141,144,147,
            150,786,14,19,15,383,41,39,1356,1242,
            1294,1433,1467,1213,597,14,19,15,383,41,
            43,457,384,283,460,458,462,461,521,520,
            537,522,92,23,322,432,14,19,15,383,
            538,43,457,384,941,460,458,462,461,521,
            520,537,522,73,827,237,143,787,786,14,
            19,15,383,538,43,457,384,982,460,458,
            462,461,521,520,537,522,73,91,786,14,
            19,15,383,538,43,457,384,238,460,458,
            462,461,521,520,537,522,73,84,786,14,
            19,15,383,538,43,457,384,982,460,458,
            462,461,521,520,537,522,73,83,786,14,
            19,15,383,538,43,457,384,240,460,458,
            462,461,521,520,537,522,73,82,786,14,
            19,15,383,538,43,457,384,982,460,458,
            462,461,521,520,537,522,73,81,786,14,
            19,15,383,538,43,457,384,320,460,458,
            462,461,521,520,537,522,73,80,786,14,
            19,15,383,538,43,457,384,982,460,458,
            462,461,521,520,537,522,73,79,786,14,
            19,15,383,538,43,457,384,239,460,458,
            462,461,521,520,537,522,73,78,786,14,
            19,15,383,538,43,457,384,982,460,458,
            462,461,521,520,537,522,73,77,786,14,
            19,15,383,538,43,457,384,241,460,458,
            462,461,521,520,537,522,73,76,786,14,
            19,15,383,538,43,457,384,198,460,458,
            462,461,521,520,537,522,73,75,786,14,
            19,15,383,538,43,457,384,898,460,458,
            462,461,521,520,537,522,73,74,786,14,
            19,15,383,538,43,457,384,241,460,458,
            462,461,521,520,537,522,73,867,786,14,
            19,15,383,538,43,457,384,880,460,458,
            462,461,521,520,537,522,73,1183,786,14,
            19,15,383,41,43,457,384,317,460,458,
            462,461,521,520,537,522,92,786,14,19,
            15,383,41,43,457,384,946,460,458,462,
            461,521,520,537,522,92,1494,1640,1592,285,
            1626,1588,786,14,19,15,383,41,43,457,
            1070,786,14,19,15,383,41,43,457,384,
            209,460,458,462,461,521,520,537,522,92,
            786,14,19,15,383,41,43,457,384,1709,
            460,458,462,461,521,520,537,522,92,287,
            753,141,441,946,1641,786,14,19,15,383,
            41,43,457,1112,786,14,19,15,383,41,
            43,457,384,200,460,458,462,461,521,520,
            537,522,92,786,14,19,15,383,41,43,
            457,384,791,460,458,462,461,521,520,537,
            522,72,510,1262,544,374,1751,201,412,531,
            469,1072,786,14,19,15,383,41,43,457,
            384,22,460,458,462,461,521,520,1369,270,
            250,210,314,315,1502,400,754,215,1643,218,
            1677,220,221,226,1675,1698,263,602,385,268,
            983,259,786,14,19,15,383,41,43,684,
            273,274,270,982,260,880,652,716,935,1725,
            215,1643,218,1677,220,221,226,574,182,263,
            602,385,268,242,1644,823,14,19,15,383,
            33,257,1613,340,1122,1526,716,1328,786,14,
            19,15,383,41,43,457,384,755,460,458,
            462,461,521,1373,133,210,314,315,1754,755,
            256,16,71,136,132,134,158,786,14,19,
            15,383,41,43,457,384,288,460,458,462,
            461,1270,565,133,210,314,315,138,290,164,
            342,415,143,132,134,158,142,145,148,151,
            786,14,19,15,383,41,43,457,384,270,
            460,458,462,1271,128,727,438,216,1643,218,
            1677,220,221,226,1715,1601,265,602,385,268,
            727,6,716,754,716,133,210,314,315,1715,
            391,273,1679,270,146,132,134,158,716,716,
            215,1643,218,1677,220,221,226,1458,228,21,
            263,602,385,268,1649,215,1643,218,1677,220,
            221,226,580,269,275,755,509,983,1328,1649,
            786,14,19,15,383,41,43,457,384,522,
            460,1130,356,376,6,196,198,133,210,314,
            315,1129,1708,1624,1609,181,140,132,134,158,
            197,198,786,14,19,15,383,41,43,457,
            384,439,696,786,14,19,15,383,41,38,
            139,677,164,786,14,19,15,383,41,43,
            457,384,207,907,786,14,19,15,383,41,
            43,457,384,185,947,786,14,19,15,383,
            41,43,457,384,480,1069,216,1643,218,1677,
            220,221,226,1715,133,210,314,315,162,603,
            6,6,634,149,132,134,158,242,549,1637,
            1703,1720,559,14,19,15,383,41,35,215,
            1643,218,1677,220,221,226,270,6,133,210,
            314,315,243,1644,572,316,1639,152,132,134,
            158,944,610,263,602,385,268,559,14,19,
            15,383,41,35,559,14,19,15,383,41,
            35,262,251,210,314,315,646,321,823,14,
            19,15,383,32,244,786,14,19,15,383,
            41,37,786,14,19,15,383,41,36,786,
            14,19,15,383,41,35,786,14,19,15,
            383,41,34,6,6,786,14,19,15,383,
            41,46,357,357,786,14,19,15,383,41,
            45,786,14,19,15,383,41,44,982,195,
            195,6,948,6,6,280,489,1459,1459,531,
            1642,840,1706,464,1295,86,86,531,287,373,
            574,1216,1216,672,14,19,15,383,41,42,
            250,210,314,315,55,957,983,1122,250,210,
            314,315,716,574,1187,1312,680,112,635,169,
            654,982,283,718,716,437,574,437,574,692,
            195,574,1666,255,26,257,1822,276,1595,1501,
            1329,289,1596,195,193,195,604,1501,195,222,
            225,1595,1822,1595,190,840,1595,171,88,912,
            86,1170,1719,675,574,286,306,190,574,190,
            983,938,190,270,1357,1719,1690,1719,508,1702,
            1719,1122,983,576,224,1122,576,574,980,983,
            265,602,385,268,1822,441,1822,1822,184,226,
            531,1822,1314,377,1122,956,1262,255,574,1822,
            183,255,1609,716,1329,1609,1596,202,1733,968,
            1596,250,210,314,315,195,251,210,314,315,
            255,983,1822,1595,983,6,6,1632,227,1596,
            251,210,314,315,437,437,1411,1768,715,191,
            206,1822,1822,206,1822,1822,1822,192,1822,203,
            1739,1822,278,1822,1822,1006,1625,1822,1073,1625,
            1822,1822,1822,231,1822,1822,1822,86,86,1822,
            1822,1822,1822,366,1352,1822,0,317,654,0,
            17,178,0,18,177,0,1,2045,0,1,
            2056,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,12,0,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,0,38,39,
            40,41,42,43,44,45,46,47,48,49,
            13,51,52,53,0,1,0,3,0,5,
            6,7,8,9,10,11,12,0,0,0,
            0,17,18,19,20,21,6,7,8,9,
            10,11,12,14,15,0,73,17,18,19,
            20,21,38,39,40,41,42,43,44,45,
            46,47,48,49,0,51,52,53,0,55,
            56,0,1,0,3,2,5,6,7,8,
            9,10,11,12,57,58,13,0,17,18,
            19,20,21,6,7,8,9,10,11,12,
            0,1,0,3,17,18,19,20,21,38,
            39,40,41,42,43,44,45,46,47,48,
            49,0,51,52,53,0,55,56,0,1,
            0,3,2,5,6,7,8,9,10,11,
            12,77,78,13,0,17,18,19,20,21,
            6,7,8,9,10,11,12,0,37,57,
            58,17,18,19,20,21,38,39,40,41,
            42,43,44,45,46,47,48,49,0,51,
            52,53,0,55,56,0,1,0,3,0,
            5,6,7,8,9,10,11,12,16,74,
            0,0,17,18,19,20,21,6,7,8,
            9,10,11,12,57,58,0,1,17,18,
            19,20,21,38,39,40,41,42,43,44,
            45,46,47,48,49,0,51,52,53,0,
            55,56,0,1,5,3,0,5,6,7,
            8,9,10,11,12,0,69,57,58,17,
            18,19,20,21,0,0,79,80,81,82,
            83,84,85,86,87,88,0,1,89,3,
            38,39,40,41,42,43,44,45,46,47,
            48,49,0,51,52,53,0,55,56,0,
            1,0,3,57,58,6,7,8,9,10,
            11,12,0,37,75,0,17,18,19,20,
            21,6,7,8,9,10,11,72,64,65,
            66,67,0,0,1,0,3,38,39,40,
            41,42,43,44,45,46,47,48,49,0,
            51,52,53,0,1,2,3,4,5,0,
            1,2,70,71,5,12,54,14,15,16,
            37,0,13,72,0,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            16,0,1,2,3,4,5,0,0,2,
            0,69,5,12,4,14,15,16,73,50,
            13,13,59,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,0,0,
            1,2,3,4,5,64,65,66,67,0,
            1,2,0,14,15,16,4,50,0,0,
            59,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,0,0,0,
            1,2,0,4,6,7,8,9,10,11,
            12,0,13,0,55,17,18,19,20,21,
            0,0,64,65,66,67,6,7,8,9,
            10,11,54,0,62,63,38,39,40,41,
            42,43,44,45,46,47,48,49,0,1,
            2,3,4,5,0,1,2,60,4,0,
            0,0,14,15,16,0,1,13,3,0,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,74,0,1,2,3,
            4,5,0,0,2,2,4,4,37,0,
            14,15,16,70,71,13,13,59,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,0,0,1,2,3,4,6,
            7,8,9,10,11,0,37,68,14,15,
            16,0,1,0,3,59,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,0,1,2,3,4,0,1,2,0,
            4,0,37,0,5,14,15,16,37,0,
            56,0,0,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,0,
            1,2,3,4,0,0,0,0,0,5,
            5,0,69,14,15,16,0,1,2,50,
            13,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,0,1,2,
            3,4,0,0,0,1,0,3,5,68,
            0,14,15,16,50,50,14,15,54,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,0,1,2,3,4,
            0,0,0,1,68,3,0,0,0,14,
            15,16,0,50,14,15,4,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,0,1,2,3,4,0,0,0,
            0,0,0,0,0,0,14,15,16,0,
            0,0,0,4,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,0,
            1,2,3,4,62,63,0,0,0,0,
            0,0,0,14,15,16,0,0,0,0,
            0,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,0,0,2,60,
            4,5,6,7,8,9,10,11,12,13,
            13,0,1,17,18,19,20,21,0,0,
            2,2,4,5,6,7,8,9,10,11,
            12,13,13,54,0,17,18,19,20,21,
            0,22,23,0,4,0,50,0,0,6,
            7,8,9,10,11,0,0,0,61,0,
            13,6,7,8,9,10,11,0,50,0,
            0,60,0,6,7,8,9,10,11,0,
            61,0,0,0,5,0,5,5,0,0,
            0,0,0,0,60,76,0,0,0,54,
            0,0,62,63,0,0,0,0,61,0,
            54,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,54,0,0,0,55,0,0,
            59,0,0,0,0,0,0,0,0,0,
            0,0,0,0,75,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1822,599,1563,601,1549,1,2033,2034,2035,2140,
            1401,2141,1983,67,1542,1535,1556,1984,1982,2036,
            1985,1981,1528,1205,631,1832,1833,1834,1835,1403,
            641,2130,2131,2132,504,424,414,267,1988,1993,
            1992,1990,1991,1989,1994,1995,1987,1996,1997,1998,
            553,1186,1125,987,1822,1,1822,1,1822,189,
            1,1,1,1,1,1,1,53,1822,50,
            128,1,1,1,1,1,2033,2034,2035,2140,
            1401,2141,1983,1172,511,1822,1247,1984,1982,2036,
            1985,1981,1,1,1,1,1,1,1,1,
            1,1,1,1,71,1,1,1,1822,189,
            2016,1822,1,266,1,1156,189,1,1,1,
            1,1,1,1,1022,1075,553,129,1,1,
            1,1,1,2033,2034,2035,2140,1401,2141,1983,
            1822,1851,57,1852,1984,1982,2036,1985,1981,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1822,1,1,1,69,189,2016,1822,1,
            219,1,1313,189,1,1,1,1,1,1,
            1,1132,1756,553,130,1,1,1,1,1,
            2033,2034,2035,2140,1401,2141,1983,56,1311,1022,
            1075,1984,1982,2036,1985,1981,1,1,1,1,
            1,1,1,1,1,1,1,1,1822,1,
            1,1,63,189,2016,1822,1,41,1,1822,
            188,1,1,1,1,1,1,1,523,1218,
            55,131,1,1,1,1,1,2033,2034,2035,
            2140,1401,2141,1983,1022,1075,1822,2057,1984,1982,
            2036,1985,1981,1,1,1,1,1,1,1,
            1,1,1,1,1,1822,1,1,1,1,
            188,2016,1822,1,1831,1,54,189,1,1,
            1,1,1,1,1,65,918,1022,1075,1,
            1,1,1,1,58,1822,898,878,858,838,
            818,778,798,758,738,718,1822,2001,1806,2002,
            1,1,1,1,1,1,1,1,1,1,
            1,1,61,1,1,1,1822,189,2016,1822,
            2000,66,1999,1022,1075,2033,2034,2035,2140,1401,
            2141,1983,87,1374,1830,246,1984,1982,2036,1985,
            1981,1,1,1,1,1,1,1280,1435,1424,
            1413,1392,208,1822,2001,68,2002,1988,1993,1992,
            1990,1991,1989,1994,1995,1987,1996,1997,1998,1822,
            1186,1125,987,1,1839,1563,1840,1472,1825,1,
            1816,1155,1360,540,1827,575,698,1542,1535,1556,
            1460,60,553,1280,64,1528,1205,631,1832,1833,
            1834,1835,1403,641,2130,2131,2132,504,424,414,
            523,1822,1839,1563,1840,1514,1825,1,317,1296,
            1822,997,1827,958,1372,1542,1535,1556,1247,1826,
            553,1807,1824,1528,1205,631,1832,1833,1834,1835,
            1403,641,2130,2131,2132,504,424,414,59,1,
            1839,1563,1840,1549,27,1435,1424,1413,1392,1,
            2045,1444,47,1542,1535,1556,1581,1826,252,1822,
            1824,1528,1205,631,1832,1833,1834,1835,1403,641,
            2130,2131,2132,504,424,414,1594,1,127,258,
            2045,1155,1822,1,2033,2034,2035,2140,1401,2141,
            1983,70,553,1822,27,1984,1982,2036,1985,1981,
            1822,1822,1435,1424,1413,1392,2033,2034,2035,2140,
            1401,2141,1188,62,1574,1565,1988,1993,1992,1990,
            1991,1989,1994,1995,1987,1996,1997,1998,1822,1839,
            1563,1840,1549,1825,264,2045,1155,2076,1462,1822,
            1822,186,1542,1535,1556,205,2001,553,2002,1822,
            1528,1205,631,1832,1833,1834,1835,1403,641,2130,
            2131,2132,504,424,414,1218,1822,1839,1563,1840,
            1507,1825,261,264,1296,1296,1,1462,1487,185,
            1542,1535,1556,1360,540,553,553,1824,1528,1205,
            631,1832,1833,1834,1835,1403,641,2130,2131,2132,
            504,424,414,247,1822,1,1,1,1,1,
            1,1,1,1,1,187,1591,1103,1,1,
            1,1822,2001,1822,2002,1824,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1822,1839,1563,1840,1549,1822,2045,1444,1,
            1462,1822,1593,1822,89,1542,1535,1556,1461,1822,
            2129,199,1822,1528,1205,631,1832,1833,1834,1835,
            1403,641,2130,2131,2132,504,424,414,1311,1,
            1839,1563,1840,1549,1822,1822,1822,217,1822,1827,
            1827,1822,608,1542,1535,1556,1,2045,1444,89,
            553,1528,1205,631,1832,1833,1834,1835,1403,641,
            2130,2131,2132,504,424,414,1594,1822,1839,1563,
            1840,1549,52,1,1822,2001,1822,2002,1827,1084,
            1822,1542,1535,1556,1826,1826,1172,511,1655,1528,
            1205,631,1832,1833,1834,1835,1403,641,2130,2131,
            2132,504,424,414,1594,1822,1839,1563,1840,1549,
            51,1822,204,1355,1050,1355,1822,1822,1822,1542,
            1535,1556,49,1826,1172,511,1581,1528,1205,631,
            1832,1833,1834,1835,1403,641,2130,2131,2132,504,
            424,414,1822,1839,1564,1840,1549,1822,1822,1822,
            1822,1822,1822,1822,1822,1822,1542,1535,1556,1,
            1822,1822,1822,1372,1528,1205,631,1832,1833,1834,
            1835,1403,641,2130,2131,2132,504,424,414,1,
            1839,1563,1840,1549,1574,1565,1822,1822,1822,1822,
            1822,1822,1822,1542,1535,1556,1822,1822,1822,28,
            1822,1528,1205,631,1832,1833,1834,1835,1403,641,
            2130,2131,2132,504,424,414,17,1822,1810,2076,
            1810,1810,178,178,178,178,178,178,178,1810,
            978,1,1819,178,178,178,178,178,18,31,
            1813,1636,1813,1813,177,177,177,177,177,177,
            177,1813,1755,484,1,177,177,177,177,177,
            48,1846,1847,245,1581,28,1810,284,1822,2033,
            2034,2035,2140,1401,2141,248,204,1822,1227,1822,
            1031,2033,2034,2035,2140,1401,2141,249,1813,1822,
            1822,2076,1822,2033,2034,2035,2140,1401,2141,1822,
            1071,1822,1822,1822,1831,1822,1825,1829,1822,1822,
            1822,1822,1822,1822,2075,603,1822,1822,1822,1849,
            1822,1822,1574,1565,1822,1822,1822,1822,1239,1822,
            2971,1822,1822,1822,1822,1822,1822,1822,1822,1822,
            1822,1822,1822,1822,1822,1822,1822,1822,1822,1822,
            1822,1822,1822,1310,1822,1822,1822,1828,1822,1822,
            1824,1822,1822,1822,1822,1822,1822,1822,1822,1822,
            1822,1822,1822,1822,1830
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            476,1,113,41,113,113,113,113,113,113,
            113,113,113,113,113,113,3,324,51,48,
            55,53,61,59,63,62,65,64,10,113,
            324,247,247,451,113,185,185,278,324,113,
            113,113,113,113,113,113,113,113,113,113,
            113,113,113,113,113,113,113,113,113,113,
            113,113,113,113,113,113,113,113,113,185,
            185,45,80,282,104,214,183,182,250,317,
            262,262,100,100,262,100,262,344,136,136,
            48,48,53,53,53,53,51,51,59,55,
            55,62,61,401,64,63,102,78,278,270,
            107,45,367,189,185,414,217,189,380,284,
            380,284,374,380,113,78,270,367,367,45,
            188,104,185,276,344,184,219,45,189,284,
            284,284,284,374,374,376,404,78,367,270,
            113,113,45,189,214,396,395,282,219,185,
            284,314,407,284,284,314,376,446,376,374,
            314,76,449,247,113,403,78,270,45,45,
            185,414,217,276,314,409,314,314,113,247,
            376,80,45,247,113,376,219,72,113,71,
            132,282,314,45,314,185,184,409,113,132,
            248
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            89,0,75,13,2,61,76,22,23,16,
            4,14,15,62,63,57,58,64,65,66,
            67,70,71,72,73,74,77,78,55,69,
            79,80,81,82,83,85,84,86,87,88,
            68,50,89,54,59,5,0,4,62,63,
            14,15,58,57,64,65,66,67,70,71,
            16,72,73,74,59,50,55,89,77,78,
            68,75,5,54,0,5,55,13,61,22,
            23,16,4,14,15,29,30,24,34,35,
            36,2,25,26,27,28,31,32,33,1,
            3,37,0,59,5,12,6,7,8,9,
            10,11,25,26,27,28,31,32,33,3,
            22,23,16,14,15,29,30,24,34,35,
            36,4,2,1,0,7,12,21,8,20,
            19,18,6,17,9,10,11,61,76,22,
            23,16,14,15,62,63,57,58,64,65,
            66,67,70,71,72,73,74,77,78,69,
            79,80,81,82,83,84,85,86,87,88,
            4,2,13,54,50,5,0,12,59,5,
            22,23,16,4,14,15,29,30,24,34,
            35,36,2,1,3,25,26,27,28,31,
            32,33,0,4,2,13,50,5,17,38,
            6,39,51,18,40,19,41,42,20,7,
            43,44,12,52,21,53,45,46,8,47,
            48,49,9,10,11,60,3,1,0,46,
            38,43,41,42,40,39,44,45,47,48,
            49,68,75,21,18,12,17,20,19,6,
            7,8,9,10,11,54,1,5,50,2,
            13,4,0,17,38,6,39,51,18,40,
            19,41,42,20,7,43,44,12,52,21,
            53,45,46,8,47,48,49,1,3,9,
            10,11,56,55,5,0,5,68,54,59,
            50,75,13,24,25,26,27,28,2,22,
            23,16,4,14,15,29,30,31,32,33,
            34,35,36,3,1,51,52,53,46,38,
            43,41,42,40,39,44,45,47,48,49,
            21,18,12,17,20,19,6,7,8,10,
            9,11,0,1,3,5,55,54,0,17,
            6,18,19,20,7,12,21,8,1,4,
            9,10,11,37,2,5,54,50,75,13,
            68,0,69,13,61,0,75,5,4,1,
            2,68,0,17,38,6,39,51,18,40,
            19,41,42,20,7,43,44,12,52,21,
            53,45,46,8,47,48,49,1,3,9,
            10,11,60,4,0,5,54,55,69,0,
            5,50,24,25,26,27,28,1,3,2,
            22,23,16,4,14,15,29,30,31,32,
            33,34,35,36,0,24,25,26,27,28,
            1,3,2,22,23,16,4,14,15,29,
            30,31,32,33,34,35,36,56,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            81,8,13,8,13,13,13,13,13,13,
            13,13,13,13,13,13,8,59,8,8,
            8,8,8,8,8,8,8,8,8,13,
            59,19,19,78,60,35,35,51,1,13,
            13,13,13,13,13,13,13,13,13,13,
            13,13,13,13,13,60,13,13,13,13,
            13,13,13,13,13,13,13,13,13,35,
            35,17,13,72,15,50,9,9,43,55,
            44,44,25,25,44,25,44,39,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,86,52,86,
            12,17,68,16,35,70,34,16,8,86,
            8,86,86,8,13,12,86,68,68,17,
            16,57,35,28,2,8,85,17,16,86,
            74,86,74,25,86,23,21,86,68,57,
            13,13,17,16,27,9,9,72,85,35,
            74,37,65,88,74,37,23,8,8,25,
            37,11,8,25,13,63,12,57,17,17,
            35,70,34,29,37,46,37,37,13,25,
            23,13,17,25,13,23,84,66,13,8,
            46,72,37,17,37,35,35,46,13,31,
            8
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,79,78,77,76,75,74,0,27,0,
            68,9,4,0,9,4,20,0,70,0,
            91,0,53,0,29,0,25,9,46,45,
            38,36,0,9,25,0,28,0,63,64,
            65,66,54,30,0,9,38,36,0,25,
            9,46,45,0,94,0,21,0,34,9,
            48,0,93,0,9,69,0,60,0,9,
            26,51,0,58,9,34,0,9,86,0,
            9,85,0,88,26,9,0,9,34,50,
            0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,96,97,
            98,69,1,10,11,8,44,55,60,63,
            72,6,7,68,81,82,83,84,12,13,
            93,94,95,100,101,102,3,47,52,56,
            61,62,66,67,74,75,78,79,80,90,
            54,70,73,42,91,107,16,17,89,30,
            4,14,15,18,19,20,21,29,31,22,
            23,24,25,26,92,5,27,28,32,33,
            34,35,36,37,38,39,40,41,108,45,
            46,49,50,51,53,57,58,59,65,71,
            77,88,99,103,104,105,106
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,115,119,120,121,122,0,123,
            124,125,126,127,128,129,130,131,132,110,
            143,0,0,0,111,136,163,112,135,142,
            0,0,0,154,159,161,0,162,0,0,
            0,0,134,172,173,174,0,114,151,153,
            160,169,0,145,150,0,0,152,164,167,
            168,171,146,147,148,149,158,175,113,116,
            117,118,133,137,138,139,140,141,144,156,
            0,0,157,166,109,0,155,165,170,176,
            177,0,178,179,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            198,106,45,55,113,133,139,176,12,19,
            73,91,145,150,61,26,69,38,123,213,
            217,38,38,185,38,1,1,1,30,33,
            78,101,33,221,6,127,192,167,192,119,
            155,155,155,155,155,81,81,81
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            17,17,4,4,17,17,17,182,17,24,
            4,24,17,17,66,24,4,4,121,24,
            4,42,66,189,51,4,4,4,24,36,
            4,24,104,24,9,130,195,170,206,121,
            157,159,161,163,165,88,83,96
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            4,65,27,27,65,63,63,101,55,47,
            27,41,63,63,27,47,27,27,50,4,
            4,27,27,18,27,94,93,92,45,62,
            27,38,49,2,68,50,6,102,4,50,
            78,77,76,75,74,41,39,41
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            55,55,59,59,55,55,55,95,55,50,
            59,50,55,55,25,50,59,59,75,50,
            59,4,25,68,12,59,59,59,50,2,
            59,50,1,50,69,1,50,101,50,75,
            3,51,52,52,46,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            36,21,25,25,21,21,21,-1,96,29,
            25,11,21,21,25,29,25,25,5,36,
            36,25,25,70,25,19,1,3,29,31,
            25,11,13,36,97,5,42,-1,36,5,
            22,22,22,22,22,11,11,11
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            150,13,0,110,0,197,116,0,31,150,
            0,160,179,116,37,0,112,0,166,116,
            2,152,0,111,0,166,116,2,0,169,
            2,0,158,116,0,172,0,191,116,13,
            0,9,110,0,126,12,191,116,13,0,
            69,132,110,0,126,191,116,12,13,0,
            191,116,12,13,0,132,110,0,126,12,
            13,0,126,191,116,13,0,126,13,0,
            145,0,2,0,165,111,0,2,111,0,
            166,116,2,145,0,2,0,164,111,0,
            156,2,0,159,0,160,189,116,37,136,
            51,0,160,189,116,37,51,0,141,0,
            113,0,194,116,141,0,116,141,0,155,
            113,0,164,116,37,136,53,0,164,116,
            37,136,52,0,164,116,37,53,0,164,
            116,37,52,0,186,0,149,0,148,0,
            147,0,146,0,145,0,204,94,0,77,
            2,114,111,113,0,204,132,155,2,98,
            0,53,0,0,155,78,124,0,29,131,
            0,178,2,0,111,120,0,160,179,116,
            37,132,178,2,0,111,3,0,118,0,
            112,0,193,2,111,0,155,13,111,0,
            155,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1592,0,927,0,1642,1719,1639,1637,1624,0,
            1411,1262,1310,1444,1295,1155,1122,0,1401,0,
            1213,574,357,0,1677,1643,602,385,1262,1666,
            1155,1122,1296,1459,0,1528,1205,631,504,424,
            414,1514,1507,1472,1613,1218,1132,1280,1247,1360,
            540,523,1075,1022,1435,1424,1413,1392,1581,1574,
            1565,1172,511,1556,1549,1542,1535,1403,641,1084,
            1050,1031,997,978,958,938,675,1103,654,575,
            553,918,898,878,858,838,818,798,778,758,
            738,718,357,698,437,608,464,484,391,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,192,116,180,36,35,34,24,30,29,
            15,14,4,16,23,22,111,2,115,114,
            118,117,120,119,122,121,124,123,112,54,
            2,76,61,2,13,178,155,141,116,15,
            14,63,62,4,67,66,65,64,57,58,
            16,71,70,73,72,78,77,74,88,87,
            86,84,85,83,82,81,80,79,69,178,
            193,155,132,116,13,2,153,152,181,10,
            182,183,53,52,184,51,185,186,1,3,
            114,114,117,117,117,117,115,115,119,118,
            118,121,120,155,123,122,132,37,158,4,
            12,126,116,4,169,116,2,13,136,37,
            136,37,37,136,68,116,4,116,116,126,
            191,167,166,133,116,168,116,150,4,37,
            116,37,116,116,37,179,116,37,116,167,
            191,12,126,4,2,143,145,116,54,166,
            116,164,141,165,116,164,189,136,190,116,
            160,54,197,61,13,198,116,167,126,126,
            156,116,2,158,164,116,164,160,69,54,
            189,69,150,61,13,179,116,194,68,156,
            2,116,160,150,160,166,195,54,68,158,
            54
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "MYTHREAD",
            "THREADS",
            "UPC_MAX_BLOCKSIZE",
            "relaxed",
            "shared",
            "strict",
            "upc_barrier",
            "upc_localsizeof",
            "upc_blocksizeof",
            "upc_elemsizeof",
            "upc_notify",
            "upc_fence",
            "upc_wait",
            "upc_forall",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_sizeof_type_name_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_name",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_or_typedefname",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "layout_qualifier"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 56,
           SCOPE_UBOUND      = 47,
           SCOPE_SIZE        = 48,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 211,
           NT_OFFSET         = 107,
           LA_STATE_OFFSET   = 2178,
           MAX_LA            = 2,
           NUM_RULES         = 356,
           NUM_NONTERMINALS  = 120,
           NUM_SYMBOLS       = 227,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1638,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 89,
           EOLT_SYMBOL       = 89,
           ACCEPT_ACTION     = 1806,
           ERROR_ACTION      = 1822;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
