/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.gcc;

public class GCCSizeofExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, GCCSizeofExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,3,1,1,
            4,4,3,3,2,2,8,1,0,1,
            1,2,2,2,2,2,2,2,2,2,
            1,4,1,3,3,3,1,3,3,1,
            3,3,1,3,3,3,3,1,3,3,
            1,3,1,3,1,3,1,3,1,3,
            1,5,1,3,3,3,3,3,3,3,
            3,3,3,3,1,1,2,1,0,1,
            3,1,1,1,1,1,1,1,1,3,
            4,3,2,4,1,2,1,1,1,2,
            5,7,5,1,0,7,5,9,8,3,
            2,2,2,3,2,4,2,2,2,2,
            2,1,1,1,1,2,1,2,2,2,
            1,2,2,1,2,2,1,2,2,1,
            2,2,1,3,1,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,6,8,0,
            0,1,1,3,3,3,0,1,0,1,
            2,4,2,1,1,1,3,1,1,2,
            3,7,8,0,1,0,1,3,1,3,
            1,1,1,1,1,1,3,1,1,1,
            1,1,3,1,2,2,1,5,3,1,
            3,5,1,3,1,3,2,4,3,5,
            4,6,6,3,5,1,2,3,4,5,
            0,1,2,1,3,1,1,3,2,1,
            1,1,1,2,1,2,3,1,1,1,
            3,1,2,2,2,3,4,5,1,7,
            3,0,0,1,1,3,3,4,1,1,
            2,3,2,3,2,1,0,1,2,1,
            1,1,1,1,2,4,3,6,2,4,
            1,1,1,1,2,6,3,1,3,1,
            4,0,1,1,1,3,1,0,4,3,
            1,2,1,3,4,4,6,1,0,1,
            3,1,3,0,1,4,5,2,2,3,
            3,2,1,2,2,2,1,1,2,2,
            3,2,2,3,1,1,1,1,1,1,
            1,2,5,3,1,1,-38,0,0,0,
            0,0,0,0,0,0,0,0,-2,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-31,0,0,0,-160,-32,0,0,0,
            0,0,-161,0,-4,-119,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-78,-118,0,0,0,0,0,
            -73,0,0,0,0,0,-153,-149,0,-121,
            -16,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -18,0,-115,0,0,0,0,0,0,0,
            0,0,0,0,0,-19,-140,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-20,-120,0,0,0,0,
            0,0,0,0,0,0,0,-130,-146,0,
            0,0,0,-202,-129,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -21,0,0,0,0,0,0,-22,-59,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-218,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-165,-35,-131,0,0,0,
            0,-185,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-208,
            0,0,0,0,0,0,0,0,-36,0,
            -23,0,-152,0,-55,0,0,0,0,0,
            0,0,0,0,0,0,-71,0,0,0,
            0,-133,0,0,0,0,0,-24,0,-56,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-195,0,-76,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-25,0,-79,-26,0,0,
            0,0,0,-227,0,0,-187,0,0,0,
            0,0,0,0,0,0,0,0,-184,0,
            0,0,0,0,-219,0,0,0,0,0,
            0,-204,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-134,
            0,0,0,0,0,0,-27,-143,-72,0,
            -135,0,0,0,-214,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-123,0,0,0,0,0,0,-3,
            0,0,0,0,0,0,0,0,0,0,
            0,-211,0,0,0,0,0,0,-142,-132,
            -28,0,0,0,-188,0,-81,0,-82,0,
            0,0,-144,-168,-83,-126,0,0,0,0,
            0,-145,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-191,-147,-171,0,
            0,-122,0,0,0,0,0,0,0,0,
            -233,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-155,0,
            0,-175,0,0,0,-29,0,0,0,0,
            0,0,0,0,0,0,0,-172,0,0,
            0,0,0,0,-176,-178,0,0,0,0,
            -60,0,0,0,0,0,0,0,0,0,
            0,0,-198,0,0,0,0,0,0,0,
            0,-92,0,0,0,-61,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-192,-203,0,0,0,0,0,
            -62,0,0,0,0,0,0,0,0,0,
            0,0,-224,0,0,0,0,0,-205,0,
            -216,0,0,0,0,-63,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-221,-235,-231,0,0,0,
            -64,0,0,0,0,0,0,0,0,0,
            0,0,-230,0,0,0,0,0,-207,0,
            0,0,0,0,0,-65,0,0,0,0,
            0,0,0,0,0,0,0,-96,0,0,
            0,0,0,-225,-232,-97,-98,0,0,0,
            -66,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-234,0,
            0,0,0,0,0,-67,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-242,-99,-100,-101,0,0,0,
            -68,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-102,-251,
            -103,-104,0,0,0,-69,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-194,-105,-106,-107,0,0,0,
            -70,0,0,0,0,0,0,0,0,0,
            0,0,-196,0,0,0,0,0,-94,0,
            0,0,0,0,0,-44,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -197,0,-157,-108,-33,0,0,-244,-109,-110,
            0,0,0,0,0,0,0,-166,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-159,0,0,0,
            0,0,-111,0,0,0,0,0,0,0,
            -112,0,-113,0,-167,0,0,0,0,0,
            0,0,0,0,0,0,-114,0,0,0,
            0,0,-117,-128,-138,-141,0,0,0,-189,
            0,0,0,0,0,0,0,0,0,0,
            0,-150,0,0,0,0,0,-154,-158,-163,
            -177,0,0,0,-217,0,0,0,0,0,
            0,0,0,0,0,0,-125,0,0,0,
            0,0,-179,-186,-190,0,0,0,0,-226,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-212,-213,-237,
            0,0,0,-127,-228,0,0,0,0,0,
            0,0,0,0,0,0,-245,0,0,0,
            0,0,0,0,0,0,0,0,0,-236,
            0,0,0,0,0,0,0,0,0,0,
            0,-200,0,0,0,0,0,0,0,-215,
            0,0,0,0,-247,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-139,
            0,0,0,0,0,0,0,0,0,0,
            0,-201,0,0,0,0,0,0,0,0,
            0,0,0,-162,0,0,-164,-182,-193,0,
            0,0,0,0,-206,0,0,0,0,0,
            0,0,0,0,0,-223,0,0,0,0,
            0,0,0,0,0,0,0,0,-151,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-39,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-229,
            0,-243,0,-58,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-148,0,0,0,0,0,0,0,
            0,0,-183,0,0,-8,0,0,0,0,
            0,0,0,-170,0,-9,0,0,0,0,
            0,0,0,0,-1,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-246,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -75,0,0,0,0,0,0,0,0,0,
            -240,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-5,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-248,0,0,0,0,-53,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-210,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-52,0,0,
            0,0,0,0,0,0,0,0,0,-80,
            0,-54,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-124,-37,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -34,0,0,0,0,0,0,0,0,0,
            -199,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-116,0,0,
            0,-241,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-45,
            0,0,0,0,0,0,0,0,0,0,
            -46,0,0,0,0,0,0,0,0,0,
            0,-47,0,0,0,0,0,0,0,0,
            0,0,-48,0,0,0,0,0,0,0,
            0,0,0,-49,0,0,0,0,0,0,
            0,0,0,0,-84,-50,0,0,0,0,
            0,0,0,0,0,-6,0,0,0,0,
            0,0,0,0,0,0,-86,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-174,0,0,0,0,-89,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -91,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-93,0,0,0,-173,0,0,0,
            0,0,0,0,0,0,-238,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-51,0,
            0,0,0,0,0,0,0,0,-77,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-40,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -169,0,0,0,0,0,0,0,-10,0,
            0,0,0,0,0,0,0,0,0,0,
            -11,0,0,0,0,0,0,0,0,0,
            0,0,0,-12,0,0,0,0,0,0,
            0,-13,0,0,0,0,0,0,0,-41,
            0,0,0,0,0,0,0,-42,0,0,
            0,0,0,0,0,-43,0,0,0,0,
            0,0,0,-74,0,0,0,0,0,0,
            0,-90,0,0,0,-239,-7,0,0,0,
            0,0,0,0,0,0,-17,-57,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-14,0,0,0,0,0,0,-15,
            0,0,0,0,0,0,0,-30,0,0,
            0,0,0,0,-85,0,0,0,0,0,
            0,0,0,-87,0,0,0,-88,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-156,0,0,-95,0,0,0,0,
            0,0,-137,0,0,0,0,0,0,-181,
            0,0,0,0,-249,0,-220,-222,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -136,-209,0,0,0,0,-180,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-250,
            0,0,0,0,-252,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            98,12,29,29,25,25,44,44,76,76,
            1,1,2,2,2,2,3,3,3,4,
            5,5,5,5,5,5,5,5,58,58,
            77,6,6,6,6,6,6,6,6,6,
            6,7,7,8,8,8,8,9,9,9,
            10,10,10,11,11,11,11,11,13,13,
            13,14,14,15,15,16,16,17,17,22,
            22,23,23,24,24,24,24,24,24,24,
            24,24,24,24,24,117,52,45,99,99,
            80,80,46,118,118,118,118,118,118,118,
            119,119,119,120,120,125,125,126,126,121,
            121,122,122,122,128,128,123,123,123,123,
            124,124,124,124,124,127,127,30,30,30,
            30,30,32,32,32,86,86,81,81,81,
            81,82,82,82,83,83,83,84,84,84,
            85,85,85,129,129,130,130,131,33,35,
            35,35,35,35,59,60,60,60,60,60,
            60,60,60,60,60,60,60,68,65,65,
            100,101,69,69,66,66,66,70,87,87,
            88,88,71,71,71,54,102,102,89,72,
            72,72,67,67,103,90,90,91,91,73,
            73,27,28,28,28,34,47,47,36,36,
            36,36,39,39,41,37,37,38,42,42,
            132,132,40,133,133,104,104,31,31,31,
            31,31,31,31,31,31,92,55,55,55,
            55,43,62,62,61,61,61,63,63,56,
            56,105,105,78,78,64,64,64,48,48,
            48,49,50,50,50,51,51,51,51,53,
            53,53,57,106,79,79,79,79,74,107,
            108,108,109,109,110,110,134,134,135,135,
            136,136,136,136,138,138,137,137,137,139,
            139,18,18,18,26,26,19,19,111,111,
            93,93,93,94,94,112,112,95,95,20,
            20,113,113,96,96,96,21,140,141,141,
            142,142,143,143,143,144,144,144,6,6,
            11,11,75,97,97,97,30,127,32,131,
            131,131,89,89,89,103,100,101,43,70,
            109,109,114,115,74,98,98,1,932,16,
            20,17,451,801,43,486,471,541,505,103,
            621,548,685,648,747,358,311,312,313,688,
            73,90,686,30,133,211,567,686,30,135,
            132,134,158,1098,1325,171,859,19,16,20,
            17,451,801,43,486,471,541,505,748,621,
            548,685,648,747,19,961,137,164,688,73,
            813,395,141,144,147,150,2225,293,393,177,
            1001,236,353,315,311,312,313,415,1740,1925,
            1947,1969,1991,1179,709,273,358,311,312,313,
            21,28,329,68,2013,133,211,252,211,24,
            135,132,134,158,23,487,310,681,19,16,
            20,17,451,801,43,486,471,541,505,413,
            621,548,685,648,747,407,395,137,164,688,
            73,279,519,141,144,147,150,2225,1085,1133,
            1324,847,290,353,654,250,2273,697,371,1740,
            1925,1947,1969,1991,1179,239,315,311,312,313,
            284,118,822,332,1300,2013,253,211,162,801,
            19,16,20,17,451,41,43,486,471,541,
            505,285,621,548,685,1253,406,771,19,16,
            20,17,451,801,43,486,471,541,505,413,
            621,548,685,648,747,1001,63,686,185,688,
            73,279,558,19,16,20,17,451,801,43,
            486,471,541,505,413,621,548,685,648,747,
            762,2164,252,211,688,73,279,319,1301,63,
            284,464,1476,654,1300,801,19,16,20,17,
            451,41,43,486,471,541,505,63,621,548,
            1209,285,686,184,18,286,1023,665,76,1300,
            801,19,16,20,17,451,41,43,486,471,
            541,505,1267,621,1210,1150,287,499,19,16,
            20,17,451,801,43,486,471,541,505,450,
            621,548,685,648,747,120,193,246,7,688,
            73,506,253,211,686,1348,237,711,19,16,
            20,17,451,801,43,486,471,541,505,143,
            621,548,685,648,747,1158,318,1301,274,688,
            73,279,888,19,16,20,17,451,801,43,
            486,471,541,505,905,621,548,685,648,747,
            627,1299,253,211,688,73,327,214,1001,63,
            374,686,186,27,1300,741,19,16,20,17,
            451,801,43,486,471,541,505,208,621,548,
            685,648,747,63,22,252,211,688,73,279,
            801,19,16,20,17,451,801,43,486,471,
            541,505,571,621,548,685,648,747,271,1036,
            1127,993,688,73,90,686,293,242,288,555,
            519,585,1300,395,395,715,83,325,315,311,
            312,313,528,19,16,20,17,451,801,43,
            486,471,541,505,1005,621,548,685,648,747,
            1218,317,241,240,688,73,814,334,63,508,
            1054,238,593,19,16,20,17,451,41,35,
            415,888,19,16,20,17,451,801,43,486,
            471,541,505,277,621,548,685,648,747,63,
            226,244,63,688,73,327,801,19,16,20,
            17,451,801,43,486,471,541,505,774,621,
            548,685,648,747,336,169,403,278,688,73,
            91,801,19,16,20,17,451,801,43,486,
            471,541,505,63,621,548,685,648,747,225,
            955,334,915,688,73,84,801,19,16,20,
            17,451,801,43,486,471,541,505,223,621,
            548,685,648,747,143,63,326,291,688,73,
            83,801,19,16,20,17,451,801,43,486,
            471,541,505,571,621,548,685,648,747,63,
            316,686,295,688,73,82,801,19,16,20,
            17,451,801,43,486,471,541,505,281,621,
            548,685,648,747,335,570,643,63,688,73,
            81,801,19,16,20,17,451,801,43,486,
            471,541,505,567,621,548,685,648,747,143,
            321,1104,228,688,73,80,801,19,16,20,
            17,451,801,43,486,471,541,505,420,621,
            548,685,648,747,143,836,455,265,688,73,
            79,801,19,16,20,17,451,801,43,486,
            471,541,505,178,621,548,685,648,747,143,
            232,1208,192,688,73,78,801,19,16,20,
            17,451,801,43,486,471,541,505,202,621,
            548,685,648,747,143,312,375,449,688,73,
            77,801,19,16,20,17,451,801,43,486,
            471,541,505,179,621,548,685,648,747,504,
            95,708,157,688,73,76,801,19,16,20,
            17,451,801,43,486,471,541,505,203,621,
            548,685,648,747,1001,346,716,992,688,73,
            75,801,19,16,20,17,451,801,43,486,
            471,541,505,395,621,548,685,648,747,393,
            177,252,211,688,73,74,801,19,16,20,
            17,451,41,43,486,471,1057,358,311,312,
            313,395,242,68,1035,30,133,211,143,305,
            470,136,132,134,158,2290,715,780,801,19,
            16,20,17,451,801,43,486,471,541,505,
            243,621,548,685,648,747,280,68,138,164,
            688,73,1173,475,142,145,148,151,2225,1553,
            88,358,1130,561,354,801,19,16,20,17,
            451,801,43,486,471,541,505,99,621,548,
            685,648,747,239,52,950,255,688,73,1201,
            801,19,16,20,17,451,41,43,486,471,
            541,505,419,621,548,685,648,747,775,517,
            533,891,688,92,749,801,19,16,20,17,
            451,41,43,486,471,541,505,444,621,548,
            685,648,747,591,256,598,1400,688,92,1489,
            801,19,16,20,17,451,41,43,486,471,
            541,505,276,621,548,685,648,747,759,579,
            640,1520,688,92,293,801,19,16,20,17,
            451,41,43,486,471,541,505,502,621,548,
            685,648,747,2509,2509,2509,210,688,92,330,
            801,19,16,20,17,451,41,43,486,471,
            541,505,444,621,548,685,648,747,2509,2509,
            813,1522,688,92,2297,801,19,16,20,17,
            451,41,43,486,471,541,505,229,621,548,
            685,648,747,2509,2509,2509,200,688,92,292,
            801,19,16,20,17,451,41,43,486,471,
            541,505,1079,621,548,685,648,747,2509,2509,
            331,201,688,72,68,2509,2509,1143,68,68,
            314,311,312,313,2509,68,954,447,435,1154,
            1707,567,2509,272,2509,2509,183,2298,217,849,
            219,898,221,222,227,1276,2509,2509,2176,669,
            267,687,434,270,314,311,312,313,2509,2509,
            2509,448,1641,801,19,16,20,17,451,41,
            43,1048,216,849,219,898,221,222,227,1543,
            395,2509,395,1350,801,19,16,20,17,451,
            41,43,486,471,541,505,2509,621,548,685,
            648,1251,2509,1102,2509,257,2509,2509,1822,294,
            882,373,1292,746,1348,2017,801,19,16,20,
            17,451,41,39,59,196,801,19,16,20,
            17,451,41,38,272,622,1791,2509,1006,216,
            849,219,898,221,222,227,2509,780,2509,275,
            261,265,687,434,270,272,2509,2509,360,2509,
            216,849,219,898,221,222,227,262,2509,2509,
            2176,923,265,687,434,270,314,311,312,313,
            86,2509,2509,2509,1641,2509,207,375,773,2509,
            2509,585,2509,2509,216,849,219,898,221,222,
            227,183,2509,792,1349,1350,2509,2509,259,314,
            311,312,313,2176,2509,2509,2509,435,2509,315,
            311,312,313,830,19,16,20,17,451,349,
            1822,2509,2509,389,1273,2509,2509,216,849,219,
            898,221,222,227,1121,2509,1818,197,1350,801,
            19,16,20,17,451,41,43,486,471,541,
            1157,2509,314,311,312,313,2509,746,1348,2509,
            435,2509,2509,2295,2509,2509,2509,2509,2509,2509,
            217,849,219,898,221,222,227,1276,801,19,
            16,20,17,451,41,43,486,471,541,505,
            448,1156,801,19,16,20,17,451,41,43,
            486,471,541,1204,2509,2509,2509,2509,358,311,
            312,313,2509,2509,303,145,2509,133,211,2509,
            2509,2509,140,132,134,158,448,1631,2509,2509,
            207,68,314,311,312,313,2509,2509,2509,2509,
            435,1106,2509,780,1543,2509,272,973,1349,139,
            164,2509,2509,448,2509,2509,2509,1273,2509,314,
            311,312,313,265,687,434,270,435,413,1818,
            257,1543,1161,2509,2509,848,86,1292,2509,264,
            2509,2509,2509,441,1273,2509,314,311,312,313,
            314,311,312,313,435,2509,1442,257,2370,272,
            2509,2509,848,2509,1292,2509,2509,2509,2509,2509,
            2509,1276,2509,2509,2509,2509,267,687,434,270,
            801,19,16,20,17,451,41,43,486,471,
            1105,801,19,16,20,17,451,41,43,486,
            471,1106,801,19,16,20,17,451,41,43,
            486,471,1107,801,19,16,20,17,451,41,
            43,486,471,1129,801,19,16,20,17,451,
            41,43,486,471,1131,75,801,19,16,20,
            17,451,41,43,486,1132,830,19,16,20,
            17,451,348,358,311,312,313,161,2509,2509,
            2509,2509,133,211,2509,2509,2509,143,132,134,
            158,2509,2509,2509,672,358,311,312,313,985,
            2509,2509,2509,2509,133,211,448,2509,2509,146,
            132,134,158,2509,2509,2509,2509,358,311,312,
            313,999,2509,2509,1543,2509,133,211,2509,2509,
            2509,149,132,134,158,2509,2509,2509,2509,358,
            311,312,313,1034,2509,2509,2509,585,133,211,
            258,2509,2509,152,132,134,158,833,2509,2509,
            2509,358,311,312,313,314,311,312,313,2176,
            133,211,2509,435,2509,355,132,134,158,801,
            19,16,20,17,451,41,43,486,1155,456,
            1273,2509,2509,216,849,219,898,221,222,227,
            2509,1764,1442,2509,923,801,19,16,20,17,
            451,41,43,1056,275,2509,2509,2509,2509,2509,
            272,593,19,16,20,17,451,41,35,801,
            19,16,20,17,451,41,37,265,687,434,
            270,801,19,16,20,17,451,41,36,2509,
            245,2509,2509,773,801,19,16,20,17,451,
            41,35,801,19,16,20,17,451,41,34,
            801,19,16,20,17,451,41,46,801,19,
            16,20,17,451,41,45,801,19,16,20,
            17,451,41,44,651,19,16,20,17,451,
            41,42,969,2509,2509,2509,585,830,19,16,
            20,17,451,40,2509,2509,2509,68,68,2509,
            314,311,312,313,314,311,312,313,2311,377,
            780,2509,435,830,19,16,20,17,451,33,
            830,19,16,20,17,451,32,195,68,1273,
            2509,2509,2509,2509,2509,926,2509,2509,2509,2509,
            377,1684,86,86,97,2509,2509,2509,934,619,
            1243,1765,751,314,311,312,313,2509,195,2509,
            2509,518,314,311,312,313,314,311,312,313,
            800,2509,2509,86,800,586,2509,2509,2509,2509,
            619,2509,1765,1135,2509,740,830,19,16,20,
            17,451,1275,830,19,16,20,17,451,352,
            228,314,311,312,313,1169,637,806,338,2317,
            2509,2509,448,2509,587,2509,2509,2509,642,448,
            448,1021,283,314,311,312,313,1144,2509,2509,
            195,2375,2509,2509,448,525,2509,1543,195,315,
            311,312,313,2509,2509,315,311,312,313,2509,
            2509,2509,195,2509,610,2509,2509,2509,2509,2509,
            2509,2509,610,257,2509,2509,2509,2509,1007,2509,
            1292,190,2509,2509,2509,2509,610,2509,2509,190,
            1175,2509,2509,2509,1323,1181,2509,1029,2312,2509,
            2509,2509,2509,191,2509,1079,2312,2509,315,311,
            312,313,2509,315,311,312,313,2509,2509,2509,
            2509,1055,2509,0,1205,31,0,1781,31,0,
            807,127,0,809,127,0,815,127,0,807,
            128,0,809,128,0,815,128,0,807,129,
            0,809,129,0,815,129,0,807,183,0,
            809,183,0,815,183,0,183,187,0,807,
            182,0,809,182,0,815,182,0,182,187,
            0,807,130,0,809,130,0,815,130,0,
            807,131,0,809,131,0,815,131,0,19,
            177,0,807,356,0,809,356,0,815,356,
            0,1,807,0,1,809,0,1,815,0,
            349,352,0,1,2733,0,1,2744,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,0,7,8,9,
            10,11,12,13,14,15,16,17,0,19,
            20,21,22,23,24,25,26,0,28,0,
            30,31,32,33,34,6,18,10,11,39,
            40,41,42,43,44,45,46,47,48,49,
            50,0,52,53,54,0,27,2,0,1,
            2,6,0,8,6,10,11,0,6,14,
            19,16,17,18,0,0,18,3,4,5,
            74,75,0,9,2,27,12,13,6,27,
            35,36,37,38,0,21,0,1,0,3,
            4,5,0,7,30,31,32,33,34,27,
            55,56,57,58,59,60,61,0,63,0,
            65,66,67,68,69,70,71,29,73,74,
            75,76,77,78,79,80,81,82,83,84,
            85,0,0,2,0,70,2,6,6,8,
            6,10,11,36,37,14,0,16,17,18,
            0,0,18,3,4,5,10,11,0,9,
            0,27,12,13,6,14,35,36,37,38,
            38,21,0,1,2,3,4,5,69,87,
            30,31,32,33,34,27,55,56,57,58,
            59,60,61,35,63,35,65,66,67,68,
            69,70,71,0,73,74,75,76,77,78,
            79,80,81,82,83,84,85,0,1,0,
            3,4,5,6,7,0,9,2,0,12,
            13,0,15,2,62,0,8,2,21,0,
            1,16,17,18,0,0,7,30,31,32,
            33,34,8,18,0,38,39,40,41,42,
            43,44,45,46,47,48,49,50,29,52,
            53,54,0,1,71,3,4,5,6,7,
            55,9,0,1,12,13,0,15,6,72,
            36,37,0,21,0,3,4,5,73,0,
            8,0,30,31,32,33,34,8,63,27,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,0,52,53,54,0,1,0,
            3,4,5,6,7,0,9,36,37,12,
            13,18,15,51,72,10,11,0,21,0,
            1,2,3,4,5,56,57,30,31,32,
            33,34,0,69,0,38,39,40,41,42,
            43,44,45,46,47,48,49,50,55,52,
            53,54,0,1,0,3,4,5,0,7,
            6,9,0,1,12,13,0,15,6,72,
            36,37,0,21,2,3,4,5,0,0,
            8,62,30,31,32,33,34,8,71,27,
            18,39,40,41,42,43,44,45,46,47,
            48,49,50,0,52,53,54,0,0,6,
            3,4,5,35,0,0,9,2,64,12,
            13,6,8,0,58,59,60,61,21,0,
            27,65,66,18,0,56,57,30,31,32,
            33,34,27,14,36,37,39,40,41,42,
            43,44,45,46,47,48,49,50,0,1,
            2,0,1,0,6,7,8,0,10,11,
            56,57,14,15,16,17,0,19,20,21,
            22,23,24,25,26,18,28,0,1,2,
            67,68,0,6,7,8,62,10,11,36,
            37,14,15,16,17,29,19,20,21,22,
            23,24,25,26,0,28,2,0,1,2,
            0,29,64,6,7,8,0,10,11,0,
            0,14,15,16,17,6,19,20,0,22,
            23,24,25,26,0,28,29,3,4,5,
            0,64,0,1,2,38,27,0,6,7,
            8,35,10,11,35,35,14,15,16,17,
            0,19,20,35,22,23,24,25,26,29,
            28,0,1,2,0,0,0,1,7,8,
            70,10,11,7,0,14,15,16,17,0,
            19,20,0,22,23,24,25,26,6,28,
            0,1,2,0,1,29,64,7,8,62,
            10,11,9,29,14,15,16,17,0,19,
            20,0,22,23,24,25,26,35,28,29,
            0,1,2,0,0,0,1,7,8,0,
            10,11,7,72,14,15,16,17,0,19,
            20,62,22,23,24,25,26,0,28,29,
            0,1,2,29,0,0,2,7,8,51,
            10,11,51,0,14,15,16,17,86,19,
            20,0,22,23,24,25,26,0,28,29,
            0,1,2,36,37,0,1,7,8,0,
            10,11,7,0,14,15,16,17,0,19,
            20,0,22,23,24,25,26,6,28,29,
            0,1,2,0,0,2,2,7,8,0,
            10,11,67,68,14,15,16,17,0,19,
            20,18,22,23,24,25,26,0,28,29,
            0,1,2,0,0,0,1,7,8,0,
            10,11,0,0,14,15,16,17,6,19,
            20,63,22,23,24,25,26,0,28,0,
            1,2,0,1,2,0,7,8,0,10,
            11,6,0,14,15,16,17,86,19,20,
            0,22,23,24,25,26,51,28,0,1,
            2,0,27,51,0,7,8,6,10,11,
            35,0,14,15,16,17,64,19,20,0,
            22,23,24,25,26,0,28,0,1,2,
            0,0,2,0,7,8,0,10,11,38,
            0,14,15,16,17,0,19,20,0,22,
            23,24,25,26,0,28,2,3,4,5,
            6,0,8,9,0,0,12,13,3,4,
            5,0,18,0,1,21,3,4,5,0,
            7,27,0,0,30,31,32,33,34,0,
            0,2,3,4,5,6,0,8,9,0,
            0,12,13,3,4,5,0,18,0,1,
            21,3,4,5,0,7,27,0,0,30,
            31,32,33,34,0,0,0,3,4,5,
            0,0,0,9,0,0,12,13,0,0,
            0,3,4,5,0,21,0,9,0,9,
            12,13,12,13,30,31,32,33,34,21,
            0,1,0,3,4,5,0,7,30,31,
            32,33,34,0,0,0,3,4,5,0,
            0,0,9,0,9,12,13,12,13,58,
            59,60,61,0,21,63,65,66,0,0,
            0,0,0,30,31,32,33,34,76,77,
            78,79,80,81,82,83,84,85,0,1,
            2,3,4,5,0,0,8,3,4,5,
            0,0,58,59,60,61,18,0,1,65,
            66,0,1,2,7,0,0,6,3,4,
            5,0,1,8,0,18,0,0,7,18,
            0,1,2,3,4,5,0,0,27,3,
            4,5,0,0,0,0,35,3,4,5,
            0,9,0,0,12,13,3,4,5,0,
            0,9,55,0,12,13,51,0,9,0,
            0,12,13,3,4,5,9,0,0,12,
            13,3,4,5,0,0,0,3,4,5,
            0,0,0,3,4,5,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            2509,2519,2187,807,809,815,71,2520,2124,2721,
            2111,2099,2722,2723,2132,2276,2210,2203,269,2524,
            2177,2670,2521,2522,2523,1566,1556,50,1936,1,
            2671,2669,2724,2672,2668,89,667,2075,1503,2675,
            2680,2679,2677,2678,2676,2681,2682,2674,2683,2684,
            2685,2509,2172,2238,2234,1,89,2520,1,2503,
            1564,2520,2509,2520,2514,2520,2520,1,2514,2520,
            879,2520,2520,2520,128,67,667,2419,2422,2425,
            1524,2188,2509,2721,623,2513,2722,2723,2514,2513,
            2520,2520,2520,2520,283,2670,183,2446,2509,2437,
            2440,2443,2509,2446,2671,2669,2724,2672,2668,2513,
            2520,2520,2520,2520,2520,2520,2520,53,2520,65,
            2520,2520,2520,2520,2520,2520,2520,473,2520,2520,
            2520,2520,2520,2520,2520,2520,2520,2520,2520,2520,
            2520,1,2509,2519,1,625,2059,2519,2516,2519,
            263,2519,2519,1926,2049,2519,52,2519,2519,2519,
            129,63,667,2428,2431,2434,2075,1503,2509,2721,
            87,263,2722,2723,2514,1728,2519,2519,2519,2519,
            2515,2670,1,2733,2027,2491,2494,2497,650,2403,
            2671,2669,2724,2672,2668,2513,2519,2519,2519,2519,
            2519,2519,2519,524,2519,886,2519,2519,2519,2519,
            2519,2519,2519,69,2519,2519,2519,2519,2519,2519,
            2519,2519,2519,2519,2519,2519,2519,2509,1,2509,
            1,1,1,189,1,31,1,2404,2509,1,
            1,2509,1,816,1380,268,799,1317,1,2509,
            2519,2534,2535,2407,2509,2509,2520,1,1,1,
            1,1,1457,667,351,189,1,1,1,1,
            1,1,1,1,1,1,1,1,1203,1,
            1,1,2509,1,549,1,1,1,188,1,
            407,1,2509,1298,1,1,2509,1,2514,2703,
            1926,2049,1,1,66,2491,2494,2497,402,47,
            251,350,1,1,1,1,1,2156,755,2513,
            188,1,1,1,1,1,1,1,1,1,
            1,1,1,289,1,1,1,2509,1,2509,
            1,1,1,189,1,51,1,1926,2049,1,
            1,1305,1,2765,2703,2075,1503,70,1,1,
            2733,2027,2491,2494,2497,2148,2140,1,1,1,
            1,1,2509,650,57,189,1,1,1,1,
            1,1,1,1,1,1,1,1,981,1,
            1,1,2509,2519,2509,807,809,815,2509,2520,
            2512,2721,2509,979,2722,2723,58,2283,2514,2703,
            1926,2049,266,2670,2059,807,809,815,254,49,
            251,1380,2671,2669,2724,2672,2668,2156,549,2513,
            667,2675,2680,2679,2677,2678,2676,2681,2682,2674,
            2683,2684,2685,1,2172,2238,2234,127,56,2514,
            2410,2413,2416,1964,48,1,2721,2059,2511,2722,
            2723,2514,2156,61,1914,1903,1892,1881,2670,64,
            2513,1870,1186,667,2509,2148,2140,2671,2669,2724,
            2672,2668,2513,1728,1926,2049,2675,2680,2679,2677,
            2678,2676,2681,2682,2674,2683,2684,2685,1,2519,
            2187,2509,2745,55,2512,2520,852,218,2111,2099,
            2148,2140,2132,1663,2210,2203,2509,2524,2177,416,
            2521,2522,2523,1566,1556,667,1936,2509,2519,2187,
            1742,1689,2509,2512,2520,2091,1430,2111,2099,1926,
            2049,2132,1663,2210,2203,1458,2524,2177,1255,2521,
            2522,2523,1566,1556,2509,1936,1354,1,3027,2187,
            68,1459,2511,28,2941,2124,29,2111,2099,2509,
            29,2132,1663,2210,2203,2514,2524,2177,205,2521,
            2522,2523,1566,1556,251,1936,3747,807,809,815,
            2509,2511,2509,2519,2187,28,2513,2509,2512,2520,
            2124,592,2111,2099,861,2537,2132,1663,2210,2203,
            2509,2524,2177,3997,2521,2522,2523,1566,1556,1465,
            1936,2509,1,1,2509,2509,2509,2519,1,1,
            625,1,1,2520,187,1,1,1,1,199,
            1,1,2509,1,1,1,1,1,2518,1,
            2509,2519,2187,322,2832,1237,2511,2520,2124,2881,
            2111,2099,2833,204,2132,1663,2210,2203,1,2524,
            2177,1,2521,2522,2523,1566,1556,1598,1936,473,
            1,3027,2187,2509,369,2509,2519,2941,2124,2509,
            2111,2099,2520,2885,2132,1663,2210,2203,2509,2524,
            2177,1405,2521,2522,2523,1566,1556,54,1936,3747,
            370,2519,2187,365,2509,62,1274,2520,2124,2765,
            2111,2099,2764,2509,2132,1663,2210,2203,2517,2524,
            2177,2509,2521,2522,2523,1566,1556,2509,1936,3747,
            2509,2519,2187,1926,2049,206,2519,2520,2124,2509,
            2111,2099,2520,2509,2132,1663,2210,2203,209,2524,
            2177,1,2521,2522,2523,1566,1556,2518,1936,3747,
            1,3027,2187,220,333,1392,906,2941,2124,2509,
            2111,2099,1742,1689,2132,1663,2210,2203,2509,2524,
            2177,667,2521,2522,2523,1566,1556,2509,1936,3747,
            2509,2519,2187,2509,2509,1,2506,2520,2124,2509,
            2111,2099,2509,2509,2132,1663,2210,2203,2512,2524,
            2177,1330,2521,2522,2523,1566,1556,2509,1936,2509,
            2519,2218,1,2733,2027,2509,2520,2124,2509,2111,
            2099,2514,2509,2132,1663,2210,2203,2517,2524,2177,
            2509,2521,2522,2523,1566,1556,2765,1936,1,2519,
            2187,282,2513,1355,2509,2520,2124,1454,2111,2099,
            1367,2509,2132,1663,2210,2203,2511,2524,2177,2509,
            2521,2522,2523,1566,1556,2509,1936,328,2519,2187,
            320,2509,722,2509,2520,2124,2509,2111,2099,1454,
            2509,2132,1663,2210,2203,2509,2524,2177,2509,2521,
            2522,2523,1566,1556,19,1936,2479,177,177,177,
            2479,2509,2479,177,2509,180,177,177,807,809,
            815,2509,2479,182,2458,177,2449,2452,2455,2509,
            2458,2479,2509,2509,177,177,177,177,177,349,
            2509,352,352,352,352,2500,2509,2500,352,2509,
            368,352,352,807,809,815,2509,352,204,3520,
            352,807,809,815,2509,3520,2500,2509,2509,352,
            352,352,352,352,130,2509,2509,2461,2464,2467,
            2509,60,41,2721,2509,2509,2722,2723,131,2509,
            2509,2470,2473,2476,2509,2670,2509,2721,2509,2721,
            2722,2723,2722,2723,2671,2669,2724,2672,2668,2670,
            365,3570,2509,807,809,815,2509,3570,2671,2669,
            2724,2672,2668,356,59,247,2482,2485,2488,2509,
            2509,2509,2721,2509,1,2722,2723,1,1,1914,
            1903,1892,1881,2509,2670,1161,1870,1186,2509,2509,
            2509,2509,2509,2671,2669,2724,2672,2668,1136,1111,
            1086,1061,1036,986,1011,961,936,911,266,2733,
            1564,807,809,815,366,2509,251,807,809,815,
            2509,2509,1914,1903,1892,1881,667,2509,2519,1870,
            1186,1,2733,1564,2520,1,2509,260,2491,2494,
            2497,205,694,251,2509,1280,2509,2509,694,667,
            251,2733,2027,807,809,815,369,2509,260,807,
            809,815,246,2509,181,2509,260,807,809,815,
            2509,2721,248,367,2722,2723,807,809,815,249,
            2509,1,805,2509,1,1,2765,250,2721,2509,
            198,2722,2723,807,809,815,2721,2509,362,2722,
            2723,807,809,815,363,2509,2509,807,809,815,
            364,2509,2509,807,809,815
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            340,1,166,269,166,166,166,166,166,166,
            166,166,166,166,166,25,464,89,86,93,
            91,101,99,103,102,105,104,236,166,464,
            507,507,215,166,273,273,77,464,166,166,
            166,166,166,166,166,166,166,166,166,166,
            166,166,166,166,166,166,166,166,166,166,
            166,166,166,166,166,166,166,166,166,166,
            273,273,337,124,81,160,427,286,185,360,
            392,392,392,372,510,372,510,510,372,510,
            372,32,372,479,166,86,86,91,91,91,
            91,91,91,89,89,99,93,93,102,101,
            152,104,103,142,122,77,84,81,3,337,
            460,164,273,394,430,187,232,183,140,510,
            507,504,507,140,507,510,166,36,166,122,
            84,380,460,337,163,160,273,383,479,272,
            432,154,232,231,273,512,291,142,325,327,
            209,322,142,380,460,166,166,337,164,427,
            281,280,81,432,273,272,186,232,142,512,
            291,325,325,322,120,334,191,507,166,152,
            276,322,122,460,380,337,337,273,394,430,
            383,154,273,214,273,291,322,144,291,325,
            327,331,327,124,336,507,166,122,380,432,
            272,291,146,327,322,166,507,166,337,327,
            273,272,214,322,116,166,112,387,81,146,
            113,322,337,322,508,146,166,387,113,113,
            327,113
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            87,0,9,12,13,2,22,23,24,19,
            1,7,16,17,14,8,10,11,25,26,
            20,28,15,0,1,62,51,64,38,86,
            87,55,73,16,17,32,33,12,21,34,
            13,31,9,30,14,10,11,56,57,36,
            37,58,59,60,61,67,68,69,70,71,
            74,75,63,76,77,78,79,80,81,82,
            83,84,85,35,65,66,6,27,2,18,
            5,4,3,8,0,8,56,57,10,11,
            37,36,58,59,60,61,65,66,67,68,
            14,69,70,71,51,64,27,38,87,74,
            75,62,5,4,3,86,6,35,0,6,
            38,18,55,16,17,14,8,10,11,25,
            26,20,28,15,2,22,23,24,19,1,
            7,29,0,86,6,8,1,2,5,4,
            3,62,0,6,35,27,1,9,0,9,
            12,13,21,64,6,2,22,23,24,1,
            7,16,17,14,8,10,11,25,26,20,
            28,15,19,0,18,35,27,6,2,0,
            63,29,16,17,14,8,10,11,25,26,
            20,28,15,2,22,23,24,19,1,7,
            18,55,0,35,20,22,23,24,19,7,
            16,17,14,8,10,11,25,26,15,28,
            2,27,6,1,0,14,8,10,11,56,
            57,36,37,58,59,60,61,67,68,69,
            70,71,74,75,38,65,66,63,76,77,
            78,79,80,82,81,83,84,85,62,64,
            87,35,27,6,0,63,18,55,0,2,
            62,86,3,4,5,6,35,27,18,0,
            30,39,9,40,52,31,41,32,42,43,
            33,12,44,45,21,53,34,54,46,47,
            13,48,49,50,1,7,15,3,4,5,
            72,6,38,0,1,7,6,38,35,0,
            6,35,38,63,0,51,64,6,0,20,
            22,23,24,19,1,7,2,16,17,14,
            8,10,11,25,26,15,28,72,0,47,
            39,44,42,43,41,40,45,46,48,49,
            50,62,86,34,31,21,30,33,32,9,
            12,13,6,35,27,18,8,3,4,5,
            1,2,0,8,30,39,9,40,52,31,
            41,32,42,43,33,12,44,45,21,53,
            34,54,46,47,13,48,49,50,1,7,
            15,51,5,4,3,0,8,2,18,27,
            6,30,39,40,52,31,41,32,42,43,
            33,44,45,21,53,34,54,46,47,48,
            49,50,1,7,15,3,4,5,51,9,
            12,13,0,20,22,23,24,19,2,16,
            17,14,8,10,11,25,26,28,15,52,
            53,54,47,39,44,42,43,41,40,45,
            46,48,49,50,34,31,21,30,33,9,
            12,13,32,5,4,3,7,1,0,1,
            7,29,5,4,3,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            94,33,41,33,41,41,41,41,41,41,
            41,41,41,41,41,33,119,33,33,33,
            33,33,33,33,33,33,33,33,41,119,
            10,10,67,120,23,23,115,1,41,41,
            41,41,41,41,41,41,41,41,41,41,
            41,41,41,41,41,41,120,41,41,41,
            41,41,41,41,41,41,41,41,41,41,
            23,23,50,41,97,48,114,20,20,64,
            33,33,33,65,80,65,80,80,65,80,
            65,33,65,58,41,33,33,33,33,33,
            33,33,33,33,33,33,33,33,33,33,
            33,33,33,33,92,110,33,103,17,50,
            34,49,23,105,70,23,73,33,8,103,
            8,103,8,8,8,103,41,33,41,39,
            33,92,34,50,49,36,23,88,25,33,
            107,46,22,33,23,80,92,33,92,12,
            14,92,33,92,34,41,41,50,49,87,
            20,20,97,107,23,23,33,23,33,103,
            123,92,8,52,38,33,40,8,41,33,
            54,52,92,34,36,50,50,23,105,70,
            76,46,23,41,23,92,52,43,131,8,
            12,33,33,40,50,8,41,39,36,127,
            23,123,82,12,52,41,8,41,50,12,
            23,23,41,52,44,41,33,90,97,100,
            80,52,50,52,33,82,41,78,80,103,
            56,103
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            86,97,84,83,69,82,81,1,0,77,
            0,58,0,1,114,0,5,12,0,31,
            0,96,25,0,86,97,85,84,83,69,
            82,81,0,62,0,27,0,74,12,57,
            5,0,12,76,0,94,0,12,5,29,
            0,44,0,110,0,106,0,69,65,66,
            67,68,75,59,32,0,12,99,0,25,
            12,0,113,25,0,50,49,39,37,26,
            0,26,12,39,37,0,25,50,49,37,
            39,12,0,12,98,0,26,55,0,12,
            39,37,18,0,26,55,12,30,0,50,
            49,26,0,25,49,50,12,0,54,12,
            52,0,88,12,54,0,104,12,30,0,
            12,54,71,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            87,2,97,98,99,89,88,9,50,10,
            11,66,78,8,95,6,7,1,86,70,
            71,83,84,85,12,13,92,96,3,46,
            57,62,65,74,42,16,17,93,49,54,
            58,63,64,68,69,76,77,80,81,82,
            30,56,72,75,4,14,15,18,19,20,
            21,29,31,91,43,44,22,23,24,25,
            26,100,5,27,28,32,33,34,35,36,
            37,38,39,40,41,94,101,47,48,51,
            52,53,55,59,60,61,67,73,79,90
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            107,0,0,0,109,113,114,115,116,117,
            118,0,119,120,121,122,123,174,0,0,
            0,124,125,126,104,175,136,0,103,129,
            158,135,0,0,0,154,156,0,157,0,
            0,0,0,105,0,128,144,167,168,169,
            0,108,143,148,155,164,0,0,138,0,
            159,162,163,166,139,140,141,142,145,0,
            147,151,153,170,179,106,110,111,112,127,
            130,131,132,133,134,137,0,146,150,0,
            152,161,0,176,0,178,180,102,0,0,
            0,149,0,160,165,0,171,172,0,173,
            0,0,177,181,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            137,195,270,157,88,94,223,51,248,1,
            60,104,122,37,203,31,65,100,174,285,
            289,257,15,8,8,69,72,77,109,132,
            72,184,189,192,293,45,178,264,8,77,
            213,147,239,147,213,264,20,27,84,170,
            27,27,27,27,27,20,112,84,112,112
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            145,145,145,145,6,6,145,57,254,6,
            35,6,35,42,208,35,35,6,172,35,
            6,261,18,6,6,35,75,86,6,35,
            135,187,187,187,35,48,181,267,11,80,
            208,164,242,150,216,278,25,29,86,172,
            229,231,233,235,237,22,119,80,114,127
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            67,65,5,67,31,31,65,53,122,115,
            51,31,42,19,65,93,51,31,71,5,
            5,23,89,110,109,49,64,55,31,39,
            47,66,66,66,3,74,71,7,115,55,
            65,67,123,67,65,5,89,97,55,71,
            85,84,83,82,81,89,42,55,40,42
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            38,38,38,38,64,64,38,38,93,64,
            27,64,27,27,29,27,27,64,86,27,
            64,62,3,64,64,27,2,8,64,27,
            1,1,1,1,27,63,1,27,51,8,
            29,29,99,1,1,27,1,15,8,86,
            1,52,53,53,47,1,2,8,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static char scopeStateSet[] = {
            21,21,71,21,60,60,21,135,-0,7,
            64,60,12,25,21,9,64,60,3,71,
            71,107,18,1,7,64,66,54,60,12,
            14,21,21,21,71,137,3,78,7,54,
            21,21,-0,21,21,71,18,22,54,3,
            22,22,22,22,22,18,12,54,12,12
        };
    };
    public final static char scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            146,51,146,18,0,103,0,146,18,0,
            30,128,103,0,172,126,0,175,0,126,
            0,151,175,0,151,0,186,0,179,0,
            212,2,194,0,104,0,211,2,2,3,
            0,104,104,0,207,112,0,31,143,0,
            158,179,112,29,157,0,105,0,0,161,
            112,2,149,0,161,112,2,0,164,2,
            0,155,112,0,167,0,143,155,0,9,
            0,162,0,143,0,9,0,124,21,192,
            112,18,0,124,192,112,21,18,0,124,
            21,18,0,124,192,112,18,0,124,18,
            0,139,0,2,0,160,104,0,2,104,
            0,161,112,2,139,0,2,0,159,104,
            0,147,2,0,154,0,158,190,112,29,
            101,203,52,0,105,0,203,52,0,107,
            3,0,0,0,105,0,158,190,112,29,
            203,52,0,3,0,0,0,105,0,154,
            0,106,0,202,112,154,0,112,154,0,
            149,106,0,170,52,0,107,0,170,54,
            0,170,53,0,187,112,29,201,101,200,
            169,0,201,101,200,169,0,3,0,0,
            105,0,200,169,0,107,0,3,0,0,
            105,0,187,112,29,200,169,0,142,0,
            141,0,140,0,139,0,138,0,218,92,
            0,79,2,108,104,106,0,218,125,152,
            2,96,0,55,0,0,152,75,122,0,
            29,125,0,178,2,0,104,114,0,158,
            179,112,29,125,178,2,0,104,3,0,
            112,0,105,0,199,2,105,0,152,18,
            105,0,152,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            847,0,2298,2312,2290,0,413,0,524,623,
            0,1684,1442,1641,2027,1564,1543,1598,1476,0,
            1179,448,377,0,2375,2370,2295,1684,1598,1822,
            1641,1476,1442,2317,2273,448,2311,800,518,435,
            1818,1179,2013,1991,2172,1969,2238,2234,1947,2225,
            1925,1740,377,2176,1791,2017,1764,1631,0,898,
            849,687,434,1442,1818,1564,1543,2059,1765,0,
            2283,2276,2210,2203,2177,1936,1663,2091,852,2164,
            549,1524,650,625,1742,1689,1728,2049,1926,1914,
            1903,1892,1881,1870,1186,2156,2148,2140,2075,1503,
            2132,2124,2111,2099,1566,1556,1405,1380,861,1355,
            1330,1305,722,1280,1255,1218,822,1430,416,667,
            1161,1136,1111,1086,1061,1036,1011,986,961,936,
            911,377,886,780,755,697,567,592,487,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,198,112,180,15,28,20,26,25,11,
            10,8,14,17,16,105,2,109,108,111,
            110,114,113,116,115,122,117,106,35,2,
            73,55,2,18,178,152,154,112,11,10,
            57,56,8,66,65,61,60,59,58,36,
            37,14,68,67,70,69,75,74,71,85,
            84,83,81,82,80,79,78,77,76,63,
            178,199,152,125,112,18,2,150,149,181,
            3,4,5,182,169,183,54,53,184,52,
            185,101,197,186,15,108,108,110,110,110,
            110,110,110,109,109,113,111,111,115,114,
            152,117,116,125,29,155,143,126,21,124,
            112,8,164,112,2,2,2,2,200,126,
            170,126,170,203,170,126,15,106,62,112,
            143,8,112,124,192,162,161,130,112,163,
            112,2,213,1,19,101,29,101,29,179,
            112,29,157,8,112,192,21,124,8,2,
            137,139,112,35,161,211,194,2,201,126,
            112,29,112,158,35,207,214,55,18,101,
            208,112,29,112,162,124,124,147,112,2,
            155,35,125,2,1,29,187,154,188,112,
            190,101,191,63,146,55,18,112,162,112,
            212,112,112,190,158,63,35,51,146,179,
            161,204,35,187,202,62,147,2,112,126,
            172,158,146,158,35,35,62,155,172,126,
            144,126
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            ">?",
            "<?",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "typeof",
            "__alignof__",
            "__attribute__",
            "__declspec",
            "asm",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_sizeof_type_name_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "attribute_or_decl_specifier",
            "attribute_or_decl_specifier_se" +
            "q",
            "word",
            "extended_decl_modifier_seq",
            "extended_decl_modifier",
            "typeof_type_specifier",
            "typeof_declaration_specifiers",
            "field_name_designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 72,
           SCOPE_UBOUND      = 59,
           SCOPE_SIZE        = 60,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 252,
           NT_OFFSET         = 100,
           LA_STATE_OFFSET   = 2885,
           MAX_LA            = 2,
           NUM_RULES         = 376,
           NUM_NONTERMINALS  = 144,
           NUM_SYMBOLS       = 244,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1575,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 87,
           EOLT_SYMBOL       = 87,
           ACCEPT_ACTION     = 2403,
           ERROR_ACTION      = 2509;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
