/**********************************************************************
 * Copyright (c) 2002,2003 Timesys Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Common Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 * 
 * Contributors: 
 * Timesys - Initial API and implementation
 **********************************************************************/

package org.eclipse.cdt.core.builder.model;

import org.eclipse.core.resources.IFile;

/**
 * The ICToolchain interface represents a collection of
 * associated tools.  A typical toolchain might consist
 * of a compiler, an assembler, a linker, etc.
 * <p>
 * Many ICToolchain operations happen in the context of
 * a build configuration, and so take an ICBuildConfig
 * parameter.  The build configuration provides the
 * toolchain with information about the parameters to
 * use when generating build commands.
 */
public interface ICToolchain {

	/**
	 * Get the build commands needed to build a file.
	 * 
	 * @param file file that needs to be built.
	 * @param cfg build configuration context.
	 * @return build command(s) needed to build this file,
	 * or <b>null</b> the specified file cannot (or should
	 * not) be processed by this toolchain.
	 */
	ICBuildCmd[] getBuildCommands(IFile file, ICBuildConfig cfg);

	/**
	 * Get the dependencies for a file.
	 * 
	 * @param file file to compute dependencies for.
	 * @param cfg build configuration context.
	 * @return file(s) that the given file depends on,
	 * or <b>null</b> the specified file does not have
	 * any dependencies.
	 */
	IFile[] getDependencies(IFile file, ICBuildConfig cfg);

	/**
	 * Get the output files generated by building a file.
	 * 
	 * @param file file to compute outputs for.
	 * @param cfg build configuration context.
	 * @return file(s) that will be generated in the process
	 * of building the specified file.
	 */
	IFile[] getOutputs(IFile file, ICBuildConfig cfg);

	/**
	 * Get the tools associated with this toolchain.
	 *
	 * @return tools associated with this toolchain
	 */
	ICTool[] getTools();

	/**
	 * Indicate whether or not this toolchain is capable of and
	 * interested in handling the specified file.
	 * @param file file to examine.
	 * @return true if the toolchain can process the file.
	 */
	boolean canProcess(IFile file);
}
