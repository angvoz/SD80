/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.upc;

public class UPCExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, UPCExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            4,1,4,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,5,9,8,
            3,2,2,2,3,2,4,2,2,2,
            2,2,1,1,1,1,2,1,2,2,
            2,1,2,2,1,2,2,1,2,2,
            1,2,2,1,3,1,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,5,5,6,6,2,2,2,1,0,
            1,2,4,2,1,1,1,3,1,1,
            2,3,6,7,1,0,1,3,1,3,
            1,1,1,1,1,1,3,1,1,1,
            1,1,3,1,2,2,1,5,3,1,
            3,5,1,3,1,3,2,4,3,5,
            4,6,6,3,5,1,1,2,3,4,
            1,2,1,3,1,1,3,2,1,1,
            1,1,2,1,2,3,1,1,1,3,
            1,2,2,2,3,4,5,1,7,3,
            0,0,1,1,3,3,4,1,1,2,
            3,2,3,2,1,0,1,2,1,1,
            1,1,1,2,4,3,6,2,4,1,
            1,1,1,1,2,4,2,4,2,4,
            1,1,2,1,1,1,3,3,2,1,
            3,2,3,2,3,2,2,11,10,10,
            9,10,9,9,8,10,9,9,8,9,
            8,8,7,10,9,9,8,9,8,8,
            7,1,1,-43,0,0,0,0,0,0,
            -40,0,0,0,0,0,0,0,0,0,
            0,0,0,-82,-215,-80,0,0,0,0,
            0,0,-2,-4,-17,-124,0,0,0,0,
            -61,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-19,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-20,-21,0,0,-22,0,0,0,
            0,0,0,0,-138,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-210,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-62,0,0,0,0,0,
            0,-159,0,0,0,0,0,0,0,0,
            0,-55,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-41,-74,0,-189,-23,
            0,-56,0,0,0,0,0,0,0,0,
            0,0,0,-24,0,0,0,0,-185,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-83,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-25,-26,
            0,-147,-27,0,0,0,-96,-58,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-28,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-142,0,
            0,0,0,-57,0,0,0,0,0,0,
            -129,0,0,0,0,-197,0,0,0,-29,
            0,0,0,0,-97,-36,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-206,0,0,0,0,0,0,-75,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-3,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-59,0,0,0,0,0,0,-176,
            0,0,0,0,0,0,0,0,0,-9,
            0,0,0,0,0,0,0,-123,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-150,-76,-130,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -98,0,-99,-143,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-100,0,0,-30,0,0,0,
            0,0,0,-77,0,0,0,0,0,0,
            0,0,0,0,0,0,-63,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-64,0,0,0,
            0,0,0,-78,0,0,0,0,0,0,
            0,0,0,0,0,0,-65,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-66,0,0,0,
            0,0,0,-79,0,0,0,0,0,0,
            0,0,0,0,0,0,-67,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-68,0,0,0,
            0,0,0,-127,0,0,0,0,0,0,
            0,0,0,0,0,0,-69,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-70,0,0,0,
            0,0,0,-145,0,0,0,0,0,0,
            0,0,0,0,0,0,-71,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-72,0,0,0,
            0,0,0,-173,0,0,0,0,0,0,
            0,0,0,0,0,0,-73,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-164,0,0,0,
            0,0,0,-195,0,0,0,0,0,0,
            0,0,0,0,0,0,-165,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-188,0,0,0,
            0,0,0,-101,0,0,0,0,0,0,
            0,0,0,0,0,-203,0,0,0,0,
            0,0,-102,0,0,0,0,0,0,0,
            0,0,0,0,-209,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-213,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-223,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-137,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -87,-146,-103,-85,-37,-91,-104,0,0,-49,
            0,0,0,0,0,0,-86,0,0,0,
            -92,-120,-94,0,0,0,0,-88,0,-187,
            0,-198,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-168,0,0,0,
            0,0,0,0,0,0,-122,0,-132,-166,
            0,0,-105,0,0,0,0,-106,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-144,0,0,0,0,0,0,0,
            -200,0,0,0,0,0,0,0,-5,0,
            0,0,0,0,-222,0,0,0,0,0,
            -107,0,-50,0,0,0,0,0,0,-134,
            0,0,0,0,-171,-108,0,0,0,0,
            0,0,0,0,-6,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-7,0,
            0,0,0,0,0,-51,0,0,0,0,
            0,0,-135,0,0,0,-38,-139,-152,0,
            -154,0,0,0,0,0,0,0,0,-8,
            0,0,0,0,0,0,0,-52,0,0,
            0,0,0,0,0,0,0,0,-53,0,
            0,0,0,0,0,-89,0,0,-54,0,
            0,0,0,0,0,-84,0,0,-157,-160,
            -193,-175,0,-90,-179,0,0,-158,0,0,
            0,0,-109,-194,-110,0,-191,-111,0,0,
            0,0,0,0,0,-208,0,0,0,0,
            -93,0,-184,0,0,0,0,0,0,0,
            -112,0,0,0,0,-95,-10,0,0,0,
            0,0,0,0,0,0,0,0,0,-113,
            -42,0,0,0,0,0,0,0,0,0,
            0,0,-15,0,0,0,0,0,0,0,
            0,0,-44,0,0,0,0,0,0,0,
            0,-45,0,0,0,0,0,0,-207,0,
            -16,0,0,0,0,0,0,0,0,0,
            -126,0,0,0,0,0,0,-163,-227,-224,
            0,-114,-115,0,-151,0,0,0,0,0,
            0,-180,0,-167,0,0,0,0,0,0,
            0,0,0,0,-205,-216,0,-11,0,0,
            0,0,0,0,-116,0,0,0,0,0,
            0,0,0,-12,0,0,0,0,0,0,
            -13,0,0,0,0,0,0,-14,0,0,
            0,0,0,0,-18,0,-31,-172,-212,-121,
            -117,0,-156,0,0,-32,-118,0,0,-218,
            -169,-204,0,-39,-219,0,-119,0,0,0,
            0,0,0,0,0,0,0,0,0,-140,
            -33,0,0,0,0,-34,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-131,
            -35,0,0,0,-220,-133,0,0,0,0,
            -136,0,-148,-161,0,-181,-125,-182,-186,0,
            0,0,-128,-214,0,0,0,0,0,0,
            0,0,-46,0,0,0,0,0,0,0,
            0,0,0,0,0,-47,0,0,0,0,
            0,0,-48,0,0,0,0,0,0,-81,
            0,0,0,0,0,0,-141,-170,-190,-226,
            -199,0,-153,-196,0,0,-201,0,0,0,
            0,-155,0,-221,0,0,-162,-202,0,0,
            0,0,0,0,0,0,0,-174,0,0,
            0,0,0,0,0,-183,0,-178,0,0,
            0,0,0,-1,0,-211,-217,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-149,0,
            0,0,-177,-225,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-192,0,0,
            0,0,0,0,-60,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            86,7,22,22,20,20,30,30,71,71,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,54,54,72,
            72,5,5,5,5,5,5,5,5,5,
            5,5,6,6,8,8,8,8,9,9,
            9,10,10,10,11,11,11,11,11,12,
            12,12,13,13,14,14,15,15,16,16,
            17,17,18,18,19,19,19,19,19,19,
            19,19,19,19,19,19,98,31,28,87,
            87,74,74,45,99,99,99,99,99,99,
            99,100,100,100,101,101,106,106,107,107,
            102,102,103,103,103,109,109,104,104,104,
            104,105,105,105,105,105,108,108,21,21,
            21,21,21,33,33,33,80,80,75,75,
            75,75,76,76,76,77,77,77,78,78,
            78,79,79,79,110,110,111,111,112,34,
            36,36,36,36,36,55,57,57,57,57,
            57,57,57,57,57,57,57,57,68,68,
            32,32,65,65,65,65,66,66,66,58,
            58,59,59,51,51,51,27,88,88,81,
            82,82,82,67,67,83,83,84,84,69,
            69,23,24,24,24,35,50,50,37,37,
            37,37,40,40,42,38,38,39,43,43,
            113,113,41,114,114,89,89,29,29,29,
            29,29,29,29,29,29,85,52,52,52,
            52,61,61,60,60,60,62,62,53,53,
            90,90,44,44,63,63,63,46,46,46,
            47,48,48,48,49,49,49,49,56,56,
            56,64,91,73,73,73,73,70,92,93,
            93,94,94,95,95,115,115,116,116,117,
            117,117,117,119,119,118,118,118,120,120,
            86,86,1,1,1,5,5,5,5,5,
            5,23,23,25,25,26,26,96,96,96,
            99,121,121,121,121,121,121,121,104,104,
            104,104,104,104,104,104,104,104,104,104,
            104,104,104,104,104,104,104,104,104,104,
            104,104,122,122,1,14,19,15,395,640,
            44,597,433,420,437,434,534,520,580,579,
            604,583,74,91,282,654,479,134,211,321,
            322,1720,1556,277,62,1141,479,136,133,135,
            159,823,14,19,15,395,42,44,20,433,
            420,437,434,534,520,580,579,1470,239,138,
            250,165,216,1611,219,1728,221,222,227,142,
            145,148,151,78,128,1044,1600,288,394,1191,
            1396,1414,1441,1456,587,730,14,19,15,395,
            640,44,492,433,420,437,434,534,520,580,
            579,604,583,74,278,792,14,19,15,395,
            640,44,492,433,420,437,434,534,520,580,
            579,604,583,74,278,823,14,19,15,395,
            42,44,708,433,420,437,434,534,520,580,
            1532,283,823,14,19,15,395,42,44,1674,
            433,420,437,434,1301,284,597,597,1418,712,
            352,283,823,14,19,15,395,42,44,1674,
            433,420,437,1316,339,284,16,1533,1615,486,
            14,19,15,395,640,44,492,433,420,437,
            434,534,520,580,579,604,583,74,278,396,
            14,19,15,395,640,44,1677,433,420,437,
            434,534,520,580,579,604,583,74,396,33,
            52,237,341,119,1679,519,289,341,823,14,
            19,15,395,42,44,285,433,420,437,434,
            534,520,1425,1674,978,134,211,321,322,286,
            134,211,321,322,290,136,133,135,159,479,
            137,133,135,159,823,14,19,15,395,42,
            44,603,433,420,437,1423,603,138,1799,165,
            51,241,139,1776,165,1033,313,142,145,148,
            151,275,143,146,149,152,229,1191,1396,1414,
            1441,1456,587,761,14,19,15,395,640,44,
            597,433,420,437,434,534,520,580,579,604,
            583,74,278,823,14,19,15,395,640,44,
            1565,433,420,437,434,534,520,580,579,604,
            583,74,91,823,14,19,15,395,42,44,
            163,433,420,437,434,534,1428,1281,23,287,
            823,14,19,15,395,42,39,1674,1003,14,
            19,15,395,640,44,1727,433,420,437,434,
            534,520,580,579,604,583,74,619,479,597,
            612,14,19,15,395,42,44,394,433,420,
            437,434,534,520,580,579,604,583,93,1601,
            327,1072,329,302,441,14,19,15,395,640,
            44,194,433,420,437,434,534,520,580,579,
            604,583,74,1250,343,748,238,823,14,19,
            15,395,640,44,597,433,420,437,434,534,
            520,580,579,604,583,74,92,823,14,19,
            15,395,640,44,1607,433,420,437,434,534,
            520,580,579,604,583,74,85,823,14,19,
            15,395,640,44,597,433,420,437,434,534,
            520,580,579,604,583,74,84,823,14,19,
            15,395,640,44,1617,433,420,437,434,534,
            520,580,579,604,583,74,83,823,14,19,
            15,395,640,44,597,433,420,437,434,534,
            520,580,579,604,583,74,82,823,14,19,
            15,395,640,44,21,433,420,437,434,534,
            520,580,579,604,583,74,81,823,14,19,
            15,395,640,44,597,433,420,437,434,534,
            520,580,579,604,583,74,80,823,14,19,
            15,395,640,44,270,433,420,437,434,534,
            520,580,579,604,583,74,79,823,14,19,
            15,395,640,44,597,433,420,437,434,534,
            520,580,579,604,583,74,78,823,14,19,
            15,395,640,44,276,433,420,437,434,534,
            520,580,579,604,583,74,77,823,14,19,
            15,395,640,44,597,433,420,437,434,534,
            520,580,579,604,583,74,76,823,14,19,
            15,395,640,44,277,433,420,437,434,534,
            520,580,579,604,583,74,75,823,14,19,
            15,395,640,44,597,433,420,437,434,534,
            520,580,579,604,583,74,1411,823,14,19,
            15,395,640,44,223,433,420,437,434,534,
            520,580,579,604,583,74,1424,823,14,19,
            15,395,42,44,334,433,420,437,434,534,
            520,580,579,604,583,93,823,14,19,15,
            395,42,44,373,433,420,437,434,534,520,
            580,579,604,583,93,823,14,19,15,395,
            42,44,1509,433,420,437,434,534,520,580,
            579,604,583,93,823,14,19,15,395,42,
            44,210,433,420,437,434,534,520,580,579,
            604,583,93,823,14,19,15,395,42,44,
            1610,433,420,437,434,534,520,580,579,604,
            583,93,823,14,19,15,395,42,44,201,
            433,420,437,434,534,520,580,579,604,583,
            73,517,543,482,662,313,85,541,202,1315,
            823,14,19,15,395,42,44,496,433,420,
            1084,142,31,199,134,211,321,322,666,445,
            532,271,620,272,141,133,135,159,1660,216,
            1611,219,1728,221,222,227,273,79,264,1207,
            1194,269,260,1666,1734,1671,140,63,165,31,
            479,271,292,600,1630,261,1733,274,604,217,
            1611,219,1728,221,222,227,271,22,266,1207,
            1194,269,240,291,216,1611,219,1728,221,222,
            227,369,258,264,1207,1194,269,1044,1556,853,
            14,19,15,395,319,369,252,211,321,322,
            924,453,1556,823,14,19,15,395,42,44,
            31,433,420,1103,323,282,188,1742,216,1611,
            219,1728,221,222,227,883,14,19,15,395,
            317,1684,216,1611,219,1728,221,222,227,913,
            14,19,15,395,315,1684,823,14,19,15,
            395,42,44,31,433,420,1193,471,234,31,
            1603,31,197,199,683,1747,1758,1222,1768,1599,
            943,14,19,15,395,40,198,199,823,14,
            19,15,395,42,44,89,433,420,1197,823,
            14,19,15,395,42,44,1079,433,1253,823,
            14,19,15,395,42,44,449,433,1258,31,
            31,479,645,1683,1111,645,1766,1729,742,134,
            211,321,322,245,479,408,274,31,1039,144,
            133,135,159,242,465,271,532,134,211,321,
            322,1118,183,645,884,182,243,147,133,135,
            159,6,264,1207,1194,269,1150,823,14,19,
            15,395,42,38,134,211,321,322,294,924,
            981,577,1443,26,150,133,135,159,384,134,
            211,321,322,973,14,19,15,395,33,153,
            133,135,159,823,14,19,15,395,42,44,
            271,773,823,14,19,15,395,42,44,479,
            794,973,14,19,15,395,32,264,1207,1194,
            269,567,14,19,15,395,42,35,348,58,
            473,291,295,546,263,567,14,19,15,395,
            42,35,837,244,567,14,19,15,395,42,
            35,252,211,321,322,837,282,328,823,14,
            19,15,395,42,37,770,245,217,1611,219,
            1728,221,222,227,823,14,19,15,395,42,
            36,823,14,19,15,395,42,35,823,14,
            19,15,395,42,34,31,1748,31,835,176,
            665,771,364,519,364,582,31,774,1530,1777,
            479,833,532,364,31,742,196,775,196,1192,
            279,683,1471,87,1471,87,516,196,516,271,
            177,31,293,1471,87,1676,31,516,364,371,
            226,517,87,364,1676,386,266,1207,1194,269,
            670,257,196,251,211,321,322,196,1471,87,
            802,31,516,1471,87,597,806,516,364,1804,
            193,828,207,494,831,749,290,177,863,536,
            804,208,196,644,450,228,1542,1678,1471,87,
            582,1528,516,823,14,19,15,395,42,47,
            251,211,321,322,1192,844,823,14,19,15,
            395,42,46,823,14,19,15,395,42,45,
            699,14,19,15,395,42,43,177,707,645,
            642,645,1883,56,644,1600,256,645,1273,1883,
            582,582,113,964,428,1673,1883,177,645,582,
            251,211,321,322,196,1192,1883,225,170,280,
            710,185,774,196,232,582,519,184,284,710,
            251,211,321,322,657,582,307,645,203,196,
            1883,683,1883,582,191,710,1222,256,1273,196,
            1883,1412,1803,191,964,710,1673,1192,1676,651,
            1415,1803,87,227,645,310,582,204,1818,191,
            582,1883,1037,1883,1883,1883,1731,1803,426,191,
            1192,1883,1883,1883,196,31,1737,1803,1883,256,
            710,1883,683,1883,1529,207,1665,1883,1673,1883,
            1883,252,211,321,322,1883,1883,1883,1883,1555,
            1678,1883,256,87,192,1883,1451,1883,1883,1004,
            393,1673,1883,1883,1883,1744,1883,0,324,750,
            0,17,179,0,18,178,0,1,2107,0,
            1,2118,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            0,31,0,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            0,0,52,53,54,0,1,0,3,0,
            5,0,0,8,9,10,0,12,13,14,
            8,9,10,68,12,13,14,0,0,1,
            2,4,0,5,0,1,31,3,33,34,
            35,36,37,38,39,40,41,42,43,44,
            45,46,47,48,49,73,51,52,53,54,
            32,56,0,1,30,3,55,5,0,69,
            8,9,10,72,12,13,14,0,50,79,
            80,81,82,83,84,85,86,87,88,62,
            63,0,1,31,3,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,0,51,52,53,54,5,56,0,
            1,30,3,0,5,0,0,8,9,10,
            5,12,13,14,8,9,10,0,12,13,
            14,64,65,66,67,77,78,0,0,1,
            31,3,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,0,
            51,52,53,54,0,56,0,1,30,3,
            55,5,0,0,8,9,10,75,12,13,
            14,8,9,10,0,12,13,14,0,0,
            75,64,65,66,67,6,7,31,0,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,0,51,52,53,
            54,0,56,0,1,4,3,0,5,0,
            0,8,9,10,0,12,13,14,8,9,
            10,0,12,13,14,4,0,1,64,65,
            66,67,0,1,31,3,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,0,51,52,53,54,0,56,
            0,1,0,3,57,58,4,0,8,9,
            10,0,12,13,14,8,9,10,69,12,
            13,14,11,62,63,89,60,73,0,1,
            2,31,0,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            57,58,52,53,54,0,1,2,3,4,
            5,6,7,0,62,63,11,0,70,71,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,0,31,0,0,57,
            58,0,5,8,9,10,68,12,13,14,
            0,1,2,3,4,5,6,7,0,0,
            2,11,0,5,59,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            0,31,0,1,2,5,4,50,0,72,
            32,0,55,5,0,0,1,2,3,4,
            5,6,7,0,0,0,11,2,50,59,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,0,68,0,1,
            50,3,70,71,8,9,10,32,12,13,
            14,0,1,0,3,0,51,59,57,58,
            0,0,0,1,2,0,4,31,55,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,0,1,2,3,
            4,5,6,7,32,30,0,11,2,0,
            4,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,0,57,58,0,
            0,5,0,0,69,6,7,5,32,6,
            7,0,1,2,3,4,5,6,7,0,
            1,2,11,4,0,59,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,0,1,0,0,0,50,4,0,5,
            0,32,50,0,1,2,0,1,2,3,
            4,0,6,7,0,0,2,11,4,0,
            59,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,0,0,1,0,
            3,5,0,32,0,51,32,32,0,1,
            2,3,4,60,6,7,0,0,2,11,
            60,0,56,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,0,
            1,2,3,4,0,6,7,51,32,32,
            11,0,0,32,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            0,1,2,3,4,0,6,7,61,0,
            0,11,61,0,0,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,0,1,2,3,4,55,6,7,30,
            30,0,11,30,30,0,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,0,1,2,3,4,0,6,7,
            0,30,0,11,0,30,0,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,0,1,2,3,4,30,6,7,
            30,0,0,11,32,0,0,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,0,1,2,3,4,0,6,7,
            0,55,0,11,60,0,0,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,0,1,2,3,4,55,6,7,
            0,0,0,11,0,0,0,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,0,1,2,3,4,0,6,7,
            0,0,0,11,0,0,0,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,0,1,2,3,4,0,6,7,
            0,0,0,11,0,0,0,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,0,1,2,3,4,0,6,7,
            0,0,0,11,0,0,0,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,0,0,2,0,4,5,0,0,
            8,9,10,0,12,13,14,0,0,11,
            0,74,0,0,74,0,0,0,0,0,
            0,0,0,31,32,33,34,35,36,37,
            0,0,0,2,0,4,5,0,0,8,
            9,10,50,12,13,14,8,9,10,0,
            12,13,14,0,0,0,0,0,0,0,
            0,0,31,32,33,34,35,36,37,31,
            0,33,34,35,36,37,0,0,8,9,
            10,50,12,13,14,8,9,10,0,12,
            13,14,0,0,0,0,0,0,0,0,
            0,31,2,33,34,35,36,37,31,0,
            33,34,35,36,37,15,16,8,9,10,
            0,12,13,14,0,0,0,0,0,0,
            0,0,32,0,0,0,0,0,0,0,
            31,0,33,34,35,36,37,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,61,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,76,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1883,645,1595,771,1581,1883,1574,1558,2095,2096,
            2097,1588,2208,1218,2209,1511,1483,1370,1893,1894,
            1895,1896,1457,720,2195,2196,2197,1339,1325,1289,
            1,2045,68,2046,2044,2098,2047,2043,2050,2055,
            2054,2052,2053,2051,2056,2057,2049,2058,2059,2060,
            42,66,1213,1211,1196,1883,1,282,1,1883,
            190,88,247,1,1,1,1883,1,1,1,
            1,1,1,1172,1,1,1,48,1,1877,
            1237,1713,1883,1888,1883,2063,1,2064,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,588,190,1,1,1,
            559,2078,1883,1,1249,1,797,190,72,1017,
            1,1,1,703,1,1,1,59,1887,997,
            977,957,937,917,877,897,857,837,817,1706,
            1693,1883,2063,1,2064,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,190,1,1,1,1892,2078,1883,
            1,1310,1,1883,190,1883,1883,1,1,1,
            1892,1,1,1,2095,2096,2097,61,2208,1218,
            2209,1378,1346,1303,1200,401,1825,1883,1883,2063,
            1,2064,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1883,
            190,1,1,1,1883,2078,1883,1,1353,1,
            1295,189,1883,248,1,1,1,1891,1,1,
            1,1,1,1,60,1,1,1,1883,51,
            1891,1378,1346,1303,1200,1502,1493,1,1883,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1883,189,1,1,
            1,1883,2078,1883,1,1247,1,54,190,209,
            246,1,1,1,69,1,1,1,2095,2096,
            2097,50,2208,1218,2209,1713,1,1880,1378,1346,
            1303,1200,1883,1912,1,1913,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,58,190,1,1,1,62,2078,
            1883,2062,49,2061,1389,1399,1713,249,2095,2096,
            2097,64,2208,1218,2209,2095,2096,2097,1096,2208,
            1218,2209,502,1706,1693,1867,2138,588,1,2107,
            385,2045,57,2046,2044,2098,2047,2043,2050,2055,
            2054,2052,2053,2051,2056,2057,2049,2058,2059,2060,
            1389,1399,1213,1211,1196,1,1900,1595,1901,1521,
            1886,1574,1558,1883,1706,1693,1588,67,624,522,
            1511,1483,1370,1893,1894,1895,1896,1457,720,2195,
            2196,2197,1339,1325,1289,250,728,1883,1883,1389,
            1399,1883,1888,2095,2096,2097,1134,2208,1218,2209,
            1883,1900,1595,1901,1544,1886,1574,1558,1,200,
            1406,1588,63,1888,1885,1511,1483,1370,1893,1894,
            1895,1896,1457,720,2195,2196,2197,1339,1325,1289,
            1,1057,1883,2107,385,90,1358,1887,1883,703,
            559,56,1730,1886,1883,1,1900,1595,1901,1581,
            27,1574,1558,253,1883,267,1588,631,1887,1885,
            1511,1483,1370,1893,1894,1895,1896,1457,720,2195,
            2196,2197,1339,1325,1289,2933,128,1153,206,2063,
            90,2064,624,522,2095,2096,2097,559,2208,1218,
            2209,1883,2063,1883,2064,1883,27,1885,1389,1399,
            55,1883,259,2107,1237,320,1,2045,1598,2046,
            2044,2098,2047,2043,2050,2055,2054,2052,2053,2051,
            2056,2057,2049,2058,2059,2060,1883,1900,1595,1901,
            1581,1886,1574,1558,559,1212,262,1588,1406,1883,
            1,1511,1483,1370,1893,1894,1895,1896,1457,720,
            2195,2196,2197,1339,1325,1289,1883,1389,1399,53,
            1883,1888,1,52,663,1502,1493,1888,559,1502,
            1493,1883,1900,1595,1901,1535,1886,1574,1558,265,
            2107,1237,1588,1358,1883,1885,1511,1483,1370,1893,
            1894,1895,1896,1457,720,2195,2196,2197,1339,1325,
            1289,1883,2119,1,1883,1883,1887,1247,1883,1890,
            1,559,1887,1,2107,385,1883,1,1,1,
            1,268,1,1,265,324,1406,1,1358,1883,
            1885,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,281,205,1612,1883,
            1612,1410,1883,559,1883,1889,559,1868,1883,1900,
            1595,1901,1581,2138,1574,1558,220,1883,636,1588,
            2138,288,2194,1511,1483,1370,1893,1894,1895,1896,
            1457,720,2195,2196,2197,1339,1325,1289,1212,1,
            1900,1595,1901,1581,1883,1574,1558,1410,559,1077,
            1588,28,1883,1115,1511,1483,1370,1893,1894,1895,
            1896,1457,720,2195,2196,2197,1339,1325,1289,2933,
            1883,1900,1595,1901,1581,1883,1574,1558,1220,318,
            316,1588,1436,41,1883,1511,1483,1370,1893,1894,
            1895,1896,1457,720,2195,2196,2197,1339,1325,1289,
            2933,1,1900,1595,1901,1581,539,1574,1558,1212,
            1212,187,1588,1212,1212,186,1511,1483,1370,1893,
            1894,1895,1896,1457,720,2195,2196,2197,1339,1325,
            1289,2933,1883,1900,1595,1901,1581,188,1574,1558,
            1883,1359,218,1588,1,1361,28,1511,1483,1370,
            1893,1894,1895,1896,1457,720,2195,2196,2197,1339,
            1325,1289,1883,1900,1597,1901,1581,1409,1574,1558,
            1427,1883,205,1588,559,1883,1883,1511,1483,1370,
            1893,1894,1895,1896,1457,720,2195,2196,2197,1339,
            1325,1289,1883,1900,1606,1901,1581,1883,1574,1558,
            1883,1910,1883,1588,2137,1883,1883,1511,1483,1370,
            1893,1894,1895,1896,1457,720,2195,2196,2197,1339,
            1325,1289,1883,1900,1631,1901,1581,2934,1574,1558,
            1883,1883,1883,1588,1883,1883,1883,1511,1483,1370,
            1893,1894,1895,1896,1457,720,2195,2196,2197,1339,
            1325,1289,1883,1900,1636,1901,1581,1883,1574,1558,
            1883,1883,1883,1588,1883,1883,1883,1511,1483,1370,
            1893,1894,1895,1896,1457,720,2195,2196,2197,1339,
            1325,1289,1883,1900,1661,1901,1581,70,1574,1558,
            71,1883,1883,1588,1883,1883,1883,1511,1483,1370,
            1893,1894,1895,1896,1457,720,2195,2196,2197,1339,
            1325,1289,1,1900,1595,1901,1581,1883,1574,1558,
            1883,1883,1883,1588,1883,1883,1883,1511,1483,1370,
            1893,1894,1895,1896,1457,720,2195,2196,2197,1339,
            1325,1289,17,1883,1871,1883,1871,1871,65,1883,
            179,179,179,1883,179,179,179,1883,1883,502,
            1883,485,1883,1883,485,1883,1883,1883,1883,1883,
            1883,1883,1883,179,1871,179,179,179,179,179,
            1883,18,1883,1874,1883,1874,1874,1883,129,178,
            178,178,1871,178,178,178,2095,2096,2097,1883,
            2208,1218,2209,1883,1883,1883,1883,1883,1883,1883,
            1883,1883,178,1874,178,178,178,178,178,2045,
            130,2046,2044,2098,2047,2043,1883,131,2095,2096,
            2097,1874,2208,1218,2209,2095,2096,2097,1883,2208,
            1218,2209,1883,1883,1883,1883,1883,1883,1883,1883,
            31,2045,1357,2046,2044,2098,2047,2043,2045,132,
            2046,2044,2098,2047,2043,1907,1908,2095,2096,2097,
            1883,2208,1218,2209,1883,1883,1883,1883,1883,1883,
            1883,1883,1614,1883,1883,1883,1883,1883,1883,1883,
            2045,1883,2046,2044,2098,2047,2043,1883,1883,1883,
            1883,1883,1883,1883,1883,1883,1883,1883,1883,1883,
            1883,1195,1883,1883,1883,1883,1883,1883,1883,1883,
            1883,1883,1883,1883,1883,1883,646
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            488,1,89,41,89,89,89,89,89,89,
            89,89,89,89,89,89,3,238,403,400,
            407,405,413,411,415,414,417,416,10,89,
            238,238,238,238,238,385,385,327,89,161,
            161,225,238,89,89,89,89,89,89,89,
            89,89,89,89,89,89,89,89,89,89,
            89,89,89,89,89,89,89,89,89,89,
            89,89,89,161,161,161,161,161,161,45,
            56,229,80,352,159,158,197,231,209,209,
            76,76,209,76,209,258,112,112,400,400,
            405,405,405,405,403,403,411,407,407,414,
            413,449,416,415,388,388,388,388,78,54,
            225,217,83,45,281,172,161,456,355,172,
            428,288,428,288,321,428,89,54,217,281,
            281,45,171,80,161,223,258,160,357,45,
            172,288,288,288,288,321,321,323,49,318,
            78,281,217,89,89,45,172,352,444,443,
            229,357,161,288,318,164,288,288,318,323,
            451,323,321,318,52,454,385,89,48,318,
            54,217,45,45,161,456,355,223,318,166,
            318,318,89,385,323,56,45,385,89,54,
            357,424,89,423,108,229,318,45,323,161,
            160,166,89,108,318,386,323
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            89,0,75,32,2,61,76,15,16,11,
            4,6,7,62,63,57,58,64,65,66,
            67,70,71,72,73,74,77,78,51,69,
            79,80,81,82,83,85,84,86,87,88,
            68,50,89,55,59,5,0,69,32,61,
            0,5,51,32,61,15,16,11,4,6,
            7,22,23,17,27,28,29,2,18,19,
            20,21,24,25,26,1,3,30,0,59,
            5,31,8,9,10,12,13,14,18,19,
            20,21,24,25,26,3,15,16,11,6,
            7,22,23,17,27,28,29,4,2,1,
            0,9,31,37,10,36,35,34,8,33,
            12,13,14,61,76,15,16,11,6,7,
            62,63,57,58,64,65,66,67,70,71,
            72,73,74,77,78,69,79,80,81,82,
            83,84,85,86,87,88,4,2,32,55,
            50,5,0,75,5,4,1,2,68,0,
            31,59,5,15,16,11,4,6,7,22,
            23,17,27,28,29,2,1,3,18,19,
            20,21,24,25,26,0,46,38,43,41,
            42,40,39,44,45,47,48,49,68,75,
            37,34,31,33,36,35,8,9,10,12,
            13,14,55,1,5,50,2,32,4,0,
            5,68,55,59,50,75,32,17,18,19,
            20,21,2,15,16,11,4,6,7,22,
            23,24,25,26,27,28,29,3,1,52,
            53,54,46,38,43,41,42,40,39,44,
            45,47,48,49,37,34,31,33,36,35,
            8,9,10,13,12,14,0,33,38,8,
            39,52,34,40,35,41,42,36,9,43,
            44,31,53,37,54,45,46,10,47,48,
            49,1,3,12,13,14,56,5,51,0,
            1,3,5,51,55,0,5,50,17,18,
            19,20,21,1,3,2,15,16,11,4,
            6,7,22,23,24,25,26,27,28,29,
            0,4,2,32,50,5,33,38,8,39,
            52,34,40,35,41,42,36,9,43,44,
            31,53,37,54,45,46,10,47,48,49,
            12,13,14,60,3,1,0,69,79,80,
            81,82,83,84,85,86,87,88,30,4,
            62,63,6,7,58,57,64,65,66,67,
            70,71,11,72,73,74,59,50,51,89,
            77,78,68,75,5,55,0,33,8,34,
            35,36,9,31,37,10,1,4,12,13,
            14,30,2,5,55,50,75,32,68,0,
            5,55,51,69,0,33,38,8,39,52,
            34,40,35,41,42,36,9,43,44,31,
            53,37,54,45,46,10,47,48,49,1,
            3,12,13,14,60,4,0,17,18,19,
            20,21,1,3,2,15,16,11,4,6,
            7,22,23,24,25,26,27,28,29,56,
            0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            87,8,16,8,16,16,16,16,16,16,
            16,16,16,16,16,16,8,73,8,8,
            8,8,8,8,8,8,8,8,8,16,
            73,73,73,73,73,32,32,59,74,30,
            30,63,1,16,16,16,16,16,16,16,
            16,16,16,16,16,16,16,16,16,74,
            16,16,16,16,16,16,16,16,16,16,
            16,16,16,30,30,30,30,30,30,20,
            16,81,18,62,40,40,26,44,27,27,
            42,42,27,42,27,22,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,8,8,92,
            64,92,37,20,77,19,30,79,29,19,
            8,92,8,92,92,8,16,14,92,77,
            77,20,19,53,30,47,2,8,91,20,
            19,92,83,92,83,42,92,69,9,92,
            8,77,53,16,16,20,19,46,40,40,
            81,91,30,83,67,34,94,83,67,69,
            8,8,42,67,13,8,42,16,11,67,
            92,53,20,20,30,79,29,48,67,55,
            67,67,16,42,69,15,20,42,16,14,
            90,35,16,8,55,81,67,20,69,30,
            30,55,16,50,67,8,71
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,80,79,78,77,76,75,0,93,0,
            95,0,70,7,64,4,0,7,4,22,
            0,65,66,67,68,55,33,0,7,20,
            0,72,0,7,71,0,4,7,0,29,
            0,32,0,96,0,20,7,48,47,40,
            38,0,23,0,7,40,38,0,7,87,
            0,20,7,48,47,0,30,0,54,0,
            91,0,27,7,31,0,61,0,7,21,
            52,0,59,7,27,0,7,86,0,89,
            21,7,0,7,27,51,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,10,11,48,64,76,
            8,96,97,98,6,7,68,81,82,83,
            84,12,13,93,94,95,100,101,102,3,
            69,1,44,55,60,63,72,47,52,56,
            61,62,66,67,74,75,78,79,80,90,
            91,54,70,73,42,107,16,17,89,30,
            4,14,15,18,19,20,21,29,31,22,
            23,24,25,26,92,5,27,28,32,33,
            34,35,36,37,38,39,40,41,108,45,
            46,49,50,51,53,57,58,59,65,71,
            77,88,99,103,104,105,106
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,115,119,120,0,121,122,123,
            124,125,126,127,128,129,130,131,132,111,
            136,110,143,0,0,0,154,0,163,112,
            114,135,142,0,0,0,159,161,0,162,
            0,0,0,117,134,172,173,174,0,151,
            153,160,169,0,145,150,0,0,152,164,
            167,168,171,0,146,147,148,149,158,175,
            113,116,118,133,137,138,139,140,141,144,
            156,0,0,157,166,109,0,155,165,170,
            0,176,177,0,178,179,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            218,120,59,69,129,149,155,26,192,35,
            87,105,161,166,75,6,12,16,40,83,
            52,139,214,233,237,52,52,201,52,1,
            1,1,44,47,92,115,47,241,20,143,
            208,183,208,135,171,171,171,171,171,95,
            95,95
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            127,127,4,4,127,127,127,32,198,10,
            4,10,127,127,80,10,10,10,10,4,
            4,137,10,10,4,56,80,205,65,4,
            4,4,10,50,4,10,118,10,23,146,
            211,186,226,137,173,175,177,179,181,102,
            97,110
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            4,67,29,29,67,65,65,56,103,49,
            29,43,65,65,29,5,5,5,49,29,
            29,51,5,4,4,29,29,18,29,96,
            95,94,47,63,29,40,50,2,70,51,
            6,104,4,51,79,78,77,76,75,43,
            41,43
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            51,51,59,59,51,51,51,51,95,50,
            59,50,51,51,18,50,50,50,50,59,
            59,75,50,50,59,4,18,68,31,59,
            59,59,50,2,59,50,1,50,69,1,
            50,101,50,75,3,52,53,53,46,2,
            2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            36,21,25,25,21,21,21,96,-1,29,
            25,11,21,21,25,36,36,36,29,25,
            25,5,36,36,36,25,25,70,25,19,
            1,3,29,31,25,11,13,36,97,5,
            42,-1,36,5,22,22,22,22,22,11,
            11,11
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            152,32,0,110,0,151,2,29,0,111,
            0,151,2,28,0,151,2,27,0,199,
            114,0,31,150,0,161,180,114,30,171,
            0,112,0,0,167,114,2,154,0,167,
            114,2,0,170,2,0,159,114,0,172,
            0,192,114,32,0,9,110,0,126,31,
            192,114,32,0,69,132,110,0,126,192,
            114,31,32,0,192,114,31,32,0,132,
            110,0,126,31,32,0,126,192,114,32,
            0,126,32,0,147,0,2,0,165,111,
            0,2,111,0,167,114,2,147,0,2,
            0,164,111,0,157,2,0,159,0,161,
            190,114,30,139,52,0,112,0,161,190,
            114,30,52,0,134,0,113,0,195,114,
            134,0,114,134,0,155,113,0,165,114,
            30,139,54,0,165,114,30,139,53,0,
            165,114,30,54,0,165,114,30,53,0,
            187,0,149,0,148,0,147,0,146,0,
            145,0,206,94,0,77,2,114,111,113,
            0,206,127,138,2,98,0,53,0,0,
            138,78,124,0,29,131,0,151,2,0,
            111,120,0,151,2,17,0,161,180,114,
            30,127,151,2,0,111,3,0,118,0,
            112,0,194,2,111,0,138,32,111,0,
            138,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            519,0,492,0,1768,1803,1758,1742,1733,0,
            1530,1222,1295,385,1281,1237,1192,0,1218,0,
            587,582,364,0,1728,1611,1207,1194,1222,1600,
            1237,1192,1406,1471,0,1511,1483,1370,1339,1325,
            1289,1544,1535,1521,1720,485,401,703,588,624,
            522,502,1399,1389,1378,1346,1303,1200,1713,1706,
            1693,1502,1493,1588,1581,1574,1558,1457,720,1153,
            1134,1115,1096,1077,1057,1037,774,1172,750,728,
            559,1017,997,977,957,937,917,897,877,857,
            837,817,364,797,683,663,465,539,445,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,193,114,181,29,28,27,17,23,22,
            7,6,4,11,16,15,111,2,116,115,
            118,117,120,119,122,121,124,123,112,55,
            2,2,2,2,2,76,61,2,32,151,
            138,134,114,7,6,63,62,4,67,66,
            65,64,57,58,11,71,70,73,72,78,
            77,74,88,87,86,84,85,83,82,81,
            80,79,69,151,151,151,151,151,194,138,
            127,114,32,2,155,154,182,13,183,184,
            54,53,185,52,186,187,1,3,115,115,
            117,117,117,117,116,116,119,118,118,121,
            120,138,123,122,127,127,127,127,127,30,
            159,4,31,126,114,4,170,114,2,32,
            139,30,139,30,30,139,68,114,4,114,
            114,126,192,168,167,128,114,169,114,152,
            4,30,114,30,114,114,30,180,114,30,
            171,114,168,192,31,126,4,2,145,147,
            114,55,167,114,165,134,166,114,165,190,
            139,191,114,161,55,199,61,32,200,114,
            30,168,126,126,157,114,2,159,165,114,
            165,161,69,55,190,69,152,61,32,114,
            114,195,68,157,2,114,161,152,180,167,
            196,55,68,159,161,55,137
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "MYTHREAD",
            "THREADS",
            "UPC_MAX_BLOCKSIZE",
            "relaxed",
            "shared",
            "strict",
            "upc_barrier",
            "upc_localsizeof",
            "upc_blocksizeof",
            "upc_elemsizeof",
            "upc_notify",
            "upc_fence",
            "upc_wait",
            "upc_forall",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "expression_parser_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_name",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_or_typedefname",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "layout_qualifier"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 56,
           SCOPE_UBOUND      = 51,
           SCOPE_SIZE        = 52,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 227,
           NT_OFFSET         = 107,
           LA_STATE_OFFSET   = 2246,
           MAX_LA            = 2,
           NUM_RULES         = 363,
           NUM_NONTERMINALS  = 122,
           NUM_SYMBOLS       = 229,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1774,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 89,
           EOLT_SYMBOL       = 89,
           ACCEPT_ACTION     = 1867,
           ERROR_ACTION      = 1883;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
