/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;


import lpg.lpgjavaruntime.*;
import org.eclipse.cdt.core.dom.lrparser.lpgextensions.ITrialUndoActionProvider;
import org.eclipse.cdt.core.dom.lrparser.lpgextensions.AbstractTrialUndoActionProvider;
import org.eclipse.cdt.core.dom.lrparser.lpgextensions.TrialUndoParser;

import java.util.*;

import org.eclipse.cdt.core.dom.ast.*;
import org.eclipse.cdt.core.dom.lrparser.IParser;
import org.eclipse.cdt.core.dom.lrparser.IParserActionTokenProvider;
import org.eclipse.cdt.core.dom.lrparser.action.c99.C99ASTNodeFactory;
import org.eclipse.cdt.core.dom.lrparser.action.c99.C99BuildASTParserAction;
import org.eclipse.cdt.core.dom.lrparser.action.c99.C99TypedefTrackerParserAction;
import org.eclipse.cdt.core.dom.lrparser.util.DebugUtil;

public class C99Parser extends AbstractTrialUndoActionProvider< C99ParserAction ,  Object > implements IParserActionTokenProvider, IParser    {
	private static ParseTable prs = new C99Parserprs();
	protected static final Action< C99ParserAction ,  Object >[] RULE_ACTIONS;

	{
	    ruleAction = RULE_ACTIONS;
	}
	    
	public C99Parser(LexStream lexStream) {
		super(lexStream);

		try {
			super.remapTerminalSymbols(orderedTerminalSymbols(), C99Parserprs.EOFT_SYMBOL);
		} catch (NullExportedSymbolsException e) {
		} catch (NullTerminalSymbolsException e) {
		} catch (UnimplementedTerminalsException e) {
			java.util.ArrayList unimplemented_symbols = e.getSymbols();
			System.out.println("The Lexer will not scan the following token(s):");
			for (int i = 0; i < unimplemented_symbols.size(); i++) {
				Integer id = (Integer) unimplemented_symbols.get(i);
				System.out.println("    " + C99Parsersym.orderedTerminalSymbols[id.intValue()]);
			}
			System.out.println();
		} catch (UndefinedEofSymbolException e) {
			throw new Error(new UndefinedEofSymbolException("The Lexer does not implement the Eof symbol " + C99Parsersym.orderedTerminalSymbols[C99Parserprs.EOFT_SYMBOL]));
		}
	}

	
    public C99Parser() {  // constructor
        //	this(new  C99Lexer ());
    }

	public String[] orderedTerminalSymbols() {
		return C99Parsersym.orderedTerminalSymbols;
	}

	public String getTokenKindName(int kind) {
		return C99Parsersym.orderedTerminalSymbols[kind];
	}

	public int getEOFTokenKind() {
		return C99Parserprs.EOFT_SYMBOL;
	}
	
	public PrsStream getParseStream() {
		return (PrsStream) this;
	}

	//
	// Report error message for given error_token.
	//
	public final void reportErrorTokenMessage(int error_token, String msg) {
		int firsttok = super.getFirstRealToken(error_token), lasttok = super.getLastRealToken(error_token);
		String location = super.getFileName() + ':' +
			(firsttok > lasttok
				? (super.getEndLine(lasttok) + ":" + super.getEndColumn(lasttok))
				: (super.getLine(error_token) + ":" +
				   super.getColumn(error_token) + ":" +
				   super.getEndLine(error_token) + ":" +
				   super.getEndColumn(error_token))) + ": ";
		super.reportError((firsttok > lasttok ? ParseErrorCodes.INSERTION_CODE : ParseErrorCodes.SUBSTITUTION_CODE), location, msg);
	}

	public Object parser() {
		return parser(null, 0);
	}

	public Object parser(Monitor monitor) {
		return parser(monitor, 0);
	}

	public Object parser(int error_repair_count) {
		return parser(null, error_repair_count);
	}

	public Object parser(Monitor monitor, int error_repair_count) {
		try {
			btParser = new TrialUndoParser((TokenStream) this, prs, (ITrialUndoActionProvider< Object >) this);
		} catch (NotBacktrackParseTableException e) {
			throw new Error(new NotBacktrackParseTableException("Regenerate C99Parserprs.java with -BACKTRACK option"));
		} catch (BadParseSymFileException e) {
			throw new Error(new BadParseSymFileException("Bad Parser Symbol File -- C99Parsersym.java"));
		}

		try {
			Object result = (Object) btParser.parse(error_repair_count);
			btParser.commit();
			return result;
		} catch (BadParseException e) {
			reset(e.error_token); // point to error token

			//DiagnoseParser diagnoseParser = new DiagnoseParser((TokenStream) this, prs);
			//diagnoseParser.diagnose(e.error_token);
		}

		return null;
	}


private  C99ParserAction  action;	

private void initActions(IASTTranslationUnit tu) {
    // binding resolution actions need access to IASTName nodes, temporary
    action = new  C99ParserAction ();
	action.resolver = new  C99TypedefTrackerParserAction (this);
	action.builder  = new  C99BuildASTParserAction ( C99ASTNodeFactory.DEFAULT_INSTANCE , this, tu);
	action.builder.setTokenMap(C99Parsersym.orderedTerminalSymbols);
	setParserAction(action);
}


public void addToken(IToken token) {
	token.setKind(mapKind(token.getKind()));
	super.addToken(token);
}


public IASTCompletionNode parse(IASTTranslationUnit tu) {
	// this has to be done, or... kaboom!
	setStreamLength(getSize());
	initActions(tu);
	
	final int errorRepairCount = -1;  // -1 means full error handling
	parser(null, errorRepairCount); // do the actual parse
	super.resetTokenStream(); // allow tokens to be garbage collected

	// the completion node may be null
	IASTCompletionNode compNode = action.builder.getASTCompletionNode();

	action = null;
	parserAction = null;
	return compNode;
}


public int getKind(int i) {
	int kind = super.getKind(i);
	// lexer feedback hack!
	if(kind == C99Parsersym.TK_identifier && action.resolver.isTypedef(getTokenText(i))) {
		kind = C99Parsersym.TK_TypedefName;
	}
	return kind;
}



	//
	// Initialize ruleAction array.
	//
	static {
		RULE_ACTIONS = new Action[309 + 1];
		RULE_ACTIONS[0] = null;

		RULE_ACTIONS[1] = new Action1();
		RULE_ACTIONS[2] = new Action2();
		RULE_ACTIONS[3] = new Action3();
		RULE_ACTIONS[12] = new Action12();
		RULE_ACTIONS[13] = new Action13();
		RULE_ACTIONS[14] = new Action14();
		RULE_ACTIONS[15] = new Action15();
		RULE_ACTIONS[17] = new Action17();
		RULE_ACTIONS[18] = new Action18();
		RULE_ACTIONS[22] = new Action22();
		RULE_ACTIONS[23] = new Action23();
		RULE_ACTIONS[24] = new Action24();
		RULE_ACTIONS[25] = new Action25();
		RULE_ACTIONS[26] = new Action26();
		RULE_ACTIONS[27] = new Action27();
		RULE_ACTIONS[28] = new Action28();
		RULE_ACTIONS[35] = new Action35();
		RULE_ACTIONS[36] = new Action36();
		RULE_ACTIONS[37] = new Action37();
		RULE_ACTIONS[38] = new Action38();
		RULE_ACTIONS[39] = new Action39();
		RULE_ACTIONS[40] = new Action40();
		RULE_ACTIONS[41] = new Action41();
		RULE_ACTIONS[42] = new Action42();
		RULE_ACTIONS[43] = new Action43();
		RULE_ACTIONS[44] = new Action44();
		RULE_ACTIONS[46] = new Action46();
		RULE_ACTIONS[48] = new Action48();
		RULE_ACTIONS[49] = new Action49();
		RULE_ACTIONS[50] = new Action50();
		RULE_ACTIONS[52] = new Action52();
		RULE_ACTIONS[53] = new Action53();
		RULE_ACTIONS[55] = new Action55();
		RULE_ACTIONS[56] = new Action56();
		RULE_ACTIONS[58] = new Action58();
		RULE_ACTIONS[59] = new Action59();
		RULE_ACTIONS[60] = new Action60();
		RULE_ACTIONS[61] = new Action61();
		RULE_ACTIONS[63] = new Action63();
		RULE_ACTIONS[64] = new Action64();
		RULE_ACTIONS[66] = new Action66();
		RULE_ACTIONS[68] = new Action68();
		RULE_ACTIONS[70] = new Action70();
		RULE_ACTIONS[72] = new Action72();
		RULE_ACTIONS[74] = new Action74();
		RULE_ACTIONS[76] = new Action76();
		RULE_ACTIONS[78] = new Action78();
		RULE_ACTIONS[79] = new Action79();
		RULE_ACTIONS[80] = new Action80();
		RULE_ACTIONS[81] = new Action81();
		RULE_ACTIONS[82] = new Action82();
		RULE_ACTIONS[83] = new Action83();
		RULE_ACTIONS[84] = new Action84();
		RULE_ACTIONS[85] = new Action85();
		RULE_ACTIONS[86] = new Action86();
		RULE_ACTIONS[87] = new Action87();
		RULE_ACTIONS[88] = new Action88();
		RULE_ACTIONS[91] = new Action91();
		RULE_ACTIONS[93] = new Action93();
		RULE_ACTIONS[103] = new Action103();
		RULE_ACTIONS[104] = new Action104();
		RULE_ACTIONS[105] = new Action105();
		RULE_ACTIONS[106] = new Action106();
		RULE_ACTIONS[107] = new Action107();
		RULE_ACTIONS[108] = new Action108();
		RULE_ACTIONS[112] = new Action112();
		RULE_ACTIONS[113] = new Action113();
		RULE_ACTIONS[114] = new Action114();
		RULE_ACTIONS[115] = new Action115();
		RULE_ACTIONS[116] = new Action116();
		RULE_ACTIONS[117] = new Action117();
		RULE_ACTIONS[119] = new Action119();
		RULE_ACTIONS[120] = new Action120();
		RULE_ACTIONS[121] = new Action121();
		RULE_ACTIONS[122] = new Action122();
		RULE_ACTIONS[123] = new Action123();
		RULE_ACTIONS[124] = new Action124();
		RULE_ACTIONS[125] = new Action125();
		RULE_ACTIONS[126] = new Action126();
		RULE_ACTIONS[127] = new Action127();
		RULE_ACTIONS[128] = new Action128();
		RULE_ACTIONS[129] = new Action129();
		RULE_ACTIONS[130] = new Action130();
		RULE_ACTIONS[131] = new Action131();
		RULE_ACTIONS[132] = new Action132();
		RULE_ACTIONS[133] = new Action133();
		RULE_ACTIONS[134] = new Action134();
		RULE_ACTIONS[135] = new Action135();
		RULE_ACTIONS[160] = new Action160();
		RULE_ACTIONS[161] = new Action161();
		RULE_ACTIONS[162] = new Action162();
		RULE_ACTIONS[168] = new Action168();
		RULE_ACTIONS[181] = new Action181();
		RULE_ACTIONS[182] = new Action182();
		RULE_ACTIONS[186] = new Action186();
		RULE_ACTIONS[187] = new Action187();
		RULE_ACTIONS[188] = new Action188();
		RULE_ACTIONS[189] = new Action189();
		RULE_ACTIONS[190] = new Action190();
		RULE_ACTIONS[191] = new Action191();
		RULE_ACTIONS[192] = new Action192();
		RULE_ACTIONS[197] = new Action197();
		RULE_ACTIONS[198] = new Action198();
		RULE_ACTIONS[202] = new Action202();
		RULE_ACTIONS[204] = new Action204();
		RULE_ACTIONS[205] = new Action205();
		RULE_ACTIONS[206] = new Action206();
		RULE_ACTIONS[207] = new Action207();
		RULE_ACTIONS[212] = new Action212();
		RULE_ACTIONS[213] = new Action213();
		RULE_ACTIONS[214] = new Action214();
		RULE_ACTIONS[218] = new Action218();
		RULE_ACTIONS[220] = new Action220();
		RULE_ACTIONS[225] = new Action225();
		RULE_ACTIONS[226] = new Action226();
		RULE_ACTIONS[227] = new Action227();
		RULE_ACTIONS[228] = new Action228();
		RULE_ACTIONS[229] = new Action229();
		RULE_ACTIONS[230] = new Action230();
		RULE_ACTIONS[231] = new Action231();
		RULE_ACTIONS[232] = new Action232();
		RULE_ACTIONS[234] = new Action234();
		RULE_ACTIONS[235] = new Action235();
		RULE_ACTIONS[237] = new Action237();
		RULE_ACTIONS[238] = new Action238();
		RULE_ACTIONS[239] = new Action239();
		RULE_ACTIONS[240] = new Action240();
		RULE_ACTIONS[241] = new Action241();
		RULE_ACTIONS[242] = new Action242();
		RULE_ACTIONS[243] = new Action243();
		RULE_ACTIONS[244] = new Action244();
		RULE_ACTIONS[245] = new Action245();
		RULE_ACTIONS[246] = new Action246();
		RULE_ACTIONS[247] = new Action247();
		RULE_ACTIONS[248] = new Action248();
		RULE_ACTIONS[250] = new Action250();
		RULE_ACTIONS[251] = new Action251();
		RULE_ACTIONS[252] = new Action252();
		RULE_ACTIONS[253] = new Action253();
		RULE_ACTIONS[256] = new Action256();
		RULE_ACTIONS[257] = new Action257();
		RULE_ACTIONS[258] = new Action258();
		RULE_ACTIONS[261] = new Action261();
		RULE_ACTIONS[262] = new Action262();
		RULE_ACTIONS[263] = new Action263();
		RULE_ACTIONS[264] = new Action264();
		RULE_ACTIONS[265] = new Action265();
		RULE_ACTIONS[266] = new Action266();
		RULE_ACTIONS[268] = new Action268();
		RULE_ACTIONS[269] = new Action269();
		RULE_ACTIONS[273] = new Action273();
		RULE_ACTIONS[274] = new Action274();
		RULE_ACTIONS[275] = new Action275();
		RULE_ACTIONS[276] = new Action276();
		RULE_ACTIONS[277] = new Action277();
		RULE_ACTIONS[278] = new Action278();
		RULE_ACTIONS[279] = new Action279();
		RULE_ACTIONS[280] = new Action280();
		RULE_ACTIONS[281] = new Action281();
		RULE_ACTIONS[282] = new Action282();
		RULE_ACTIONS[287] = new Action287();
		RULE_ACTIONS[291] = new Action291();
		RULE_ACTIONS[292] = new Action292();
		RULE_ACTIONS[293] = new Action293();
		RULE_ACTIONS[294] = new Action294();
		RULE_ACTIONS[295] = new Action295();
		RULE_ACTIONS[296] = new Action296();
		RULE_ACTIONS[301] = new Action301();
		RULE_ACTIONS[302] = new Action302();
		RULE_ACTIONS[305] = new Action305();
		RULE_ACTIONS[306] = new Action306();
		RULE_ACTIONS[307] = new Action307();
		RULE_ACTIONS[308] = new Action308();
		RULE_ACTIONS[309] = new Action309();


		//
		// Make sure that all elements of ruleAction are properly initialized
		//
		for (int i = 0; i < RULE_ACTIONS.length; i++) {
			if (RULE_ACTIONS[i] == null) {
				RULE_ACTIONS[i] = emptyAction();
			}
		}
	}
 
	//
	// Rule 1:  <openscope-ast> ::= $Empty
	//
	static final class Action1 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  openASTScope();   /* action.builder.getASTStack().print();*/ 
		}  
	}
 
	//
	// Rule 2:  <openscope-symbol> ::= $Empty
	//
	static final class Action2 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  openSymbolScope();   
		return hasUndo;
		} 
	
		public Action2() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}
 
	}
 
	//
	// Rule 3:  <openscope-declaration> ::= $Empty
	//
	static final class Action3 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  openDeclarationScope();   
		return hasUndo;
		} 
	
		public Action3() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}
 
	}
  
	//
	// Rule 12:  literal ::= integer
	//
	static final class Action12 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionLiteral(IASTLiteralExpression.lk_integer_constant);   /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 13:  literal ::= floating
	//
	static final class Action13 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionLiteral(IASTLiteralExpression.lk_float_constant);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 14:  literal ::= charconst
	//
	static final class Action14 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionLiteral(IASTLiteralExpression.lk_char_constant);     /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 15:  literal ::= stringlit
	//
	static final class Action15 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionLiteral(IASTLiteralExpression.lk_string_literal);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 17:  primary_expression ::= primary_expression_id
	//
	static final class Action17 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionID();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 18:  primary_expression ::= ( expression )
	//
	static final class Action18 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBracketed();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 22:  postfix_expression ::= postfix_expression [ expression ]
	//
	static final class Action22 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionArraySubscript();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 23:  postfix_expression ::= postfix_expression ( expression_list_opt )
	//
	static final class Action23 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionFunctionCall();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 24:  postfix_expression ::= postfix_expression . member_name
	//
	static final class Action24 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionFieldReference(false);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 25:  postfix_expression ::= postfix_expression -> member_name
	//
	static final class Action25 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionFieldReference(true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 26:  postfix_expression ::= postfix_expression ++
	//
	static final class Action26 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
    consumeExpressionUnaryOperator(IASTUnaryExpression.op_postFixIncr);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 27:  postfix_expression ::= postfix_expression --
	//
	static final class Action27 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_postFixDecr);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 28:  postfix_expression ::= ( type_name ) { <openscope-ast> initializer_list comma_opt }
	//
	static final class Action28 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionTypeIdInitializer();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 35:  unary_expression ::= ++ unary_expression
	//
	static final class Action35 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_prefixIncr);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 36:  unary_expression ::= -- unary_expression
	//
	static final class Action36 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_prefixDecr);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 37:  unary_expression ::= & cast_expression
	//
	static final class Action37 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_amper);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 38:  unary_expression ::= * cast_expression
	//
	static final class Action38 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_star);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 39:  unary_expression ::= + cast_expression
	//
	static final class Action39 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_plus);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 40:  unary_expression ::= - cast_expression
	//
	static final class Action40 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_minus);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 41:  unary_expression ::= ~ cast_expression
	//
	static final class Action41 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_tilde);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 42:  unary_expression ::= ! cast_expression
	//
	static final class Action42 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_not);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 43:  unary_expression ::= sizeof unary_expression
	//
	static final class Action43 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_sizeof);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 44:  unary_expression ::= sizeof ( type_name )
	//
	static final class Action44 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionTypeId(IASTTypeIdExpression.op_sizeof);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 46:  cast_expression ::= ( type_name ) cast_expression
	//
	static final class Action46 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionCast(IASTCastExpression.op_cast);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 48:  multiplicative_expression ::= multiplicative_expression * cast_expression
	//
	static final class Action48 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_multiply);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 49:  multiplicative_expression ::= multiplicative_expression / cast_expression
	//
	static final class Action49 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_divide);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 50:  multiplicative_expression ::= multiplicative_expression % cast_expression
	//
	static final class Action50 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_modulo);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 52:  additive_expression ::= additive_expression + multiplicative_expression
	//
	static final class Action52 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_plus);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 53:  additive_expression ::= additive_expression - multiplicative_expression
	//
	static final class Action53 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_minus);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 55:  shift_expression ::= shift_expression << additive_expression
	//
	static final class Action55 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_shiftLeft);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 56:  shift_expression ::= shift_expression >> additive_expression
	//
	static final class Action56 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_shiftRight);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 58:  relational_expression ::= relational_expression < shift_expression
	//
	static final class Action58 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_lessThan);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 59:  relational_expression ::= relational_expression > shift_expression
	//
	static final class Action59 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_greaterThan);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 60:  relational_expression ::= relational_expression <= shift_expression
	//
	static final class Action60 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_lessEqual);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 61:  relational_expression ::= relational_expression >= shift_expression
	//
	static final class Action61 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_greaterEqual);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 63:  equality_expression ::= equality_expression == relational_expression
	//
	static final class Action63 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_equals);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 64:  equality_expression ::= equality_expression != relational_expression
	//
	static final class Action64 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_notequals);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 66:  AND_expression ::= AND_expression & equality_expression
	//
	static final class Action66 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryAnd);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 68:  exclusive_OR_expression ::= exclusive_OR_expression ^ AND_expression
	//
	static final class Action68 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryXor);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 70:  inclusive_OR_expression ::= inclusive_OR_expression | exclusive_OR_expression
	//
	static final class Action70 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryOr);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 72:  logical_AND_expression ::= logical_AND_expression && inclusive_OR_expression
	//
	static final class Action72 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_logicalAnd);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 74:  logical_OR_expression ::= logical_OR_expression || logical_AND_expression
	//
	static final class Action74 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_logicalOr);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 76:  conditional_expression ::= logical_OR_expression ? expression : conditional_expression
	//
	static final class Action76 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionConditional();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 78:  assignment_expression ::= unary_expression = assignment_expression
	//
	static final class Action78 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_assign);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 79:  assignment_expression ::= unary_expression *= assignment_expression
	//
	static final class Action79 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_multiplyAssign);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 80:  assignment_expression ::= unary_expression /= assignment_expression
	//
	static final class Action80 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_divideAssign);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 81:  assignment_expression ::= unary_expression %= assignment_expression
	//
	static final class Action81 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_moduloAssign);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 82:  assignment_expression ::= unary_expression += assignment_expression
	//
	static final class Action82 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_plusAssign);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 83:  assignment_expression ::= unary_expression -= assignment_expression
	//
	static final class Action83 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_minusAssign);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 84:  assignment_expression ::= unary_expression <<= assignment_expression
	//
	static final class Action84 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_shiftLeftAssign);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 85:  assignment_expression ::= unary_expression >>= assignment_expression
	//
	static final class Action85 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_shiftRightAssign);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 86:  assignment_expression ::= unary_expression &= assignment_expression
	//
	static final class Action86 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryAndAssign);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 87:  assignment_expression ::= unary_expression ^= assignment_expression
	//
	static final class Action87 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryXorAssign);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 88:  assignment_expression ::= unary_expression |= assignment_expression
	//
	static final class Action88 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(IASTBinaryExpression.op_binaryOrAssign);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 91:  expression_list ::= <openscope-ast> expression_list_actual
	//
	static final class Action91 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeExpressionList();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 93:  expression_list_opt ::= $Empty
	//
	static final class Action93 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeEmpty();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 103:  statement ::= ERROR_TOKEN
	//
	static final class Action103 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStatementProblem();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 104:  labeled_statement ::= identifier_or_typedefname : statement
	//
	static final class Action104 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStatementLabeled();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 105:  labeled_statement ::= case constant_expression :
	//
	static final class Action105 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStatementCase();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 106:  labeled_statement ::= default :
	//
	static final class Action106 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStatementDefault();    /* action.builder.getASTStack().print();*/ 
		}  
	}  

     
	//
	// Rule 107:  compound_statement ::= <openscope-symbol> { }
	//
	static final class Action107 extends DeclaredAction< C99ParserAction ,  Object > {
		
       
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  closeSymbolScope();   
		return hasUndo;
		} 
	
		public Action107() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}

       
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeStatementCompoundStatement(false);   /* action.builder.getASTStack().print();*/ 
		} 
    
	}
  
     
	//
	// Rule 108:  compound_statement ::= <openscope-symbol> { <openscope-ast> block_item_list }
	//
	static final class Action108 extends DeclaredAction< C99ParserAction ,  Object > {
		
  	   
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  closeSymbolScope();   
		return hasUndo;
		} 
	
		public Action108() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}

  	   
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeStatementCompoundStatement(true);   /* action.builder.getASTStack().print();*/ 
		} 
    
	}
    
	//
	// Rule 112:  block_item ::= declaration
	//
	static final class Action112 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStatementDeclaration();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 113:  expression_statement ::= ;
	//
	static final class Action113 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStatementNull();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 114:  expression_statement ::= expression_in_statement ;
	//
	static final class Action114 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStatementExpression();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 115:  selection_statement ::= if ( expression ) statement
	//
	static final class Action115 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStatementIf(false);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 116:  selection_statement ::= if ( expression ) statement else statement
	//
	static final class Action116 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStatementIf(true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 117:  selection_statement ::= switch ( expression ) statement
	//
	static final class Action117 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStatementSwitch();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 119:  expression_opt ::= $Empty
	//
	static final class Action119 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeEmpty();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 120:  iteration_statement ::= do statement while ( expression ) ;
	//
	static final class Action120 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStatementDoLoop();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 121:  iteration_statement ::= while ( expression ) statement
	//
	static final class Action121 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStatementWhileLoop();    /* action.builder.getASTStack().print();*/ 
		}  
	}  

     
	//
	// Rule 122:  iteration_statement ::= <openscope-symbol> for ( expression_opt ; expression_opt ; expression_opt ) statement
	//
	static final class Action122 extends DeclaredAction< C99ParserAction ,  Object > {
		
  	   
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  closeSymbolScope();   
		return hasUndo;
		} 
	
		public Action122() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}

  	   
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeStatementForLoop();   /* action.builder.getASTStack().print();*/ 
		} 
    
	}
  
     
	//
	// Rule 123:  iteration_statement ::= <openscope-symbol> for ( declaration expression_opt ; expression_opt ) statement
	//
	static final class Action123 extends DeclaredAction< C99ParserAction ,  Object > {
		
  	   
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  closeSymbolScope();   
		return hasUndo;
		} 
	
		public Action123() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}

  	   
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeStatementForLoop();   /* action.builder.getASTStack().print();*/ 
		} 
    
	}
    
	//
	// Rule 124:  jump_statement ::= goto identifier_or_typedefname ;
	//
	static final class Action124 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStatementGoto();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 125:  jump_statement ::= continue ;
	//
	static final class Action125 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStatementContinue();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 126:  jump_statement ::= break ;
	//
	static final class Action126 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStatementBreak();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 127:  jump_statement ::= return ;
	//
	static final class Action127 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStatementReturn(false);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 128:  jump_statement ::= return expression ;
	//
	static final class Action128 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStatementReturn(true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  

     
	//
	// Rule 129:  declaration ::= declaration_specifiers ;
	//
	static final class Action129 extends DeclaredAction< C99ParserAction ,  Object > {
		
  	   
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  closeDeclarationScope();     
		return hasUndo;
		} 
	
		public Action129() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}

  	   
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeDeclarationSimple(false);   /* action.builder.getASTStack().print();*/ 
		} 
    
	}
  
     
	//
	// Rule 130:  declaration ::= declaration_specifiers <openscope-ast> init_declarator_list ;
	//
	static final class Action130 extends DeclaredAction< C99ParserAction ,  Object > {
		
  	   
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  closeDeclarationScope();    
		return hasUndo;
		} 
	
		public Action130() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}

  	   
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeDeclarationSimple(true);   /* action.builder.getASTStack().print();*/ 
		} 
    
	}
    
	//
	// Rule 131:  declaration_specifiers ::= <openscope-declaration> <openscope-ast> simple_declaration_specifiers
	//
	static final class Action131 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDeclarationSpecifiersSimple();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 132:  declaration_specifiers ::= <openscope-declaration> <openscope-ast> struct_or_union_declaration_specifiers
	//
	static final class Action132 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDeclarationSpecifiersStructUnionEnum();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 133:  declaration_specifiers ::= <openscope-declaration> <openscope-ast> elaborated_declaration_specifiers
	//
	static final class Action133 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDeclarationSpecifiersStructUnionEnum();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 134:  declaration_specifiers ::= <openscope-declaration> <openscope-ast> enum_declaration_specifiers
	//
	static final class Action134 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDeclarationSpecifiersStructUnionEnum();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 135:  declaration_specifiers ::= <openscope-declaration> <openscope-ast> typdef_name_declaration_specifiers
	//
	static final class Action135 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDeclarationSpecifiersTypedefName();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 160:  init_declarator ::= complete_declarator = initializer
	//
	static final class Action160 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDeclaratorWithInitializer(true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  

     
	//
	// Rule 161:  complete_declarator ::= declarator
	//
	static final class Action161 extends DeclaredAction< C99ParserAction ,  Object > {
		 
       
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  consumeDeclaratorComplete();   
		return hasUndo;
		} 
	
		public Action161() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}

    
	}
  
     
	//
	// Rule 162:  storage_class_specifier ::= storage_class_specifier_token
	//
	static final class Action162 extends DeclaredAction< C99ParserAction ,  Object > {
		
       
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  consumeDeclSpecToken();   
		return hasUndo;
		} 
	
		public Action162() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}
 
       
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeDeclSpecToken();   /* action.builder.getASTStack().print();*/ 
		}  
    
	}
  
     
	//
	// Rule 168:  simple_type_specifier ::= simple_type_specifier_token
	//
	static final class Action168 extends DeclaredAction< C99ParserAction ,  Object > {
		
       
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  consumeDeclSpecToken();   
		return hasUndo;
		} 
	
		public Action168() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}
 
       
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeDeclSpecToken();   /* action.builder.getASTStack().print();*/ 
		}  
    
	}
  
     
	//
	// Rule 181:  typedef_name_in_declspec ::= TypedefName
	//
	static final class Action181 extends DeclaredAction< C99ParserAction ,  Object > {
		
       
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  consumeDeclSpecToken();   
		return hasUndo;
		} 
	
		public Action181() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}
 
       
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeDeclSpecToken();   /* action.builder.getASTStack().print();*/ 
		}  
    
	}
  
     
	//
	// Rule 182:  typedef_name_in_declspec ::= Completion
	//
	static final class Action182 extends DeclaredAction< C99ParserAction ,  Object > {
		
       
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  consumeDeclSpecToken();   
		return hasUndo;
		} 
	
		public Action182() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}
 
       
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeDeclSpecToken();   /* action.builder.getASTStack().print();*/ 
		}  
    
	}
    
	//
	// Rule 186:  struct_or_union_specifier ::= struct { <openscope-ast> struct_declaration_list_opt }
	//
	static final class Action186 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeTypeSpecifierComposite(false, IASTCompositeTypeSpecifier.k_struct);   /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 187:  struct_or_union_specifier ::= union { <openscope-ast> struct_declaration_list_opt }
	//
	static final class Action187 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeTypeSpecifierComposite(false, IASTCompositeTypeSpecifier.k_union);   /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 188:  struct_or_union_specifier ::= struct identifier_or_typedefname { <openscope-ast> struct_declaration_list_opt }
	//
	static final class Action188 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeTypeSpecifierComposite(true, IASTCompositeTypeSpecifier.k_struct);   /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 189:  struct_or_union_specifier ::= union identifier_or_typedefname { <openscope-ast> struct_declaration_list_opt }
	//
	static final class Action189 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeTypeSpecifierComposite(true, IASTCompositeTypeSpecifier.k_union);   /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 190:  elaborated_specifier ::= struct identifier_or_typedefname
	//
	static final class Action190 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeTypeSpecifierElaborated(IASTCompositeTypeSpecifier.k_struct);   /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 191:  elaborated_specifier ::= union identifier_or_typedefname
	//
	static final class Action191 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeTypeSpecifierElaborated(IASTCompositeTypeSpecifier.k_union);   /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 192:  elaborated_specifier ::= enum identifier_or_typedefname
	//
	static final class Action192 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeTypeSpecifierElaborated(IASTElaboratedTypeSpecifier.k_enum);   /* action.builder.getASTStack().print();*/ 
		}  
	}  

     
	//
	// Rule 197:  struct_declaration ::= specifier_qualifier_list <openscope-ast> struct_declarator_list ;
	//
	static final class Action197 extends DeclaredAction< C99ParserAction ,  Object > {
		
  	   
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  closeDeclarationScope();   
		return hasUndo;
		} 
	
		public Action197() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}

  	   
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeStructDeclaration(true);   /* action.builder.getASTStack().print();*/ 
		} 
    
	}
  
     
	//
	// Rule 198:  struct_declaration ::= specifier_qualifier_list ;
	//
	static final class Action198 extends DeclaredAction< C99ParserAction ,  Object > {
		
  	   
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  closeDeclarationScope();   
		return hasUndo;
		} 
	
		public Action198() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}

  	   
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeStructDeclaration(false);   /* action.builder.getASTStack().print();*/ 
		} 
    
	}
  
     
	//
	// Rule 202:  complete_struct_declarator ::= struct_declarator
	//
	static final class Action202 extends DeclaredAction< C99ParserAction ,  Object > {
		 
       
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  consumeDeclaratorCompleteField();   
		return hasUndo;
		} 
	
		public Action202() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}
 
    
	}
    
	//
	// Rule 204:  struct_declarator ::= : constant_expression
	//
	static final class Action204 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStructBitField(false);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 205:  struct_declarator ::= declarator : constant_expression
	//
	static final class Action205 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStructBitField(true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 206:  enum_specifier ::= enum { <openscope-ast> enumerator_list_opt comma_opt }
	//
	static final class Action206 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeTypeSpecifierEnumeration(false);   /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 207:  enum_specifier ::= enum identifier_or_typedefname { <openscope-ast> enumerator_list_opt comma_opt }
	//
	static final class Action207 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeTypeSpecifierEnumeration(true);   /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 212:  enumerator ::= identifier_or_typedefname
	//
	static final class Action212 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeEnumerator(false);   /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 213:  enumerator ::= identifier_or_typedefname = constant_expression
	//
	static final class Action213 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeEnumerator(true);   /* action.builder.getASTStack().print();*/ 
		}  
	}  

     
	//
	// Rule 214:  type_qualifier ::= type_qualifier_token
	//
	static final class Action214 extends DeclaredAction< C99ParserAction ,  Object > {
		
       
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  consumeDeclSpecToken();   
		return hasUndo;
		} 
	
		public Action214() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}
 
       
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeDeclSpecToken();   /* action.builder.getASTStack().print();*/ 
		}  
    
	}
   
	//
	// Rule 218:  function_specifier ::= inline
	//
	static final class Action218 extends DeclaredAction< C99ParserAction ,  Object > {
		 
       
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  consumeDeclSpecToken();   
		return hasUndo;
		} 
	
		public Action218() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}
 
       
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeDeclSpecToken();   /* action.builder.getASTStack().print();*/ 
		}  
    
	}
    
	//
	// Rule 220:  declarator ::= <openscope-ast> pointer_seq direct_declarator
	//
	static final class Action220 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDeclaratorWithPointer(true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  

     
	//
	// Rule 225:  basic_direct_declarator ::= declarator_id_name
	//
	static final class Action225 extends DeclaredAction< C99ParserAction ,  Object > {
		
  	   
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  consumeDirectDeclaratorIdentifier();   
		return hasUndo;
		} 
	
		public Action225() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}

  	   
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeDirectDeclaratorIdentifier();   /* action.builder.getASTStack().print();*/ 
		} 
    
	}
    
	//
	// Rule 226:  basic_direct_declarator ::= ( declarator )
	//
	static final class Action226 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorBracketed();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 227:  declarator_id_name ::= identifier
	//
	static final class Action227 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeIdentifierName();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 228:  array_direct_declarator ::= basic_direct_declarator array_modifier
	//
	static final class Action228 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorArrayDeclarator(true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 229:  array_direct_declarator ::= array_direct_declarator array_modifier
	//
	static final class Action229 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorArrayDeclarator(true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
 
	//
	// Rule 230:  function_prototype_direct_declarator ::= function_direct_declarator
	//
	static final class Action230 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
   closeSymbolScope();   
		return hasUndo;
		} 
	
		public Action230() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}
 
	}
  
	//
	// Rule 231:  function_direct_declarator ::= basic_direct_declarator ( <openscope-symbol> <openscope-ast> parameter_type_list )
	//
	static final class Action231 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorFunctionDeclarator(true, true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 232:  function_direct_declarator ::= basic_direct_declarator ( <openscope-symbol> )
	//
	static final class Action232 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorFunctionDeclarator(true, false);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 234:  function_declarator ::= <openscope-ast> pointer_seq function_direct_declarator
	//
	static final class Action234 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDeclaratorWithPointer(true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 235:  knr_direct_declarator ::= basic_direct_declarator ( <openscope-symbol> <openscope-ast> identifier_list )
	//
	static final class Action235 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorFunctionDeclaratorKnR();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 237:  knr_function_declarator ::= <openscope-ast> pointer_seq knr_direct_declarator
	//
	static final class Action237 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDeclaratorWithPointer(true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 238:  identifier_list ::= identifier
	//
	static final class Action238 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeIdentifierKnR();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 239:  identifier_list ::= identifier_list , identifier
	//
	static final class Action239 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeIdentifierKnR();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 240:  array_modifier ::= [ ]
	//
	static final class Action240 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorArrayModifier(false);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 241:  array_modifier ::= [ <openscope-ast> array_modifier_type_qualifiers ]
	//
	static final class Action241 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorModifiedArrayModifier(false, false, true, false);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 242:  array_modifier ::= [ assignment_expression ]
	//
	static final class Action242 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorArrayModifier(true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 243:  array_modifier ::= [ <openscope-ast> array_modifier_type_qualifiers assignment_expression ]
	//
	static final class Action243 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorModifiedArrayModifier(false, false, true, true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 244:  array_modifier ::= [ static assignment_expression ]
	//
	static final class Action244 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorModifiedArrayModifier(true, false, false, true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 245:  array_modifier ::= [ static <openscope-ast> array_modifier_type_qualifiers assignment_expression ]
	//
	static final class Action245 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorModifiedArrayModifier(true, false, true, true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 246:  array_modifier ::= [ <openscope-ast> array_modifier_type_qualifiers static assignment_expression ]
	//
	static final class Action246 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorModifiedArrayModifier(true, false, true, true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 247:  array_modifier ::= [ * ]
	//
	static final class Action247 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorModifiedArrayModifier(false, true, false, false);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 248:  array_modifier ::= [ <openscope-ast> array_modifier_type_qualifiers * ]
	//
	static final class Action248 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorModifiedArrayModifier(false, true, true, false);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 250:  pointer_seq ::= *
	//
	static final class Action250 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumePointer();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 251:  pointer_seq ::= pointer_seq *
	//
	static final class Action251 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumePointer();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 252:  pointer_seq ::= * <openscope-ast> type_qualifier_list
	//
	static final class Action252 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumePointerTypeQualifierList();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 253:  pointer_seq ::= pointer_seq * <openscope-ast> type_qualifier_list
	//
	static final class Action253 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumePointerTypeQualifierList();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 256:  parameter_type_list ::= parameter_list
	//
	static final class Action256 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeEmpty();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 257:  parameter_type_list ::= parameter_list , ...
	//
	static final class Action257 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumePlaceHolder();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 258:  parameter_type_list ::= ...
	//
	static final class Action258 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumePlaceHolder();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 261:  parameter_declaration ::= declaration_specifiers complete_parameter_declarator
	//
	static final class Action261 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeParameterDeclaration();    /* action.builder.getASTStack().print();*/ 
		}  
	}  

     
	//
	// Rule 262:  parameter_declaration ::= declaration_specifiers
	//
	static final class Action262 extends DeclaredAction< C99ParserAction ,  Object > {
		
  	   
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  consumeParameterDeclarationWithoutDeclarator();   
		return hasUndo;
		} 
	
		public Action262() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}

  	   
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeParameterDeclarationWithoutDeclarator();   /* action.builder.getASTStack().print();*/ 
		} 
    
	}
  
     
	//
	// Rule 263:  complete_parameter_declarator ::= declarator
	//
	static final class Action263 extends DeclaredAction< C99ParserAction ,  Object > {
		
  	   
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  consumeDeclaratorCompleteParameter();   
		return hasUndo;
		} 
	
		public Action263() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}

    
	}
  
     
	//
	// Rule 264:  complete_parameter_declarator ::= abstract_declarator
	//
	static final class Action264 extends DeclaredAction< C99ParserAction ,  Object > {
		
  	   
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  consumeDeclaratorCompleteParameter();   
		return hasUndo;
		} 
	
		public Action264() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}

    
	}
  
     
	//
	// Rule 265:  type_name ::= specifier_qualifier_list
	//
	static final class Action265 extends DeclaredAction< C99ParserAction ,  Object > {
		
  	   
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  consumeTypeId();   
		return hasUndo;
		} 
	
		public Action265() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}

  	   
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeTypeId(false);   /* action.builder.getASTStack().print();*/ 
		} 
    
	}
  
     
	//
	// Rule 266:  type_name ::= specifier_qualifier_list abstract_declarator
	//
	static final class Action266 extends DeclaredAction< C99ParserAction ,  Object > {
		
  	   
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  consumeTypeId();   
		return hasUndo;
		} 
	
		public Action266() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}

  	   
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeTypeId(true);   /* action.builder.getASTStack().print();*/ 
		} 
    
	}
    
	//
	// Rule 268:  abstract_declarator ::= <openscope-ast> pointer_seq
	//
	static final class Action268 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDeclaratorWithPointer(false);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 269:  abstract_declarator ::= <openscope-ast> pointer_seq direct_abstract_declarator
	//
	static final class Action269 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDeclaratorWithPointer(false);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 273:  basic_direct_abstract_declarator ::= ( abstract_declarator )
	//
	static final class Action273 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorBracketed();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 274:  array_direct_abstract_declarator ::= array_modifier
	//
	static final class Action274 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorArrayDeclarator(false);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 275:  array_direct_abstract_declarator ::= array_direct_abstract_declarator array_modifier
	//
	static final class Action275 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorArrayDeclarator(true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 276:  array_direct_abstract_declarator ::= basic_direct_abstract_declarator array_modifier
	//
	static final class Action276 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorArrayDeclarator(true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 277:  function_direct_abstract_declarator ::= ( )
	//
	static final class Action277 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorFunctionDeclarator(false, false);    /* action.builder.getASTStack().print();*/ 
		}  
	}   
  
	//
	// Rule 278:  function_direct_abstract_declarator ::= basic_direct_abstract_declarator ( )
	//
	static final class Action278 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorFunctionDeclarator(true, false);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 279:  function_direct_abstract_declarator ::= ( <openscope-ast> parameter_type_list )
	//
	static final class Action279 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorFunctionDeclarator(false, true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 280:  function_direct_abstract_declarator ::= basic_direct_abstract_declarator ( <openscope-ast> parameter_type_list )
	//
	static final class Action280 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDirectDeclaratorFunctionDeclarator(true, true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 281:  initializer ::= assignment_expression
	//
	static final class Action281 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeInitializer();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 282:  initializer ::= { <openscope-ast> initializer_list comma_opt }
	//
	static final class Action282 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeInitializerList();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 287:  designated_initializer ::= <openscope-ast> designation = initializer
	//
	static final class Action287 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeInitializerDesignated();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 291:  designator_base ::= [ constant_expression ]
	//
	static final class Action291 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDesignatorArray();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 292:  designator_base ::= . identifier_or_typedefname
	//
	static final class Action292 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDesignatorField();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 293:  designator ::= [ constant_expression ]
	//
	static final class Action293 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDesignatorArray();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 294:  designator ::= . identifier_or_typedefname
	//
	static final class Action294 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDesignatorField();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 295:  translation_unit ::= external_declaration_list
	//
	static final class Action295 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeTranslationUnit();    /* action.builder.getASTStack().print();*/ 
		}  
	}   
  
	//
	// Rule 296:  translation_unit ::= $Empty
	//
	static final class Action296 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeTranslationUnit();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 301:  external_declaration ::= ;
	//
	static final class Action301 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDeclarationEmpty();    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 302:  external_declaration ::= ERROR_TOKEN
	//
	static final class Action302 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeDeclarationProblem();    /* action.builder.getASTStack().print();*/ 
		}  
	}  

     
	//
	// Rule 305:  function_definition ::= declaration_specifiers <openscope-ast> function_declarator function_body
	//
	static final class Action305 extends DeclaredAction< C99ParserAction ,  Object > {
		
  	   
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  consumeFunctionDefinition();   
		return hasUndo;
		} 
	
		public Action305() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}

  	   
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeFunctionDefinition(true);   /* action.builder.getASTStack().print();*/ 
		} 
    
	}
  
     
	//
	// Rule 306:  function_definition ::= <openscope-declaration> <openscope-ast> function_declarator function_body
	//
	static final class Action306 extends DeclaredAction< C99ParserAction ,  Object > {
		
  	   
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  consumeFunctionDefinition();   
		return hasUndo;
		} 
	
		public Action306() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}

  	   
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeFunctionDefinition(false);   /* action.builder.getASTStack().print();*/ 
		} 
    
	}
  
     
	//
	// Rule 307:  function_definition ::= declaration_specifiers <openscope-ast> knr_function_declarator <openscope-ast> declaration_list compound_statement
	//
	static final class Action307 extends DeclaredAction< C99ParserAction ,  Object > {
		
  	   
		public boolean doTrial(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {  action.resolver.
  consumeFunctionDefinition();   
		return hasUndo;
		} 
	
		public Action307() { hasUndo = true; };
		public void doUndo(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) { action.resolver.undo(); 
		}

  	   
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
  consumeFunctionDefinitionKnR();   /* action.builder.getASTStack().print();*/ 
		} 
    
	}
    
	//
	// Rule 308:  function_body ::= { }
	//
	static final class Action308 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStatementCompoundStatement(false);    /* action.builder.getASTStack().print();*/ 
		}  
	}  
  
	//
	// Rule 309:  function_body ::= { <openscope-ast> block_item_list }
	//
	static final class Action309 extends DeclaredAction< C99ParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  C99ParserAction  action) {   action.builder.
   consumeStatementCompoundStatement(true);    /* action.builder.getASTStack().print();*/ 
		}  
	}  

}

