/*******************************************************************************
* Copyright (c) 2006, 2007 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*******************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.c99;

public class C99Lexerprs implements lpg.lpgjavaruntime.ParseTable, C99Lexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2,2,2,1,1,1,1,1,
            1,1,1,2,2,1,1,2,2,2,
            2,1,1,2,2,1,1,1,3,1,
            2,2,2,2,2,3,3,2,2,2,
            1,1,2,2,2,2,2,2,4,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2,
            2,2,5,1,2,3,2,2,0,1,
            2,2,1,1,3,4,4,1,2,1,
            2,1,2,2,2,1,2,2,1,2,
            1,2,1,1,1,1,2,2,1,1,
            1,2,3,2,2,3,3,4,3,4,
            1,2,2,2,3,3,2,3,2,1,
            1,2,2,3,3,2,3,2,1,2,
            1,1,1,1,3,4,1,2,1,1,
            1,1,1,1,2,2,2,2,2,2,
            2,2,2,2,2,2,3,2,3,3,
            4,1,2,1,1
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,23,23,1,1,1,1,1,1,
            1,1,1,1,37,37,37,37,37,37,
            37,37,3,3,3,3,3,3,3,3,
            3,3,3,3,3,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,38,
            38,38,38,38,38,12,12,12,12,12,
            12,12,12,12,12,13,13,13,13,13,
            13,13,13,13,13,14,14,14,14,39,
            39,39,39,39,39,39,24,24,24,24,
            24,24,24,24,24,31,31,31,31,40,
            40,41,41,42,44,44,43,43,43,43,
            32,32,32,25,25,6,6,19,33,33,
            33,33,45,46,47,47,26,26,26,26,
            26,26,26,15,15,21,21,22,22,34,
            34,48,48,48,48,48,48,49,49,49,
            49,5,5,50,50,50,27,27,27,27,
            16,16,51,51,51,28,28,28,28,20,
            20,11,11,11,11,35,35,29,29,17,
            17,7,7,7,7,8,8,8,8,8,
            8,8,8,8,8,8,9,10,36,36,
            36,36,30,30,18,18,199,576,112,1411,
            363,355,234,1201,363,394,175,176,1565,177,
            581,304,324,301,302,303,98,325,197,233,
            1105,230,220,322,1077,1369,272,348,499,2,
            3,4,5,1422,272,424,338,491,218,1211,
            316,519,517,511,259,260,369,970,185,186,
            264,187,435,304,299,301,302,303,1159,484,
            300,682,175,176,297,177,402,304,324,301,
            302,303,1380,325,1245,132,443,317,1229,322,
            970,185,186,263,187,1265,304,299,301,302,
            303,457,1612,300,490,175,176,297,177,1561,
            304,324,301,302,303,1574,325,1313,132,470,
            290,1569,323,586,185,186,266,187,1614,304,
            299,301,302,303,1186,1615,300,778,175,176,
            298,177,1592,304,324,301,302,303,1613,325,
            874,185,186,268,187,323,304,299,301,302,
            303,1361,462,300,1,206,207,298,208,1440,
            624,298,199,200,624,169,252,1266,209,1066,
            232,112,100,206,207,234,208,1590,228,1462,
            272,1172,132,1570,289,1296,209,1562,1389,1564,
            1398,509,233,1210,231,509,226,1150,502,202,
            222,550,572,250,572,1596,591,1616,518,481,
            518,481,1617,241,1053,239,270,1398,622,1215,
            1139,132,622,290,1245,132,1153,289,1245,132,
            1618,600,454,597,1245,132,1300,600,1398,630,
            1398,632,1094,630,437,632,1259,587,535,1285,
            132,1299,289,235,604,640,607,1245,132,640,
            600,1451,626,247,248,640,626,1451,628,610,
            1245,132,628,614,1451,634,236,1451,636,634,
            1341,132,636,290,1245,132,640,618,1245,132,
            640,237,1473,272,1484,272,1495,272,1506,272,
            1517,272,1528,272,1539,272,1550,272,640,640
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,0,98,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,87,88,89,90,
            91,92,93,94,95,96,0,98,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,78,79,80,81,
            82,83,84,85,86,87,88,89,90,91,
            92,93,94,97,96,0,98,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,61,62,63,64,65,66,
            67,68,69,70,71,72,73,74,75,76,
            77,78,79,80,81,82,83,84,85,86,
            87,88,89,90,91,92,93,94,95,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,87,88,89,90,
            91,92,93,94,95,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,39,40,41,42,43,44,
            45,46,47,48,49,50,51,52,53,54,
            55,56,57,58,59,60,61,62,63,64,
            65,66,67,68,69,70,71,72,73,74,
            75,76,77,78,79,80,81,82,83,84,
            85,86,87,88,89,90,91,92,93,94,
            95,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,61,62,63,64,65,66,67,68,
            69,70,71,72,73,74,75,76,77,78,
            79,80,81,82,83,84,85,86,87,88,
            89,90,91,92,93,94,95,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,61,62,63,64,65,66,
            67,68,69,70,71,72,73,74,75,76,
            77,78,79,80,81,82,83,84,85,86,
            87,88,89,90,91,92,93,94,95,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,0,84,85,86,87,88,89,90,
            91,92,93,94,95,0,1,2,3,4,
            5,6,7,8,9,10,0,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,0,42,30,31,32,0,34,
            35,36,37,38,0,29,41,14,15,44,
            45,46,47,48,49,50,51,52,53,54,
            55,56,57,58,59,60,61,62,63,64,
            65,66,67,68,69,70,71,72,0,1,
            2,3,4,5,6,7,8,9,10,0,
            12,13,0,0,16,17,18,19,0,0,
            22,23,24,25,26,27,28,15,30,11,
            32,0,1,2,3,4,5,6,7,8,
            9,10,0,12,13,0,82,16,17,18,
            19,0,43,22,23,24,25,26,27,28,
            0,1,2,3,4,5,6,7,8,0,
            0,0,12,0,0,30,0,32,18,19,
            20,21,12,13,14,15,16,17,0,20,
            21,31,83,0,34,35,36,37,80,11,
            0,41,28,43,0,1,2,3,4,5,
            6,7,8,9,10,0,12,13,0,0,
            16,17,18,19,0,0,22,23,24,25,
            26,27,14,15,0,11,11,0,20,21,
            0,81,0,83,0,1,2,3,4,5,
            6,7,8,9,10,0,12,13,0,0,
            16,17,18,19,39,0,22,23,24,25,
            26,27,0,1,2,3,4,5,6,7,
            8,9,10,0,12,13,31,0,16,17,
            18,19,33,38,22,23,24,25,26,27,
            0,1,2,3,4,5,6,7,8,9,
            10,0,12,13,0,97,16,17,18,19,
            0,0,22,23,24,25,26,27,0,1,
            2,3,4,5,6,7,8,9,10,0,
            20,21,0,0,16,17,0,0,0,0,
            0,12,13,14,15,97,28,0,1,2,
            3,4,5,6,7,8,9,10,20,21,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,0,0,0,39,40,28,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,0,0,0,0,0,0,0,0,0,
            0,11,0,0,0,14,15,14,15,11,
            11,20,21,20,21,12,13,14,15,0,
            0,0,0,33,0,0,0,29,0,0,
            11,33,42,12,13,14,15,12,13,14,
            15,0,0,0,0,0,0,0,29,0,
            0,0,11,11,11,11,11,11,0,40,
            0,14,0,0,0,0,76,73,74,75,
            29,0,0,0,0,0,77,78,0,0,
            0,0,0,0,0,0,0,0,0,0,
            96,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,79,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            640,754,755,756,757,758,759,760,761,762,
            763,798,705,731,711,737,704,730,700,701,
            720,746,702,703,726,727,728,729,794,799,
            715,723,741,795,713,717,719,721,749,791,
            793,853,787,852,706,707,708,709,710,712,
            714,716,718,722,724,725,732,733,734,735,
            736,738,739,740,742,743,744,745,747,748,
            750,751,804,835,837,838,797,867,502,788,
            806,800,786,851,789,790,801,802,805,807,
            808,785,803,796,792,850,836,229,854,640,
            754,755,756,757,758,759,760,761,762,763,
            798,705,731,711,737,704,730,700,701,720,
            746,702,703,726,727,728,729,794,799,715,
            723,741,795,713,717,719,721,749,791,793,
            853,787,852,706,707,708,709,710,712,714,
            716,718,722,724,725,732,733,734,735,736,
            738,739,740,742,743,744,745,747,748,750,
            751,804,835,837,838,797,863,865,788,806,
            800,786,851,789,790,801,802,805,807,808,
            785,803,796,792,850,836,640,854,640,515,
            755,756,757,758,759,760,761,762,763,415,
            705,731,711,527,704,730,700,701,720,746,
            702,703,726,727,728,729,329,422,715,723,
            741,354,713,717,719,721,749,497,507,523,
            441,335,706,707,708,709,710,712,714,716,
            718,722,724,725,732,733,734,735,736,738,
            739,740,742,743,744,745,747,748,750,751,
            753,835,837,838,429,513,455,468,388,676,
            350,377,648,649,646,647,650,651,660,448,
            408,678,691,639,836,640,855,217,754,755,
            756,757,758,759,760,761,762,763,798,705,
            731,711,737,704,730,700,701,720,746,702,
            703,726,727,728,729,794,799,715,723,741,
            795,713,717,719,721,749,791,793,812,787,
            811,706,707,708,709,710,712,714,716,718,
            722,724,725,732,733,734,735,736,738,739,
            740,742,743,744,745,747,748,750,751,804,
            845,843,844,797,813,814,788,806,800,786,
            810,789,790,801,802,805,807,808,785,803,
            796,792,841,640,754,755,756,757,758,759,
            760,761,762,763,798,705,731,711,737,704,
            730,700,701,720,746,702,703,726,727,728,
            729,794,799,715,723,741,795,713,717,719,
            721,749,791,793,333,787,958,706,707,708,
            709,710,712,714,716,718,722,724,725,732,
            733,734,735,736,738,739,740,742,743,744,
            745,747,748,750,751,804,824,822,823,797,
            820,821,788,806,800,786,819,789,790,801,
            802,805,807,808,785,803,796,792,818,640,
            754,755,756,757,758,759,760,761,762,763,
            798,705,731,711,737,704,730,700,701,720,
            746,702,703,726,727,728,729,794,799,715,
            723,741,795,713,717,719,721,749,791,793,
            333,787,959,706,707,708,709,710,712,714,
            716,718,722,724,725,732,733,734,735,736,
            738,739,740,742,743,744,745,747,748,750,
            751,804,824,822,823,797,820,821,788,806,
            800,786,819,789,790,801,802,805,807,808,
            785,803,796,792,818,640,754,755,756,757,
            758,759,760,761,762,763,798,705,731,711,
            737,704,730,700,701,720,746,702,703,726,
            727,728,729,794,799,715,723,741,795,713,
            717,719,721,749,791,793,333,787,829,706,
            707,708,709,710,712,714,716,718,722,724,
            725,732,733,734,735,736,738,739,740,742,
            743,744,745,747,748,750,751,804,834,832,
            833,797,830,831,788,806,800,786,935,789,
            790,801,802,805,807,808,785,803,796,792,
            828,640,754,755,756,757,758,759,760,761,
            762,763,798,705,731,711,737,704,730,700,
            701,720,746,702,703,726,727,728,729,794,
            799,715,723,741,795,713,717,719,721,749,
            791,793,333,787,960,706,707,708,709,710,
            712,714,716,718,722,724,725,732,733,734,
            735,736,738,739,740,742,743,744,745,747,
            748,750,751,804,824,822,823,797,820,821,
            788,806,800,786,819,789,790,801,802,805,
            807,808,785,803,796,792,818,640,754,755,
            756,757,758,759,760,761,762,763,798,705,
            731,711,737,704,730,700,701,720,746,702,
            703,726,727,728,729,794,799,715,723,741,
            795,713,717,719,721,749,791,793,333,787,
            961,706,707,708,709,710,712,714,716,718,
            722,724,725,732,733,734,735,736,738,739,
            740,742,743,744,745,747,748,750,751,804,
            824,822,823,797,820,821,788,806,800,786,
            819,789,790,801,802,805,807,808,785,803,
            796,792,818,640,754,755,756,757,758,759,
            760,761,762,763,798,705,731,711,737,704,
            730,700,701,720,746,702,703,726,727,728,
            729,794,799,715,723,741,795,713,717,719,
            721,749,791,793,333,787,829,706,707,708,
            709,710,712,714,716,718,722,724,725,732,
            733,734,735,736,738,739,740,742,743,744,
            745,747,748,750,751,804,834,832,833,797,
            830,831,788,806,800,786,936,789,790,801,
            802,805,807,808,785,803,796,792,828,640,
            754,755,756,757,758,759,760,761,762,763,
            798,705,731,711,737,704,730,700,701,720,
            746,702,703,726,727,728,729,794,799,715,
            723,741,795,713,717,719,721,749,791,793,
            333,787,829,706,707,708,709,710,712,714,
            716,718,722,724,725,732,733,734,735,736,
            738,739,740,742,743,744,745,747,748,750,
            751,804,834,832,833,797,830,831,788,806,
            800,786,58,789,790,801,802,805,807,808,
            785,803,796,792,828,1,754,755,756,757,
            758,759,760,761,762,763,37,705,731,711,
            737,704,730,700,701,720,746,702,703,726,
            727,728,729,246,566,715,723,741,640,713,
            717,719,721,749,52,695,523,560,556,706,
            707,708,709,710,712,714,716,718,722,724,
            725,732,733,734,735,736,738,739,740,742,
            743,744,745,747,748,750,751,753,243,754,
            755,756,757,758,759,760,761,762,763,97,
            778,784,256,640,777,783,773,774,33,640,
            775,776,779,780,781,782,579,898,570,690,
            568,640,754,755,756,757,758,759,760,761,
            762,763,640,778,784,640,693,777,783,773,
            774,640,391,775,776,779,780,781,782,554,
            640,764,765,766,767,768,769,770,771,640,
            261,640,951,640,640,570,640,568,949,950,
            564,558,931,933,932,934,547,520,32,564,
            558,404,410,640,952,953,954,955,675,689,
            640,948,679,946,640,754,755,756,757,758,
            759,760,761,762,763,640,778,784,271,640,
            777,783,773,774,40,18,775,776,779,780,
            781,782,242,242,640,670,684,640,242,242,
            640,947,640,945,283,754,755,756,757,758,
            759,760,761,762,763,114,778,784,219,640,
            777,783,773,774,654,640,775,776,779,780,
            781,782,282,754,755,756,757,758,759,760,
            761,762,763,640,778,784,884,640,777,783,
            773,774,699,885,775,776,779,780,781,782,
            284,754,755,756,757,758,759,760,761,762,
            763,640,778,784,640,242,777,783,773,774,
            251,640,775,776,779,780,781,782,242,754,
            755,756,757,758,759,760,761,762,763,262,
            893,894,640,640,547,520,640,640,249,640,
            640,931,933,932,934,216,489,640,754,755,
            756,757,758,759,760,761,762,763,893,894,
            12,754,755,756,757,758,759,760,761,762,
            763,273,754,755,756,757,758,759,760,761,
            762,763,640,640,640,640,920,921,549,274,
            754,755,756,757,758,759,760,761,762,763,
            640,754,755,756,757,758,759,760,761,762,
            763,279,754,755,756,757,758,759,760,761,
            762,763,277,754,755,756,757,758,759,760,
            761,762,763,275,754,755,756,757,758,759,
            760,761,762,763,278,754,755,756,757,758,
            759,760,761,762,763,276,754,755,756,757,
            758,759,760,761,762,763,288,754,755,756,
            757,758,759,760,761,762,763,286,754,755,
            756,757,758,759,760,761,762,763,287,754,
            755,756,757,758,759,760,761,762,763,285,
            754,755,756,757,758,759,760,761,762,763,
            26,240,640,238,216,640,640,640,23,22,
            640,668,640,265,640,560,556,560,556,683,
            682,893,894,893,894,931,933,932,934,19,
            640,267,640,694,640,269,640,697,640,640,
            685,544,696,931,933,932,934,931,933,932,
            934,27,16,21,17,25,24,255,653,640,
            640,640,669,688,671,681,687,686,640,655,
            640,897,640,640,640,640,542,835,837,838,
            537,640,640,640,640,640,861,346,640,640,
            640,640,640,640,640,640,640,640,640,640,
            836,640,640,640,640,640,640,640,640,640,
            640,640,640,640,640,640,640,640,640,640,
            640,640,640,640,640,640,640,640,640,640,
            640,674
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 88,
           NT_OFFSET         = 98,
           LA_STATE_OFFSET   = 965,
           MAX_LA            = 1,
           NUM_RULES         = 325,
           NUM_NONTERMINALS  = 52,
           NUM_SYMBOLS       = 150,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 326,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 97,
           EOLT_SYMBOL       = 65,
           ACCEPT_ACTION     = 639,
           ERROR_ACTION      = 640;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
