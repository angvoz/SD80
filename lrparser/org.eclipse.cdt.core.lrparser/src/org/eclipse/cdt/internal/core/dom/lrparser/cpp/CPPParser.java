/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl_v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.cpp;


import lpg.lpgjavaruntime.*;
import org.eclipse.cdt.core.dom.lrparser.lpgextensions.ITrialUndoActionProvider;
import org.eclipse.cdt.core.dom.lrparser.lpgextensions.AbstractTrialUndoActionProvider;
import org.eclipse.cdt.core.dom.lrparser.lpgextensions.TrialUndoParser;

import java.util.*;

import org.eclipse.cdt.core.dom.ast.*;
import org.eclipse.cdt.core.dom.ast.cpp.*;
import org.eclipse.cdt.core.dom.lrparser.action.cpp.CPPASTNodeFactory;
import org.eclipse.cdt.core.dom.lrparser.action.cpp.CPPBuildASTParserAction;
import org.eclipse.cdt.core.dom.lrparser.IParser;
import org.eclipse.cdt.core.dom.lrparser.IParserActionTokenProvider;
import org.eclipse.cdt.core.dom.lrparser.util.DebugUtil;

public class CPPParser extends AbstractTrialUndoActionProvider< CPPParserAction ,  Object > implements IParserActionTokenProvider, IParser    {
	private static ParseTable prs = new CPPParserprs();
	protected static final Action< CPPParserAction ,  Object >[] RULE_ACTIONS;

	{
	    ruleAction = RULE_ACTIONS;
	}
	    
	public CPPParser(LexStream lexStream) {
		super(lexStream);

		try {
			super.remapTerminalSymbols(orderedTerminalSymbols(), CPPParserprs.EOFT_SYMBOL);
		} catch (NullExportedSymbolsException e) {
		} catch (NullTerminalSymbolsException e) {
		} catch (UnimplementedTerminalsException e) {
			java.util.ArrayList unimplemented_symbols = e.getSymbols();
			System.out.println("The Lexer will not scan the following token(s):");
			for (int i = 0; i < unimplemented_symbols.size(); i++) {
				Integer id = (Integer) unimplemented_symbols.get(i);
				System.out.println("    " + CPPParsersym.orderedTerminalSymbols[id.intValue()]);
			}
			System.out.println();
		} catch (UndefinedEofSymbolException e) {
			throw new Error(new UndefinedEofSymbolException("The Lexer does not implement the Eof symbol " + CPPParsersym.orderedTerminalSymbols[CPPParserprs.EOFT_SYMBOL]));
		}
	}

	
    public CPPParser() {  // constructor
        //	this(new $lexer_class());
    }

	public String[] orderedTerminalSymbols() {
		return CPPParsersym.orderedTerminalSymbols;
	}

	public String getTokenKindName(int kind) {
		return CPPParsersym.orderedTerminalSymbols[kind];
	}

	public int getEOFTokenKind() {
		return CPPParserprs.EOFT_SYMBOL;
	}
	
	public PrsStream getParseStream() {
		return (PrsStream) this;
	}

	//
	// Report error message for given error_token.
	//
	public final void reportErrorTokenMessage(int error_token, String msg) {
		int firsttok = super.getFirstRealToken(error_token), lasttok = super.getLastRealToken(error_token);
		String location = super.getFileName() + ':' +
			(firsttok > lasttok
				? (super.getEndLine(lasttok) + ":" + super.getEndColumn(lasttok))
				: (super.getLine(error_token) + ":" +
				   super.getColumn(error_token) + ":" +
				   super.getEndLine(error_token) + ":" +
				   super.getEndColumn(error_token))) + ": ";
		super.reportError((firsttok > lasttok ? ParseErrorCodes.INSERTION_CODE : ParseErrorCodes.SUBSTITUTION_CODE), location, msg);
	}

	public Object parser() {
		return parser(null, 0);
	}

	public Object parser(Monitor monitor) {
		return parser(monitor, 0);
	}

	public Object parser(int error_repair_count) {
		return parser(null, error_repair_count);
	}

	public Object parser(Monitor monitor, int error_repair_count) {
		try {
			btParser = new TrialUndoParser((TokenStream) this, prs, (ITrialUndoActionProvider< Object >) this);
		} catch (NotBacktrackParseTableException e) {
			throw new Error(new NotBacktrackParseTableException("Regenerate CPPParserprs.java with -BACKTRACK option"));
		} catch (BadParseSymFileException e) {
			throw new Error(new BadParseSymFileException("Bad Parser Symbol File -- CPPParsersym.java"));
		}

		try {
			Object result = (Object) btParser.parse(error_repair_count);
			btParser.commit();
			return result;
		} catch (BadParseException e) {
			reset(e.error_token); // point to error token

			//DiagnoseParser diagnoseParser = new DiagnoseParser((TokenStream) this, prs);
			//diagnoseParser.diagnose(e.error_token);
		}

		return null;
	}


private  CPPParserAction  action;	

// uncomment to use with backtracking parser
// public CPPParser() {}

private void initActions(IASTTranslationUnit tu) {
    // binding resolution actions need access to IASTName nodes, temporary
    action = new  CPPParserAction ();
	//action.resolver = new  C99TypedefTrackerParserAction (this);
	action.builder  = new  CPPBuildASTParserAction ( CPPASTNodeFactory.DEFAULT_INSTANCE , this, tu);
	//action.builder.setTokenMap(CPPParsersym.orderedTerminalSymbols);
	
	// comment this line to use with backtracking parser
	setParserAction(action);
}


public void addToken(IToken token) {
	token.setKind(mapKind(token.getKind()));
	super.addToken(token);
}


public IASTCompletionNode parse(IASTTranslationUnit tu) {
	// this has to be done, or... kaboom!
	setStreamLength(getSize());
	initActions(tu);
	
	final int errorRepairCount = -1;  // _1 means full error handling
	parser(null, errorRepairCount); // do the actual parse
	super.resetTokenStream(); // allow tokens to be garbage collected

	// the completion node may be null
	IASTCompletionNode compNode = action.builder.getASTCompletionNode();

	action = null;
	
	// Comment this line to use with backtracking parser
	//parserAction = null;
	
	return compNode;
}


public int getKind(int i) {
	int kind = super.getKind(i);
	
	// There used to be a special token kind for zero used to parser pure virtual function declarations.
	// But it turned out to be easier to just parse them as an init_declarator and programaticaly check
	// for pure virtual, see consumeMemberDeclaratorWithInitializer().
	
	//if(kind == CPPParsersym.TK_integer && "0".equals(getTokenText(i))) { //$NON-NLS-1$
	//	kind = CPPParsersym.TK_zero;
	//}
	
	// lexer feedback hack!
	//else if(kind == C99Parsersym.TK_identifier && action.resolver.isTypedef(getTokenText(i))) {
	//	kind = C99Parsersym.TK_TypedefName;
	//}
	
	return kind;
}


// uncomment this method to use with backtracking parser
//public List getRuleTokens() {
//    return Collections.unmodifiableList(getTokens().subList(getLeftSpan(), getRightSpan() + 1));
//}




	//
	// Initialize ruleAction array.
	//
	static {
		RULE_ACTIONS = new Action[523 + 1];
		RULE_ACTIONS[0] = null;

		RULE_ACTIONS[1] = new Action1();
		RULE_ACTIONS[4] = new Action4();
		RULE_ACTIONS[5] = new Action5();
		RULE_ACTIONS[10] = new Action10();
		RULE_ACTIONS[11] = new Action11();
		RULE_ACTIONS[12] = new Action12();
		RULE_ACTIONS[13] = new Action13();
		RULE_ACTIONS[14] = new Action14();
		RULE_ACTIONS[15] = new Action15();
		RULE_ACTIONS[16] = new Action16();
		RULE_ACTIONS[17] = new Action17();
		RULE_ACTIONS[18] = new Action18();
		RULE_ACTIONS[19] = new Action19();
		RULE_ACTIONS[21] = new Action21();
		RULE_ACTIONS[22] = new Action22();
		RULE_ACTIONS[29] = new Action29();
		RULE_ACTIONS[30] = new Action30();
		RULE_ACTIONS[31] = new Action31();
		RULE_ACTIONS[32] = new Action32();
		RULE_ACTIONS[33] = new Action33();
		RULE_ACTIONS[34] = new Action34();
		RULE_ACTIONS[35] = new Action35();
		RULE_ACTIONS[36] = new Action36();
		RULE_ACTIONS[37] = new Action37();
		RULE_ACTIONS[38] = new Action38();
		RULE_ACTIONS[39] = new Action39();
		RULE_ACTIONS[40] = new Action40();
		RULE_ACTIONS[41] = new Action41();
		RULE_ACTIONS[42] = new Action42();
		RULE_ACTIONS[43] = new Action43();
		RULE_ACTIONS[45] = new Action45();
		RULE_ACTIONS[49] = new Action49();
		RULE_ACTIONS[50] = new Action50();
		RULE_ACTIONS[51] = new Action51();
		RULE_ACTIONS[52] = new Action52();
		RULE_ACTIONS[53] = new Action53();
		RULE_ACTIONS[54] = new Action54();
		RULE_ACTIONS[55] = new Action55();
		RULE_ACTIONS[56] = new Action56();
		RULE_ACTIONS[57] = new Action57();
		RULE_ACTIONS[58] = new Action58();
		RULE_ACTIONS[59] = new Action59();
		RULE_ACTIONS[60] = new Action60();
		RULE_ACTIONS[61] = new Action61();
		RULE_ACTIONS[62] = new Action62();
		RULE_ACTIONS[63] = new Action63();
		RULE_ACTIONS[64] = new Action64();
		RULE_ACTIONS[65] = new Action65();
		RULE_ACTIONS[66] = new Action66();
		RULE_ACTIONS[67] = new Action67();
		RULE_ACTIONS[68] = new Action68();
		RULE_ACTIONS[69] = new Action69();
		RULE_ACTIONS[70] = new Action70();
		RULE_ACTIONS[74] = new Action74();
		RULE_ACTIONS[75] = new Action75();
		RULE_ACTIONS[76] = new Action76();
		RULE_ACTIONS[77] = new Action77();
		RULE_ACTIONS[78] = new Action78();
		RULE_ACTIONS[79] = new Action79();
		RULE_ACTIONS[80] = new Action80();
		RULE_ACTIONS[81] = new Action81();
		RULE_ACTIONS[82] = new Action82();
		RULE_ACTIONS[83] = new Action83();
		RULE_ACTIONS[84] = new Action84();
		RULE_ACTIONS[85] = new Action85();
		RULE_ACTIONS[88] = new Action88();
		RULE_ACTIONS[89] = new Action89();
		RULE_ACTIONS[90] = new Action90();
		RULE_ACTIONS[91] = new Action91();
		RULE_ACTIONS[100] = new Action100();
		RULE_ACTIONS[101] = new Action101();
		RULE_ACTIONS[102] = new Action102();
		RULE_ACTIONS[104] = new Action104();
		RULE_ACTIONS[106] = new Action106();
		RULE_ACTIONS[107] = new Action107();
		RULE_ACTIONS[109] = new Action109();
		RULE_ACTIONS[110] = new Action110();
		RULE_ACTIONS[111] = new Action111();
		RULE_ACTIONS[113] = new Action113();
		RULE_ACTIONS[114] = new Action114();
		RULE_ACTIONS[116] = new Action116();
		RULE_ACTIONS[117] = new Action117();
		RULE_ACTIONS[119] = new Action119();
		RULE_ACTIONS[120] = new Action120();
		RULE_ACTIONS[121] = new Action121();
		RULE_ACTIONS[122] = new Action122();
		RULE_ACTIONS[124] = new Action124();
		RULE_ACTIONS[125] = new Action125();
		RULE_ACTIONS[127] = new Action127();
		RULE_ACTIONS[129] = new Action129();
		RULE_ACTIONS[131] = new Action131();
		RULE_ACTIONS[133] = new Action133();
		RULE_ACTIONS[135] = new Action135();
		RULE_ACTIONS[137] = new Action137();
		RULE_ACTIONS[138] = new Action138();
		RULE_ACTIONS[139] = new Action139();
		RULE_ACTIONS[142] = new Action142();
		RULE_ACTIONS[143] = new Action143();
		RULE_ACTIONS[144] = new Action144();
		RULE_ACTIONS[145] = new Action145();
		RULE_ACTIONS[146] = new Action146();
		RULE_ACTIONS[147] = new Action147();
		RULE_ACTIONS[148] = new Action148();
		RULE_ACTIONS[149] = new Action149();
		RULE_ACTIONS[150] = new Action150();
		RULE_ACTIONS[151] = new Action151();
		RULE_ACTIONS[152] = new Action152();
		RULE_ACTIONS[154] = new Action154();
		RULE_ACTIONS[155] = new Action155();
		RULE_ACTIONS[159] = new Action159();
		RULE_ACTIONS[161] = new Action161();
		RULE_ACTIONS[164] = new Action164();
		RULE_ACTIONS[173] = new Action173();
		RULE_ACTIONS[174] = new Action174();
		RULE_ACTIONS[175] = new Action175();
		RULE_ACTIONS[176] = new Action176();
		RULE_ACTIONS[177] = new Action177();
		RULE_ACTIONS[178] = new Action178();
		RULE_ACTIONS[179] = new Action179();
		RULE_ACTIONS[180] = new Action180();
		RULE_ACTIONS[183] = new Action183();
		RULE_ACTIONS[184] = new Action184();
		RULE_ACTIONS[185] = new Action185();
		RULE_ACTIONS[187] = new Action187();
		RULE_ACTIONS[188] = new Action188();
		RULE_ACTIONS[189] = new Action189();
		RULE_ACTIONS[190] = new Action190();
		RULE_ACTIONS[191] = new Action191();
		RULE_ACTIONS[192] = new Action192();
		RULE_ACTIONS[193] = new Action193();
		RULE_ACTIONS[194] = new Action194();
		RULE_ACTIONS[195] = new Action195();
		RULE_ACTIONS[196] = new Action196();
		RULE_ACTIONS[197] = new Action197();
		RULE_ACTIONS[214] = new Action214();
		RULE_ACTIONS[215] = new Action215();
		RULE_ACTIONS[216] = new Action216();
		RULE_ACTIONS[217] = new Action217();
		RULE_ACTIONS[218] = new Action218();
		RULE_ACTIONS[219] = new Action219();
		RULE_ACTIONS[221] = new Action221();
		RULE_ACTIONS[225] = new Action225();
		RULE_ACTIONS[226] = new Action226();
		RULE_ACTIONS[254] = new Action254();
		RULE_ACTIONS[270] = new Action270();
		RULE_ACTIONS[271] = new Action271();
		RULE_ACTIONS[272] = new Action272();
		RULE_ACTIONS[273] = new Action273();
		RULE_ACTIONS[274] = new Action274();
		RULE_ACTIONS[275] = new Action275();
		RULE_ACTIONS[276] = new Action276();
		RULE_ACTIONS[278] = new Action278();
		RULE_ACTIONS[279] = new Action279();
		RULE_ACTIONS[284] = new Action284();
		RULE_ACTIONS[285] = new Action285();
		RULE_ACTIONS[294] = new Action294();
		RULE_ACTIONS[295] = new Action295();
		RULE_ACTIONS[296] = new Action296();
		RULE_ACTIONS[298] = new Action298();
		RULE_ACTIONS[299] = new Action299();
		RULE_ACTIONS[300] = new Action300();
		RULE_ACTIONS[301] = new Action301();
		RULE_ACTIONS[302] = new Action302();
		RULE_ACTIONS[303] = new Action303();
		RULE_ACTIONS[304] = new Action304();
		RULE_ACTIONS[305] = new Action305();
		RULE_ACTIONS[311] = new Action311();
		RULE_ACTIONS[313] = new Action313();
		RULE_ACTIONS[317] = new Action317();
		RULE_ACTIONS[318] = new Action318();
		RULE_ACTIONS[319] = new Action319();
		RULE_ACTIONS[320] = new Action320();
		RULE_ACTIONS[321] = new Action321();
		RULE_ACTIONS[322] = new Action322();
		RULE_ACTIONS[323] = new Action323();
		RULE_ACTIONS[324] = new Action324();
		RULE_ACTIONS[325] = new Action325();
		RULE_ACTIONS[326] = new Action326();
		RULE_ACTIONS[334] = new Action334();
		RULE_ACTIONS[335] = new Action335();
		RULE_ACTIONS[337] = new Action337();
		RULE_ACTIONS[338] = new Action338();
		RULE_ACTIONS[339] = new Action339();
		RULE_ACTIONS[342] = new Action342();
		RULE_ACTIONS[343] = new Action343();
		RULE_ACTIONS[347] = new Action347();
		RULE_ACTIONS[348] = new Action348();
		RULE_ACTIONS[349] = new Action349();
		RULE_ACTIONS[350] = new Action350();
		RULE_ACTIONS[351] = new Action351();
		RULE_ACTIONS[352] = new Action352();
		RULE_ACTIONS[353] = new Action353();
		RULE_ACTIONS[354] = new Action354();
		RULE_ACTIONS[355] = new Action355();
		RULE_ACTIONS[361] = new Action361();
		RULE_ACTIONS[362] = new Action362();
		RULE_ACTIONS[363] = new Action363();
		RULE_ACTIONS[365] = new Action365();
		RULE_ACTIONS[367] = new Action367();
		RULE_ACTIONS[368] = new Action368();
		RULE_ACTIONS[369] = new Action369();
		RULE_ACTIONS[370] = new Action370();
		RULE_ACTIONS[371] = new Action371();
		RULE_ACTIONS[374] = new Action374();
		RULE_ACTIONS[375] = new Action375();
		RULE_ACTIONS[376] = new Action376();
		RULE_ACTIONS[377] = new Action377();
		RULE_ACTIONS[378] = new Action378();
		RULE_ACTIONS[383] = new Action383();
		RULE_ACTIONS[384] = new Action384();
		RULE_ACTIONS[385] = new Action385();
		RULE_ACTIONS[386] = new Action386();
		RULE_ACTIONS[387] = new Action387();
		RULE_ACTIONS[391] = new Action391();
		RULE_ACTIONS[395] = new Action395();
		RULE_ACTIONS[396] = new Action396();
		RULE_ACTIONS[397] = new Action397();
		RULE_ACTIONS[400] = new Action400();
		RULE_ACTIONS[411] = new Action411();
		RULE_ACTIONS[419] = new Action419();
		RULE_ACTIONS[420] = new Action420();
		RULE_ACTIONS[421] = new Action421();
		RULE_ACTIONS[422] = new Action422();
		RULE_ACTIONS[428] = new Action428();
		RULE_ACTIONS[438] = new Action438();
		RULE_ACTIONS[439] = new Action439();
		RULE_ACTIONS[442] = new Action442();
		RULE_ACTIONS[443] = new Action443();
		RULE_ACTIONS[486] = new Action486();
		RULE_ACTIONS[487] = new Action487();
		RULE_ACTIONS[488] = new Action488();
		RULE_ACTIONS[499] = new Action499();
		RULE_ACTIONS[508] = new Action508();
		RULE_ACTIONS[509] = new Action509();
		RULE_ACTIONS[510] = new Action510();
		RULE_ACTIONS[513] = new Action513();
		RULE_ACTIONS[514] = new Action514();


		//
		// Make sure that all elements of ruleAction are properly initialized
		//
		for (int i = 0; i < RULE_ACTIONS.length; i++) {
			if (RULE_ACTIONS[i] == null) {
				RULE_ACTIONS[i] = emptyAction();
			}
		}
	}
 
	//
	// Rule 1:  <openscope-ast> ::= $Empty
	//
	static final class Action1 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
  openASTScope();   
		}  
	}
 
	//
	// Rule 4:  <placeholder> ::= $Empty
	//
	static final class Action4 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
  consumePlaceHolder();   
		}  
	}
 
	//
	// Rule 5:  <empty> ::= $Empty
	//
	static final class Action5 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
  consumeEmpty();   
		}  
	}
  
	//
	// Rule 10:  translation_unit ::= declaration_seq
	//
	static final class Action10 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeTranslationUnit();   
		}  
	}  
  
	//
	// Rule 11:  translation_unit ::= $Empty
	//
	static final class Action11 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeTranslationUnit();   
		}  
	}  
  
	//
	// Rule 12:  literal ::= integer
	//
	static final class Action12 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionLiteral(ICPPASTLiteralExpression.lk_integer_constant);   
		}  
	}  
  
	//
	// Rule 13:  literal ::= 0
	//
	static final class Action13 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionLiteral(ICPPASTLiteralExpression.lk_integer_constant);   
		}  
	}  
  
	//
	// Rule 14:  literal ::= floating
	//
	static final class Action14 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionLiteral(ICPPASTLiteralExpression.lk_float_constant);   
		}  
	}  
  
	//
	// Rule 15:  literal ::= charconst
	//
	static final class Action15 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionLiteral(ICPPASTLiteralExpression.lk_char_constant);   
		}  
	}  
  
	//
	// Rule 16:  literal ::= stringlit
	//
	static final class Action16 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionLiteral(ICPPASTLiteralExpression.lk_string_literal);   
		}  
	}  
  
	//
	// Rule 17:  literal ::= true
	//
	static final class Action17 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionLiteral(ICPPASTLiteralExpression.lk_true);   
		}  
	}  
  
	//
	// Rule 18:  literal ::= false
	//
	static final class Action18 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionLiteral(ICPPASTLiteralExpression.lk_false);   
		}  
	}  
  
	//
	// Rule 19:  literal ::= this
	//
	static final class Action19 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionLiteral(ICPPASTLiteralExpression.lk_this);   
		}  
	}  
  
	//
	// Rule 21:  primary_expression ::= ( expression )
	//
	static final class Action21 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBracketed();    
		}  
	}  
  
	//
	// Rule 22:  primary_expression ::= qualified_or_unqualified_name
	//
	static final class Action22 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionName();    
		}  
	}  
  
	//
	// Rule 29:  unqualified_id_name ::= ~ class_name
	//
	static final class Action29 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDestructorName();    
		}  
	}  
  
	//
	// Rule 30:  identifier_name ::= identifier
	//
	static final class Action30 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeIdentifierName();    
		}  
	}  
  
	//
	// Rule 31:  template_opt ::= template
	//
	static final class Action31 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumePlaceHolder();    
		}  
	}  
  
	//
	// Rule 32:  template_opt ::= $Empty
	//
	static final class Action32 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeEmpty();    
		}  
	}  
  
	//
	// Rule 33:  dcolon_opt ::= ::
	//
	static final class Action33 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumePlaceHolder();    
		}  
	}  
  
	//
	// Rule 34:  dcolon_opt ::= $Empty
	//
	static final class Action34 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeEmpty();    
		}  
	}  
  
	//
	// Rule 35:  qualified_id_name ::= dcolon_opt nested_name_specifier template_opt unqualified_id_name
	//
	static final class Action35 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeQualifiedId(true);    
		}  
	}  
  
	//
	// Rule 36:  qualified_id_name ::= :: identifier_name
	//
	static final class Action36 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeGlobalQualifiedId();    
		}  
	}  
  
	//
	// Rule 37:  qualified_id_name ::= :: operator_function_id_name
	//
	static final class Action37 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeGlobalQualifiedId();    
		}  
	}  
  
	//
	// Rule 38:  qualified_id_name ::= :: template_id_name
	//
	static final class Action38 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeGlobalQualifiedId();    
		}  
	}  
  
	//
	// Rule 39:  nested_name_specifier ::= class_or_namespace_name :: nested_name_specifier_with_template
	//
	static final class Action39 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeNestedNameSpecifier(true);    
		}  
	}  
  
	//
	// Rule 40:  nested_name_specifier ::= class_or_namespace_name ::
	//
	static final class Action40 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeNestedNameSpecifier(false);    
		}  
	}  
  
	//
	// Rule 41:  nested_name_specifier_with_template ::= class_or_namespace_name_with_template :: nested_name_specifier_with_template
	//
	static final class Action41 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeNestedNameSpecifier(true);    
		}  
	}  
  
	//
	// Rule 42:  nested_name_specifier_with_template ::= class_or_namespace_name_with_template ::
	//
	static final class Action42 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeNestedNameSpecifier(false);    
		}  
	}  
  
	//
	// Rule 43:  class_or_namespace_name_with_template ::= template_opt class_or_namespace_name
	//
	static final class Action43 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeNameWithTemplateKeyword();    
		}  
	}  
  
	//
	// Rule 45:  nested_name_specifier_opt ::= $Empty
	//
	static final class Action45 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeNestedNameSpecifierEmpty();    
		}  
	}  
  
	//
	// Rule 49:  postfix_expression ::= postfix_expression [ expression ]
	//
	static final class Action49 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionArraySubscript();    
		}  
	}  
  
	//
	// Rule 50:  postfix_expression ::= postfix_expression ( expression_list_opt )
	//
	static final class Action50 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionFunctionCall();    
		}  
	}  
  
	//
	// Rule 51:  postfix_expression ::= simple_type_specifier ( expression_list_opt )
	//
	static final class Action51 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionSimpleTypeConstructor();   
		}  
	}  
  
	//
	// Rule 52:  postfix_expression ::= typename dcolon_opt nested_name_specifier <empty> identifier_name ( expression_list_opt )
	//
	static final class Action52 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionTypeName();   
		}  
	}  
  
	//
	// Rule 53:  postfix_expression ::= typename dcolon_opt nested_name_specifier template_opt template_id_name ( expression_list_opt )
	//
	static final class Action53 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionTypeName();   
		}  
	}  
  
	//
	// Rule 54:  postfix_expression ::= postfix_expression . qualified_or_unqualified_name
	//
	static final class Action54 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionFieldReference(false, false);    
		}  
	}  
  
	//
	// Rule 55:  postfix_expression ::= postfix_expression -> qualified_or_unqualified_name
	//
	static final class Action55 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionFieldReference(true, false);    
		}  
	}  
  
	//
	// Rule 56:  postfix_expression ::= postfix_expression . template qualified_or_unqualified_name
	//
	static final class Action56 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionFieldReference(false, true);    
		}  
	}  
  
	//
	// Rule 57:  postfix_expression ::= postfix_expression -> template qualified_or_unqualified_name
	//
	static final class Action57 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionFieldReference(true, true);    
		}  
	}  
  
	//
	// Rule 58:  postfix_expression ::= postfix_expression . pseudo_destructor_name
	//
	static final class Action58 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionFieldReference(false, false);    
		}  
	}  
  
	//
	// Rule 59:  postfix_expression ::= postfix_expression -> pseudo_destructor_name
	//
	static final class Action59 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionFieldReference(true, false);    
		}  
	}  
  
	//
	// Rule 60:  postfix_expression ::= postfix_expression ++
	//
	static final class Action60 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_postFixIncr);    
		}  
	}  
  
	//
	// Rule 61:  postfix_expression ::= postfix_expression --
	//
	static final class Action61 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_postFixDecr);    
		}  
	}  
  
	//
	// Rule 62:  postfix_expression ::= dynamic_cast < type_id > ( expression )
	//
	static final class Action62 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionCast(ICPPASTCastExpression.op_dynamic_cast);    
		}  
	}  
  
	//
	// Rule 63:  postfix_expression ::= static_cast < type_id > ( expression )
	//
	static final class Action63 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionCast(ICPPASTCastExpression.op_static_cast);    
		}  
	}  
  
	//
	// Rule 64:  postfix_expression ::= reinterpret_cast < type_id > ( expression )
	//
	static final class Action64 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionCast(ICPPASTCastExpression.op_reinterpret_cast);    
		}  
	}  
  
	//
	// Rule 65:  postfix_expression ::= const_cast < type_id > ( expression )
	//
	static final class Action65 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionCast(ICPPASTCastExpression.op_const_cast);    
		}  
	}  
  
	//
	// Rule 66:  postfix_expression ::= typeid ( expression )
	//
	static final class Action66 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(ICPPASTUnaryExpression.op_typeid);    
		}  
	}  
  
	//
	// Rule 67:  postfix_expression ::= typeid ( type_id )
	//
	static final class Action67 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionTypeId(ICPPASTTypeIdExpression.op_typeid);   
		}  
	}  
  
	//
	// Rule 68:  pseudo_destructor_name ::= dcolon_opt nested_name_specifier_opt type_name :: ~ type_name
	//
	static final class Action68 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumePsudoDestructorName(true);    
		}  
	}  
  
	//
	// Rule 69:  pseudo_destructor_name ::= dcolon_opt nested_name_specifier template template_id_name :: ~ type_name
	//
	static final class Action69 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumePsudoDestructorName(true);    
		}  
	}  
  
	//
	// Rule 70:  pseudo_destructor_name ::= dcolon_opt nested_name_specifier_opt ~ type_name
	//
	static final class Action70 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumePsudoDestructorName(false);    
		}  
	}  
  
	//
	// Rule 74:  unary_expression ::= ++ cast_expression
	//
	static final class Action74 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_prefixIncr);    
		}  
	}  
  
	//
	// Rule 75:  unary_expression ::= -- cast_expression
	//
	static final class Action75 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_prefixDecr);    
		}  
	}  
  
	//
	// Rule 76:  unary_expression ::= & cast_expression
	//
	static final class Action76 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_amper);    
		}  
	}  
  
	//
	// Rule 77:  unary_expression ::= * cast_expression
	//
	static final class Action77 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_star);    
		}  
	}  
  
	//
	// Rule 78:  unary_expression ::= + cast_expression
	//
	static final class Action78 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_plus);    
		}  
	}  
  
	//
	// Rule 79:  unary_expression ::= - cast_expression
	//
	static final class Action79 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_minus);    
		}  
	}  
  
	//
	// Rule 80:  unary_expression ::= ~ cast_expression
	//
	static final class Action80 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_tilde);    
		}  
	}  
  
	//
	// Rule 81:  unary_expression ::= ! cast_expression
	//
	static final class Action81 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_not);    
		}  
	}  
  
	//
	// Rule 82:  unary_expression ::= sizeof unary_expression
	//
	static final class Action82 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionUnaryOperator(IASTUnaryExpression.op_sizeof);    
		}  
	}  
  
	//
	// Rule 83:  unary_expression ::= sizeof ( type_id )
	//
	static final class Action83 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionTypeId(ICPPASTTypeIdExpression.op_sizeof);   
		}  
	}  
  
	//
	// Rule 84:  new_expression ::= dcolon_opt new new_placement_opt new_type_id <openscope-ast> new_array_expressions_opt new_initializer_opt
	//
	static final class Action84 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionNew(false);    
		}  
	}  
  
	//
	// Rule 85:  new_expression ::= dcolon_opt new new_placement_opt ( type_id ) new_initializer_opt
	//
	static final class Action85 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionNew(true);    
		}  
	}  
  
	//
	// Rule 88:  new_placement_opt ::= $Empty
	//
	static final class Action88 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeEmpty();    
		}  
	}  
  
	//
	// Rule 89:  new_type_id ::= type_specifier_seq
	//
	static final class Action89 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeTypeId(false);    
		}  
	}  
  
	//
	// Rule 90:  new_type_id ::= type_specifier_seq new_declarator
	//
	static final class Action90 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeTypeId(true);    
		}  
	}  
  
	//
	// Rule 91:  new_declarator ::= <openscope-ast> new_pointer_operators
	//
	static final class Action91 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeNewDeclarator();   
		}  
	}  
  
	//
	// Rule 100:  new_initializer_opt ::= $Empty
	//
	static final class Action100 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeEmpty();    
		}  
	}  
  
	//
	// Rule 101:  delete_expression ::= dcolon_opt delete cast_expression
	//
	static final class Action101 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionDelete(false);    
		}  
	}  
  
	//
	// Rule 102:  delete_expression ::= dcolon_opt delete [ ] cast_expression
	//
	static final class Action102 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionDelete(true);    
		}  
	}  
  
	//
	// Rule 104:  cast_expression ::= ( type_id ) cast_expression
	//
	static final class Action104 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionCast(ICPPASTCastExpression.op_cast);    
		}  
	}  
  
	//
	// Rule 106:  pm_expression ::= pm_expression .* cast_expression
	//
	static final class Action106 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_pmdot);    
		}  
	}  
  
	//
	// Rule 107:  pm_expression ::= pm_expression ->* cast_expression
	//
	static final class Action107 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_pmarrow);    
		}  
	}  
  
	//
	// Rule 109:  multiplicative_expression ::= multiplicative_expression * pm_expression
	//
	static final class Action109 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_multiply);    
		}  
	}  
  
	//
	// Rule 110:  multiplicative_expression ::= multiplicative_expression / pm_expression
	//
	static final class Action110 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_divide);    
		}  
	}  
  
	//
	// Rule 111:  multiplicative_expression ::= multiplicative_expression % pm_expression
	//
	static final class Action111 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_modulo);    
		}  
	}  
  
	//
	// Rule 113:  additive_expression ::= additive_expression + multiplicative_expression
	//
	static final class Action113 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_plus);    
		}  
	}  
  
	//
	// Rule 114:  additive_expression ::= additive_expression - multiplicative_expression
	//
	static final class Action114 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_minus);    
		}  
	}  
  
	//
	// Rule 116:  shift_expression ::= shift_expression << additive_expression
	//
	static final class Action116 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_shiftLeft);    
		}  
	}  
  
	//
	// Rule 117:  shift_expression ::= shift_expression >> additive_expression
	//
	static final class Action117 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_shiftRight);    
		}  
	}  
  
	//
	// Rule 119:  relational_expression ::= relational_expression < shift_expression
	//
	static final class Action119 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_lessThan);    
		}  
	}  
  
	//
	// Rule 120:  relational_expression ::= relational_expression > shift_expression
	//
	static final class Action120 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_greaterThan);    
		}  
	}  
  
	//
	// Rule 121:  relational_expression ::= relational_expression <= shift_expression
	//
	static final class Action121 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_lessEqual);    
		}  
	}  
  
	//
	// Rule 122:  relational_expression ::= relational_expression >= shift_expression
	//
	static final class Action122 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_greaterEqual);    
		}  
	}  
  
	//
	// Rule 124:  equality_expression ::= equality_expression == relational_expression
	//
	static final class Action124 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_equals);    
		}  
	}  
  
	//
	// Rule 125:  equality_expression ::= equality_expression != relational_expression
	//
	static final class Action125 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_notequals);    
		}  
	}  
  
	//
	// Rule 127:  and_expression ::= and_expression & equality_expression
	//
	static final class Action127 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_binaryAnd);    
		}  
	}  
  
	//
	// Rule 129:  exclusive_or_expression ::= exclusive_or_expression ^ and_expression
	//
	static final class Action129 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_binaryXor);    
		}  
	}  
  
	//
	// Rule 131:  inclusive_or_expression ::= inclusive_or_expression | exclusive_or_expression
	//
	static final class Action131 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_binaryOr);    
		}  
	}  
  
	//
	// Rule 133:  logical_and_expression ::= logical_and_expression && inclusive_or_expression
	//
	static final class Action133 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_logicalAnd);    
		}  
	}  
  
	//
	// Rule 135:  logical_or_expression ::= logical_or_expression || logical_and_expression
	//
	static final class Action135 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_logicalOr);    
		}  
	}  
  
	//
	// Rule 137:  conditional_expression ::= logical_or_expression ? expression : assignment_expression
	//
	static final class Action137 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionConditional();    
		}  
	}  
  
	//
	// Rule 138:  throw_expression ::= throw
	//
	static final class Action138 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionThrow(false);    
		}  
	}  
  
	//
	// Rule 139:  throw_expression ::= throw assignment_expression
	//
	static final class Action139 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionThrow(true);    
		}  
	}  
  
	//
	// Rule 142:  assignment_expression ::= logical_or_expression = assignment_expression
	//
	static final class Action142 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_assign);    
		}  
	}  
  
	//
	// Rule 143:  assignment_expression ::= logical_or_expression *= assignment_expression
	//
	static final class Action143 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_multiplyAssign);    
		}  
	}  
  
	//
	// Rule 144:  assignment_expression ::= logical_or_expression /= assignment_expression
	//
	static final class Action144 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_divideAssign);    
		}  
	}  
  
	//
	// Rule 145:  assignment_expression ::= logical_or_expression %= assignment_expression
	//
	static final class Action145 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_moduloAssign);    
		}  
	}  
  
	//
	// Rule 146:  assignment_expression ::= logical_or_expression += assignment_expression
	//
	static final class Action146 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_plusAssign);    
		}  
	}  
  
	//
	// Rule 147:  assignment_expression ::= logical_or_expression -= assignment_expression
	//
	static final class Action147 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_minusAssign);    
		}  
	}  
  
	//
	// Rule 148:  assignment_expression ::= logical_or_expression >>= assignment_expression
	//
	static final class Action148 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_shiftRightAssign);    
		}  
	}  
  
	//
	// Rule 149:  assignment_expression ::= logical_or_expression <<= assignment_expression
	//
	static final class Action149 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_shiftLeftAssign);    
		}  
	}  
  
	//
	// Rule 150:  assignment_expression ::= logical_or_expression &= assignment_expression
	//
	static final class Action150 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_binaryAndAssign);    
		}  
	}  
  
	//
	// Rule 151:  assignment_expression ::= logical_or_expression ^= assignment_expression
	//
	static final class Action151 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_binaryXorAssign);    
		}  
	}  
  
	//
	// Rule 152:  assignment_expression ::= logical_or_expression |= assignment_expression
	//
	static final class Action152 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionBinaryOperator(ICPPASTBinaryExpression.op_binaryOrAssign);    
		}  
	}  
  
	//
	// Rule 154:  expression ::= ERROR_TOKEN
	//
	static final class Action154 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionProblem();   
		}  
	}  
  
	//
	// Rule 155:  expression_list ::= <openscope-ast> expression_list_actual
	//
	static final class Action155 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeExpressionList();    
		}  
	}  
  
	//
	// Rule 159:  expression_list_opt ::= $Empty
	//
	static final class Action159 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeEmpty();    
		}  
	}  
  
	//
	// Rule 161:  expression_opt ::= $Empty
	//
	static final class Action161 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeEmpty();    
		}  
	}  
  
	//
	// Rule 164:  constant_expression_opt ::= $Empty
	//
	static final class Action164 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeEmpty();    
		}  
	}  
  
	//
	// Rule 173:  statement ::= ERROR_TOKEN
	//
	static final class Action173 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementProblem();    
		}  
	}  
  
	//
	// Rule 174:  labeled_statement ::= identifier : statement
	//
	static final class Action174 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementLabeled();    
		}  
	}  
  
	//
	// Rule 175:  labeled_statement ::= case constant_expression :
	//
	static final class Action175 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementCase();    
		}  
	}  
  
	//
	// Rule 176:  labeled_statement ::= default :
	//
	static final class Action176 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementDefault();    
		}  
	}  
  
	//
	// Rule 177:  expression_statement ::= expression ;
	//
	static final class Action177 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementExpression();    
		}  
	}  
  
	//
	// Rule 178:  expression_statement ::= ;
	//
	static final class Action178 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementNull();    
		}  
	}  
  
	//
	// Rule 179:  compound_statement ::= { <openscope-ast> statement_seq }
	//
	static final class Action179 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementCompoundStatement(true);    
		}  
	}  
  
	//
	// Rule 180:  compound_statement ::= { }
	//
	static final class Action180 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementCompoundStatement(false);    
		}  
	}  
  
	//
	// Rule 183:  selection_statement ::= if ( condition ) statement
	//
	static final class Action183 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementIf(false);    
		}  
	}  
  
	//
	// Rule 184:  selection_statement ::= if ( condition ) statement else statement
	//
	static final class Action184 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementIf(true);    
		}  
	}  
  
	//
	// Rule 185:  selection_statement ::= switch ( condition ) statement
	//
	static final class Action185 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementSwitch();    
		}  
	}  
  
	//
	// Rule 187:  condition ::= type_specifier_seq declarator = assignment_expression
	//
	static final class Action187 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeConditionDeclaration();    
		}  
	}  
  
	//
	// Rule 188:  iteration_statement ::= while ( condition ) statement
	//
	static final class Action188 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementWhileLoop();    
		}  
	}  
  
	//
	// Rule 189:  iteration_statement ::= do statement while ( expression ) ;
	//
	static final class Action189 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementDoLoop();    
		}  
	}  
  
	//
	// Rule 190:  iteration_statement ::= for ( expression_opt ; expression_opt ; expression_opt ) statement
	//
	static final class Action190 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
  consumeStatementForLoop();   
		}  
	}  
  
	//
	// Rule 191:  iteration_statement ::= for ( simple_declaration expression_opt ; expression_opt ) statement
	//
	static final class Action191 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
  consumeStatementForLoop();   
		}  
	}  
  
	//
	// Rule 192:  jump_statement ::= break ;
	//
	static final class Action192 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementBreak();    
		}  
	}  
  
	//
	// Rule 193:  jump_statement ::= continue ;
	//
	static final class Action193 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementContinue();    
		}  
	}  
  
	//
	// Rule 194:  jump_statement ::= return expression ;
	//
	static final class Action194 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementReturn(true);    
		}  
	}  
  
	//
	// Rule 195:  jump_statement ::= return ;
	//
	static final class Action195 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementReturn(false);    
		}  
	}  
  
	//
	// Rule 196:  jump_statement ::= goto identifier ;
	//
	static final class Action196 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementGoto();    
		}  
	}  
  
	//
	// Rule 197:  declaration_statement ::= block_declaration
	//
	static final class Action197 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementDeclaration();    
		}  
	}  
  
	//
	// Rule 214:  simple_declaration ::= declaration_specifiers_opt <openscope-ast> init_declarator_list_opt ;
	//
	static final class Action214 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclarationSimple(true);    
		}  
	}  
  
	//
	// Rule 215:  declaration_specifiers ::= <openscope-ast> simple_declaration_specifiers
	//
	static final class Action215 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclarationSpecifiersSimple();    
		}  
	}  
  
	//
	// Rule 216:  declaration_specifiers ::= <openscope-ast> class_declaration_specifiers
	//
	static final class Action216 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclarationSpecifiersComposite();    
		}  
	}  
  
	//
	// Rule 217:  declaration_specifiers ::= <openscope-ast> elaborated_declaration_specifiers
	//
	static final class Action217 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclarationSpecifiersComposite();    
		}  
	}  
  
	//
	// Rule 218:  declaration_specifiers ::= <openscope-ast> enum_declaration_specifiers
	//
	static final class Action218 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclarationSpecifiersComposite();    
		}  
	}  
  
	//
	// Rule 219:  declaration_specifiers ::= <openscope-ast> type_name_declaration_specifiers
	//
	static final class Action219 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclarationSpecifiersTypeName();    
		}  
	}  
  
	//
	// Rule 221:  declaration_specifiers_opt ::= $Empty
	//
	static final class Action221 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeEmpty();    
		}  
	}  
  
	//
	// Rule 225:  no_type_declaration_specifier ::= friend
	//
	static final class Action225 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclSpecToken();   
		}  
	}  
  
	//
	// Rule 226:  no_type_declaration_specifier ::= typedef
	//
	static final class Action226 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclSpecToken();   
		}  
	}  
  
	//
	// Rule 254:  simple_type_specifier ::= simple_type_specifier_token
	//
	static final class Action254 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclSpecToken();   
		}  
	}  
  
	//
	// Rule 270:  type_name_specifier ::= dcolon_opt nested_name_specifier_opt type_name
	//
	static final class Action270 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeQualifiedId(false);    
		}  
	}  
  
	//
	// Rule 271:  type_name_specifier ::= dcolon_opt nested_name_specifier template template_id_name
	//
	static final class Action271 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeQualifiedId(false);    
		}  
	}  
  
	//
	// Rule 272:  type_name_specifier ::= typename dcolon_opt nested_name_specifier identifier_name
	//
	static final class Action272 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeQualifiedId(false);    
		}  
	}  
  
	//
	// Rule 273:  type_name_specifier ::= typename dcolon_opt nested_name_specifier template_opt template_id_name
	//
	static final class Action273 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeQualifiedId(true);    
		}  
	}  
  
	//
	// Rule 274:  elaborated_type_specifier ::= class_keyword dcolon_opt nested_name_specifier_opt identifier_name
	//
	static final class Action274 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeTypeSpecifierElaborated(false);    
		}  
	}  
  
	//
	// Rule 275:  elaborated_type_specifier ::= class_keyword dcolon_opt nested_name_specifier_opt template_opt template_id_name
	//
	static final class Action275 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeTypeSpecifierElaborated(true);     
		}  
	}  
  
	//
	// Rule 276:  elaborated_type_specifier ::= enum dcolon_opt nested_name_specifier_opt identifier_name
	//
	static final class Action276 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeTypeSpecifierElaborated(false);    
		}  
	}  
  
	//
	// Rule 278:  enum_specifier ::= enum { <openscope-ast> enumerator_list_opt }
	//
	static final class Action278 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeTypeSpecifierEnumeration(false);   
		}  
	}  
  
	//
	// Rule 279:  enum_specifier ::= enum identifier { <openscope-ast> enumerator_list_opt }
	//
	static final class Action279 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeTypeSpecifierEnumeration(true);   
		}  
	}  
  
	//
	// Rule 284:  enumerator_definition ::= enumerator
	//
	static final class Action284 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeEnumerator(false);   
		}  
	}  
  
	//
	// Rule 285:  enumerator_definition ::= enumerator = constant_expression
	//
	static final class Action285 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeEnumerator(true);   
		}  
	}  
  
	//
	// Rule 294:  original_namespace_definition ::= namespace identifier_name { <openscope-ast> declaration_seq_opt }
	//
	static final class Action294 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeNamespaceDefinition(true);    
		}  
	}  
  
	//
	// Rule 295:  extension_namespace_definition ::= namespace original_namespace_name { <openscope-ast> declaration_seq_opt }
	//
	static final class Action295 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeNamespaceDefinition(true);    
		}  
	}  
  
	//
	// Rule 296:  unnamed_namespace_definition ::= namespace { <openscope-ast> declaration_seq_opt }
	//
	static final class Action296 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeNamespaceDefinition(false);    
		}  
	}  
  
	//
	// Rule 298:  namespace_alias_definition ::= namespace identifier = dcolon_opt nested_name_specifier_opt namespace_name ;
	//
	static final class Action298 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeNamespaceAliasDefinition();   
		}  
	}  
  
	//
	// Rule 299:  using_declaration ::= using typename_opt dcolon_opt nested_name_specifier_opt unqualified_id_name ;
	//
	static final class Action299 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeUsingDeclaration();    
		}  
	}  
  
	//
	// Rule 300:  typename_opt ::= typename
	//
	static final class Action300 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumePlaceHolder();    
		}  
	}  
  
	//
	// Rule 301:  typename_opt ::= $Empty
	//
	static final class Action301 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeEmpty();    
		}  
	}  
  
	//
	// Rule 302:  using_directive ::= using namespace dcolon_opt nested_name_specifier_opt namespace_name ;
	//
	static final class Action302 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeUsingDirective();    
		}  
	}  
  
	//
	// Rule 303:  asm_definition ::= asm ( stringlit ) ;
	//
	static final class Action303 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclarationASM();   
		}  
	}  
  
	//
	// Rule 304:  linkage_specification ::= extern stringlit { <openscope-ast> declaration_seq_opt }
	//
	static final class Action304 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeLinkageSpecification();    
		}  
	}  
  
	//
	// Rule 305:  linkage_specification ::= extern stringlit <openscope-ast> declaration
	//
	static final class Action305 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeLinkageSpecification();    
		}  
	}  
  
	//
	// Rule 311:  init_declarator ::= declarator initializer
	//
	static final class Action311 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclaratorWithInitializer(true);    
		}  
	}  
  
	//
	// Rule 313:  declarator ::= <openscope-ast> ptr_operator_seq direct_declarator
	//
	static final class Action313 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclaratorWithPointer(true);    
		}  
	}  
  
	//
	// Rule 317:  basic_direct_declarator ::= declarator_id_name
	//
	static final class Action317 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDirectDeclaratorIdentifier();    
		}  
	}  
  
	//
	// Rule 318:  basic_direct_declarator ::= ( declarator )
	//
	static final class Action318 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDirectDeclaratorBracketed();    
		}  
	}  
  
	//
	// Rule 319:  function_direct_declarator ::= basic_direct_declarator ( <openscope-ast> parameter_declaration_clause ) <openscope-ast> cv_qualifier_seq_opt <openscope-ast> exception_specification_opt
	//
	static final class Action319 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDirectDeclaratorFunctionDeclarator(true);    
		}  
	}  
  
	//
	// Rule 320:  array_direct_declarator ::= array_direct_declarator array_modifier
	//
	static final class Action320 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDirectDeclaratorArrayDeclarator(true);    
		}  
	}  
  
	//
	// Rule 321:  array_direct_declarator ::= basic_direct_declarator array_modifier
	//
	static final class Action321 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDirectDeclaratorArrayDeclarator(true);    
		}  
	}  
  
	//
	// Rule 322:  array_modifier ::= [ constant_expression ]
	//
	static final class Action322 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDirectDeclaratorArrayModifier(true);    
		}  
	}  
  
	//
	// Rule 323:  array_modifier ::= [ ]
	//
	static final class Action323 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDirectDeclaratorArrayModifier(false);    
		}  
	}  
  
	//
	// Rule 324:  ptr_operator ::= * <openscope-ast> cv_qualifier_seq_opt
	//
	static final class Action324 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumePointer();    
		}  
	}  
  
	//
	// Rule 325:  ptr_operator ::= &
	//
	static final class Action325 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeReferenceOperator();    
		}  
	}  
  
	//
	// Rule 326:  ptr_operator ::= dcolon_opt nested_name_specifier * <openscope-ast> cv_qualifier_seq_opt
	//
	static final class Action326 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumePointerToMember();    
		}  
	}  
  
	//
	// Rule 334:  cv_qualifier ::= const
	//
	static final class Action334 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclSpecToken();   
		}  
	}  
  
	//
	// Rule 335:  cv_qualifier ::= volatile
	//
	static final class Action335 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclSpecToken();   
		}  
	}  
  
	//
	// Rule 337:  declarator_id_name ::= dcolon_opt nested_name_specifier_opt type_name
	//
	static final class Action337 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeQualifiedId(false);    
		}  
	}  
  
	//
	// Rule 338:  type_id ::= type_specifier_seq
	//
	static final class Action338 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeTypeId(false);    
		}  
	}  
  
	//
	// Rule 339:  type_id ::= type_specifier_seq abstract_declarator
	//
	static final class Action339 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeTypeId(true);    
		}  
	}  
  
	//
	// Rule 342:  abstract_declarator ::= <openscope-ast> ptr_operator_seq
	//
	static final class Action342 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclaratorWithPointer(false);    
		}  
	}  
  
	//
	// Rule 343:  abstract_declarator ::= <openscope-ast> ptr_operator_seq direct_abstract_declarator
	//
	static final class Action343 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclaratorWithPointer(true);    
		}  
	}  
  
	//
	// Rule 347:  basic_direct_abstract_declarator ::= ( abstract_declarator )
	//
	static final class Action347 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDirectDeclaratorBracketed();    
		}  
	}  
  
	//
	// Rule 348:  array_direct_abstract_declarator ::= array_modifier
	//
	static final class Action348 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDirectDeclaratorArrayDeclarator(false);    
		}  
	}  
  
	//
	// Rule 349:  array_direct_abstract_declarator ::= array_direct_abstract_declarator array_modifier
	//
	static final class Action349 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDirectDeclaratorArrayDeclarator(true);    
		}  
	}  
  
	//
	// Rule 350:  array_direct_abstract_declarator ::= basic_direct_abstract_declarator array_modifier
	//
	static final class Action350 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDirectDeclaratorArrayDeclarator(true);    
		}  
	}  
  
	//
	// Rule 351:  function_direct_abstract_declarator ::= basic_direct_abstract_declarator ( <openscope-ast> parameter_declaration_clause ) <openscope-ast> cv_qualifier_seq_opt <openscope-ast> exception_specification_opt
	//
	static final class Action351 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDirectDeclaratorFunctionDeclarator(true);    
		}  
	}  
  
	//
	// Rule 352:  function_direct_abstract_declarator ::= ( <openscope-ast> parameter_declaration_clause ) <openscope-ast> cv_qualifier_seq_opt <openscope-ast> exception_specification_opt
	//
	static final class Action352 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDirectDeclaratorFunctionDeclarator(false);    
		}  
	}  
  
	//
	// Rule 353:  parameter_declaration_clause ::= parameter_declaration_list_opt ...
	//
	static final class Action353 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumePlaceHolder();    
		}  
	}  
  
	//
	// Rule 354:  parameter_declaration_clause ::= parameter_declaration_list_opt
	//
	static final class Action354 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeEmpty();    
		}  
	}  
  
	//
	// Rule 355:  parameter_declaration_clause ::= parameter_declaration_list , ...
	//
	static final class Action355 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumePlaceHolder();    
		}  
	}  
  
	//
	// Rule 361:  abstract_declarator_opt ::= $Empty
	//
	static final class Action361 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeEmpty();    
		}  
	}  
  
	//
	// Rule 362:  parameter_declaration ::= declaration_specifiers parameter_init_declarator
	//
	static final class Action362 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeParameterDeclaration();    
		}  
	}  
  
	//
	// Rule 363:  parameter_declaration ::= declaration_specifiers
	//
	static final class Action363 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeParameterDeclarationWithoutDeclarator();    
		}  
	}  
  
	//
	// Rule 365:  parameter_init_declarator ::= declarator = parameter_initializer
	//
	static final class Action365 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclaratorWithInitializer(true);    
		}  
	}  
  
	//
	// Rule 367:  parameter_init_declarator ::= abstract_declarator = parameter_initializer
	//
	static final class Action367 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclaratorWithInitializer(true);    
		}  
	}  
  
	//
	// Rule 368:  parameter_init_declarator ::= = parameter_initializer
	//
	static final class Action368 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclaratorWithInitializer(false);    
		}  
	}  
  
	//
	// Rule 369:  parameter_initializer ::= assignment_expression
	//
	static final class Action369 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeInitializer();    
		}  
	}  
  
	//
	// Rule 370:  function_definition ::= declaration_specifiers_opt function_direct_declarator <openscope-ast> ctor_initializer_list_opt function_body
	//
	static final class Action370 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeFunctionDefinition(false);    
		}  
	}  
  
	//
	// Rule 371:  function_definition ::= declaration_specifiers_opt function_direct_declarator try <openscope-ast> ctor_initializer_list_opt function_body <openscope-ast> handler_seq
	//
	static final class Action371 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeFunctionDefinition(true);    
		}  
	}  
  
	//
	// Rule 374:  initializer ::= ( expression_list )
	//
	static final class Action374 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeInitializerConstructor();    
		}  
	}  
  
	//
	// Rule 375:  initializer_clause ::= assignment_expression
	//
	static final class Action375 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeInitializer();    
		}  
	}  
  
	//
	// Rule 376:  initializer_clause ::= { <openscope-ast> initializer_list , }
	//
	static final class Action376 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeInitializerList();    
		}  
	}  
  
	//
	// Rule 377:  initializer_clause ::= { <openscope-ast> initializer_list }
	//
	static final class Action377 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeInitializerList();    
		}  
	}  
  
	//
	// Rule 378:  initializer_clause ::= { <openscope-ast> }
	//
	static final class Action378 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeInitializerList();    
		}  
	}  
  
	//
	// Rule 383:  class_specifier ::= class_head { <openscope-ast> member_declaration_list_opt }
	//
	static final class Action383 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeClassSpecifier();    
		}  
	}  
  
	//
	// Rule 384:  class_head ::= class_keyword identifier_name_opt <openscope-ast> base_clause_opt
	//
	static final class Action384 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeClassHead(false);    
		}  
	}  
  
	//
	// Rule 385:  class_head ::= class_keyword template_id_name <openscope-ast> base_clause_opt
	//
	static final class Action385 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeClassHead(false);    
		}  
	}  
  
	//
	// Rule 386:  class_head ::= class_keyword nested_name_specifier identifier_name <openscope-ast> base_clause_opt
	//
	static final class Action386 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeClassHead(true);    
		}  
	}  
  
	//
	// Rule 387:  class_head ::= class_keyword nested_name_specifier template_id_name <openscope-ast> base_clause_opt
	//
	static final class Action387 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeClassHead(true);    
		}  
	}  
  
	//
	// Rule 391:  identifier_name_opt ::= $Empty
	//
	static final class Action391 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeEmpty();    
		}  
	} 
  
	//
	// Rule 395:  visibility_label ::= access_specifier_keyword :
	//
	static final class Action395 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeVisibilityLabel();    
		}  
	}  
  
	//
	// Rule 396:  member_declaration ::= declaration_specifiers_opt <openscope-ast> member_declarator_list ;
	//
	static final class Action396 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclarationSimple(true);    
		}  
	}  
  
	//
	// Rule 397:  member_declaration ::= declaration_specifiers_opt ;
	//
	static final class Action397 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeDeclarationSimple(false);    
		}  
	}  
  
	//
	// Rule 400:  member_declaration ::= dcolon_opt nested_name_specifier template_opt unqualified_id_name ;
	//
	static final class Action400 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeMemberDeclarationQualifiedId();    
		}  
	}  
  
	//
	// Rule 411:  member_declarator ::= declarator constant_initializer
	//
	static final class Action411 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeMemberDeclaratorWithInitializer();    
		}  
	}  
  
	//
	// Rule 419:  base_specifier ::= dcolon_opt nested_name_specifier_opt class_name
	//
	static final class Action419 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeBaseSpecifier(false);    
		}  
	}  
  
	//
	// Rule 420:  base_specifier ::= virtual_opt access_specifier_keyword virtual_opt dcolon_opt nested_name_specifier_opt class_name
	//
	static final class Action420 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeBaseSpecifier(true);    
		}  
	}  
  
	//
	// Rule 421:  virtual_opt ::= virtual
	//
	static final class Action421 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumePlaceHolder();    
		}  
	}  
  
	//
	// Rule 422:  virtual_opt ::= $Empty
	//
	static final class Action422 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeEmpty();    
		}  
	}  
  
	//
	// Rule 428:  conversion_function_id_name ::= operator conversion_type_id
	//
	static final class Action428 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeConversionName();   
		}  
	}  
  
	//
	// Rule 438:  mem_initializer ::= mem_initializer_name ( expression_list_opt )
	//
	static final class Action438 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeConstructorChainInitializer();    
		}  
	}  
  
	//
	// Rule 439:  mem_initializer_name ::= dcolon_opt nested_name_specifier_opt class_name
	//
	static final class Action439 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeQualifiedId(false);    
		}  
	}  
  
	//
	// Rule 442:  operator_function_id_name ::= operator_id_name < <openscope-ast> template_argument_list_opt >
	//
	static final class Action442 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeTemplateId();    
		}  
	}  
  
	//
	// Rule 443:  operator_id_name ::= operator overloadable_operator
	//
	static final class Action443 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeOperatorName();    
		}  
	}  
  
	//
	// Rule 486:  template_declaration ::= export_opt template < template_parameter_list > declaration
	//
	static final class Action486 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeTemplateDeclaration();    
		}  
	}  
  
	//
	// Rule 487:  export_opt ::= export
	//
	static final class Action487 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumePlaceHolder();    
		}  
	}  
  
	//
	// Rule 488:  export_opt ::= $Empty
	//
	static final class Action488 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeEmpty();    
		}  
	}  
  
	//
	// Rule 499:  template_id_name ::= template_identifier < <openscope-ast> template_argument_list_opt >
	//
	static final class Action499 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeTemplateId();    
		}  
	}  
  
	//
	// Rule 508:  explicit_instantiation ::= template declaration
	//
	static final class Action508 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeTemplateExplicitInstantiation();    
		}  
	}  
  
	//
	// Rule 509:  explicit_specialization ::= template < > declaration
	//
	static final class Action509 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeTemplateExplicitSpecialization();    
		}  
	}  
  
	//
	// Rule 510:  try_block ::= try compound_statement <openscope-ast> handler_seq
	//
	static final class Action510 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementTryBlock();    
		}  
	}  
  
	//
	// Rule 513:  handler ::= catch ( exception_declaration ) compound_statement
	//
	static final class Action513 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementCatchHandler(false);    
		}  
	}  
  
	//
	// Rule 514:  handler ::= catch ( ... ) compound_statement
	//
	static final class Action514 extends DeclaredAction< CPPParserAction ,  Object > {
		  
		public void doFinal(ITrialUndoActionProvider< Object > provider,  CPPParserAction  action) {   action.builder.
   consumeStatementCatchHandler(true);    
		}  
	}  

}

