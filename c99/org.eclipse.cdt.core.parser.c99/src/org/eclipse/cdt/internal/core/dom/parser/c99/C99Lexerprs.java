/*******************************************************************************
* Copyright (c) 2006, 2007 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*******************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.c99;

public class C99Lexerprs implements lpg.lpgjavaruntime.ParseTable, C99Lexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2,2,2,1,1,1,1,1,
            1,1,1,2,2,1,1,2,2,2,
            2,1,1,2,2,1,1,1,3,1,
            2,2,2,2,2,3,3,2,2,2,
            1,1,2,2,2,2,2,2,4,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,2,1,1,1,
            1,2,2,2,5,1,2,3,2,2,
            2,1,1,1,2,2,1,1,3,4,
            4,1,2,1,2,1,2,2,2,1,
            2,2,1,2,1,2,1,1,1,1,
            2,2,1,1,1,2,3,2,2,3,
            3,4,3,4,1,2,2,2,3,3,
            2,3,2,1,1,2,2,3,3,2,
            3,2,1,2,1,1,1,1,3,4,
            1,2,1,1,1,1,1,1,2,2,
            2,2,2,2,2,2,2,2,2,2,
            3,2,3,3,4,1,2,1,1
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            33,33,33,33,33,33,33,33,33,33,
            33,33,33,33,33,33,33,33,33,33,
            33,33,33,33,33,33,33,33,33,33,
            33,33,33,33,33,33,33,33,33,33,
            33,33,33,33,33,33,33,33,33,33,
            33,33,33,33,33,33,33,33,33,33,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,24,24,1,1,1,1,1,1,
            1,1,1,1,39,39,39,39,39,39,
            39,39,3,3,3,3,3,3,3,3,
            3,3,3,3,3,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,40,
            40,40,40,40,40,13,13,13,13,13,
            13,13,13,13,13,14,14,14,14,14,
            14,14,14,14,14,7,7,7,7,41,
            41,41,41,41,41,41,15,15,15,15,
            15,15,15,15,15,33,33,33,33,33,
            33,25,25,42,42,43,26,26,44,44,
            44,44,44,44,34,34,34,27,27,6,
            6,20,35,35,35,35,45,46,47,47,
            28,28,28,28,28,28,28,16,16,22,
            22,23,23,36,36,48,48,48,48,48,
            48,49,49,49,49,5,5,50,50,50,
            29,29,29,29,17,17,51,51,51,30,
            30,30,30,21,21,12,12,12,12,37,
            37,31,31,18,18,8,8,8,8,9,
            9,9,9,9,9,9,9,9,9,9,
            10,11,38,38,38,38,32,32,19,19,
            295,589,112,1604,361,359,238,593,361,587,
            175,176,1455,177,1767,308,1761,328,305,306,
            307,222,329,222,237,344,1349,234,326,1564,
            276,1615,276,342,522,2,3,4,5,1593,
            463,431,512,220,463,544,535,517,263,264,
            471,1163,185,186,1408,187,612,308,599,303,
            305,306,307,1350,1758,304,875,175,176,301,
            177,346,308,1760,328,305,306,307,1293,329,
            1444,132,451,321,603,326,1163,185,186,346,
            187,1294,308,1287,303,305,306,307,466,1413,
            304,683,175,176,301,177,1762,308,1366,328,
            305,306,307,1808,329,251,252,480,1397,1759,
            327,779,185,186,256,187,1769,308,1765,303,
            305,306,307,1659,276,304,971,175,176,302,
            177,1407,308,1788,328,305,306,307,1813,329,
            1067,185,186,268,187,327,308,320,303,305,
            306,307,1763,1804,304,1,206,207,302,208,
            503,1550,209,1575,99,206,207,1415,208,254,
            504,209,491,199,200,267,169,1368,132,230,
            293,525,1259,236,112,393,206,207,238,208,
            541,1825,209,1508,132,1412,294,1834,561,504,
            231,197,206,207,1459,208,237,1387,209,235,
            1354,423,202,224,1593,569,228,493,438,569,
            423,1335,132,245,294,1790,493,438,384,1670,
            276,618,243,1444,132,1458,293,1444,132,1814,
            621,1444,132,1439,621,1593,652,1593,654,1764,
            652,620,654,1766,533,1480,132,605,293,1772,
            662,239,626,1797,628,1444,132,662,621,1637,
            646,270,1648,648,646,272,634,648,1648,650,
            1803,1444,132,650,638,240,1648,656,1648,658,
            662,656,274,658,1536,132,662,294,1444,132,
            662,642,1444,132,662,241,1681,276,1692,276,
            1703,276,1714,276,1725,276,1736,276,1747,276,
            662,662
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,78,79,80,81,
            82,83,84,85,86,87,88,89,90,91,
            92,93,94,95,96,97,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,97,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,0,
            96,97,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,0,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,78,79,80,81,
            82,83,84,85,86,87,88,89,90,91,
            92,93,94,95,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,0,83,84,85,86,87,
            88,89,90,91,92,93,94,95,0,1,
            2,3,4,5,6,7,8,9,10,0,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,0,0,30,31,
            32,0,0,0,0,37,38,39,40,41,
            14,15,44,11,11,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,0,1,2,3,4,5,
            6,7,8,9,10,0,12,13,0,0,
            16,0,18,0,20,21,22,23,24,25,
            26,27,28,0,30,0,32,0,1,2,
            3,4,5,6,7,8,9,10,29,12,
            13,28,17,16,19,18,0,20,21,22,
            23,24,25,26,27,28,0,1,2,3,
            4,5,6,7,8,0,0,0,12,0,
            0,0,0,17,0,19,20,21,12,13,
            14,15,16,11,18,14,15,31,17,81,
            19,45,0,37,38,39,40,30,0,32,
            44,29,46,0,1,2,3,4,5,6,
            7,8,9,10,0,12,13,0,0,16,
            46,18,0,20,21,22,23,24,25,26,
            27,14,14,15,36,17,80,19,82,0,
            1,2,3,4,5,6,7,8,9,10,
            0,12,13,0,0,16,82,18,0,20,
            21,22,23,24,25,26,27,0,1,2,
            3,4,5,6,7,8,9,10,0,12,
            13,0,0,16,0,18,0,20,21,22,
            23,24,25,26,27,0,1,2,3,4,
            5,6,7,8,9,10,0,12,13,0,
            0,16,98,18,0,20,21,22,23,24,
            25,26,27,0,1,2,3,4,5,6,
            7,8,9,10,0,0,0,0,0,16,
            31,18,0,0,0,0,12,13,14,15,
            41,28,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,0,0,0,0,
            0,28,0,0,42,43,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,0,0,
            0,0,0,0,0,0,0,0,0,11,
            11,0,11,11,17,11,19,14,15,11,
            17,0,19,12,13,14,15,0,0,0,
            33,34,35,33,34,35,0,36,11,33,
            34,35,0,0,15,0,45,0,12,13,
            14,15,0,0,12,13,14,15,11,0,
            17,0,19,11,0,0,0,0,0,42,
            17,0,19,0,0,11,29,76,79,77,
            0,29,78,36,11,83,0,0,0,0,
            0,0,0,96,97,43,96,97,0,0,
            0,98,96,98,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            662,776,777,778,779,780,781,782,783,784,
            785,820,727,753,733,759,726,742,752,768,
            722,723,724,725,748,749,750,751,816,821,
            737,745,763,857,859,860,817,735,739,741,
            743,771,813,815,875,809,874,728,729,730,
            731,732,734,736,738,740,744,746,747,754,
            755,756,757,758,760,761,762,764,765,766,
            767,769,770,772,773,826,819,525,810,828,
            822,808,873,504,811,812,823,824,827,829,
            830,807,825,818,814,872,858,876,662,776,
            777,778,779,780,781,782,783,784,785,820,
            727,753,733,759,726,742,752,768,722,723,
            724,725,748,749,750,751,816,821,737,745,
            763,857,859,860,817,735,739,741,743,771,
            813,815,875,809,874,728,729,730,731,732,
            734,736,738,740,744,746,747,754,755,756,
            757,758,760,761,762,764,765,766,767,769,
            770,772,773,826,819,541,810,828,822,808,
            873,891,811,812,823,824,827,829,830,807,
            825,818,814,872,858,876,662,776,777,778,
            779,780,781,782,783,784,785,820,727,753,
            733,759,726,742,752,768,722,723,724,725,
            748,749,750,751,816,821,737,745,763,857,
            859,860,817,735,739,741,743,771,813,815,
            875,809,874,728,729,730,731,732,734,736,
            738,740,744,746,747,754,755,756,757,758,
            760,761,762,764,765,766,767,769,770,772,
            773,826,819,889,810,828,822,808,873,887,
            811,812,823,824,827,829,830,807,825,818,
            814,872,858,876,662,501,777,778,779,780,
            781,782,783,784,785,421,727,753,733,507,
            726,742,752,768,722,723,724,725,748,749,
            750,751,333,429,737,745,763,857,859,860,
            393,735,739,741,743,771,473,478,394,443,
            339,728,729,730,731,732,734,736,738,740,
            744,746,747,754,755,756,757,758,760,761,
            762,764,765,766,767,769,770,772,773,775,
            436,456,458,403,698,356,381,492,670,671,
            668,669,672,673,682,449,408,700,713,662,
            858,877,662,776,777,778,779,780,781,782,
            783,784,785,820,727,753,733,759,726,742,
            752,768,722,723,724,725,748,749,750,751,
            816,821,737,745,763,857,859,860,817,735,
            739,741,743,771,813,815,875,809,874,728,
            729,730,731,732,734,736,738,740,744,746,
            747,754,755,756,757,758,760,761,762,764,
            765,766,767,769,770,772,773,826,819,889,
            810,828,822,808,873,662,811,812,823,824,
            827,829,830,807,825,818,814,872,858,876,
            219,776,777,778,779,780,781,782,783,784,
            785,820,727,753,733,759,726,742,752,768,
            722,723,724,725,748,749,750,751,816,821,
            737,745,763,867,865,866,817,735,739,741,
            743,771,813,815,834,809,833,728,729,730,
            731,732,734,736,738,740,744,746,747,754,
            755,756,757,758,760,761,762,764,765,766,
            767,769,770,772,773,826,819,836,810,828,
            822,808,832,835,811,812,823,824,827,829,
            830,807,825,818,814,863,662,776,777,778,
            779,780,781,782,783,784,785,820,727,753,
            733,759,726,742,752,768,722,723,724,725,
            748,749,750,751,816,821,737,745,763,846,
            844,845,817,735,739,741,743,771,813,815,
            448,809,984,728,729,730,731,732,734,736,
            738,740,744,746,747,754,755,756,757,758,
            760,761,762,764,765,766,767,769,770,772,
            773,826,819,843,810,828,822,808,841,842,
            811,812,823,824,827,829,830,807,825,818,
            814,840,662,776,777,778,779,780,781,782,
            783,784,785,820,727,753,733,759,726,742,
            752,768,722,723,724,725,748,749,750,751,
            816,821,737,745,763,846,844,845,817,735,
            739,741,743,771,813,815,448,809,985,728,
            729,730,731,732,734,736,738,740,744,746,
            747,754,755,756,757,758,760,761,762,764,
            765,766,767,769,770,772,773,826,819,843,
            810,828,822,808,841,842,811,812,823,824,
            827,829,830,807,825,818,814,840,662,776,
            777,778,779,780,781,782,783,784,785,820,
            727,753,733,759,726,742,752,768,722,723,
            724,725,748,749,750,751,816,821,737,745,
            763,856,854,855,817,735,739,741,743,771,
            813,815,448,809,851,728,729,730,731,732,
            734,736,738,740,744,746,747,754,755,756,
            757,758,760,761,762,764,765,766,767,769,
            770,772,773,826,819,853,810,828,822,808,
            961,852,811,812,823,824,827,829,830,807,
            825,818,814,850,662,776,777,778,779,780,
            781,782,783,784,785,820,727,753,733,759,
            726,742,752,768,722,723,724,725,748,749,
            750,751,816,821,737,745,763,846,844,845,
            817,735,739,741,743,771,813,815,448,809,
            986,728,729,730,731,732,734,736,738,740,
            744,746,747,754,755,756,757,758,760,761,
            762,764,765,766,767,769,770,772,773,826,
            819,843,810,828,822,808,841,842,811,812,
            823,824,827,829,830,807,825,818,814,840,
            662,776,777,778,779,780,781,782,783,784,
            785,820,727,753,733,759,726,742,752,768,
            722,723,724,725,748,749,750,751,816,821,
            737,745,763,846,844,845,817,735,739,741,
            743,771,813,815,448,809,987,728,729,730,
            731,732,734,736,738,740,744,746,747,754,
            755,756,757,758,760,761,762,764,765,766,
            767,769,770,772,773,826,819,843,810,828,
            822,808,841,842,811,812,823,824,827,829,
            830,807,825,818,814,840,662,776,777,778,
            779,780,781,782,783,784,785,820,727,753,
            733,759,726,742,752,768,722,723,724,725,
            748,749,750,751,816,821,737,745,763,856,
            854,855,817,735,739,741,743,771,813,815,
            448,809,851,728,729,730,731,732,734,736,
            738,740,744,746,747,754,755,756,757,758,
            760,761,762,764,765,766,767,769,770,772,
            773,826,819,853,810,828,822,808,962,852,
            811,812,823,824,827,829,830,807,825,818,
            814,850,662,776,777,778,779,780,781,782,
            783,784,785,820,727,753,733,759,726,742,
            752,768,722,723,724,725,748,749,750,751,
            816,821,737,745,763,856,854,855,817,735,
            739,741,743,771,813,815,448,809,851,728,
            729,730,731,732,734,736,738,740,744,746,
            747,754,755,756,757,758,760,761,762,764,
            765,766,767,769,770,772,773,826,819,853,
            810,828,822,808,662,852,811,812,823,824,
            827,829,830,807,825,818,814,850,1,776,
            777,778,779,780,781,782,783,784,785,662,
            727,753,733,759,726,742,752,768,722,723,
            724,725,748,749,750,751,250,662,737,745,
            763,662,32,40,662,735,739,741,743,771,
            575,565,579,711,692,728,729,730,731,732,
            734,736,738,740,744,746,747,754,755,756,
            757,758,760,761,762,764,765,766,767,769,
            770,772,773,775,247,776,777,778,779,780,
            781,782,783,784,785,662,800,806,52,37,
            799,662,805,662,795,796,797,798,801,802,
            803,804,595,662,587,255,585,662,776,777,
            778,779,780,781,782,783,784,785,717,800,
            806,701,919,799,920,805,58,795,796,797,
            798,801,802,803,804,573,662,786,787,788,
            789,790,791,792,793,662,265,662,977,662,
            662,244,27,581,97,577,975,976,957,959,
            958,960,554,691,369,575,565,410,919,715,
            920,583,662,978,979,980,981,587,662,585,
            974,531,972,662,776,777,778,779,780,781,
            782,783,784,785,662,800,806,259,242,799,
            396,805,662,795,796,797,798,801,802,803,
            804,923,575,565,721,919,973,920,971,287,
            776,777,778,779,780,781,782,783,784,785,
            662,800,806,662,662,799,416,805,662,795,
            796,797,798,801,802,803,804,286,776,777,
            778,779,780,781,782,783,784,785,662,800,
            806,662,662,799,662,805,662,795,796,797,
            798,801,802,803,804,288,776,777,778,779,
            780,781,782,783,784,785,662,800,806,114,
            662,799,661,805,662,795,796,797,798,801,
            802,803,804,246,776,777,778,779,780,781,
            782,783,784,785,266,662,662,662,662,554,
            910,369,662,662,662,662,957,959,958,960,
            911,609,662,776,777,778,779,780,781,782,
            783,784,785,12,776,777,778,779,780,781,
            782,783,784,785,277,776,777,778,779,780,
            781,782,783,784,785,662,662,662,662,662,
            662,550,662,662,946,947,278,776,777,778,
            779,780,781,782,783,784,785,662,776,777,
            778,779,780,781,782,783,784,785,283,776,
            777,778,779,780,781,782,783,784,785,281,
            776,777,778,779,780,781,782,783,784,785,
            279,776,777,778,779,780,781,782,783,784,
            785,282,776,777,778,779,780,781,782,783,
            784,785,280,776,777,778,779,780,781,782,
            783,784,785,292,776,777,778,779,780,781,
            782,783,784,785,290,776,777,778,779,780,
            781,782,783,784,785,291,776,777,778,779,
            780,781,782,783,784,785,289,776,777,778,
            779,780,781,782,783,784,785,662,21,33,
            662,26,22,275,16,221,218,662,17,693,
            712,269,690,704,581,710,577,246,246,703,
            246,662,246,957,959,958,960,18,662,260,
            857,859,860,857,859,860,271,716,706,857,
            859,860,273,253,924,662,718,23,957,959,
            958,960,19,662,957,959,958,960,705,662,
            919,662,920,707,25,662,662,662,662,676,
            581,662,577,24,662,709,719,537,697,495,
            662,675,696,547,708,885,662,662,662,662,
            662,662,662,858,879,677,858,878,662,662,
            662,246,858,218
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 91,
           NT_OFFSET         = 98,
           LA_STATE_OFFSET   = 991,
           MAX_LA            = 1,
           NUM_RULES         = 329,
           NUM_NONTERMINALS  = 52,
           NUM_SYMBOLS       = 150,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 330,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 98,
           EOLT_SYMBOL       = 65,
           ACCEPT_ACTION     = 661,
           ERROR_ACTION      = 662;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
