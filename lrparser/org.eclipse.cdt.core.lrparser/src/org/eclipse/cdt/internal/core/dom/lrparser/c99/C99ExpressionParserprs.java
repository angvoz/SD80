/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99ExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, C99ExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            4,1,4,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,3,2,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,5,9,8,
            3,2,2,2,3,2,4,2,2,2,
            2,2,1,1,1,1,2,1,2,2,
            2,1,2,2,1,2,2,1,2,2,
            1,2,2,1,3,1,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,5,5,6,6,2,2,2,1,0,
            1,2,4,2,1,1,1,3,1,1,
            2,3,6,7,1,0,1,3,1,3,
            1,1,1,1,1,1,3,1,1,1,
            1,1,3,1,2,2,1,5,3,1,
            3,5,1,3,1,3,2,4,3,5,
            4,6,6,3,5,1,1,2,3,4,
            1,2,1,3,1,1,3,2,1,1,
            1,1,2,1,2,3,1,1,1,3,
            1,2,2,2,3,4,5,1,5,1,
            1,3,3,4,1,1,2,3,2,3,
            2,1,0,1,2,1,1,1,1,1,
            2,4,3,6,2,4,1,1,-37,0,
            0,0,0,0,0,0,-2,0,0,0,
            0,0,0,0,0,0,0,0,-73,0,
            0,-4,-14,-30,-16,-17,0,0,0,0,
            -124,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-180,0,-113,0,0,0,0,0,0,
            0,0,0,0,-34,-18,-19,0,-20,0,
            0,0,0,0,0,0,0,0,-35,-68,
            -21,-172,-22,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-173,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-168,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-31,-23,-194,-76,-130,-3,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -143,0,0,-24,0,-49,0,0,0,0,
            0,0,0,-158,0,0,0,0,0,-74,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-154,0,-25,-26,-87,0,-110,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-129,0,
            0,0,0,0,0,0,-88,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-188,0,0,0,0,0,0,
            0,-69,0,0,0,0,0,0,0,0,
            0,0,0,-27,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-89,-90,-91,-92,-93,-57,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-58,0,
            0,0,0,0,0,0,-70,0,0,0,
            0,0,0,0,0,0,0,0,-59,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-60,0,
            0,0,0,0,0,0,-114,0,0,0,
            0,0,0,0,0,0,0,0,-61,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-62,0,
            0,0,0,0,0,0,-131,0,0,0,
            0,0,0,0,0,0,0,0,-63,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-64,0,
            0,0,0,0,0,0,-156,0,0,0,
            0,0,0,0,0,0,0,0,-65,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-66,0,
            0,0,0,0,0,0,-94,0,0,0,
            0,0,0,0,0,0,0,0,-67,0,
            0,0,0,0,0,0,-133,0,0,0,
            0,0,0,0,0,0,0,0,-38,0,
            0,0,0,0,0,0,-177,0,0,-95,
            -96,-97,-81,-98,0,0,0,0,-147,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-6,0,0,0,0,0,0,0,0,
            0,0,-5,0,0,0,0,0,0,0,
            0,0,0,0,-148,0,0,0,0,0,
            0,0,-202,0,0,0,0,0,0,0,
            0,0,0,0,-171,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-185,0,0,0,0,0,0,
            0,-99,0,0,0,0,0,0,0,0,
            0,0,-191,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-195,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -205,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-123,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-100,-132,
            -12,0,0,0,0,0,0,0,-56,0,
            0,0,0,0,0,0,-101,0,0,0,
            0,0,0,0,0,-150,0,0,0,0,
            0,0,-151,0,0,0,0,0,0,0,
            0,0,0,0,0,-116,0,-107,-77,0,
            -142,-102,0,0,-71,0,-109,0,-82,0,
            -79,-103,-146,-111,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -104,0,0,0,0,0,0,0,0,0,
            0,0,0,-55,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -52,0,0,0,0,0,0,0,-86,0,
            0,0,0,0,0,-53,0,0,0,0,
            0,0,0,-80,0,0,0,0,0,0,
            0,-186,-84,-198,-118,-120,0,0,0,0,
            -182,-75,0,0,0,0,-174,-105,0,0,
            -106,0,0,0,0,-204,-159,-121,0,0,
            0,0,0,0,0,0,0,0,0,-163,
            0,0,0,0,0,0,0,0,0,0,
            0,-117,0,0,0,0,0,0,-125,0,
            0,0,0,0,0,0,0,0,-128,-119,
            -122,0,0,-50,0,0,0,0,0,0,
            0,-134,0,0,0,-136,-164,-162,0,0,
            0,-165,0,0,0,0,-7,0,0,0,
            0,0,0,0,0,-51,0,0,0,0,
            0,0,0,0,0,0,0,-43,0,0,
            0,0,0,0,0,-169,0,0,-44,0,
            0,0,0,0,0,0,-152,0,0,-45,
            0,0,0,0,0,0,0,-196,0,0,
            -46,0,0,0,0,0,0,0,-197,0,
            0,0,-167,-149,-153,-207,0,-47,0,0,
            0,0,0,0,0,0,0,-48,0,0,
            0,0,0,0,0,-78,0,0,0,0,
            0,-179,0,0,0,0,0,0,0,0,
            -36,-138,-32,0,0,0,0,0,0,0,
            0,0,-206,0,0,0,0,-39,0,0,
            0,0,0,0,0,0,-8,0,0,0,
            0,0,0,-141,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-9,0,0,0,0,0,0,
            0,-10,0,0,0,0,0,0,-11,0,
            0,0,0,0,0,-15,-144,-28,-170,-29,
            -175,0,-176,0,0,0,0,0,-40,0,
            0,0,0,0,0,-189,0,-187,0,0,
            0,-192,0,0,0,0,0,0,0,0,
            0,0,0,-200,0,0,0,0,0,0,
            0,-41,0,0,0,0,0,0,-42,0,
            0,0,0,0,0,-83,0,0,0,-85,
            0,-72,0,0,0,0,0,0,0,0,
            -115,-33,0,-190,-54,-181,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-137,0,0,-139,-178,-183,0,-193,0,
            0,0,0,0,0,-157,0,0,-161,-184,
            -199,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-108,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-135,0,0,0,0,0,0,0,0,
            0,0,-140,0,0,-13,0,0,0,0,
            0,-1,-166,-112,0,0,0,0,0,0,
            0,-127,-160,-155,0,-201,0,-203,0,0,
            0,0,0,0,0,0,0,0,-126,0,
            -145,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            83,8,24,24,20,20,26,26,68,68,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,51,51,69,
            69,5,5,5,5,5,5,5,5,5,
            5,5,6,6,7,7,7,7,9,9,
            9,10,10,10,11,11,11,11,11,12,
            12,12,13,13,14,14,15,15,16,16,
            17,17,18,18,19,19,19,19,19,19,
            19,19,19,19,19,19,93,41,33,84,
            84,71,71,46,94,94,94,94,94,94,
            94,95,95,95,96,96,101,101,102,102,
            97,97,98,98,98,104,104,99,99,99,
            99,100,100,100,100,100,103,103,23,23,
            23,23,23,28,28,28,77,77,72,72,
            72,72,73,73,73,74,74,74,75,75,
            75,76,76,76,105,105,106,106,107,29,
            31,31,31,31,31,52,54,54,54,54,
            54,54,54,54,54,54,54,54,65,65,
            27,27,62,62,62,62,63,63,63,55,
            55,56,56,48,48,48,32,85,85,78,
            79,79,79,64,64,80,80,81,81,66,
            66,21,22,22,22,30,47,47,34,34,
            34,34,37,37,39,35,35,36,40,40,
            108,108,38,109,109,86,86,25,25,25,
            25,25,25,25,25,25,82,49,49,49,
            49,58,58,57,57,57,59,59,50,50,
            87,87,61,61,60,60,60,42,42,42,
            43,44,44,44,45,45,45,45,53,53,
            70,70,70,70,67,88,89,89,90,90,
            91,91,110,110,111,111,112,112,112,112,
            114,114,113,113,113,115,115,83,83,1,
            14,19,15,333,526,44,336,107,335,377,
            376,391,379,453,393,525,484,74,91,260,
            134,211,42,831,248,192,209,136,133,135,
            159,554,14,19,15,333,526,44,336,481,
            335,377,376,391,379,453,393,525,484,74,
            278,138,429,165,463,14,19,15,333,42,
            35,142,145,148,151,470,13,56,1594,386,
            332,1366,1101,1174,1516,1520,1159,271,244,470,
            470,139,734,91,280,1522,217,1317,219,1345,
            221,222,227,23,266,1089,455,269,281,16,
            1198,1091,554,14,19,15,333,526,44,336,
            481,335,377,376,391,379,453,393,525,484,
            74,278,434,14,19,15,333,526,44,336,
            481,335,377,376,391,379,453,393,525,484,
            74,278,248,57,165,279,331,612,14,19,
            15,333,526,44,336,280,335,377,376,391,
            379,453,393,525,484,74,91,252,211,281,
            272,673,1482,287,374,282,612,14,19,15,
            333,42,44,336,309,335,377,376,852,283,
            368,14,19,15,333,526,44,336,1634,335,
            377,376,391,379,453,393,525,484,74,1104,
            183,22,193,260,237,218,702,724,332,696,
            14,19,15,333,526,44,336,1642,335,377,
            376,391,379,453,393,525,484,74,1249,401,
            14,19,15,333,526,44,336,743,335,377,
            376,391,379,453,393,525,484,74,1344,1306,
            392,286,362,238,583,14,19,15,333,526,
            44,336,470,335,377,376,391,379,453,393,
            525,484,74,278,612,14,19,15,333,526,
            44,336,1201,335,377,376,391,379,453,393,
            525,484,74,92,212,257,492,512,569,612,
            14,19,15,333,526,44,336,284,335,377,
            376,391,379,453,393,525,484,74,85,612,
            14,19,15,333,526,44,336,470,335,377,
            376,391,379,453,393,525,484,74,84,612,
            14,19,15,333,526,44,336,21,335,377,
            376,391,379,453,393,525,484,74,83,612,
            14,19,15,333,526,44,336,470,335,377,
            376,391,379,453,393,525,484,74,82,612,
            14,19,15,333,526,44,336,270,335,377,
            376,391,379,453,393,525,484,74,81,612,
            14,19,15,333,526,44,336,470,335,377,
            376,391,379,453,393,525,484,74,80,612,
            14,19,15,333,526,44,336,276,335,377,
            376,391,379,453,393,525,484,74,79,612,
            14,19,15,333,526,44,336,470,335,377,
            376,391,379,453,393,525,484,74,78,612,
            14,19,15,333,526,44,336,277,335,377,
            376,391,379,453,393,525,484,74,77,612,
            14,19,15,333,526,44,336,571,335,377,
            376,391,379,453,393,525,484,74,76,612,
            14,19,15,333,526,44,336,286,335,377,
            376,391,379,453,393,525,484,74,75,612,
            14,19,15,333,42,44,614,470,134,211,
            407,440,501,118,58,136,133,135,159,612,
            14,19,15,333,526,44,336,223,335,377,
            376,391,379,453,393,525,484,74,1461,138,
            1232,165,612,14,19,15,333,42,39,142,
            145,148,151,640,14,19,15,333,40,1366,
            1101,1174,1516,1520,1159,612,14,19,15,333,
            526,44,336,470,335,377,376,391,379,453,
            393,525,484,74,1463,612,14,19,15,333,
            42,44,336,228,335,377,376,391,379,453,
            393,525,484,93,612,14,19,15,333,42,
            44,336,106,335,377,376,391,379,453,393,
            525,484,93,612,14,19,15,333,42,44,
            336,1476,335,377,376,391,379,453,393,525,
            484,93,612,14,19,15,333,42,44,336,
            210,335,377,376,391,379,453,393,525,484,
            93,612,14,19,15,333,42,44,336,1494,
            335,377,376,391,379,453,393,525,484,93,
            612,14,19,15,333,42,44,336,201,335,
            377,376,391,379,453,393,525,484,73,385,
            396,668,14,19,15,333,33,202,523,612,
            14,19,15,333,42,44,336,524,335,377,
            376,391,379,453,1121,271,463,14,19,15,
            333,42,35,840,216,1317,219,1345,221,222,
            227,1556,264,1089,455,269,472,260,6,469,
            245,682,446,274,1612,117,341,59,271,166,
            261,782,413,340,117,1659,275,216,1317,219,
            1345,221,222,227,273,264,1089,455,269,20,
            847,415,134,211,252,211,1250,258,239,144,
            133,135,159,687,612,14,19,15,333,42,
            44,336,1343,335,377,376,391,379,453,393,
            1102,612,14,19,15,333,42,44,336,286,
            335,377,376,391,379,1039,612,14,19,15,
            333,42,44,336,795,335,377,376,391,1057,
            134,211,597,214,260,6,6,137,133,135,
            159,152,844,1552,1555,134,211,376,531,1184,
            1531,601,147,133,135,159,152,647,6,1267,
            1251,139,274,165,1184,1191,1623,271,252,211,
            708,143,146,149,152,216,1317,219,1345,221,
            222,227,621,1393,264,1089,455,269,1328,299,
            216,1317,219,1345,221,222,227,1661,208,117,
            628,675,687,1328,612,14,19,15,333,42,
            44,336,449,335,377,854,6,508,309,197,
            199,1570,711,241,1566,194,454,612,14,19,
            15,333,42,38,198,199,612,14,19,15,
            333,42,44,336,182,335,377,952,612,14,
            19,15,333,42,44,336,510,335,616,612,
            14,19,15,333,42,44,336,674,335,617,
            612,14,19,15,333,42,44,336,533,335,
            618,612,14,19,15,333,42,44,336,72,
            335,807,226,309,117,646,258,1184,612,14,
            19,15,333,42,44,336,1739,850,612,14,
            19,15,333,42,44,336,327,851,240,26,
            225,1739,472,216,1317,219,1345,221,222,227,
            1559,491,6,375,1739,1739,847,134,211,329,
            1569,457,229,350,141,133,135,159,612,14,
            19,15,333,42,44,615,271,612,14,19,
            15,333,42,37,6,1739,89,1739,140,1739,
            165,1739,1633,264,1089,455,269,217,1317,219,
            1345,221,222,227,612,14,19,15,333,42,
            36,263,612,14,19,15,333,42,35,612,
            14,19,15,333,42,34,6,6,6,597,
            6,117,1739,117,309,412,309,647,309,612,
            14,19,15,333,42,47,117,1739,708,196,
            1739,196,682,196,1739,242,289,243,1381,87,
            1381,87,1381,87,117,1739,1739,389,1739,389,
            288,389,612,14,19,15,333,42,46,612,
            14,19,15,333,42,45,808,375,290,390,
            821,582,525,14,19,15,333,42,43,1571,
            1739,595,6,1646,597,6,309,134,211,827,
            457,134,211,457,150,133,135,159,153,133,
            135,159,46,1739,1040,94,595,309,1739,626,
            827,291,185,827,827,87,142,827,87,238,
            309,309,1739,1095,827,196,1092,827,196,1040,
            1594,256,1040,184,1207,1739,1739,1207,727,196,
            1262,1739,196,1739,530,1739,203,204,1207,1739,
            191,1207,1739,191,1739,362,256,494,1643,256,
            1268,1643,48,727,191,1262,913,191,1262,271,
            827,1536,1643,588,1557,1643,668,14,19,15,
            333,32,496,588,290,1040,266,1089,455,269,
            457,1739,290,190,630,1648,309,1739,308,1739,
            1267,827,827,1739,1739,251,211,1739,1739,290,
            1267,290,256,251,211,87,196,1040,232,767,
            1739,1262,279,307,1739,1207,1739,1739,1739,1739,
            251,211,251,211,1739,1739,1739,1739,1739,207,
            1739,192,456,1739,257,1739,1739,1739,1739,207,
            456,1739,1739,1220,1272,1739,1739,1739,1739,1739,
            1739,1739,1739,1478,1272,317,549,1103,1739,1197,
            1739,1739,1739,1739,859,1739,0,17,179,0,
            18,178,0,1,1963,0,1,1974,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,0,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,0,29,
            30,31,32,33,34,35,36,37,38,39,
            40,0,42,43,44,0,1,0,3,0,
            5,6,7,8,9,0,0,0,0,14,
            15,16,17,18,6,7,8,55,56,57,
            58,0,1,2,29,30,31,32,33,34,
            35,36,37,38,39,40,45,42,43,44,
            0,46,47,0,1,0,3,50,5,6,
            7,8,9,48,49,0,0,14,15,16,
            17,18,55,56,57,58,0,0,1,63,
            3,5,29,30,31,32,33,34,35,36,
            37,38,39,40,0,42,43,44,0,46,
            47,0,1,0,3,28,5,6,7,8,
            9,0,1,2,64,14,15,16,17,18,
            55,56,57,58,0,0,1,51,3,5,
            29,30,31,32,33,34,35,36,37,38,
            39,40,0,42,43,44,80,46,47,0,
            1,0,3,28,5,6,7,8,9,61,
            62,10,11,14,15,16,17,18,0,45,
            59,0,4,0,1,4,3,0,29,30,
            31,32,33,34,35,36,37,38,39,40,
            66,42,43,44,0,46,47,0,1,0,
            3,28,5,6,7,8,9,0,1,0,
            3,14,15,16,17,18,0,0,1,0,
            4,53,54,4,53,54,29,30,31,32,
            33,34,35,36,37,38,39,40,0,42,
            43,44,65,46,47,0,1,0,3,0,
            12,6,7,8,9,6,7,8,0,14,
            15,16,17,18,6,7,8,0,0,53,
            54,0,5,5,29,30,31,32,33,34,
            35,36,37,38,39,40,0,42,43,44,
            0,0,6,7,8,9,6,7,8,0,
            14,15,16,17,18,6,7,8,41,0,
            1,2,45,4,46,29,30,31,32,33,
            34,35,36,37,38,39,40,0,1,2,
            3,4,5,0,0,0,9,10,11,5,
            13,6,7,8,0,0,19,20,21,22,
            23,24,25,26,27,0,1,2,13,4,
            0,1,2,3,4,5,0,12,0,9,
            10,11,0,13,0,41,10,11,51,19,
            20,21,22,23,24,25,26,27,0,1,
            2,0,4,0,1,2,3,4,5,0,
            12,68,69,10,11,0,13,63,0,10,
            11,51,19,20,21,22,23,24,25,26,
            27,28,0,1,2,3,4,5,0,0,
            2,0,10,11,5,13,5,65,64,46,
            12,19,20,21,22,23,24,25,26,27,
            0,0,2,45,4,0,1,2,3,4,
            0,0,12,0,59,10,11,0,13,0,
            41,0,41,51,19,20,21,22,23,24,
            25,26,27,0,0,1,2,3,4,0,
            0,2,0,4,10,11,13,13,0,48,
            49,12,47,19,20,21,22,23,24,25,
            26,27,28,0,1,2,3,4,28,48,
            49,61,62,10,11,0,13,60,0,60,
            0,0,19,20,21,22,23,24,25,26,
            27,28,0,1,2,3,4,0,1,0,
            3,59,10,11,0,13,0,1,4,3,
            0,19,20,21,22,23,24,25,26,27,
            28,0,1,2,3,4,48,49,48,49,
            0,10,11,0,13,0,1,0,28,0,
            19,20,21,22,23,24,25,26,27,0,
            1,2,3,4,50,0,0,2,28,10,
            11,5,13,0,1,28,3,12,19,20,
            21,22,23,24,25,26,27,0,1,2,
            3,4,0,0,0,50,0,10,11,50,
            13,0,0,0,12,12,19,20,21,22,
            23,24,25,26,27,0,1,2,3,4,
            0,0,28,0,0,10,11,0,13,0,
            0,0,66,0,19,20,21,22,23,24,
            25,26,27,0,52,2,45,4,5,6,
            7,8,9,0,0,12,0,14,15,16,
            17,18,0,0,2,12,4,5,6,7,
            8,9,45,0,12,45,14,15,16,17,
            18,60,0,0,41,0,0,0,0,0,
            0,70,71,72,73,74,75,76,77,78,
            79,0,0,41,0,52,0,6,7,8,
            9,0,0,0,0,14,15,16,17,18,
            6,7,8,9,0,0,0,0,14,15,
            16,17,18,6,7,8,9,0,0,0,
            0,14,15,16,17,18,6,7,8,9,
            0,0,2,0,14,15,16,17,18,0,
            1,2,12,0,5,2,0,0,5,19,
            20,12,0,0,0,12,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            41,0,52,0,41,0,0,0,0,0,
            0,0,0,0,0,0,0,67,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1739,527,1456,557,1442,1,1951,1952,1953,1901,
            1434,1407,59,1449,1902,1900,1954,1903,1899,1626,
            1041,893,1749,1750,1751,1752,1277,882,1739,1906,
            1911,1910,1908,1909,1907,1912,1913,1905,1914,1915,
            1916,88,1183,1099,853,1739,1,1,1,1739,
            190,1,1,1,1,54,66,61,247,1,
            1,1,1,1,1,1,1,1331,1320,1309,
            1298,1,1963,1339,1,1,1,1,1,1,
            1,1,1,1,1,1,594,1,1,1,
            68,190,1934,1739,1,1739,1,1994,190,1,
            1,1,1,1348,1358,60,1739,1,1,1,
            1,1,1331,1320,1309,1298,1739,1739,1919,1166,
            1920,1742,1,1,1,1,1,1,1,1,
            1,1,1,1,1739,1,1,1,62,190,
            1934,1739,1,1739,1,1185,190,1,1,1,
            1,1,1963,1339,1151,1,1,1,1,1,
            1331,1320,1309,1298,1739,1739,1919,1741,1920,1748,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1739,1,1,1,1726,190,1934,1739,
            1,51,1,1186,189,1,1,1,1,1286,
            1254,1398,839,1,1,1,1,1,48,1206,
            982,50,1509,1739,1919,1509,1920,70,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1747,1,1,1,1739,189,1934,1739,1,1739,
            1,1208,190,1,1,1,1,1739,1768,1739,
            1769,1,1,1,1,1,49,1739,1975,1739,
            1509,1502,1469,1097,1502,1469,1,1,1,1,
            1,1,1,1,1,1,1,1,268,1,
            1,1,1049,190,1934,1739,1918,1739,1917,1739,
            500,1951,1952,1953,1901,1951,1952,1953,248,1902,
            1900,1954,1903,1899,1,1,1,1739,1739,1502,
            1469,1739,1744,1746,1906,1911,1910,1908,1909,1907,
            1912,1913,1905,1914,1915,1916,128,1183,1099,853,
            246,1739,1951,1952,1953,1901,1951,1952,1953,249,
            1902,1900,1954,1903,1899,1951,1952,1953,1743,1739,
            1963,1339,1346,1239,1745,1906,1911,1910,1908,1909,
            1907,1912,1913,1905,1914,1915,1916,1,1756,1456,
            1757,364,1742,72,1,250,529,1434,1407,90,
            1449,1951,1952,1953,67,64,1626,1041,893,1749,
            1750,1751,1752,1277,882,259,1963,1073,486,1,
            1739,1756,1456,1757,1066,1742,53,500,1739,905,
            1434,1407,71,1449,69,90,1398,839,1741,1626,
            1041,893,1749,1750,1751,1752,1277,882,265,1963,
            1073,1739,1239,1,1756,1456,1757,1442,27,52,
            500,1134,1535,1434,1407,1739,1449,1166,253,1398,
            839,1741,1626,1041,893,1749,1750,1751,1752,1277,
            882,1457,1739,1756,1456,1757,1442,1742,267,1739,
            1086,1,1434,1407,1744,1449,1744,1049,1151,27,
            500,1626,1041,893,1749,1750,1751,1752,1277,882,
            262,58,1192,1644,1,1739,1,1,1,1,
            63,1739,500,1739,1020,1,1,209,1,1739,
            1743,57,1743,1741,1,1,1,1,1,1,
            1,1,1,65,1739,1756,1456,1757,1442,265,
            41,1192,200,1239,1434,1407,486,1449,1739,1348,
            1358,500,2047,1626,1041,893,1749,1750,1751,1752,
            1277,882,1088,1,1756,1456,1757,1442,1088,1348,
            1358,1286,1254,1434,1407,1739,1449,944,56,574,
            55,1739,1626,1041,893,1749,1750,1751,1752,1277,
            882,1457,1739,1756,1456,1757,1442,206,1919,1739,
            1920,1001,1434,1407,1,1449,1739,1919,1097,1920,
            1739,1626,1041,893,1749,1750,1751,1752,1277,882,
            1457,1739,1756,1456,1757,1442,1348,1358,1348,1358,
            187,1434,1407,1739,1449,1,1736,186,1088,1,
            1626,1041,893,1749,1750,1751,1752,1277,882,1739,
            1756,1458,1757,1442,1994,220,1,1372,1266,1434,
            1407,1748,1449,205,1182,1382,1182,500,1626,1041,
            893,1749,1750,1751,1752,1277,882,1739,1756,1460,
            1757,1442,1739,218,188,1994,1739,1434,1407,1993,
            1449,28,1739,1739,925,500,1626,1041,893,1749,
            1750,1751,1752,1277,882,1,1756,1456,1757,1442,
            1739,42,1414,1739,1739,1434,1407,28,1449,1739,
            205,1739,1747,1739,1626,1041,893,1749,1750,1751,
            1752,1277,882,17,1459,1727,432,1727,1727,179,
            179,179,179,285,1739,1727,1739,179,179,179,
            179,179,18,1739,1730,963,1730,1730,178,178,
            178,178,1766,1739,1730,2701,178,178,178,178,
            178,819,1739,1739,1727,1739,1739,1739,1739,1739,
            1739,799,779,759,739,719,679,699,659,639,
            619,129,1739,1730,1739,1534,1739,1951,1952,1953,
            1901,1739,1739,1739,130,1902,1900,1954,1903,1899,
            1951,1952,1953,1901,1739,1739,1739,131,1902,1900,
            1954,1903,1899,1951,1952,1953,1901,1739,1739,1739,
            132,1902,1900,1954,1903,1899,1951,1952,1953,1901,
            31,1739,1383,1739,1902,1900,1954,1903,1899,1,
            1733,1073,1532,1,1744,1192,1739,1739,1744,1763,
            1764,500,1739,1739,1739,500,1739,1739,1739,1739,
            1739,1739,1739,1739,1739,1739,1739,1739,1739,1739,
            1739,1739,1739,1739,1739,1739,1739,1739,1739,1739,
            1743,1739,452,1739,1743,1739,1739,1739,1739,1739,
            1739,1739,1739,1739,1739,1739,1739,334
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            427,1,80,41,80,80,80,80,80,80,
            80,80,80,3,357,244,241,248,246,254,
            252,256,255,258,257,10,80,357,357,226,
            226,338,80,143,143,332,357,80,80,80,
            80,80,80,80,80,80,80,80,80,80,
            80,80,80,80,80,80,80,80,80,80,
            80,80,80,80,80,80,80,143,143,143,
            45,56,336,74,196,141,140,307,319,319,
            70,70,319,70,319,371,97,97,241,241,
            246,246,246,246,244,244,252,248,248,255,
            254,300,257,256,229,72,54,332,327,146,
            45,394,78,143,398,199,282,166,282,166,
            276,282,80,54,327,394,394,45,77,74,
            143,330,371,142,201,166,166,166,166,276,
            276,278,49,54,394,327,80,80,45,78,
            196,295,294,336,201,143,166,193,269,166,
            166,193,278,302,278,276,193,52,305,226,
            80,48,54,327,45,45,143,398,199,330,
            193,271,193,193,80,226,278,56,45,226,
            80,278,201,265,80,264,93,336,193,45,
            193,143,142,271,80,93,227
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,66,12,2,52,67,19,20,13,
            4,10,11,53,54,48,49,55,56,57,
            58,61,62,63,64,65,68,69,46,60,
            70,71,72,73,74,76,75,77,78,79,
            59,41,80,45,51,5,0,60,12,52,
            0,5,46,12,52,19,20,13,4,10,
            11,26,27,21,2,22,23,24,25,1,
            3,28,0,6,7,8,9,51,5,22,
            23,24,25,3,19,20,13,10,11,26,
            27,21,4,2,1,0,7,9,18,8,
            17,16,15,6,14,52,67,19,20,13,
            10,11,53,54,48,49,55,56,57,58,
            61,62,63,64,65,68,69,60,70,71,
            72,73,74,75,76,77,78,79,4,2,
            12,45,41,5,0,6,7,8,2,22,
            23,24,25,1,3,19,20,13,4,10,
            11,26,27,21,0,14,29,6,30,42,
            15,31,16,32,33,17,7,34,35,9,
            43,18,44,36,37,8,38,39,40,1,
            3,47,46,5,0,4,2,12,41,5,
            14,29,6,30,42,15,31,16,32,33,
            17,7,34,35,9,43,18,44,36,37,
            8,38,39,40,50,3,1,0,60,70,
            71,72,73,74,75,76,77,78,79,28,
            4,53,54,10,11,49,48,55,56,57,
            58,61,62,13,63,64,65,51,41,46,
            80,68,69,59,66,5,45,0,66,5,
            4,1,2,59,0,1,3,5,46,45,
            0,14,6,15,16,17,7,9,18,8,
            1,4,28,2,5,45,41,66,12,59,
            0,5,45,46,60,0,37,29,34,32,
            33,31,30,35,36,38,39,40,59,66,
            18,15,9,14,17,16,6,7,8,45,
            1,5,41,2,12,4,0,5,41,21,
            22,23,24,25,1,3,2,19,20,13,
            4,10,11,26,27,0,21,22,23,24,
            25,2,19,20,13,4,10,11,26,27,
            3,1,42,43,44,37,29,34,32,33,
            31,30,35,36,38,39,40,18,15,9,
            14,17,16,6,7,8,0,14,29,6,
            30,42,15,31,16,32,33,17,7,34,
            35,9,43,18,44,36,37,8,38,39,
            40,1,3,50,4,0,21,22,23,24,
            25,1,3,2,19,20,13,4,10,11,
            26,27,47,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            81,8,15,8,15,15,15,15,15,15,
            15,15,15,8,65,8,8,8,8,8,
            8,8,8,8,8,8,15,65,65,9,
            9,62,66,39,39,55,1,15,15,15,
            15,15,15,15,15,15,15,15,15,15,
            15,15,15,66,15,15,15,15,15,15,
            15,15,15,15,15,15,15,39,39,39,
            27,15,71,25,54,17,17,47,48,48,
            29,29,48,29,48,43,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,79,56,79,14,
            27,84,26,39,69,38,8,79,8,79,
            79,8,15,14,79,84,84,27,26,19,
            39,32,2,8,78,79,73,79,73,29,
            79,41,21,79,84,19,15,15,27,26,
            31,17,17,71,78,39,73,23,59,86,
            73,23,41,8,8,29,23,13,8,29,
            15,11,14,19,27,27,39,69,38,33,
            23,50,23,23,15,29,41,15,27,29,
            15,41,77,60,15,8,50,71,23,27,
            23,39,39,50,15,35,8
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,77,76,75,74,73,72,0,69,0,
            91,0,67,8,4,0,25,0,21,0,
            89,0,26,0,8,4,24,0,27,0,
            20,8,44,43,37,35,0,8,20,0,
            51,0,62,63,64,65,52,28,0,8,
            37,35,0,20,8,44,43,0,8,68,
            0,8,84,0,32,8,41,0,8,23,
            49,0,56,8,32,0,86,23,8,0,
            8,83,0,58,0,8,32,48,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,69,10,
            11,1,8,44,55,60,63,72,6,7,
            68,81,82,83,84,12,13,3,47,52,
            56,61,62,66,67,74,75,78,79,80,
            90,54,70,73,42,91,93,16,17,30,
            89,4,14,15,18,19,20,21,29,31,
            22,23,24,25,26,92,5,27,28,32,
            33,34,35,36,37,38,39,40,41,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,101,105,106,107,0,108,109,
            110,111,112,113,114,115,116,117,118,97,
            129,0,122,96,149,98,121,128,0,0,
            0,140,0,145,147,0,148,0,0,0,
            100,158,159,160,0,120,137,139,146,155,
            0,131,136,0,0,138,150,153,154,157,
            103,132,133,134,135,144,161,99,102,104,
            119,123,124,125,126,127,130,142,0,0,
            143,152,95,0,141,151,156,162,163,0,
            164,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            164,80,33,39,87,107,113,138,12,19,
            49,67,119,124,26,45,97,160,179,183,
            147,1,1,30,54,77,187,6,101,154,
            129,154,93,57,57,57
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            17,17,4,4,17,17,17,144,17,24,
            4,24,17,17,24,4,95,24,24,4,
            151,4,4,24,4,24,24,9,104,157,
            132,172,95,64,59,72
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            4,64,25,25,64,62,62,98,53,45,
            25,40,62,62,45,25,48,5,4,4,
            18,91,90,43,25,37,2,67,48,6,
            99,4,48,40,38,40
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            46,46,51,51,46,46,46,86,46,41,
            51,41,46,46,41,51,66,41,41,51,
            59,51,51,41,51,41,41,60,1,41,
            92,41,66,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            34,19,23,23,19,19,19,-1,89,27,
            23,11,19,19,27,23,5,34,34,34,
            64,1,3,27,23,11,34,90,5,37,
            -1,34,5,11,11,11
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            139,12,0,96,0,181,101,0,31,136,
            0,144,163,101,28,0,98,0,150,101,
            2,136,0,97,0,150,101,2,0,153,
            2,0,112,9,175,101,12,0,112,175,
            101,9,12,0,112,9,12,0,112,175,
            101,12,0,112,12,0,130,0,2,0,
            151,97,0,2,97,0,150,101,2,130,
            0,2,0,150,97,0,140,2,0,144,
            173,101,28,120,42,0,144,173,101,28,
            42,0,125,0,99,0,178,101,125,0,
            101,125,0,141,99,0,148,101,28,120,
            44,0,148,101,28,120,43,0,148,101,
            28,44,0,148,101,28,43,0,187,85,
            0,77,2,100,97,99,0,187,113,134,
            2,89,0,53,0,0,134,69,110,0,
            29,117,0,154,2,0,97,106,0,154,
            2,21,0,144,163,101,28,113,154,2,
            0,97,3,0,104,0,98,0,177,2,
            97,0,134,12,97,0,134,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            392,0,481,0,1569,1643,1566,1555,1552,0,
            1393,1206,1339,1191,362,1073,1040,0,827,1159,
            309,0,1345,1317,1089,455,362,1073,1040,1594,
            1192,1381,0,1626,1041,893,1066,364,1522,1049,
            1134,1166,1151,1286,1254,486,1358,1348,1331,1320,
            1309,1298,1509,1502,1469,1398,839,1449,1442,1434,
            1407,1277,882,1001,982,963,944,925,905,859,
            549,1020,529,500,819,799,779,759,739,719,
            699,679,659,639,619,309,594,457,574,412,
            432,341,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,176,101,164,21,27,26,11,10,4,
            13,20,19,97,2,102,100,104,103,106,
            105,108,107,110,109,98,45,2,2,67,
            52,2,12,154,134,125,101,11,10,54,
            53,4,58,57,56,55,48,49,13,62,
            61,64,63,69,68,65,79,78,77,75,
            76,74,73,72,71,70,60,154,154,177,
            134,113,101,12,2,137,136,165,166,167,
            44,43,168,42,169,170,1,3,100,100,
            103,103,103,103,102,102,105,104,104,107,
            106,134,109,108,113,113,28,142,4,9,
            112,101,4,153,101,2,120,28,120,28,
            28,120,59,101,4,101,101,112,175,151,
            150,116,101,152,101,28,101,28,101,101,
            28,163,101,28,101,151,175,9,112,4,
            2,128,130,101,45,150,101,148,125,149,
            101,148,173,120,174,101,144,45,181,52,
            12,182,101,151,112,112,140,101,2,142,
            148,101,148,144,60,45,173,60,139,52,
            12,163,101,178,59,140,2,101,144,139,
            144,150,179,45,59,142,45
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "expression_parser_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_name",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_or_typedefname",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 47,
           SCOPE_UBOUND      = 35,
           SCOPE_SIZE        = 36,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 207,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2047,
           MAX_LA            = 2,
           NUM_RULES         = 308,
           NUM_NONTERMINALS  = 115,
           NUM_SYMBOLS       = 208,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1632,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1726,
           ERROR_ACTION      = 1739;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
