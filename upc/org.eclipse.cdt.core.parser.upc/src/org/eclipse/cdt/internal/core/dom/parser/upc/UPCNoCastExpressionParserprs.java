/*******************************************************************************
* Copyright (c) 2006, 2009 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.upc;

public class UPCNoCastExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, UPCNoCastExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,4,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,4,1,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,5,9,8,
            3,2,2,2,3,2,4,2,2,2,
            2,2,1,1,1,1,2,1,2,2,
            2,1,2,2,1,2,2,1,2,2,
            1,2,2,1,3,1,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,6,8,
            0,0,1,1,3,3,3,0,1,0,
            1,2,4,2,1,1,1,3,1,1,
            2,3,7,8,0,1,0,1,3,1,
            3,1,1,1,1,1,1,3,1,1,
            1,1,1,3,1,2,2,1,5,3,
            1,3,5,1,3,1,3,2,4,3,
            5,4,6,6,3,5,1,3,4,5,
            6,0,1,2,1,3,1,1,3,2,
            1,1,1,1,2,1,2,3,1,1,
            1,3,1,2,2,2,3,4,5,1,
            1,7,3,0,0,1,1,3,3,4,
            1,1,2,3,2,3,2,1,0,1,
            2,1,1,1,1,1,2,1,3,6,
            4,2,4,1,1,1,1,1,2,4,
            2,4,2,4,1,1,2,1,1,1,
            3,3,2,1,3,2,3,2,3,2,
            2,11,10,10,9,10,9,9,8,10,
            9,9,8,9,8,8,7,10,9,9,
            8,9,8,8,7,1,1,-38,0,0,
            0,0,0,0,0,0,0,0,-127,0,
            0,0,0,0,0,0,0,0,-2,0,
            0,0,0,0,-129,0,-77,-81,-138,0,
            0,0,0,0,-60,0,0,0,0,0,
            0,0,0,0,0,-179,0,0,0,0,
            0,0,-172,0,0,0,0,0,0,-86,
            0,0,0,0,0,0,0,-39,0,-40,
            0,0,0,0,0,0,0,0,-154,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-61,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-190,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-145,0,
            0,-4,0,-88,-142,0,-18,-117,-180,0,
            0,0,0,0,-135,0,-196,-35,0,-203,
            0,0,0,0,0,-36,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-194,0,-209,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-213,0,0,
            0,0,0,0,0,0,0,0,0,-205,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -57,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-82,0,-79,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-89,-19,-84,0,0,0,-3,0,0,
            0,0,0,0,0,0,0,0,-20,0,
            0,0,0,0,0,0,0,0,-121,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-128,
            0,0,0,0,0,0,0,0,0,0,
            -96,0,0,0,0,0,0,0,0,-21,
            0,0,-43,0,0,0,0,0,0,0,
            0,0,0,-130,0,-141,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-30,0,
            0,0,0,0,0,0,0,0,0,-73,
            0,0,0,0,0,0,0,0,0,-62,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -63,0,0,0,0,0,0,0,0,0,
            0,-74,0,0,0,0,0,0,0,0,
            0,-64,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-65,0,0,0,0,0,0,0,
            0,0,0,-75,0,0,0,0,0,0,
            0,0,0,-66,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-67,0,0,0,0,0,
            0,0,0,0,0,-76,0,0,0,0,
            0,0,0,0,0,-68,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-69,0,0,0,
            0,0,0,0,0,0,0,-95,0,0,
            0,0,0,0,0,0,0,-70,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-71,0,
            0,0,0,0,0,0,0,0,0,-125,
            0,0,0,0,0,0,0,0,0,-72,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -134,0,0,0,0,0,0,0,0,0,
            0,-143,0,0,0,0,0,0,0,0,
            0,-157,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-158,0,0,0,0,0,0,0,
            0,0,0,-166,0,0,0,0,0,0,
            0,0,0,-193,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-202,0,0,0,0,0,0,
            0,0,0,0,-22,0,0,0,0,0,
            0,0,0,-5,0,0,0,0,0,0,
            0,-9,0,0,0,0,0,0,0,-208,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-214,
            0,0,0,0,0,0,0,0,0,0,
            -23,0,0,0,0,0,0,0,0,-6,
            0,0,0,0,0,0,0,-131,0,-132,
            0,-78,-93,0,-24,-222,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-165,
            0,-150,-144,-133,0,0,0,0,0,-122,
            0,-25,-184,0,-10,0,0,0,0,0,
            0,0,0,0,-26,0,0,-177,0,0,
            0,0,-113,-83,-27,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -161,-85,-155,0,0,-28,0,0,0,0,
            0,0,-44,0,0,0,0,0,0,0,
            0,0,0,-29,0,0,0,0,0,0,
            0,0,-94,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-192,0,0,0,
            0,0,-210,0,-7,0,0,0,0,0,
            0,0,-58,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-54,0,0,
            0,0,0,0,0,0,0,0,-199,0,
            0,-11,0,0,0,0,0,0,0,0,
            -55,0,0,0,0,0,0,0,0,0,
            0,-91,0,-56,0,0,0,0,0,0,
            0,0,0,0,-221,0,-136,0,0,0,
            0,0,0,0,-97,0,-98,0,-114,-207,
            0,0,-48,0,0,0,0,0,0,0,
            0,0,0,-52,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-99,-100,-101,0,0,-162,-102,
            0,0,-49,0,0,0,0,0,0,0,
            0,0,0,-50,0,0,0,0,0,0,
            0,0,0,0,-223,0,0,0,0,-51,
            0,0,0,0,0,0,0,0,0,0,
            -53,0,0,0,0,0,0,0,0,0,
            -216,-80,-87,0,-8,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -103,-151,0,-153,-104,0,0,0,0,0,
            -182,-90,0,-163,0,0,0,0,0,0,
            0,0,0,0,0,0,-92,-156,-126,0,
            0,0,0,0,0,0,0,0,0,0,
            -105,0,0,-183,0,0,0,0,-171,0,
            0,0,0,-106,0,0,0,0,-140,0,
            0,0,0,-124,0,0,0,0,0,0,
            0,-149,0,0,0,0,0,0,0,-169,
            0,-1,0,0,-107,0,0,-108,0,-109,
            0,-148,0,0,-160,0,0,0,0,0,
            0,0,-12,0,0,0,0,0,0,0,
            0,0,0,0,-110,0,0,-13,0,0,
            0,0,0,0,0,-14,0,0,0,0,
            0,0,0,-37,-45,0,0,0,0,0,
            0,0,-186,-164,0,-46,0,0,0,0,
            0,0,0,-47,0,0,0,0,0,0,
            0,0,-178,-15,0,0,0,0,0,0,
            0,-159,0,0,-16,0,0,0,0,0,
            0,0,0,0,0,-174,-111,-173,-17,0,
            -112,0,-181,0,0,-118,-31,0,0,0,
            -189,-32,-200,0,0,-120,-137,0,0,0,
            0,0,0,-170,0,0,0,0,0,0,
            0,-119,0,0,-33,0,0,0,0,-146,
            -152,0,0,0,-123,0,-34,-204,0,-167,
            0,-168,-185,0,0,-201,0,0,0,0,
            0,0,0,0,0,0,-139,0,0,0,
            0,0,-187,0,0,-115,0,0,0,0,
            0,0,0,0,-197,-198,0,-188,0,0,
            0,0,0,-195,0,0,0,-116,0,-147,
            -212,0,-175,0,-41,-176,-206,0,0,0,
            0,0,0,0,-217,0,0,0,0,0,
            -191,0,0,0,0,0,0,0,0,0,
            -42,0,0,0,0,0,-218,0,0,0,
            -59,0,0,0,0,0,0,-215,-211,-220,
            -219,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            89,11,105,22,22,21,21,46,46,72,
            72,1,1,2,2,2,2,3,3,3,
            4,5,5,5,5,5,5,5,5,62,
            62,73,6,6,6,6,6,6,6,6,
            6,6,6,7,8,8,8,8,9,9,
            9,10,10,10,12,12,12,12,12,13,
            13,13,14,14,15,15,16,16,17,17,
            18,18,19,19,20,20,20,20,20,20,
            20,20,20,20,20,20,106,31,30,90,
            90,74,74,47,107,107,107,107,107,107,
            107,108,108,108,109,109,114,114,115,115,
            110,110,111,111,111,117,117,112,112,112,
            112,113,113,113,113,113,116,116,27,27,
            27,27,27,33,33,33,80,80,75,75,
            75,75,76,76,76,77,77,77,78,78,
            78,79,79,79,118,118,119,119,120,34,
            36,36,36,36,36,56,57,57,57,57,
            57,57,57,57,57,57,57,57,66,63,
            63,91,92,68,68,64,64,64,69,81,
            81,82,82,70,70,70,37,93,93,83,
            84,84,84,65,65,94,85,85,86,86,
            71,71,23,24,24,24,35,53,53,39,
            39,39,39,42,42,44,40,40,41,45,
            45,121,121,43,122,122,95,95,28,28,
            28,28,28,28,28,28,28,87,54,54,
            54,54,29,59,59,58,58,58,60,60,
            55,55,96,96,52,52,61,61,61,48,
            48,48,49,50,50,50,51,51,51,51,
            67,67,32,32,38,98,97,97,97,97,
            88,99,100,100,101,101,102,102,123,123,
            124,124,125,125,125,125,127,127,126,126,
            126,128,129,129,89,89,2,2,2,6,
            6,6,6,6,6,23,23,25,25,26,
            26,103,103,103,107,130,130,130,130,130,
            130,130,112,112,112,112,112,112,112,112,
            112,112,112,112,112,112,112,112,112,112,
            112,112,112,112,112,112,131,131,1,1303,
            17,21,18,517,1294,44,669,653,1105,675,
            720,1185,1161,1235,1222,1276,1245,74,91,450,
            1810,134,212,325,326,80,1212,582,588,88,
            277,136,133,135,159,606,20,17,21,18,
            517,43,44,669,653,1105,675,720,1185,1161,
            1235,1222,1707,175,138,165,274,1795,1548,28,
            119,142,145,148,151,1716,430,230,191,31,
            191,31,512,1244,1272,1503,1532,1547,1183,542,
            20,17,21,18,517,1294,44,669,653,1105,
            423,720,1185,1161,1235,1222,1276,1245,74,280,
            606,20,17,21,18,517,43,44,669,653,
            1105,281,720,1185,1161,1235,1711,1716,351,20,
            17,21,18,517,1294,44,669,653,1105,423,
            720,1185,1161,1235,1222,1276,1245,74,280,225,
            178,25,277,24,583,176,286,59,53,815,
            281,395,1831,554,292,63,1716,915,443,525,
            191,1783,134,212,325,326,443,287,254,212,
            325,326,136,133,135,159,1569,273,1727,397,
            254,212,325,326,914,288,926,19,218,1449,
            220,1534,222,223,228,138,165,268,627,398,
            271,283,142,145,148,151,289,430,326,254,
            212,325,326,734,1244,1272,1503,1532,1547,1183,
            574,20,17,21,18,517,1294,44,669,653,
            1105,209,720,1185,1161,1235,1222,1276,1245,74,
            280,606,20,17,21,18,517,43,44,669,
            653,1105,281,720,1185,1161,1608,776,1716,281,
            20,17,21,18,517,1294,44,669,653,1105,
            1755,720,1185,1161,1235,1222,1276,1245,74,1220,
            193,238,615,78,661,275,293,290,606,20,
            17,21,18,517,1294,44,669,653,1105,193,
            720,1185,1161,1235,1222,1276,1245,74,91,766,
            20,17,21,18,517,1294,44,669,653,1105,
            1777,720,1185,1161,1235,1222,1276,1245,74,1579,
            470,20,17,21,18,517,43,44,669,653,
            1105,743,720,1185,1161,1235,1222,1276,1245,93,
            64,1178,333,606,20,17,21,18,517,43,
            44,1405,512,22,191,186,316,20,17,21,
            18,517,1294,44,669,653,1105,1612,720,1185,
            1161,1235,1222,1276,1245,74,1692,327,239,606,
            20,17,21,18,517,1294,44,669,653,1105,
            443,720,1185,1161,1235,1222,1276,1245,74,92,
            606,20,17,21,18,517,1294,44,669,653,
            1105,1243,720,1185,1161,1235,1222,1276,1245,74,
            85,606,20,17,21,18,517,1294,44,669,
            653,1105,443,720,1185,1161,1235,1222,1276,1245,
            74,84,606,20,17,21,18,517,1294,44,
            669,653,1105,1409,720,1185,1161,1235,1222,1276,
            1245,74,83,606,20,17,21,18,517,1294,
            44,669,653,1105,443,720,1185,1161,1235,1222,
            1276,1245,74,82,606,20,17,21,18,517,
            1294,44,669,653,1105,1786,720,1185,1161,1235,
            1222,1276,1245,74,81,606,20,17,21,18,
            517,1294,44,669,653,1105,443,720,1185,1161,
            1235,1222,1276,1245,74,80,606,20,17,21,
            18,517,1294,44,669,653,1105,1808,720,1185,
            1161,1235,1222,1276,1245,74,79,606,20,17,
            21,18,517,1294,44,669,653,1105,443,720,
            1185,1161,1235,1222,1276,1245,74,78,606,20,
            17,21,18,517,1294,44,669,653,1105,23,
            720,1185,1161,1235,1222,1276,1245,74,77,606,
            20,17,21,18,517,1294,44,669,653,1105,
            443,720,1185,1161,1235,1222,1276,1245,74,76,
            606,20,17,21,18,517,1294,44,669,653,
            1105,272,720,1185,1161,1235,1222,1276,1245,74,
            75,606,20,17,21,18,517,1294,44,669,
            653,1105,443,720,1185,1161,1235,1222,1276,1245,
            74,73,606,20,17,21,18,517,1294,44,
            669,653,1105,278,720,1185,1161,1235,1222,1276,
            1245,74,1813,606,20,17,21,18,517,1294,
            44,669,653,1105,443,720,1185,1161,1235,1222,
            1276,1245,74,1816,606,20,17,21,18,517,
            43,44,669,653,1105,279,720,1185,1161,1235,
            1222,1276,1245,93,606,20,17,21,18,517,
            43,44,669,653,1105,139,720,1185,1161,1235,
            1222,1276,1245,93,638,20,17,21,18,517,
            323,1817,606,20,17,21,18,517,43,40,
            606,20,17,21,18,517,43,44,669,653,
            1105,211,720,1185,1161,1235,1222,1276,1245,93,
            606,20,17,21,18,517,43,44,669,653,
            1105,349,720,1185,1161,1235,1222,1276,1245,93,
            670,20,17,21,18,517,321,1861,191,185,
            537,1751,88,225,178,16,606,20,17,21,
            18,517,43,44,669,653,1105,201,720,1185,
            1161,1235,1222,1276,1245,93,134,212,325,326,
            712,1726,152,398,191,187,137,133,135,159,
            743,509,6,113,1664,606,20,17,21,18,
            517,43,39,202,509,24,1742,1213,443,139,
            165,273,240,678,383,171,143,146,149,152,
            196,430,217,1449,220,1534,222,223,228,224,
            1564,266,627,398,271,259,262,134,212,325,
            326,941,814,88,263,28,230,141,133,135,
            159,1716,1683,606,20,17,21,18,517,43,
            44,1407,276,192,325,134,212,325,326,273,
            140,165,1708,798,1760,144,133,135,159,260,
            217,1449,220,1534,222,223,228,191,295,266,
            627,398,271,443,1238,702,20,17,21,18,
            517,319,980,606,20,17,21,18,517,43,
            44,669,653,1105,229,720,1185,1610,606,20,
            17,21,18,517,43,44,669,653,1105,72,
            720,1561,606,20,17,21,18,517,43,38,
            1825,606,20,17,21,18,517,43,44,669,
            653,1105,647,1574,606,20,17,21,18,517,
            43,44,669,653,1105,72,1605,53,217,1449,
            220,1534,222,223,228,227,1825,324,449,742,
            191,297,1858,606,20,17,21,18,517,43,
            44,669,653,1444,606,20,17,21,18,517,
            43,44,669,1521,217,1449,220,1534,222,223,
            228,28,197,199,151,458,804,1716,1858,813,
            818,1214,578,606,20,17,21,18,517,43,
            44,669,653,1445,606,20,17,21,18,517,
            43,44,669,653,1446,554,1180,227,198,199,
            606,20,17,21,18,517,43,44,669,653,
            1450,606,20,17,21,18,517,43,44,669,
            1525,502,291,844,1727,734,20,17,21,18,
            517,41,1825,1549,218,1449,220,1534,222,223,
            228,614,53,276,53,646,134,212,325,326,
            273,63,855,1762,839,1734,147,133,135,159,
            217,1449,220,1534,222,223,228,885,232,385,
            266,627,398,271,1238,134,212,325,326,1706,
            509,710,226,980,902,150,133,135,159,679,
            134,212,325,326,77,1359,1213,179,1726,743,
            153,133,135,159,435,20,17,21,18,517,
            43,36,435,20,17,21,18,517,43,36,
            53,242,505,1742,258,187,245,1022,350,1750,
            467,1763,743,658,332,435,20,17,21,18,
            517,43,36,606,20,17,21,18,517,43,
            37,1721,87,314,331,483,194,246,606,20,
            17,21,18,517,43,36,606,20,17,21,
            18,517,43,35,361,606,20,17,21,18,
            517,43,47,805,88,1182,606,20,17,21,
            18,517,43,46,606,20,17,21,18,517,
            43,45,273,385,606,20,17,21,18,517,
            34,389,743,1726,509,606,20,17,21,18,
            517,33,266,627,398,271,124,513,896,53,
            1213,809,1726,53,241,265,930,53,519,1804,
            368,63,53,805,1796,1766,243,707,368,253,
            212,325,326,368,682,1783,196,519,258,87,
            536,1022,445,1750,196,53,1654,87,536,196,
            541,932,87,536,1654,124,368,53,180,1654,
            933,528,57,682,1783,527,63,1758,368,770,
            273,1727,196,509,812,87,536,124,253,212,
            325,326,1654,550,196,1847,871,87,536,196,
            268,627,398,271,1654,715,169,854,845,1564,
            253,212,325,326,124,208,509,509,901,896,
            329,63,203,743,515,480,743,743,28,1663,
            1798,509,1213,196,1716,88,658,253,212,325,
            326,842,191,1564,208,243,515,1213,244,294,
            28,53,736,1531,1223,89,1716,63,1723,1798,
            258,53,658,1323,1726,1750,282,180,884,479,
            39,743,658,556,1032,258,191,1920,1064,1920,
            1750,87,711,1920,1920,1920,1920,1811,1223,1475,
            233,87,1635,296,1920,1920,1920,1920,1920,1920,
            1859,1920,1920,204,1920,1920,1920,1920,1920,1920,
            1920,1920,1920,1920,1920,938,1920,0,328,700,
            0,20,178,0,1,2145,0,1,2156,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,12,13,14,0,16,17,18,19,
            20,21,22,0,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,0,1,
            40,41,42,43,44,45,46,47,48,49,
            50,51,0,53,54,55,0,1,0,3,
            2,5,0,0,8,9,10,5,12,13,
            14,0,1,2,16,17,0,0,73,0,
            1,23,3,6,7,70,71,0,32,33,
            34,35,36,37,15,72,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,0,1,52,3,60,5,0,61,
            8,9,10,0,12,13,14,64,65,66,
            67,8,9,10,76,12,13,14,0,68,
            64,65,66,67,32,33,34,35,36,37,
            0,0,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,0,1,
            0,3,60,5,0,0,8,9,10,0,
            12,13,14,8,9,10,0,12,13,14,
            0,1,0,3,56,57,4,23,0,0,
            32,33,34,35,36,37,56,57,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,0,1,0,3,60,0,
            4,0,8,9,10,61,12,13,14,8,
            9,10,0,12,13,14,4,77,78,0,
            64,65,66,67,62,63,32,33,34,35,
            36,37,0,0,40,41,42,43,44,45,
            46,47,48,49,50,51,0,53,54,55,
            0,1,2,3,4,5,6,7,62,63,
            0,11,2,0,0,5,16,17,18,19,
            20,21,22,74,24,25,26,27,28,29,
            30,31,32,23,38,0,1,2,3,4,
            5,6,7,0,0,0,11,4,0,39,
            5,16,17,18,19,20,21,22,58,24,
            25,26,27,28,29,30,31,32,0,0,
            0,1,2,3,4,5,6,7,0,11,
            0,11,2,38,4,15,16,17,18,19,
            20,21,22,58,24,25,26,27,28,29,
            30,31,0,23,0,62,63,59,4,0,
            8,9,10,69,12,13,14,0,1,2,
            75,4,52,79,80,81,82,83,84,85,
            86,87,88,0,32,33,34,35,36,37,
            23,72,40,41,42,43,44,45,46,47,
            48,49,50,51,0,1,2,3,4,5,
            6,7,0,59,0,11,2,5,4,0,
            16,17,18,19,20,21,22,0,24,25,
            26,27,28,29,30,31,0,23,0,0,
            1,2,3,4,5,6,7,11,0,0,
            11,39,0,5,5,16,17,18,19,20,
            21,22,58,24,25,26,27,28,29,30,
            31,0,1,2,0,1,2,3,4,0,
            6,7,0,56,57,11,38,39,39,0,
            16,17,18,19,20,21,22,58,24,25,
            26,27,28,29,30,31,0,1,89,3,
            0,0,1,2,3,4,0,6,7,0,
            68,15,11,0,1,2,15,16,17,18,
            19,20,21,22,60,24,25,26,27,28,
            29,30,31,0,1,2,3,4,38,6,
            7,0,0,1,11,3,74,0,15,16,
            17,18,19,20,21,22,15,24,25,26,
            27,28,29,30,31,0,1,2,3,4,
            23,6,7,0,0,1,11,3,69,6,
            7,16,17,18,19,20,21,22,0,24,
            25,26,27,28,29,30,31,0,1,2,
            3,4,0,6,7,0,0,1,11,3,
            0,6,7,16,17,18,19,20,21,22,
            0,24,25,26,27,28,29,30,31,0,
            1,2,3,4,0,6,7,0,0,5,
            11,0,1,23,3,16,17,18,19,20,
            21,22,15,24,25,26,27,28,29,30,
            31,0,1,2,3,4,0,6,7,0,
            4,0,11,39,0,1,38,16,17,18,
            19,20,21,22,0,24,25,26,27,28,
            29,30,31,0,1,2,3,4,0,6,
            7,0,0,0,11,0,1,5,3,16,
            17,18,19,20,21,22,15,24,25,26,
            27,28,29,30,31,0,1,2,3,4,
            59,6,7,59,0,0,11,2,0,70,
            71,16,17,18,19,20,21,22,0,24,
            25,26,27,28,29,30,31,0,23,2,
            58,4,5,0,0,8,9,10,0,12,
            13,14,0,0,0,1,2,0,4,0,
            23,8,9,10,5,12,13,14,0,32,
            33,34,35,36,37,23,39,23,0,0,
            2,0,38,0,0,32,33,34,35,36,
            37,8,9,10,0,12,13,14,0,56,
            57,23,8,9,10,0,12,13,14,0,
            0,52,0,56,57,32,33,34,35,36,
            37,73,38,0,0,15,32,33,34,35,
            36,37,8,9,10,0,12,13,14,0,
            0,0,0,8,9,10,5,12,13,14,
            69,0,0,0,0,15,32,33,34,35,
            36,37,8,9,10,0,12,13,14,0,
            0,0,0,8,9,10,23,12,13,14,
            0,1,2,0,15,5,15,15,0,0,
            0,68,0,0,0,0,0,0,15,0,
            0,0,0,23,15,15,0,0,0,0,
            0,0,0,0,61,0,75,0,0,39,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1920,1931,1709,1932,1638,68,1623,1362,2133,2134,
            2135,1646,2249,654,2250,62,1695,1684,1505,1933,
            1934,1935,1936,66,1225,1122,2236,2237,2238,1325,
            1170,1114,2082,2083,2081,2136,2084,2080,1920,2157,
            2087,2092,2091,2089,2090,2088,2093,2094,2086,2095,
            2096,2097,1,1382,652,514,1920,1,32,1,
            1815,190,1920,59,1,1,1,1928,1,1,
            1,1,2145,1501,1946,1947,61,51,611,1920,
            1931,1841,1932,1283,723,1384,1371,252,1,1,
            1,1,1,1,1522,1333,1,1,1,1,
            1,1,1,1,1,1,1,1,190,1,
            1,1,1920,1,1927,1,2115,189,181,440,
            1,1,1,1920,1,1,1,1480,1464,1453,
            1413,2133,2134,2135,438,2249,654,2250,54,1150,
            1480,1464,1453,1413,1,1,1,1,1,1,
            58,182,1,1,1,1,1,1,1,1,
            1,1,1,1,189,1,1,1,1920,1,
            72,1,2115,190,1920,247,1,1,1,285,
            1,1,1,2133,2134,2135,60,2249,654,2250,
            1920,1931,48,1932,1424,1491,1674,1074,1920,1920,
            1,1,1,1,1,1,1424,1491,1,1,
            1,1,1,1,1,1,1,1,1,1,
            190,1,1,1,1920,1931,50,1932,2115,70,
            1674,248,2133,2134,2135,1317,2249,654,2250,1,
            1,1,1920,1,1,1,399,405,1851,1920,
            1480,1464,1453,1413,1666,1655,2082,2083,2081,2136,
            2084,2080,1920,1920,2087,2092,2091,2089,2090,2088,
            2093,2094,2086,2095,2096,2097,88,1382,652,514,
            1,1931,1709,1932,1584,1924,1623,1362,1666,1655,
            1,1646,1502,1920,1920,1926,1695,1684,1505,1933,
            1934,1935,1936,470,1225,1122,2236,2237,2238,1325,
            1170,1114,679,629,759,1920,1931,1709,1932,1615,
            1924,1623,1362,49,43,1920,1646,1674,1,1925,
            1930,1695,1684,1505,1933,1934,1935,1936,1923,1225,
            1122,2236,2237,2238,1325,1170,1114,1053,64,67,
            1,1931,1709,1932,1638,29,1623,1362,1920,1348,
            264,1646,1502,1395,1,3107,1695,1684,1505,1933,
            1934,1935,1936,1923,1225,1122,2236,2237,2238,1325,
            1170,1114,128,629,1,1666,1655,2177,252,1920,
            2133,2134,2135,990,2249,654,2250,261,2145,1271,
            1929,1,29,969,948,927,906,885,843,864,
            822,801,780,1920,2082,2083,2081,2136,2084,2080,
            629,1333,2087,2092,2091,2089,2090,2088,2093,2094,
            2086,2095,2096,2097,1920,1931,1709,1932,1638,1924,
            1623,1362,1920,2177,267,1646,1502,1926,252,1920,
            1695,1684,1505,1933,1934,1935,1936,57,1225,1122,
            2236,2237,2238,1325,1170,1114,65,629,1920,1920,
            1931,1709,1932,1592,1924,1623,1362,1348,1920,1,
            1646,1925,1920,1926,90,1695,1684,1505,1933,1934,
            1935,1936,1923,1225,1122,2236,2237,2238,1325,1170,
            1114,1,2145,1501,1920,1,1,1,1,1920,
            1,1,71,1424,1491,1,1860,1925,90,1920,
            1,1,1,1,1,1,1,1923,1,1,
            1,1,1,1,1,1,1920,1931,1907,1932,
            255,1,1931,1709,1932,1638,1920,1623,1362,210,
            1011,1524,1646,252,2145,1501,3107,1695,1684,1505,
            1933,1934,1935,1936,2235,1225,1122,2236,2237,2238,
            1325,1170,1114,1920,1931,1709,1932,1638,1210,1623,
            1362,1920,184,3231,1646,3231,470,270,3107,1695,
            1684,1505,1933,1934,1935,1936,3107,1225,1122,2236,
            2237,2238,1325,1170,1114,1920,1931,1709,1932,1638,
            629,1623,1362,53,183,3237,1646,3237,1094,1283,
            723,1695,1684,1505,1933,1934,1935,1936,1920,1225,
            1122,2236,2237,2238,1325,1170,1114,1920,1931,1717,
            1932,1638,1920,1623,1362,52,205,3238,1646,3238,
            1920,1283,723,1695,1684,1505,1933,1934,1935,1936,
            328,1225,1122,2236,2237,2238,1325,1170,1114,1920,
            1931,1722,1932,1638,1,1623,1362,324,30,1926,
            1646,207,1931,1908,1932,1695,1684,1505,1933,1934,
            1935,1936,3107,1225,1122,2236,2237,2238,1325,1170,
            1114,1920,1931,1745,1932,1638,1920,1623,1362,63,
            1273,1,1646,1925,1,1917,488,1695,1684,1505,
            1933,1934,1935,1936,1920,1225,1122,2236,2237,2238,
            1325,1170,1114,1920,1931,1757,1932,1638,1920,1623,
            1362,322,1920,1920,1646,206,530,1924,530,1695,
            1684,1505,1933,1934,1935,1936,3107,1225,1122,2236,
            2237,2238,1325,1170,1114,1,1931,1709,1932,1638,
            2176,1623,1362,2177,1920,269,1646,379,1920,1384,
            1371,1695,1684,1505,1933,1934,1935,1936,1920,1225,
            1122,2236,2237,2238,1325,1170,1114,20,629,1911,
            1923,1911,1911,56,30,178,178,178,69,178,
            178,178,219,129,267,2145,1271,55,252,284,
            1911,2133,2134,2135,518,2249,654,2250,1920,178,
            178,178,178,178,178,629,1911,629,221,1920,
            416,1920,1949,130,206,2082,2083,2081,2136,2084,
            2080,2133,2134,2135,131,2249,654,2250,1920,1424,
            1491,629,2133,2134,2135,1920,2249,654,2250,1920,
            320,518,1920,1424,1491,2082,2083,2081,2136,2084,
            2080,611,3033,200,132,3107,2082,2083,2081,2136,
            2084,2080,2133,2134,2135,249,2249,654,2250,1920,
            42,1,1920,1,1,1,1930,1,1,1,
            590,1920,1920,291,250,3107,2082,2083,2081,2136,
            2084,2080,2133,2134,2135,251,2249,654,2250,1920,
            1920,1920,1920,2133,2134,2135,1130,2249,654,2250,
            1,1914,1271,188,1397,1926,1600,1713,1920,188,
            188,1186,1920,1920,1920,1920,1920,1920,184,1920,
            1920,1920,1920,629,183,205,1920,1920,1920,1920,
            1920,1920,1920,1920,1410,1920,1929,1920,1920,1925
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            443,1,89,69,89,89,89,89,89,89,
            89,89,89,89,89,89,119,31,51,48,
            55,53,61,59,63,62,65,64,37,89,
            119,119,119,119,318,318,263,119,354,354,
            472,89,89,89,89,89,89,89,89,89,
            89,89,89,89,89,89,89,89,89,89,
            89,89,89,89,89,89,89,89,89,89,
            89,89,318,318,318,318,29,267,80,321,
            316,315,235,112,247,27,247,27,27,247,
            27,247,139,269,318,73,48,48,53,53,
            53,53,51,51,59,55,55,62,61,402,
            64,63,195,195,195,195,387,29,263,267,
            83,73,162,170,318,404,324,170,27,354,
            354,27,354,89,387,5,267,255,162,73,
            169,80,318,261,139,317,326,73,170,29,
            357,29,390,5,255,255,89,89,73,170,
            321,397,396,267,326,318,29,357,390,390,
            392,77,255,162,73,73,318,404,324,261,
            357,387,436,357,390,392,467,392,387,3,
            470,354,89,76,162,255,326,357,438,392,
            387,89,354,31,7,73,354,89,255,318,
            317,387,231,89,230,108,267,387,73,355,
            438,89,108
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            89,0,5,52,23,61,16,17,11,4,
            6,7,24,25,18,29,30,31,2,19,
            20,21,22,26,27,28,1,3,15,0,
            23,2,61,76,16,17,69,79,80,81,
            82,83,85,84,86,87,88,4,62,63,
            6,7,57,56,64,65,66,67,70,71,
            11,72,73,74,52,75,77,78,68,39,
            89,38,58,5,0,69,23,61,0,58,
            5,32,8,9,10,12,13,14,19,20,
            21,22,26,27,28,3,16,17,11,6,
            7,24,25,18,29,30,31,4,2,1,
            0,5,68,38,58,39,75,23,18,19,
            20,21,22,2,16,17,11,4,6,7,
            24,25,26,27,28,29,30,31,1,3,
            53,54,55,48,40,45,43,44,42,41,
            46,47,49,50,51,37,34,32,33,36,
            35,8,9,10,13,12,14,0,32,58,
            5,16,17,11,4,6,7,24,25,18,
            29,30,31,2,1,3,19,20,21,22,
            26,27,28,0,11,4,6,7,62,63,
            56,57,64,65,66,67,70,71,72,73,
            74,77,78,69,79,80,81,82,83,84,
            85,86,87,88,58,39,52,89,15,68,
            75,5,38,0,48,40,45,43,44,42,
            41,46,47,49,50,51,68,75,37,34,
            32,33,36,35,8,9,10,12,13,14,
            38,1,5,39,2,23,4,0,9,32,
            37,10,36,35,34,8,33,12,13,14,
            61,76,16,17,11,6,7,62,63,56,
            57,64,65,66,67,70,71,72,73,74,
            77,78,69,79,80,81,82,83,84,85,
            86,87,88,4,2,23,38,39,5,0,
            4,2,23,39,5,33,40,8,41,53,
            34,42,35,43,44,36,9,45,46,32,
            54,37,55,47,48,10,49,50,51,12,
            13,14,59,3,1,0,33,40,8,41,
            53,34,42,35,43,44,36,9,45,46,
            32,54,37,55,47,48,10,49,50,51,
            1,3,12,13,14,60,5,52,0,1,
            3,5,52,38,0,2,5,38,39,75,
            23,68,0,4,33,40,8,41,53,34,
            42,35,43,44,36,9,45,46,32,54,
            37,55,47,48,10,49,50,51,1,3,
            12,13,14,59,0,75,5,4,1,2,
            68,0,18,19,20,21,22,1,3,2,
            16,17,11,4,6,7,24,25,26,27,
            28,29,30,31,60,0,5,38,52,69,
            0,5,39,18,19,20,21,22,1,3,
            2,16,17,11,4,6,7,24,25,26,
            27,28,29,30,31,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            99,35,26,35,26,26,26,26,26,26,
            26,26,26,26,26,26,102,35,35,35,
            35,35,35,35,35,35,35,35,35,26,
            102,102,102,102,10,10,85,1,21,21,
            122,103,26,26,26,26,26,26,26,26,
            26,26,26,26,26,26,26,26,103,26,
            26,26,26,26,26,26,26,26,26,26,
            26,26,10,10,10,10,12,57,48,84,
            15,15,65,52,66,19,66,82,82,66,
            81,66,60,35,10,50,35,35,35,35,
            35,35,35,35,35,35,35,35,35,35,
            35,35,12,12,12,12,79,35,106,35,
            54,50,110,49,10,89,9,49,7,7,
            7,7,7,26,44,79,35,42,110,50,
            49,36,10,75,28,35,91,50,49,68,
            79,35,79,24,42,79,26,26,50,49,
            74,15,15,57,91,10,35,114,79,7,
            97,17,79,110,50,50,10,89,9,38,
            79,44,94,70,7,97,35,35,44,23,
            35,7,26,46,110,36,118,114,77,97,
            44,26,7,112,25,50,7,26,36,10,
            10,44,95,26,35,77,57,44,50,35,
            77,26,40
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            80,78,77,68,76,75,1,0,11,21,
            0,38,32,0,28,0,100,0,91,0,
            73,0,88,11,38,5,0,80,79,78,
            77,68,76,75,0,23,0,50,49,42,
            40,29,0,46,0,102,0,11,5,22,
            0,103,0,5,11,0,29,54,0,68,
            63,64,65,66,56,33,0,92,0,11,
            37,70,0,21,50,49,42,40,11,0,
            94,69,0,21,49,50,11,0,29,54,
            11,27,0,11,72,0,62,0,11,89,
            0,37,11,31,0,50,49,29,0,59,
            0,98,0,82,11,37,0,95,11,27,
            0,11,90,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,10,11,48,64,76,
            8,96,97,98,3,6,7,68,81,82,
            83,84,1,12,13,93,94,95,100,101,
            102,69,44,55,60,63,72,42,90,47,
            52,56,61,62,66,67,74,75,78,79,
            80,91,54,70,73,16,17,89,30,107,
            4,14,15,18,19,20,21,29,31,22,
            23,24,25,26,92,5,27,28,32,33,
            34,35,36,37,38,39,40,41,108,45,
            46,49,50,51,53,57,58,59,65,71,
            77,88,99,103,104,105,106
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            114,0,0,0,116,120,121,122,123,124,
            0,125,126,127,128,129,130,131,0,132,
            111,110,142,0,0,0,135,163,0,0,
            115,119,141,0,0,0,154,0,159,161,
            0,162,0,0,0,112,134,172,173,174,
            0,118,150,160,169,144,0,164,167,168,
            171,0,145,146,147,148,149,151,0,153,
            158,113,117,133,136,137,138,139,140,143,
            0,152,156,0,0,157,166,176,109,0,
            0,0,155,0,165,170,175,0,177,178,
            0,179,180,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            120,151,130,59,69,159,26,186,35,87,
            105,75,6,12,16,40,83,52,141,202,
            212,216,52,52,195,52,1,1,1,44,
            47,92,115,47,220,20,145,206,177,137,
            165,165,165,165,165,95,95,95
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            128,128,128,4,4,128,32,192,10,4,
            10,80,10,10,10,10,4,4,139,10,
            10,4,56,80,199,65,4,4,4,10,
            50,4,10,118,10,23,148,209,180,139,
            167,169,171,173,175,102,97,110
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            65,63,65,28,28,63,32,111,51,28,
            45,28,6,6,6,51,28,28,70,6,
            5,5,28,28,19,28,103,102,101,49,
            61,28,42,53,3,88,70,5,112,70,
            79,78,77,76,75,45,43,45
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            52,52,52,58,58,52,52,95,39,58,
            39,19,39,39,39,39,58,58,75,39,
            39,58,4,19,68,32,58,58,58,39,
            2,58,39,1,39,69,1,39,101,75,
            1,53,54,54,48,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            28,28,28,32,32,28,19,-1,36,32,
            9,32,43,43,43,36,32,32,5,43,
            43,43,32,32,76,32,17,1,3,36,
            38,32,9,11,43,103,5,43,-1,5,
            29,29,29,29,29,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            154,23,0,110,0,159,2,31,0,111,
            0,159,2,30,0,159,2,29,0,206,
            118,0,31,149,0,169,204,118,15,145,
            0,112,0,0,165,118,2,156,0,165,
            118,2,0,168,2,0,161,118,0,172,
            0,194,118,23,0,9,110,0,127,32,
            194,118,23,0,69,132,110,0,127,194,
            118,32,23,0,194,118,32,23,0,132,
            110,0,127,32,23,0,127,194,118,23,
            0,127,23,0,149,0,2,0,165,111,
            0,2,111,0,165,118,2,149,0,2,
            0,164,111,0,160,2,0,159,0,169,
            192,118,15,108,201,53,0,112,0,169,
            192,118,15,201,53,0,144,0,113,0,
            200,118,144,0,118,144,0,155,113,0,
            188,118,15,199,108,198,175,0,188,118,
            15,198,175,0,187,0,148,0,147,0,
            146,0,145,0,144,0,214,94,0,77,
            2,115,111,113,0,214,128,138,2,98,
            0,53,0,0,138,78,125,0,29,132,
            0,159,2,18,0,159,2,0,111,119,
            0,197,2,112,0,138,23,112,0,138,
            2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            554,0,423,0,1796,1223,1762,0,1475,519,
            1395,1501,1359,1271,1213,0,654,0,590,488,
            449,1808,1786,1409,1243,397,0,1183,509,368,
            0,1534,1449,627,398,519,1742,1271,1213,1502,
            1654,0,1615,1592,1584,470,405,1333,611,1384,
            1371,1348,1491,1424,1480,1464,1453,1413,1674,1666,
            1655,1283,723,1695,1684,1646,1638,1623,1362,1225,
            1122,1505,1325,1170,1114,1186,1150,1130,590,1094,
            1074,1053,1032,736,1011,700,679,629,990,969,
            948,927,906,885,864,843,822,801,780,368,
            759,658,488,449,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,196,118,181,31,30,29,18,25,24,
            7,6,4,11,17,16,2,112,116,115,
            119,117,121,120,123,122,125,124,113,38,
            2,2,2,2,159,138,144,118,76,61,
            2,23,7,6,63,62,4,67,66,65,
            64,56,57,11,71,70,73,72,78,77,
            74,88,87,86,84,85,83,82,81,80,
            79,69,159,159,159,159,128,118,23,2,
            157,156,182,13,183,175,184,55,54,185,
            53,186,187,108,197,138,115,115,117,117,
            117,117,116,116,120,119,119,122,121,138,
            124,123,128,128,128,128,15,145,161,136,
            32,127,118,4,168,118,2,23,198,176,
            176,201,176,68,118,15,136,4,118,127,
            194,166,165,134,118,167,118,154,4,108,
            15,108,15,118,4,136,194,32,127,4,
            2,147,149,118,38,165,199,118,15,118,
            204,118,136,118,127,127,160,118,2,161,
            15,188,144,189,118,192,108,193,169,38,
            206,61,23,207,118,166,118,118,118,192,
            169,69,38,153,69,154,61,23,166,165,
            202,188,200,68,160,2,118,169,154,38,
            38,68,161
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "MYTHREAD",
            "THREADS",
            "UPC_MAX_BLOCKSIZE",
            "relaxed",
            "shared",
            "strict",
            "upc_barrier",
            "upc_localsizeof",
            "upc_blocksizeof",
            "upc_elemsizeof",
            "upc_notify",
            "upc_fence",
            "upc_wait",
            "upc_forall",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_cast_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "initializer_seq",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "layout_qualifier"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 60,
           SCOPE_UBOUND      = 47,
           SCOPE_SIZE        = 48,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 223,
           NT_OFFSET         = 107,
           LA_STATE_OFFSET   = 2287,
           MAX_LA            = 2,
           NUM_RULES         = 367,
           NUM_NONTERMINALS  = 131,
           NUM_SYMBOLS       = 238,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1602,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 89,
           EOLT_SYMBOL       = 89,
           ACCEPT_ACTION     = 1907,
           ERROR_ACTION      = 1920;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
