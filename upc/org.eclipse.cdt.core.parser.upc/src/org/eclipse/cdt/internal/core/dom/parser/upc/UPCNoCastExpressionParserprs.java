/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.upc;

public class UPCNoCastExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, UPCNoCastExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,3,1,1,
            4,4,3,3,2,2,8,1,0,1,
            1,2,2,2,2,2,2,2,2,2,
            4,1,1,3,3,3,1,3,3,1,
            3,3,1,3,3,3,3,1,3,3,
            1,3,1,3,1,3,1,3,1,3,
            1,5,1,3,3,3,3,3,3,3,
            3,3,3,3,1,1,2,1,0,1,
            3,1,1,1,1,1,1,1,1,3,
            4,3,2,4,1,2,1,1,1,2,
            5,7,5,1,0,7,5,9,8,3,
            2,2,2,3,2,4,2,2,2,2,
            2,1,1,1,1,2,1,2,2,2,
            1,2,2,1,2,2,1,2,2,1,
            2,2,1,3,1,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,6,8,0,
            0,1,1,3,3,3,0,1,0,1,
            2,4,2,1,1,1,3,1,1,2,
            3,7,8,0,1,0,1,3,1,3,
            1,1,1,1,1,1,3,1,1,1,
            1,1,3,1,2,2,1,5,3,1,
            3,5,1,3,1,3,2,4,3,5,
            4,6,6,3,5,1,2,3,4,5,
            0,1,2,1,3,1,1,3,2,1,
            1,1,1,2,1,2,3,1,1,1,
            3,1,2,2,2,3,4,5,1,7,
            3,0,0,1,1,3,3,4,1,1,
            2,3,2,3,2,1,0,1,2,1,
            1,1,1,1,2,4,3,6,2,4,
            1,1,1,1,1,2,4,2,4,2,
            4,1,1,2,1,1,1,3,3,2,
            1,3,2,3,2,3,2,2,11,10,
            10,9,10,9,9,8,10,9,9,8,
            9,8,8,7,10,9,9,8,9,8,
            8,7,1,1,-38,0,0,0,0,0,
            0,0,0,0,-2,0,0,0,0,0,
            0,0,0,0,0,-128,0,0,0,0,
            0,-153,-81,-4,-82,0,0,0,0,-133,
            0,0,0,0,0,0,0,0,0,-18,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-129,0,-130,0,0,0,0,
            0,0,-5,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-134,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-200,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-78,0,
            0,0,-57,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-123,
            0,0,0,0,0,0,0,0,-126,-19,
            0,-20,-88,0,0,-91,-39,0,0,0,
            -21,0,-208,0,-22,-89,-131,0,0,0,
            0,0,-173,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-143,0,-120,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-85,-23,0,0,0,0,0,0,0,
            -35,-24,0,0,0,-9,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-10,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-79,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-25,0,-196,0,
            0,0,0,0,0,0,0,0,-36,0,
            0,0,0,0,0,0,0,0,0,-3,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -132,0,-26,-163,-58,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-96,
            0,-127,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-27,0,-48,0,0,0,0,0,
            0,0,0,0,0,0,-139,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-28,0,-30,
            0,0,0,0,0,0,0,0,0,-73,
            0,0,0,0,0,0,0,0,0,0,
            -62,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-63,0,0,0,0,0,0,0,0,
            0,-74,0,0,0,0,0,0,0,0,
            0,0,-64,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-65,0,0,0,0,0,0,
            0,0,0,-75,0,0,0,0,0,0,
            0,0,0,0,-66,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-67,0,0,0,0,
            0,0,0,0,0,-76,0,0,0,0,
            0,0,0,0,0,0,-68,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-69,0,0,
            0,0,0,0,0,0,0,-95,0,0,
            0,0,0,0,0,0,0,0,-70,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-71,
            0,0,0,0,0,0,0,0,0,-124,
            0,0,0,0,0,0,0,0,0,0,
            -72,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-158,0,0,0,0,0,0,0,0,
            0,-141,0,0,0,0,0,0,0,0,
            0,0,-159,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-176,0,0,0,0,0,0,
            0,0,0,-29,0,0,0,0,0,0,
            0,0,0,-199,0,0,0,0,0,0,
            0,0,0,-117,0,0,0,0,0,0,
            0,0,0,0,-77,-152,-175,0,0,-43,
            0,0,0,0,0,0,0,0,-207,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-215,0,
            0,0,0,0,0,0,0,0,-94,0,
            0,0,0,0,0,0,0,0,-86,0,
            -40,0,-193,0,-44,0,0,0,0,0,
            0,0,0,-223,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-60,0,0,0,0,0,0,
            0,0,0,-136,0,0,0,0,0,0,
            0,-93,0,0,-198,0,0,-148,0,-54,
            0,0,0,0,0,0,0,0,0,-190,
            0,0,0,0,0,0,0,0,-191,0,
            -166,-142,0,0,0,0,-97,-98,0,0,
            0,0,-55,0,0,0,0,0,0,0,
            0,0,-84,0,0,0,0,0,0,0,
            -167,-164,-87,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-121,0,0,0,
            0,0,0,0,-177,0,0,0,0,0,
            -162,0,0,0,0,0,0,0,0,0,
            0,-61,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-187,
            -6,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-204,0,0,0,0,
            -149,0,-42,-186,-172,0,-151,0,-184,-99,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -222,0,0,0,0,0,0,0,0,0,
            0,0,-225,-171,0,0,0,-56,0,0,
            0,0,0,0,0,0,0,-100,0,0,
            -147,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-154,-156,-138,-205,0,
            0,0,0,-101,-102,0,0,-103,0,-49,
            0,0,0,0,0,0,0,0,0,0,
            0,-50,0,0,0,0,0,0,0,0,
            0,-83,0,0,0,0,-51,0,0,0,
            0,0,0,0,0,0,-210,0,-170,0,
            0,-217,0,-104,0,0,0,0,0,0,
            -105,0,0,0,0,0,-52,0,0,0,
            0,0,0,0,0,0,-53,0,0,0,
            0,0,0,0,0,0,0,-80,0,0,
            0,0,0,0,0,0,-90,0,-214,-106,
            0,-146,0,-179,-107,-108,-109,-188,0,-160,
            -178,-211,-110,0,-157,0,-59,0,-92,0,
            0,0,0,0,-111,-224,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-161,0,0,0,0,0,0,
            0,0,-112,0,0,0,0,0,0,0,
            0,-113,-114,0,-115,0,-11,0,0,0,
            0,0,0,0,-12,0,0,0,0,0,
            0,0,-13,0,0,0,0,0,0,0,
            -14,0,0,0,0,0,0,0,-37,-45,
            0,0,0,0,0,0,0,-140,0,-46,
            0,0,0,0,0,0,0,-47,0,0,
            0,0,0,0,0,-125,0,-1,-185,-182,
            0,0,0,0,-116,0,-183,0,0,-189,
            -197,-209,-206,-119,0,0,0,0,-135,-181,
            -144,0,0,-150,-155,0,0,0,0,0,
            -168,0,0,0,0,-7,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-174,0,-194,0,0,-118,0,-8,
            0,0,0,0,0,0,-15,0,0,0,
            0,0,0,-16,0,0,0,0,0,0,
            -17,-195,-216,-221,-31,0,0,-213,0,-202,
            0,-32,0,0,0,0,-192,0,-33,0,
            0,0,-34,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-212,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-122,-165,0,0,-137,
            -41,0,0,-169,-145,0,-203,0,0,0,
            0,-180,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-201,-219,0,
            0,0,0,0,0,0,0,0,0,0,
            -218,0,0,0,0,-220,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            89,10,22,22,21,21,37,37,72,72,
            1,1,2,2,2,2,3,3,3,4,
            5,5,5,5,5,5,5,5,54,54,
            73,6,6,6,6,6,6,6,6,6,
            6,6,7,8,8,8,8,9,9,9,
            11,11,11,12,12,12,12,12,13,13,
            13,14,14,15,15,16,16,17,17,18,
            18,19,19,20,20,20,20,20,20,20,
            20,20,20,20,20,104,30,29,90,90,
            75,75,45,105,105,105,105,105,105,105,
            106,106,106,107,107,112,112,113,113,108,
            108,109,109,109,115,115,110,110,110,110,
            111,111,111,111,111,114,114,27,27,27,
            27,27,31,31,31,81,81,76,76,76,
            76,77,77,77,78,78,78,79,79,79,
            80,80,80,116,116,117,117,118,32,34,
            34,34,34,34,55,57,57,57,57,57,
            57,57,57,57,57,57,57,66,63,63,
            91,92,67,67,64,64,64,68,82,82,
            83,83,69,69,69,35,93,93,84,85,
            85,85,65,65,94,86,86,87,87,70,
            70,23,24,24,24,33,51,51,38,38,
            38,38,41,41,43,39,39,40,44,44,
            119,119,42,120,120,95,95,28,28,28,
            28,28,28,28,28,28,88,52,52,52,
            52,36,59,59,58,58,58,60,60,53,
            53,96,96,50,50,61,61,61,46,46,
            46,47,48,48,48,49,49,49,49,56,
            56,56,62,97,74,74,74,74,71,98,
            99,99,100,100,101,101,121,121,122,122,
            123,123,123,123,125,125,124,124,124,126,
            126,89,89,2,2,2,6,6,6,6,
            6,6,23,23,25,25,26,26,102,102,
            102,105,127,127,127,127,127,127,127,110,
            110,110,110,110,110,110,110,110,110,110,
            110,110,110,110,110,110,110,110,110,110,
            110,110,110,128,128,1,1169,16,20,17,
            410,1094,43,522,520,88,535,531,602,593,
            713,667,788,753,73,90,521,1238,133,211,
            322,323,401,537,194,580,135,132,134,158,
            664,19,16,20,17,410,42,43,522,520,
            931,535,531,602,593,713,667,788,753,72,
            137,273,164,274,230,185,230,184,141,144,
            147,150,1179,695,19,16,20,17,410,320,
            394,1482,592,1293,1547,1569,1232,571,19,16,
            20,17,410,1094,43,522,520,392,535,531,
            602,593,713,667,788,753,73,279,633,19,
            16,20,17,410,1094,43,522,520,392,535,
            531,602,593,713,667,788,753,73,279,61,
            1743,1315,290,664,19,16,20,17,410,42,
            43,522,520,284,535,531,602,593,1556,1715,
            446,19,16,20,17,410,42,35,285,293,
            70,1126,457,359,284,1704,455,230,30,1835,
            1715,250,244,230,1745,39,399,564,1714,285,
            276,1748,1497,363,19,16,20,17,410,1094,
            43,522,520,392,535,531,602,593,713,667,
            788,753,73,279,225,177,819,19,16,20,
            17,410,1094,43,522,520,1830,535,531,602,
            593,713,667,788,753,73,1448,133,211,322,
            323,424,862,32,711,135,132,134,158,286,
            24,188,81,208,426,1715,664,19,16,20,
            17,410,42,39,287,133,211,322,323,137,
            537,164,1125,143,132,134,158,141,144,147,
            150,1179,664,19,16,20,17,410,42,38,
            1482,592,1293,1547,1569,1232,281,19,16,20,
            17,410,1094,43,522,520,1826,535,531,602,
            593,713,667,788,753,73,1307,59,237,602,
            19,16,20,17,410,1094,43,522,520,188,
            535,531,602,593,713,667,788,753,73,279,
            664,19,16,20,17,410,1094,43,522,520,
            18,535,531,602,593,713,667,788,753,73,
            90,230,186,115,644,664,19,16,20,17,
            410,42,43,522,520,288,535,531,602,1557,
            239,1715,487,19,16,20,17,410,42,43,
            522,520,226,535,531,602,593,713,667,788,
            753,92,21,243,330,664,19,16,20,17,
            410,42,43,522,520,394,1380,322,19,16,
            20,17,410,1094,43,522,520,1552,535,531,
            602,593,713,667,788,753,73,1560,53,238,
            664,19,16,20,17,410,1094,43,522,520,
            188,535,531,602,593,713,667,788,753,73,
            91,664,19,16,20,17,410,1094,43,522,
            520,1622,535,531,602,593,713,667,788,753,
            73,84,664,19,16,20,17,410,1094,43,
            522,520,188,535,531,602,593,713,667,788,
            753,73,83,664,19,16,20,17,410,1094,
            43,522,520,1623,535,531,602,593,713,667,
            788,753,73,82,664,19,16,20,17,410,
            1094,43,522,520,188,535,531,602,593,713,
            667,788,753,73,81,664,19,16,20,17,
            410,1094,43,522,520,1625,535,531,602,593,
            713,667,788,753,73,80,664,19,16,20,
            17,410,1094,43,522,520,188,535,531,602,
            593,713,667,788,753,73,79,664,19,16,
            20,17,410,1094,43,522,520,1695,535,531,
            602,593,713,667,788,753,73,78,664,19,
            16,20,17,410,1094,43,522,520,188,535,
            531,602,593,713,667,788,753,73,77,664,
            19,16,20,17,410,1094,43,522,520,22,
            535,531,602,593,713,667,788,753,73,76,
            664,19,16,20,17,410,1094,43,522,520,
            188,535,531,602,593,713,667,788,753,73,
            75,664,19,16,20,17,410,1094,43,522,
            520,271,535,531,602,593,713,667,788,753,
            73,74,664,19,16,20,17,410,1094,43,
            522,520,188,535,531,602,593,713,667,788,
            753,73,1690,664,19,16,20,17,410,1094,
            43,522,520,277,535,531,602,593,713,667,
            788,753,73,1697,664,19,16,20,17,410,
            42,43,522,520,337,535,531,602,593,713,
            667,788,753,92,664,19,16,20,17,410,
            42,43,522,520,13,535,531,602,593,713,
            667,788,753,92,447,71,797,230,293,1701,
            664,19,16,20,17,410,42,43,1267,664,
            19,16,20,17,410,42,43,522,520,1702,
            535,531,602,593,713,667,788,753,92,664,
            19,16,20,17,410,42,43,522,520,850,
            535,531,602,593,713,667,788,753,92,137,
            1375,230,30,892,210,664,19,16,20,17,
            410,42,43,1268,664,19,16,20,17,410,
            42,43,522,520,200,535,531,602,593,713,
            667,788,753,92,664,19,16,20,17,410,
            42,43,522,520,125,535,531,602,593,713,
            667,1575,225,177,1565,230,295,1703,139,201,
            664,19,16,20,17,410,42,43,522,520,
            538,535,531,1511,23,133,211,322,323,113,
            1366,707,1000,136,132,134,158,477,498,564,
            386,564,1827,664,19,16,20,17,410,42,
            43,522,520,607,535,1550,195,138,1262,164,
            272,188,617,891,1250,142,145,148,151,1179,
            216,714,219,1292,221,222,227,239,265,395,
            393,270,278,261,258,581,133,211,322,323,
            225,954,193,262,146,132,134,158,191,239,
            1721,1689,664,19,16,20,17,410,42,43,
            522,520,275,535,531,602,593,713,1613,272,
            1008,726,19,16,20,17,410,318,259,216,
            714,219,1292,221,222,227,63,265,395,393,
            270,13,1379,13,293,518,1871,13,272,188,
            119,1834,1010,690,1780,324,1709,1414,217,714,
            219,1292,221,222,227,229,267,395,393,270,
            223,63,86,730,216,714,219,1292,221,222,
            227,1871,27,144,482,1745,291,1773,664,19,
            16,20,17,410,42,43,522,520,126,535,
            1555,446,19,16,20,17,410,42,35,216,
            714,219,1292,221,222,227,13,237,239,892,
            196,198,1773,329,143,207,1561,1842,312,1549,
            664,19,16,20,17,410,42,43,522,520,
            241,1428,664,19,16,20,17,410,42,43,
            522,520,394,1454,207,197,198,664,19,16,
            20,17,410,42,43,522,520,797,1455,13,
            1183,1772,412,1859,372,133,211,322,323,1787,
            280,408,1871,140,132,134,158,664,19,16,
            20,17,410,42,43,522,1458,664,19,16,
            20,17,410,42,43,522,1504,139,994,164,
            216,714,219,1292,221,222,227,903,1686,133,
            291,1876,239,1379,13,331,361,673,13,275,
            239,518,188,643,468,69,272,13,1837,932,
            133,211,322,323,328,333,525,690,149,132,
            134,158,240,228,265,395,393,270,252,211,
            322,323,133,211,322,323,86,1563,281,1010,
            152,132,134,158,446,19,16,20,17,410,
            42,35,1709,669,217,714,219,1292,221,222,
            227,192,700,731,1710,762,245,664,19,16,
            20,17,410,42,37,664,19,16,20,17,
            410,42,36,664,19,16,20,17,410,42,
            35,664,19,16,20,17,410,42,34,1011,
            664,19,16,20,17,410,42,46,181,489,
            664,19,16,20,17,410,42,45,664,19,
            16,20,17,410,42,44,559,272,528,559,
            239,253,211,322,323,793,564,239,690,564,
            518,239,239,518,245,265,395,393,270,292,
            961,735,242,1262,824,856,1262,86,311,243,
            264,857,1704,292,294,1704,757,19,16,20,
            17,410,316,253,211,322,323,178,1748,257,
            202,1350,257,6,1052,853,1711,1052,1014,1711,
            788,19,16,20,17,410,40,664,19,16,
            20,17,410,33,664,19,16,20,17,410,
            32,13,915,704,373,13,272,375,518,1938,
            679,365,13,1938,1709,365,1938,482,1745,13,
            564,1938,365,13,267,395,393,270,195,365,
            86,679,195,365,86,679,1659,1262,82,195,
            1659,86,679,1938,1938,179,195,1659,86,679,
            195,601,86,679,1659,800,69,61,1659,232,
            69,251,842,257,57,503,1938,169,1562,884,
            1711,690,69,926,564,564,1938,564,1938,252,
            211,322,323,252,211,322,323,207,973,518,
            88,195,1262,1704,195,252,211,322,323,1250,
            1938,61,1250,1449,1772,1808,518,1938,1938,1350,
            1938,253,211,322,323,1668,1938,1938,257,1668,
            1938,1938,1938,1291,1938,1711,203,1938,1938,1938,
            1938,1858,1938,190,1938,1938,190,1704,1938,1938,
            1938,1938,1938,1413,767,1938,1700,1259,1042,1778,
            1259,968,1938,1576,1938,0,325,732,0,19,
            177,0,1,2162,0,1,2173,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,0,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,0,32,33,34,35,36,37,0,8,
            40,41,42,43,44,45,46,47,48,49,
            50,51,0,53,54,55,0,1,0,3,
            0,5,0,1,2,9,10,11,0,0,
            0,15,16,17,69,6,7,9,10,11,
            0,0,12,15,16,17,5,0,32,33,
            34,35,36,37,56,57,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,0,1,0,3,60,5,0,38,
            39,9,10,11,0,0,74,15,16,17,
            68,73,0,9,10,11,0,5,0,15,
            16,17,0,0,32,33,34,35,36,37,
            70,71,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,0,1,
            38,3,60,5,56,57,89,9,10,11,
            0,56,57,15,16,17,72,0,0,9,
            10,11,5,0,0,15,16,17,56,57,
            32,33,34,35,36,37,0,75,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,0,1,39,3,60,0,
            1,38,3,9,10,11,0,0,0,15,
            16,17,0,5,0,9,10,11,4,0,
            0,15,16,17,0,5,32,33,34,35,
            36,37,56,57,40,41,42,43,44,45,
            46,47,48,49,50,51,0,53,54,55,
            0,1,2,3,4,5,6,7,8,39,
            0,0,0,13,14,4,58,5,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,0,32,64,65,66,67,6,7,77,
            78,0,1,2,3,4,5,6,7,8,
            0,39,0,0,13,14,0,0,58,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,0,32,64,65,66,67,0,1,
            0,3,0,1,2,3,4,5,6,7,
            8,0,0,1,12,13,14,6,7,58,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,0,64,65,66,67,0,1,
            0,3,9,10,11,69,74,0,15,16,
            17,0,1,2,52,79,80,81,82,83,
            84,85,86,87,88,32,33,34,35,36,
            37,31,72,40,41,42,43,44,45,46,
            47,48,49,50,51,0,1,2,3,4,
            5,6,7,8,0,1,0,3,13,14,
            4,61,0,18,19,20,21,22,23,24,
            25,26,27,28,29,30,0,70,71,0,
            4,0,1,0,3,0,0,1,2,3,
            4,5,6,7,8,0,1,0,3,13,
            14,4,0,58,18,19,20,21,22,23,
            24,25,26,27,28,29,30,0,62,63,
            0,1,5,3,0,1,2,0,1,2,
            3,4,12,6,7,8,0,0,62,63,
            13,14,5,0,58,18,19,20,21,22,
            23,24,25,26,27,28,29,30,0,62,
            63,59,4,0,1,0,3,31,0,52,
            0,1,2,3,4,12,6,7,8,0,
            0,2,12,13,14,0,0,60,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,0,1,2,3,4,0,6,7,8,
            31,31,75,12,13,14,0,59,2,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,0,1,2,3,4,31,6,7,
            8,61,0,0,12,13,14,31,0,0,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,0,1,2,3,4,0,6,
            7,8,0,0,31,0,13,14,0,1,
            8,18,19,20,21,22,23,24,25,26,
            27,28,29,30,0,1,2,3,4,0,
            6,7,8,0,0,0,0,13,14,0,
            68,12,18,19,20,21,22,23,24,25,
            26,27,28,29,30,0,1,2,3,4,
            0,6,7,8,0,0,0,59,13,14,
            0,73,12,18,19,20,21,22,23,24,
            25,26,27,28,29,30,0,1,2,3,
            4,0,6,7,8,59,0,0,0,13,
            14,68,38,12,18,19,20,21,22,23,
            24,25,26,27,28,29,30,0,1,2,
            3,4,0,6,7,8,0,0,0,0,
            13,14,0,5,12,18,19,20,21,22,
            23,24,25,26,27,28,29,30,0,1,
            2,3,4,0,6,7,8,0,0,0,
            0,13,14,0,38,12,18,19,20,21,
            22,23,24,25,26,27,28,29,30,0,
            52,2,0,4,5,0,0,0,9,10,
            11,0,0,0,15,16,17,12,12,12,
            9,10,11,0,12,12,15,16,17,0,
            31,32,33,34,35,36,37,0,39,0,
            0,0,0,32,33,34,35,36,37,9,
            10,11,0,0,0,15,16,17,0,0,
            0,9,10,11,0,0,0,15,16,17,
            0,69,32,33,34,35,36,37,0,38,
            0,0,2,0,32,33,34,35,36,37,
            9,10,11,13,14,0,15,16,17,0,
            0,0,38,0,1,2,0,0,5,0,
            0,31,0,32,33,34,35,36,37,9,
            10,11,0,0,0,15,16,17,0,0,
            0,9,10,11,31,0,0,15,16,17,
            0,61,39,0,0,2,0,0,5,0,
            1,2,0,4,0,0,76,0,1,2,
            0,4,2,0,4,2,0,4,0,0,
            0,0,0,0,31,0,0,0,0,0,
            31,0,39,0,0,0,0,0,31,0,
            0,31,0,0,31,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1938,1948,1771,1949,1643,1938,1635,1627,1651,2150,
            2151,2152,1,1764,1757,2264,1283,2265,1750,1950,
            1951,1952,1953,632,606,2251,2252,2253,1726,1351,
            433,63,2099,2100,2098,2153,2101,2097,53,1240,
            2104,2109,2108,2106,2107,2105,2110,2111,2103,2112,
            2113,2114,69,526,536,523,1938,1,67,1,
            251,189,1,2162,1502,1,1,1,1938,50,
            1938,1,1,1,669,1185,1130,2150,2151,2152,
            61,1938,1114,2264,1283,2265,1943,1938,1,1,
            1,1,1,1,1517,1527,1,1,1,1,
            1,1,1,1,1,1,1,1,189,1,
            1,1,1938,1,65,1,2132,188,57,1774,
            1942,1,1,1,247,56,1332,1,1,1,
            1159,493,1938,1,1,1,180,1947,181,1,
            1,1,55,283,1,1,1,1,1,1,
            1418,1273,1,1,1,1,1,1,1,1,
            1,1,1,1,188,1,1,1,1938,1,
            1401,1,2132,189,1517,1527,1925,1,1,1,
            246,1517,1527,1,1,1,715,1938,1938,2150,
            2151,2152,1943,87,1938,2264,1283,2265,1517,1527,
            1,1,1,1,1,1,54,1946,1,1,
            1,1,1,1,1,1,1,1,1,1,
            189,1,1,1,1938,1948,1942,1949,2132,1938,
            1948,790,1949,2150,2151,2152,248,1938,1938,2264,
            1283,2265,71,1941,1938,1,1,1,1224,58,
            1,1,1,1,1938,89,2099,2100,2098,2153,
            2101,2097,1517,1527,2104,2109,2108,2106,2107,2105,
            2110,2111,2103,2112,2113,2114,1938,526,536,523,
            1,1948,1771,1949,510,1941,1635,1627,1651,89,
            60,1938,1,1764,1757,1447,1940,1943,1750,1950,
            1951,1952,1953,632,606,2251,2252,2253,1726,1351,
            433,52,566,1487,1472,1460,755,1185,1130,1214,
            1567,1938,1948,1771,1949,1604,1941,1635,1627,1651,
            59,1942,70,1938,1764,1757,42,1938,1940,1750,
            1950,1951,1952,1953,632,606,2251,2252,2253,1726,
            1351,433,1938,1063,1487,1472,1460,755,183,3160,
            66,3160,1,1948,1771,1949,1643,28,1635,1627,
            1651,51,1938,2174,3101,1764,1757,1185,1130,1940,
            1750,1950,1951,1952,1953,632,606,2251,2252,2253,
            1726,1351,433,127,1487,1472,1460,755,182,3165,
            1938,3165,2150,2151,2152,1021,1332,62,2264,1283,
            2265,1,2162,1502,28,1000,979,958,937,916,
            874,895,853,832,811,2099,2100,2098,2153,2101,
            2097,1084,715,2104,2109,2108,2106,2107,2105,2110,
            2111,2103,2112,2113,2114,1938,1948,1771,1949,1643,
            1941,1635,1627,1651,204,3166,47,3166,1764,1757,
            1678,1127,1938,1750,1950,1951,1952,1953,632,606,
            2251,2252,2253,1726,1351,433,49,1418,1273,1938,
            1678,206,1948,1938,1949,1938,1938,1948,1771,1949,
            1431,1941,1635,1627,1651,205,533,48,533,1764,
            1757,1678,1,1940,1750,1950,1951,1952,1953,632,
            606,2251,2252,2253,1726,1351,433,1938,1670,1660,
            1938,1948,1945,1949,251,2162,1502,1938,1,1,
            1,1,1371,1,1,1,269,1,1670,1660,
            1,1,1947,1938,1940,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1670,
            1660,2194,251,1938,1948,1938,1949,646,1938,1944,
            1,1948,1771,1949,1643,1377,1635,1627,1651,268,
            289,519,3101,1764,1757,1938,1938,2250,1750,1950,
            1951,1952,1953,632,606,2251,2252,2253,1726,1351,
            433,1938,1948,1771,1949,1643,325,1635,1627,1651,
            646,1104,1946,3101,1764,1757,220,2194,1374,1750,
            1950,1951,1952,1953,632,606,2251,2252,2253,1726,
            1351,433,1,1948,1771,1949,1643,1926,1635,1627,
            1651,1235,1938,218,3101,1764,1757,646,1938,1938,
            1750,1950,1951,1952,1953,632,606,2251,2252,2253,
            1726,1351,433,1938,1948,1771,1949,1643,68,1635,
            1627,1651,64,1938,646,1938,1764,1757,1,1935,
            1240,1750,1950,1951,1952,1953,632,606,2251,2252,
            2253,1726,1351,433,1938,1948,1775,1949,1643,321,
            1635,1627,1651,199,1938,1938,1,1764,1757,1938,
            400,1114,1750,1950,1951,1952,1953,632,606,2251,
            2252,2253,1726,1351,433,1938,1948,1782,1949,1643,
            319,1635,1627,1651,254,1938,1938,2194,1764,1757,
            1938,493,1114,1750,1950,1951,1952,1953,632,606,
            2251,2252,2253,1726,1351,433,1938,1948,1789,1949,
            1643,317,1635,1627,1651,2193,1938,1938,1938,1764,
            1757,1194,1261,1114,1750,1950,1951,1952,1953,632,
            606,2251,2252,2253,1726,1351,433,1938,1948,1793,
            1949,1643,41,1635,1627,1651,29,1938,282,1938,
            1764,1757,1938,1446,1114,1750,1950,1951,1952,1953,
            632,606,2251,2252,2253,1726,1351,433,1,1948,
            1771,1949,1643,1938,1635,1627,1651,1938,1938,1938,
            1938,1764,1757,1938,543,1499,1750,1950,1951,1952,
            1953,632,606,2251,2252,2253,1726,1351,433,19,
            1446,1929,209,1929,1929,1938,1938,187,177,177,
            177,128,187,187,177,177,177,1554,1558,183,
            2150,2151,2152,1938,182,204,2264,1283,2265,1938,
            1929,177,177,177,177,177,177,1938,1929,1938,
            129,29,1938,2099,2100,2098,2153,2101,2097,2150,
            2151,2152,130,1938,1938,2264,1283,2265,1938,1938,
            1938,2150,2151,2152,205,1938,1938,2264,1283,2265,
            1938,1139,2099,2100,2098,2153,2101,2097,1938,1966,
            31,131,1831,1938,2099,2100,2098,2153,2101,2097,
            2150,2151,2152,1963,1964,1938,2264,1283,2265,1938,
            1938,1938,2798,1,1932,1321,1938,1938,1943,1938,
            249,1373,1938,2099,2100,2098,2153,2101,2097,2150,
            2151,2152,250,1938,1938,2264,1283,2265,1938,1938,
            1938,2150,2151,2152,646,1938,1938,2264,1283,2265,
            1938,1181,1942,1,1938,1538,1938,1938,1943,260,
            2162,1321,1938,1,1938,1938,527,266,2162,1321,
            263,251,1538,266,1,1538,1938,251,1938,1938,
            1938,1938,1938,1938,646,1938,1938,1938,1938,1938,
            646,1938,1942,1938,1938,1938,1938,1938,646,1938,
            1938,646,1938,1938,646
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            443,1,85,41,85,85,85,85,85,85,
            85,85,85,85,85,85,200,3,386,383,
            390,388,396,394,398,397,400,399,10,85,
            200,200,200,200,183,183,329,200,368,368,
            472,85,85,85,85,85,85,85,85,85,
            85,85,85,85,85,85,85,85,85,85,
            85,85,85,85,85,85,85,85,85,85,
            85,85,183,183,183,183,74,333,76,335,
            181,180,301,193,313,72,313,72,72,313,
            72,313,220,134,183,45,383,383,388,388,
            388,388,386,386,394,390,390,397,396,256,
            399,398,371,371,371,371,50,329,333,79,
            45,243,109,183,411,338,109,72,368,368,
            72,368,85,50,333,321,243,45,108,76,
            183,327,220,182,340,45,109,74,262,74,
            295,297,259,292,74,321,243,85,85,45,
            109,335,251,250,333,340,183,74,262,295,
            295,292,48,470,368,85,258,292,50,243,
            321,45,45,183,411,338,327,262,292,186,
            262,295,297,467,297,52,45,368,85,50,
            321,340,262,188,297,292,85,368,45,297,
            183,182,292,407,85,406,104,333,292,292,
            369,188,85,104,297
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            89,0,75,31,2,61,76,13,14,8,
            4,6,7,62,63,56,57,64,65,66,
            67,70,71,72,73,74,77,78,52,69,
            79,80,81,82,83,85,84,86,87,88,
            68,39,89,38,58,5,0,5,52,31,
            61,13,14,8,4,6,7,23,24,18,
            28,29,30,2,19,20,21,22,25,26,
            27,1,3,12,0,58,5,32,9,10,
            11,15,16,17,19,20,21,22,25,26,
            27,3,13,14,8,6,7,23,24,18,
            28,29,30,4,2,1,0,32,58,5,
            13,14,8,4,6,7,23,24,18,28,
            29,30,2,1,3,19,20,21,22,25,
            26,27,0,10,32,37,11,36,35,34,
            9,33,15,16,17,61,76,13,14,8,
            6,7,62,63,56,57,64,65,66,67,
            70,71,72,73,74,77,78,69,79,80,
            81,82,83,84,85,86,87,88,4,2,
            31,38,39,5,0,75,5,4,1,2,
            68,0,5,68,38,58,39,75,31,18,
            19,20,21,22,2,13,14,8,4,6,
            7,23,24,25,26,27,28,29,30,1,
            3,53,54,55,48,40,45,43,44,42,
            41,46,47,49,50,51,37,34,32,33,
            36,35,9,10,11,16,15,17,0,2,
            5,38,39,75,31,68,0,69,31,61,
            0,33,40,9,41,53,34,42,35,43,
            44,36,10,45,46,32,54,37,55,47,
            48,11,49,50,51,1,3,15,16,17,
            60,5,52,0,1,3,5,52,38,0,
            48,40,45,43,44,42,41,46,47,49,
            50,51,68,75,37,34,32,33,36,35,
            9,10,11,15,16,17,38,1,5,39,
            2,31,4,0,4,2,31,39,5,33,
            40,9,41,53,34,42,35,43,44,36,
            10,45,46,32,54,37,55,47,48,11,
            49,50,51,15,16,17,59,3,1,0,
            69,79,80,81,82,83,84,85,86,87,
            88,12,4,62,63,6,7,57,56,64,
            65,66,67,70,71,8,72,73,74,58,
            39,52,89,77,78,68,75,5,38,0,
            4,33,40,9,41,53,34,42,35,43,
            44,36,10,45,46,32,54,37,55,47,
            48,11,49,50,51,1,3,15,16,17,
            59,0,18,19,20,21,22,1,3,2,
            13,14,8,4,6,7,23,24,25,26,
            27,28,29,30,60,0,5,38,52,69,
            0,5,39,18,19,20,21,22,1,3,
            2,13,14,8,4,6,7,23,24,25,
            26,27,28,29,30,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            98,36,27,36,27,27,27,27,27,27,
            27,27,27,27,27,27,105,36,36,36,
            36,36,36,36,36,36,36,36,36,27,
            105,105,105,105,17,17,87,1,22,22,
            115,106,27,27,27,27,27,27,27,27,
            27,27,27,27,27,27,27,27,106,27,
            27,27,27,27,27,27,27,27,27,27,
            27,27,17,17,17,17,36,13,40,86,
            11,11,53,65,54,46,54,20,20,54,
            19,54,48,36,17,42,36,36,36,36,
            36,36,36,36,36,36,36,36,36,36,
            36,36,36,36,36,36,74,101,36,37,
            42,113,41,17,93,16,41,7,7,7,
            7,7,27,25,36,74,113,42,41,91,
            17,70,29,36,95,42,41,56,74,36,
            74,44,9,74,36,74,113,27,27,42,
            41,69,11,11,13,95,17,36,118,74,
            7,82,24,36,7,27,67,82,74,113,
            91,42,42,17,93,16,76,74,82,58,
            61,7,44,36,36,26,42,7,27,25,
            91,109,118,72,44,82,27,7,42,44,
            17,17,82,59,27,36,72,13,82,82,
            36,72,27,78,84
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            81,79,78,67,77,76,1,0,99,0,
            28,0,36,52,0,10,21,0,94,68,
            0,73,0,71,10,62,5,0,81,80,
            79,78,67,77,76,0,5,10,0,10,
            5,22,0,54,0,91,0,67,63,64,
            65,66,55,31,0,92,0,10,72,0,
            10,35,69,0,102,0,101,0,21,48,
            47,41,39,10,0,48,47,41,39,36,
            0,37,0,97,0,21,47,48,10,0,
            23,0,36,52,10,27,0,10,89,0,
            48,47,36,0,35,10,30,0,95,10,
            27,0,59,0,10,90,0,83,10,35,
            0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,10,11,8,48,64,
            76,3,6,7,96,97,98,68,81,82,
            83,84,12,13,93,94,95,100,101,102,
            1,69,44,55,60,63,72,42,90,47,
            52,56,61,62,66,67,74,75,78,79,
            80,91,54,70,73,16,17,89,30,107,
            4,14,15,18,19,20,21,29,31,22,
            23,24,25,26,92,5,27,28,32,33,
            34,35,36,37,38,39,40,41,108,45,
            46,49,50,51,53,57,58,59,65,71,
            77,88,99,103,104,105,106
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            114,0,0,0,116,120,121,122,123,0,
            124,125,126,127,128,129,130,131,132,133,
            111,110,143,0,0,0,136,164,0,115,
            142,0,0,0,155,0,112,160,162,0,
            163,0,0,0,135,173,174,175,0,118,
            151,161,170,0,145,150,0,165,168,169,
            172,0,146,147,148,149,152,0,154,159,
            176,113,117,119,134,137,138,139,140,141,
            144,0,153,157,0,0,158,167,109,0,
            0,0,156,0,166,171,0,177,178,0,
            179,180,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            120,151,206,130,59,69,159,26,186,35,
            87,105,75,6,12,16,40,83,52,141,
            202,224,228,52,52,195,52,1,1,1,
            44,47,92,115,47,232,20,145,177,214,
            137,165,165,165,165,165,95,95,95
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            128,128,128,128,4,4,128,32,192,10,
            4,10,80,10,10,10,10,4,4,139,
            10,10,4,56,80,199,65,4,4,4,
            10,50,4,10,118,10,23,148,180,217,
            139,167,169,171,173,175,102,97,110
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            65,63,5,65,28,28,63,56,109,49,
            28,44,28,6,6,6,49,28,28,69,
            6,5,5,28,28,19,28,102,101,100,
            47,61,28,41,51,3,71,69,110,5,
            69,80,79,78,77,76,44,42,44
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            52,52,52,52,58,58,52,52,95,39,
            58,39,19,39,39,39,39,58,58,75,
            39,39,58,4,19,68,32,58,58,58,
            39,2,58,39,1,39,69,1,101,39,
            75,1,53,54,54,48,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            19,19,34,19,23,23,19,93,-1,27,
            23,9,23,34,34,34,27,23,23,3,
            34,34,34,23,23,67,23,17,1,7,
            27,29,23,9,11,34,94,3,-1,34,
            3,20,20,20,20,20,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            152,31,0,110,0,157,2,30,0,111,
            0,157,2,29,0,157,2,28,0,205,
            117,0,31,150,0,161,181,117,12,169,
            0,112,0,0,165,117,2,154,0,165,
            117,2,0,168,2,0,159,117,0,173,
            0,195,117,31,0,9,110,0,127,32,
            195,117,31,0,69,133,110,0,127,195,
            117,32,31,0,195,117,32,31,0,133,
            110,0,127,32,31,0,127,195,117,31,
            0,127,31,0,148,0,2,0,166,111,
            0,2,111,0,165,117,2,148,0,2,
            0,165,111,0,158,2,0,160,0,161,
            193,117,12,108,201,53,0,112,0,161,
            193,117,12,201,53,0,142,0,113,0,
            200,117,142,0,117,142,0,156,113,0,
            189,117,12,199,108,198,174,0,189,117,
            12,198,174,0,188,0,149,0,148,0,
            147,0,146,0,145,0,212,94,0,77,
            2,115,111,113,0,212,128,137,2,98,
            0,53,0,0,137,78,125,0,29,132,
            0,157,2,18,0,161,181,117,12,128,
            157,2,0,157,2,0,111,3,0,119,
            0,112,0,197,2,112,0,137,31,112,
            0,137,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1315,0,1837,1259,1834,0,392,0,1576,1350,
            1401,1502,1366,1321,1262,0,1283,0,1232,564,
            365,0,1292,714,395,393,1350,1748,1321,1262,
            1538,1659,0,1604,1431,510,1332,1214,715,493,
            1418,1273,1240,1527,1517,1487,1472,1460,755,1678,
            1670,1660,1185,1130,1764,1757,1651,1643,1635,1627,
            632,606,1750,1726,1351,433,1194,1159,1139,1104,
            1084,1063,1042,767,400,732,566,646,1021,1000,
            979,958,937,916,895,874,853,832,811,365,
            790,690,669,468,543,447,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,196,117,182,30,29,28,18,24,23,
            7,6,4,8,14,13,2,112,116,115,
            119,118,121,120,123,122,125,124,113,38,
            2,2,2,2,157,137,142,117,76,61,
            2,31,7,6,63,62,4,67,66,65,
            64,56,57,8,71,70,73,72,78,77,
            74,88,87,86,84,85,83,82,81,80,
            79,69,157,157,157,157,128,117,31,2,
            155,154,183,16,184,174,185,55,54,186,
            53,187,188,108,197,137,115,115,118,118,
            118,118,116,116,120,119,119,122,121,137,
            124,123,128,128,128,128,12,159,143,32,
            127,117,4,168,117,2,31,198,175,175,
            201,175,68,117,143,4,117,127,195,166,
            165,134,117,167,117,152,4,108,12,108,
            12,181,117,12,169,4,117,195,32,127,
            4,2,146,148,117,38,165,199,117,12,
            117,161,38,205,61,31,206,117,12,117,
            166,127,127,158,117,2,159,12,189,142,
            190,117,193,108,194,69,152,61,31,117,
            166,117,117,117,193,161,69,38,152,181,
            165,202,189,200,68,158,2,117,161,161,
            38,38,68,159,144
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "MYTHREAD",
            "THREADS",
            "UPC_MAX_BLOCKSIZE",
            "relaxed",
            "shared",
            "strict",
            "upc_barrier",
            "upc_localsizeof",
            "upc_blocksizeof",
            "upc_elemsizeof",
            "upc_notify",
            "upc_fence",
            "upc_wait",
            "upc_forall",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_cast_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "layout_qualifier"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 60,
           SCOPE_UBOUND      = 48,
           SCOPE_SIZE        = 49,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 225,
           NT_OFFSET         = 107,
           LA_STATE_OFFSET   = 2302,
           MAX_LA            = 2,
           NUM_RULES         = 364,
           NUM_NONTERMINALS  = 128,
           NUM_SYMBOLS       = 235,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1688,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 89,
           EOLT_SYMBOL       = 89,
           ACCEPT_ACTION     = 1925,
           ERROR_ACTION      = 1938;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
