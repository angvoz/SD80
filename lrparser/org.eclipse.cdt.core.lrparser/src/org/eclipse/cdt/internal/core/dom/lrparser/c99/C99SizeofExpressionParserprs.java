/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99SizeofExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, C99SizeofExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            1,4,1,3,3,3,1,3,3,1,
            3,3,1,3,3,3,3,1,3,3,
            1,3,1,3,1,3,1,3,1,3,
            1,5,1,3,3,3,3,3,3,3,
            3,3,3,3,1,1,2,1,0,1,
            3,1,1,1,1,1,1,1,1,3,
            4,3,2,4,1,2,1,1,1,2,
            5,7,5,1,0,7,5,9,8,3,
            2,2,2,3,2,4,2,2,2,2,
            2,1,1,1,1,2,1,2,2,2,
            1,2,2,1,2,2,1,2,2,1,
            2,2,1,3,1,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            5,5,6,6,2,2,2,1,0,1,
            2,4,2,1,1,1,3,1,1,2,
            3,6,7,1,0,1,3,1,3,1,
            1,1,1,1,1,3,1,1,1,1,
            1,3,1,2,2,1,5,3,1,3,
            5,1,3,1,3,2,4,3,5,4,
            6,6,3,5,1,1,2,3,4,1,
            2,1,3,1,1,3,2,1,1,1,
            1,2,1,2,3,1,1,1,3,1,
            2,2,2,3,4,5,1,7,3,0,
            0,1,1,3,3,4,1,1,2,3,
            2,3,2,1,0,1,2,1,1,1,
            1,1,2,4,3,6,2,4,1,1,
            -36,0,0,0,0,0,0,0,-208,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-5,0,0,0,0,0,0,0,
            0,0,-121,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-196,0,-12,0,0,0,0,
            0,0,0,0,0,0,-13,0,0,0,
            0,0,0,0,0,0,0,0,0,-29,
            -2,-127,-140,-4,-14,0,0,0,0,0,
            0,0,0,0,-16,-17,-18,0,-19,0,
            0,0,0,0,-191,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-166,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-30,-179,-144,-33,0,-55,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-113,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-72,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-20,0,-21,0,-187,0,0,0,
            0,0,0,0,-22,0,0,0,0,0,
            0,0,0,0,0,0,-3,0,0,0,
            0,0,0,0,-23,0,0,0,0,0,
            0,0,0,0,0,0,-24,-25,-26,-170,
            -85,-51,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-34,0,-107,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-67,
            -126,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -86,0,-87,0,-27,0,0,0,0,0,
            0,0,-88,0,0,0,0,0,0,0,
            0,0,0,0,-56,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-57,0,0,0,0,0,
            0,0,-89,0,0,0,0,0,0,0,
            0,0,0,0,-58,0,0,0,0,0,
            0,0,-90,0,0,0,0,0,0,0,
            0,0,0,0,-59,0,0,0,0,0,
            0,0,-91,0,0,0,0,0,0,0,
            0,0,0,0,-60,0,0,0,0,0,
            0,0,-92,0,0,0,0,0,0,0,
            0,0,0,0,-61,0,0,0,0,0,
            0,0,-93,0,0,0,0,0,0,0,
            0,0,0,0,-62,0,0,0,0,0,
            0,0,-94,0,0,0,0,0,0,0,
            0,0,0,0,-63,0,0,0,0,0,
            0,0,-95,0,0,0,0,0,0,0,
            0,0,0,0,-64,0,0,0,0,0,
            0,0,-96,0,0,0,0,0,0,0,
            0,0,0,0,-65,0,0,0,0,0,
            0,0,-97,0,0,0,0,0,0,0,
            0,0,0,0,-66,0,0,0,0,0,
            0,0,-130,0,0,0,0,0,0,0,
            0,0,0,0,-37,0,0,0,0,0,
            0,0,0,0,-205,-98,-99,-100,-79,-101,
            0,0,0,0,-145,0,0,0,0,0,
            0,0,-102,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-6,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-146,0,0,0,0,0,0,0,-103,
            0,0,0,0,0,0,0,0,0,0,
            0,-169,0,0,0,0,0,0,0,-114,
            0,0,0,0,0,0,0,0,0,0,
            -184,0,0,0,0,0,0,0,-116,0,
            0,0,0,0,0,0,0,0,0,-190,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-194,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-204,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-120,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-119,-129,-131,-142,-123,
            -74,-162,-143,0,0,-52,0,0,0,0,
            0,0,0,-163,0,0,0,0,0,0,
            0,0,0,0,-173,0,-68,-75,-149,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-157,-167,0,0,0,-178,-185,0,0,
            0,-111,0,0,0,-195,0,0,-207,-71,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-46,0,0,0,
            0,0,0,0,0,0,-84,-69,0,-54,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-80,0,0,0,0,0,-82,-181,
            -110,0,0,0,0,0,0,0,-47,0,
            0,0,0,0,0,0,-104,0,0,0,
            0,0,0,0,0,0,-139,0,0,0,
            0,0,0,0,0,0,0,0,0,-148,
            0,0,0,0,0,0,0,-48,0,0,
            0,0,0,0,0,-203,0,0,0,0,
            -108,-150,0,0,-49,0,0,0,0,0,
            0,0,-106,0,0,0,-115,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-7,0,0,0,0,
            0,0,0,-50,0,0,0,0,0,0,
            0,0,0,0,0,-42,0,0,0,0,
            0,0,0,-152,0,0,-38,0,0,0,
            0,0,0,0,0,0,-43,0,0,0,
            0,0,0,0,0,0,0,-44,0,0,
            0,0,0,0,0,-128,0,0,-45,0,
            0,0,0,0,0,0,-73,0,0,-76,
            -35,-151,0,-77,0,0,0,0,0,-8,
            0,0,0,0,0,0,0,-193,0,0,
            0,0,-125,0,0,0,0,0,0,0,
            0,0,0,0,0,-161,-147,0,0,0,
            0,0,0,0,0,0,-117,-118,0,-122,
            -133,0,0,0,0,0,0,0,0,0,
            0,-9,0,0,0,0,0,0,-10,0,
            0,0,0,0,0,-11,0,0,0,0,
            0,0,-15,-28,-156,0,0,0,-78,-154,
            0,0,-39,0,0,0,0,0,0,-40,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-135,-138,0,0,0,0,0,0,
            0,0,0,0,-160,-174,-81,0,0,-41,
            0,0,0,0,0,0,-70,0,0,0,
            0,0,0,-83,-175,-186,0,0,0,-168,
            0,-112,0,0,0,0,0,0,-134,0,
            -141,-136,-176,0,0,0,0,0,0,0,
            -155,0,0,0,0,0,0,-201,0,-159,
            -177,-192,0,-1,0,0,0,0,0,0,
            0,0,-137,0,0,-164,0,0,0,0,
            0,0,0,0,0,0,0,-105,0,0,
            0,0,-132,0,0,0,0,0,0,0,
            0,-109,0,0,-124,0,0,0,0,0,
            0,0,0,-165,0,0,0,0,0,0,
            0,0,0,-188,0,0,-158,-31,0,0,
            0,0,-32,-197,0,0,-53,-172,0,0,
            0,0,0,-171,0,0,0,0,0,0,
            0,0,-180,0,0,-153,0,0,0,0,
            -182,-189,0,0,-183,-198,-199,0,-200,0,
            -202,-206,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            84,8,23,23,22,22,26,26,68,68,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,51,51,69,
            69,5,5,5,5,5,5,5,5,5,
            5,6,6,7,7,7,7,9,9,9,
            10,10,10,11,11,11,11,11,12,12,
            12,13,13,14,14,15,15,16,16,17,
            17,18,18,19,19,19,19,19,19,19,
            19,19,19,19,19,95,45,40,85,85,
            72,72,46,96,96,96,96,96,96,96,
            97,97,97,98,98,103,103,104,104,99,
            99,100,100,100,106,106,101,101,101,101,
            102,102,102,102,102,105,105,24,24,24,
            24,24,28,28,28,78,78,73,73,73,
            73,74,74,74,75,75,75,76,76,76,
            77,77,77,107,107,108,108,109,29,31,
            31,31,31,31,52,54,54,54,54,54,
            54,54,54,54,54,54,54,65,65,27,
            27,62,62,62,62,63,63,63,55,55,
            56,56,48,48,48,32,86,86,79,80,
            80,80,64,64,81,81,82,82,66,66,
            20,21,21,21,30,47,47,33,33,33,
            33,36,36,38,34,34,35,39,39,110,
            110,37,111,111,87,87,25,25,25,25,
            25,25,25,25,25,83,49,49,49,49,
            58,58,57,57,57,59,59,50,50,88,
            88,70,70,60,60,60,41,41,41,42,
            43,43,43,44,44,44,44,53,53,53,
            61,89,71,71,71,71,67,90,91,91,
            92,92,93,93,112,112,113,113,114,114,
            114,114,116,116,115,115,115,117,117,84,
            84,1,14,19,15,395,569,43,406,27,
            405,409,407,525,523,555,535,568,567,73,
            90,133,210,672,14,19,15,395,40,135,
            132,134,158,556,14,19,15,395,569,43,
            406,393,405,409,407,525,523,555,535,568,
            567,73,277,137,541,164,672,14,19,15,
            395,33,1624,141,144,147,150,672,14,19,
            15,395,32,394,1370,1374,1459,1497,1514,1167,
            416,338,243,657,42,837,282,215,1262,218,
            1372,220,221,226,1079,399,210,13,278,57,
            283,1533,251,210,1227,614,14,19,15,395,
            569,43,406,393,405,409,407,525,523,555,
            535,568,567,73,277,435,14,19,15,395,
            569,43,406,393,405,409,407,525,523,555,
            535,568,567,73,277,416,479,291,772,23,
            643,14,19,15,395,41,43,406,282,405,
            409,407,525,523,555,903,1079,251,210,854,
            1507,270,283,1123,570,288,1659,1583,284,216,
            1262,218,1372,220,221,226,1079,265,1108,1081,
            268,274,285,369,14,19,15,395,569,43,
            406,1592,405,409,407,525,523,555,535,568,
            567,73,1261,108,22,292,236,585,14,19,
            15,395,569,43,406,265,405,409,407,525,
            523,555,535,568,567,73,277,643,14,19,
            15,395,569,43,406,93,405,409,407,525,
            523,555,535,568,567,73,90,375,408,708,
            707,730,643,14,19,15,395,41,43,406,
            286,405,409,407,525,523,886,772,1079,701,
            14,19,15,395,569,43,406,1595,405,409,
            407,525,523,555,535,568,567,73,1393,16,
            772,402,14,19,15,395,569,43,406,394,
            405,409,407,525,523,555,535,568,567,73,
            1407,749,950,213,237,643,14,19,15,395,
            569,43,406,258,405,409,407,525,523,555,
            535,568,567,73,91,643,14,19,15,395,
            569,43,406,289,405,409,407,525,523,555,
            535,568,567,73,84,643,14,19,15,395,
            569,43,406,211,405,409,407,525,523,555,
            535,568,567,73,83,643,14,19,15,395,
            569,43,406,352,405,409,407,525,523,555,
            535,568,567,73,82,643,14,19,15,395,
            569,43,406,464,405,409,407,525,523,555,
            535,568,567,73,81,643,14,19,15,395,
            569,43,406,514,405,409,407,525,523,555,
            535,568,567,73,80,643,14,19,15,395,
            569,43,406,431,405,409,407,525,523,555,
            535,568,567,73,79,643,14,19,15,395,
            569,43,406,561,405,409,407,525,523,555,
            535,568,567,73,78,643,14,19,15,395,
            569,43,406,315,405,409,407,525,523,555,
            535,568,567,73,77,643,14,19,15,395,
            569,43,406,59,405,409,407,525,523,555,
            535,568,567,73,76,643,14,19,15,395,
            569,43,406,107,405,409,407,525,523,555,
            535,568,567,73,75,643,14,19,15,395,
            569,43,406,287,405,409,407,525,523,555,
            535,568,567,73,74,643,14,19,15,395,
            41,43,633,133,210,347,141,648,535,119,
            564,135,132,134,158,643,14,19,15,395,
            569,43,406,504,405,409,407,525,523,555,
            535,568,567,73,1496,137,970,164,216,1262,
            218,1372,220,221,226,141,144,147,150,643,
            14,19,15,395,41,39,1370,1374,1459,1497,
            1514,1167,643,14,19,15,395,569,43,406,
            49,405,409,407,525,523,555,535,568,567,
            73,1515,643,14,19,15,395,41,43,406,
            573,405,409,407,525,523,555,535,568,567,
            92,643,14,19,15,395,41,43,406,593,
            405,409,407,525,523,555,535,568,567,92,
            643,14,19,15,395,41,43,406,1614,405,
            409,407,525,523,555,535,568,567,92,643,
            14,19,15,395,41,43,406,209,405,409,
            407,525,523,555,535,568,567,92,643,14,
            19,15,395,41,43,406,1657,405,409,407,
            525,523,555,535,568,567,92,643,14,19,
            15,395,41,43,406,200,405,409,407,525,
            523,555,535,568,567,72,597,383,51,626,
            147,620,591,147,201,1324,643,14,19,15,
            395,41,43,406,681,405,409,407,525,887,
            250,210,270,250,210,300,271,772,494,846,
            215,1262,218,1372,220,221,226,1551,263,1108,
            1081,268,565,630,259,251,210,854,471,21,
            1200,273,772,272,270,1552,621,260,457,649,
            285,1105,215,1262,218,1372,220,221,226,228,
            263,1108,1081,268,269,1082,1533,643,14,19,
            15,395,41,43,406,257,763,287,118,1132,
            643,14,19,15,395,41,43,406,1725,405,
            409,407,525,523,555,535,890,133,210,1578,
            193,20,1725,167,207,136,132,134,158,215,
            339,465,14,19,15,395,41,35,1624,643,
            14,19,15,395,41,43,406,6,783,138,
            989,164,1725,1725,243,343,1076,310,1725,142,
            145,148,151,215,1262,218,1372,220,221,226,
            465,14,19,15,395,41,35,1136,643,14,
            19,15,395,41,43,406,339,405,409,407,
            803,118,677,244,1624,643,14,19,15,395,
            41,43,406,66,405,409,823,6,1604,196,
            198,1080,1725,1725,238,1529,1388,225,1725,215,
            1262,218,1372,220,221,226,643,14,19,15,
            395,41,38,1136,643,14,19,15,395,41,
            43,406,1725,405,409,843,643,14,19,15,
            395,41,43,406,285,405,683,643,14,19,
            15,395,41,43,643,197,198,643,14,19,
            15,395,41,43,406,1725,405,703,643,14,
            19,15,395,41,43,406,772,405,723,643,
            14,19,15,395,41,43,406,850,405,743,
            328,503,590,456,788,1522,1725,1725,275,1140,
            643,14,19,15,395,41,37,1725,166,273,
            133,210,270,118,133,210,270,224,140,132,
            134,158,143,132,134,158,660,118,263,1108,
            1081,268,263,1108,1081,268,240,6,6,1725,
            195,6,139,1725,164,1532,1563,1132,1083,1541,
            239,262,643,14,19,15,395,41,36,643,
            14,19,15,395,41,35,643,14,19,15,
            395,41,34,6,6,710,192,1655,1725,801,
            772,311,311,643,14,19,15,395,41,46,
            643,14,19,15,395,41,45,195,195,133,
            210,182,276,6,6,1371,1371,146,132,134,
            158,1550,1566,86,86,710,118,814,587,587,
            643,14,19,15,395,41,44,527,14,19,
            15,395,41,42,827,118,660,133,210,241,
            471,181,447,458,610,149,132,134,158,47,
            863,6,95,772,133,210,1725,863,242,1634,
            863,143,152,132,134,158,1077,291,772,863,
            239,447,432,195,498,222,195,1725,863,863,
            863,1122,547,449,1122,195,449,1656,1725,1725,
            227,1578,255,1122,195,1077,1077,190,532,1356,
            190,1078,1122,524,1455,1617,1725,1495,1617,190,
            1082,863,147,1082,86,147,1643,1617,190,309,
            456,255,255,270,710,1651,1617,1077,1356,1548,
            1078,1078,250,210,118,250,210,191,770,265,
            1108,1081,268,6,285,863,547,6,6,206,
            26,547,206,255,710,547,415,290,391,1661,
            1460,195,1078,710,1406,1094,628,1516,1094,1122,
            392,710,471,392,863,710,710,118,88,310,
            279,309,710,86,1725,191,1725,86,1168,184,
            1077,1725,888,885,1725,611,1725,183,895,293,
            292,202,203,231,1725,1725,1725,1725,319,1725,
            1725,1725,1725,1725,1725,1725,256,1725,1725,1725,
            1725,1725,1725,1107,1725,1725,1725,1725,1725,1725,
            1662,1725,0,17,178,0,18,177,0,1,
            1948,0,1,1959,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,0,13,14,15,16,17,18,19,
            20,21,22,23,24,25,0,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,0,0,43,44,45,0,1,0,3,
            0,5,6,7,8,9,0,0,0,0,
            14,15,16,17,18,0,0,55,56,57,
            58,6,7,8,26,29,30,31,32,33,
            34,35,36,37,38,39,40,46,42,43,
            44,45,0,47,0,1,46,3,0,5,
            6,7,8,9,48,49,0,0,14,15,
            16,17,18,55,56,57,58,0,0,1,
            13,3,5,29,30,31,32,33,34,35,
            36,37,38,39,40,0,42,43,44,45,
            0,47,0,1,26,3,0,5,6,7,
            8,9,6,7,8,63,14,15,16,17,
            18,55,56,57,58,0,0,1,51,3,
            5,29,30,31,32,33,34,35,36,37,
            38,39,40,0,42,43,44,45,0,47,
            0,1,26,3,0,5,6,7,8,9,
            6,7,8,63,14,15,16,17,18,0,
            0,46,0,4,0,1,4,3,0,29,
            30,31,32,33,34,35,36,37,38,39,
            40,66,42,43,44,45,0,47,0,1,
            26,3,0,5,6,7,8,9,6,7,
            8,0,14,15,16,17,18,0,48,49,
            0,4,53,54,0,53,54,29,30,31,
            32,33,34,35,36,37,38,39,40,0,
            42,43,44,45,0,47,0,1,4,3,
            0,0,6,7,8,9,6,7,8,0,
            14,15,16,17,18,6,7,8,0,0,
            53,54,0,5,0,29,30,31,32,33,
            34,35,36,37,38,39,40,0,64,43,
            44,45,0,6,7,8,9,0,0,1,
            2,14,15,16,17,18,0,1,2,41,
            4,0,61,62,46,46,29,30,31,32,
            33,34,35,36,37,38,39,40,0,1,
            2,3,4,5,0,61,62,9,10,11,
            0,13,0,1,2,0,4,19,20,21,
            22,23,24,25,12,27,28,59,0,48,
            49,0,1,2,3,4,5,0,10,11,
            9,10,11,0,13,0,1,80,3,51,
            19,20,21,22,23,24,25,0,27,28,
            0,0,1,0,0,1,2,3,4,5,
            10,11,68,69,10,11,0,13,0,1,
            4,3,51,19,20,21,22,23,24,25,
            26,27,28,0,0,1,2,3,4,5,
            0,1,65,3,10,11,42,13,0,1,
            2,50,4,19,20,21,22,23,24,25,
            12,27,28,0,0,2,50,0,1,2,
            3,4,0,0,2,12,4,10,11,0,
            13,48,49,0,12,51,19,20,21,22,
            23,24,25,0,27,28,0,1,2,3,
            4,0,0,2,0,4,10,11,0,13,
            0,1,2,12,47,19,20,21,22,23,
            24,25,26,27,28,0,1,2,3,4,
            0,48,49,0,0,10,11,64,13,5,
            10,11,0,50,19,20,21,22,23,24,
            25,26,27,28,0,1,2,3,4,0,
            0,2,0,59,10,11,0,13,26,0,
            1,12,3,19,20,21,22,23,24,25,
            26,27,28,0,1,2,3,4,26,0,
            0,0,26,10,11,0,13,0,65,0,
            66,12,19,20,21,22,23,24,25,26,
            27,28,0,1,2,3,4,0,0,1,
            60,26,10,11,0,13,0,0,0,0,
            13,19,20,21,22,23,24,25,12,27,
            28,0,1,2,3,4,0,50,0,59,
            0,10,11,0,13,0,0,0,12,60,
            19,20,21,22,23,24,25,0,27,28,
            0,1,2,3,4,46,0,0,52,0,
            10,11,0,13,5,0,0,0,12,19,
            20,21,22,23,24,25,46,27,28,0,
            0,2,0,4,5,6,7,8,9,0,
            0,12,0,14,15,16,17,18,0,0,
            2,42,4,5,6,7,8,9,52,0,
            12,0,14,15,16,17,18,60,0,0,
            41,0,0,0,5,0,5,70,71,72,
            73,74,75,76,77,78,79,0,0,41,
            0,0,0,6,7,8,9,0,0,0,
            0,14,15,16,17,18,6,7,8,9,
            41,0,41,0,14,15,16,17,18,6,
            7,8,9,0,0,0,0,14,15,16,
            17,18,6,7,8,9,0,0,2,0,
            14,15,16,17,18,0,1,2,12,0,
            5,2,0,0,5,19,20,12,5,0,
            0,12,0,0,5,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,41,0,52,0,
            41,0,0,0,41,0,0,0,0,0,
            0,42,0,67,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1725,571,1453,631,1439,1,1936,1937,1938,1886,
            1432,1380,58,1446,1887,1885,1939,1888,1884,377,
            366,333,1735,1736,1737,1738,281,1296,929,1891,
            1896,1895,1893,1894,1892,1897,1898,1890,1899,1900,
            1901,87,1725,1199,1193,889,1725,1,1725,1,
            252,189,1,1,1,1,53,1725,60,1725,
            1,1,1,1,1,246,1725,1359,1348,1337,
            1316,1,1,1,1217,1,1,1,1,1,
            1,1,1,1,1,1,1,635,189,1,
            1,1,65,1919,1725,1,1646,1,1725,189,
            1,1,1,1,1157,1209,59,63,1,1,
            1,1,1,1359,1348,1337,1316,1725,1725,1904,
            1248,1905,1728,1,1,1,1,1,1,1,
            1,1,1,1,1,1725,189,1,1,1,
            66,1919,1725,1,1277,1,1725,189,1,1,
            1,1,1936,1937,1938,1086,1,1,1,1,
            1,1359,1348,1337,1316,1725,1725,1904,1727,1905,
            1734,1,1,1,1,1,1,1,1,1,
            1,1,1,1725,189,1,1,1,1725,1919,
            1725,1,1417,1,247,188,1,1,1,1,
            1,1,1,1086,1,1,1,1,1,47,
            57,1256,49,1500,1725,1904,1500,1905,1725,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1733,188,1,1,1,1725,1919,1725,1,
            1418,1,245,189,1,1,1,1,1936,1937,
            1938,1725,1,1,1,1,1,48,1157,1209,
            1725,1500,1470,1463,67,1470,1463,1,1,1,
            1,1,1,1,1,1,1,1,1,1725,
            189,1,1,1,1725,1919,1725,1903,1273,1902,
            248,61,1936,1937,1938,1886,1936,1937,1938,249,
            1887,1885,1939,1888,1884,1936,1937,1938,1725,28,
            1470,1463,1725,1730,62,1891,1896,1895,1893,1894,
            1892,1897,1898,1890,1899,1900,1901,127,572,1199,
            1193,889,1725,1936,1937,1938,1886,1725,1,1948,
            364,1887,1885,1939,1888,1884,1725,1948,364,1729,
            1420,56,1304,1265,1139,435,1891,1896,1895,1893,
            1894,1892,1897,1898,1890,1899,1900,1901,1,1742,
            1453,1743,1201,1728,71,1304,1265,589,1432,1380,
            1725,1446,258,1948,1109,1725,1,377,366,333,
            1735,1736,1737,1738,503,1296,929,1019,50,1157,
            1209,1725,1742,1453,1743,1240,1728,69,1327,875,
            942,1432,1380,1725,1446,1725,1754,1712,1755,1727,
            377,366,333,1735,1736,1737,1738,1725,1296,929,
            52,1,1722,1725,1,1742,1453,1743,1439,27,
            1327,875,1170,1627,1432,1380,1,1446,205,1904,
            1273,1905,1727,377,366,333,1735,1736,1737,1738,
            2895,1296,929,55,1725,1742,1453,1743,1439,1728,
            1725,1904,460,1905,1432,1380,27,1446,264,1948,
            1109,1979,1420,377,366,333,1735,1736,1737,1738,
            503,1296,929,266,1725,479,1979,1725,1,1,
            1,1,261,68,1367,503,1,1,1,1725,
            1,1157,1209,54,503,1727,1,1,1,1,
            1,1,1,1,1,1,1725,1742,1453,1743,
            1439,264,1725,1367,1725,1420,1432,1380,1725,1446,
            1,1948,364,503,2035,377,366,333,1735,1736,
            1737,1738,1217,1296,929,1,1742,1453,1743,1439,
            51,1157,1209,70,1,1432,1380,572,1446,1734,
            1327,875,186,1979,377,366,333,1735,1736,1737,
            1738,2895,1296,929,1725,1742,1453,1743,1439,219,
            208,1127,185,1057,1432,1380,187,1446,1421,204,
            1128,503,1128,377,366,333,1735,1736,1737,1738,
            2895,1296,929,1,1742,1453,1743,1439,1483,267,
            199,1725,1484,1432,1380,1725,1446,1,460,1725,
            1733,503,377,366,333,1735,1736,1737,1738,2895,
            1296,929,1725,1742,1453,1743,1439,64,1725,1960,
            981,1628,1432,1380,1725,1446,1725,1725,1725,28,
            1248,377,366,333,1735,1736,1737,1738,962,1296,
            929,1725,1742,1454,1743,1439,217,1978,1725,1038,
            204,1432,1380,1725,1446,1725,1725,1725,503,527,
            377,366,333,1735,1736,1737,1738,1725,1296,929,
            1,1742,1453,1743,1439,1752,287,41,1520,1725,
            1432,1380,1725,1446,1732,1725,1725,1725,1000,377,
            366,333,1735,1736,1737,1738,2635,1296,929,17,
            1725,1713,1725,1713,1713,178,178,178,178,1725,
            1725,1713,1725,178,178,178,178,178,18,1725,
            1716,1731,1716,1716,177,177,177,177,1652,1725,
            1716,1725,177,177,177,177,177,855,1725,1,
            1713,1725,1725,1725,89,1725,1730,835,815,795,
            775,755,715,735,695,675,655,128,1725,1716,
            1725,1725,1725,1936,1937,1938,1886,1725,1725,1725,
            129,1887,1885,1939,1888,1884,1936,1937,1938,1886,
            89,1725,1729,130,1887,1885,1939,1888,1884,1936,
            1937,1938,1886,1725,1725,1725,131,1887,1885,1939,
            1888,1884,1936,1937,1938,1886,31,1725,1618,1725,
            1887,1885,1939,1888,1884,1,1719,1109,1623,1,
            1730,1367,1725,1,1730,1749,1750,503,1730,280,
            1725,503,1725,1725,1531,1725,1725,1725,1725,1725,
            1725,1725,1725,1725,1725,1725,1725,1725,1725,1725,
            1725,1725,1725,1725,1725,1725,1729,1725,455,1725,
            1729,1725,1725,1725,1729,1725,1725,1725,1725,1725,
            1725,1531,1725,390
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            396,1,104,41,104,104,104,104,104,104,
            104,104,104,3,326,51,48,55,53,61,
            59,63,62,65,64,10,104,326,286,286,
            414,104,171,171,314,326,104,104,104,104,
            104,104,104,104,104,104,104,104,104,104,
            104,104,104,104,104,104,104,104,104,104,
            104,104,104,104,104,104,171,171,45,80,
            318,98,256,169,168,289,301,301,94,94,
            301,94,301,340,125,125,48,48,53,53,
            53,53,51,51,59,55,55,62,61,212,
            64,63,96,78,314,309,174,45,363,102,
            171,367,259,194,226,194,226,320,194,104,
            78,309,363,363,45,101,98,171,312,340,
            170,261,226,226,226,226,320,320,322,122,
            253,96,363,309,104,104,45,102,256,207,
            206,318,261,171,226,253,219,226,226,253,
            322,214,322,320,253,76,217,286,104,121,
            253,78,309,45,45,171,367,259,312,253,
            221,253,253,104,286,322,80,45,286,104,
            78,261,72,104,71,117,318,253,45,322,
            171,170,221,104,117,253,287,322
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,66,12,2,52,67,19,20,13,
            4,10,11,53,54,48,49,55,56,57,
            58,61,62,63,64,65,68,69,42,60,
            70,71,72,73,74,76,75,77,78,79,
            59,41,80,46,51,5,0,4,53,54,
            10,11,49,48,55,56,57,58,61,62,
            13,63,64,65,51,41,42,80,68,69,
            59,66,5,46,0,5,42,12,52,19,
            20,13,4,10,11,27,28,21,2,22,
            23,24,25,1,3,26,0,6,7,8,
            9,51,5,22,23,24,25,3,19,20,
            13,10,11,27,28,21,4,2,1,0,
            60,12,52,0,7,9,18,8,17,16,
            15,6,14,52,67,19,20,13,10,11,
            53,54,48,49,55,56,57,58,61,62,
            63,64,65,68,69,60,70,71,72,73,
            74,75,76,77,78,79,4,2,12,46,
            41,5,0,6,7,8,2,22,23,24,
            25,1,3,19,20,13,4,10,11,27,
            28,21,0,14,6,15,16,17,7,9,
            18,8,1,4,26,2,5,46,41,66,
            12,59,0,5,46,42,60,0,66,5,
            4,1,2,59,0,14,29,6,30,43,
            15,31,16,32,33,17,7,34,35,9,
            44,18,45,36,37,8,38,39,40,1,
            3,47,5,42,0,4,2,12,41,5,
            14,29,6,30,43,15,31,16,32,33,
            17,7,34,35,9,44,18,45,36,37,
            8,38,39,40,50,3,1,0,37,29,
            34,32,33,31,30,35,36,38,39,40,
            59,66,18,15,9,14,17,16,6,7,
            8,46,1,5,41,2,12,4,0,1,
            3,5,42,46,0,21,22,23,24,25,
            2,19,20,13,4,10,11,27,28,3,
            1,43,44,45,37,29,34,32,33,31,
            30,35,36,38,39,40,18,15,9,14,
            17,16,6,7,8,0,14,29,6,30,
            43,15,31,16,32,33,17,7,34,35,
            9,44,18,45,36,37,8,38,39,40,
            1,3,50,4,0,21,22,23,24,25,
            1,3,2,19,20,13,4,10,11,27,
            28,47,0,5,41,21,22,23,24,25,
            1,3,2,19,20,13,4,10,11,27,
            28,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            84,8,20,8,20,20,20,20,20,20,
            20,20,20,8,66,8,8,8,8,8,
            8,8,8,8,8,8,20,66,11,11,
            93,67,23,23,62,1,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,67,20,20,20,20,20,20,20,
            20,20,20,20,20,20,23,23,27,20,
            74,25,61,36,36,52,53,53,34,34,
            53,34,53,48,8,8,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,82,63,82,31,27,87,26,
            23,72,22,8,82,8,82,82,8,20,
            18,82,87,87,27,26,13,23,39,2,
            8,81,82,76,82,76,34,82,59,15,
            82,8,87,13,20,20,27,26,38,36,
            36,74,81,23,76,70,45,89,76,70,
            59,8,8,34,70,17,8,34,20,29,
            70,82,13,27,27,23,72,22,40,70,
            55,70,70,20,34,59,19,27,34,20,
            18,80,46,20,8,55,74,70,27,59,
            23,23,55,20,42,70,8,9
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,78,77,76,75,74,73,0,89,0,
            69,0,20,0,91,0,67,8,61,4,
            0,8,22,0,8,4,23,0,93,0,
            4,8,0,27,0,25,0,22,8,43,
            42,36,34,0,8,68,0,62,63,64,
            65,52,28,0,8,36,34,0,51,0,
            22,8,43,42,0,32,8,45,0,26,
            0,8,24,49,0,56,8,32,0,87,
            24,8,0,8,84,0,58,0,8,32,
            48,0,8,85,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,69,10,
            11,1,8,44,55,60,63,72,6,7,
            68,81,82,83,84,3,12,13,47,52,
            56,61,62,66,67,74,75,78,79,80,
            90,91,54,70,73,42,93,16,17,30,
            89,4,14,15,18,19,20,21,29,31,
            22,23,24,25,26,92,5,27,28,32,
            33,34,35,36,37,38,39,40,41,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,101,105,106,107,0,108,109,
            110,111,112,113,114,115,116,117,118,129,
            0,97,96,122,149,98,121,128,0,0,
            0,140,145,147,0,148,0,0,0,0,
            158,159,160,0,100,120,137,139,146,155,
            0,131,136,0,0,138,150,153,154,157,
            0,132,133,134,135,144,161,99,102,103,
            104,119,123,124,125,126,127,130,142,0,
            0,143,152,95,0,141,151,156,0,162,
            163,0,164,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            164,82,35,41,91,111,117,12,142,21,
            51,69,123,128,28,47,101,179,183,151,
            1,1,32,56,79,187,6,105,158,133,
            158,97,59,59,59
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            89,89,4,4,89,89,89,18,148,26,
            4,26,89,89,26,4,99,26,4,155,
            4,4,26,4,26,26,9,108,161,136,
            172,99,66,61,74
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            4,64,25,25,64,62,62,53,100,44,
            25,39,62,62,44,25,48,4,4,18,
            93,92,42,25,36,2,67,48,6,101,
            4,48,39,37,39
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            42,42,51,51,42,42,42,42,86,41,
            51,41,42,42,41,51,66,41,51,59,
            51,51,41,51,41,41,60,1,41,92,
            41,66,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            34,19,23,23,19,19,19,89,-1,27,
            23,11,19,19,27,23,5,34,34,64,
            1,3,27,23,11,34,90,5,37,-1,
            34,5,11,11,11
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            139,12,0,96,0,183,101,0,31,136,
            0,144,164,101,26,154,0,98,0,0,
            150,101,2,135,0,97,0,150,101,2,
            0,153,2,0,112,9,176,101,12,0,
            112,176,101,9,12,0,112,9,12,0,
            112,176,101,12,0,112,12,0,129,0,
            2,0,151,97,0,2,97,0,150,101,
            2,129,0,2,0,150,97,0,140,2,
            0,144,174,101,26,120,43,0,98,0,
            144,174,101,26,43,0,125,0,99,0,
            179,101,125,0,101,125,0,141,99,0,
            148,101,26,120,45,0,148,101,26,120,
            44,0,148,101,26,45,0,148,101,26,
            44,0,189,85,0,77,2,100,97,99,
            0,189,115,138,2,89,0,53,0,0,
            138,69,110,0,29,117,0,163,2,0,
            97,106,0,144,164,101,26,115,163,2,
            0,97,3,0,104,0,98,0,178,2,
            97,0,138,12,97,0,138,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            570,0,393,0,1550,1617,1541,1532,1529,0,
            885,1256,364,1200,456,1109,1077,0,863,1167,
            311,0,1372,1262,1108,1081,456,1109,1077,1578,
            1367,1371,0,377,366,333,1240,1201,1507,460,
            1170,1086,572,1304,1265,1248,1209,1157,1359,1348,
            1337,1316,1500,1470,1463,1327,875,1446,1439,1432,
            1380,1296,929,1038,1019,1000,981,962,942,895,
            611,1057,589,503,855,835,815,795,775,755,
            735,715,695,675,655,311,635,547,527,415,
            435,343,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,177,101,165,21,28,27,11,10,4,
            13,20,19,97,2,102,100,104,103,106,
            105,108,107,110,109,98,46,2,67,52,
            2,12,163,138,125,101,11,10,54,53,
            4,58,57,56,55,48,49,13,62,61,
            64,63,69,68,65,79,78,77,75,76,
            74,73,72,71,70,60,163,178,138,115,
            101,12,2,136,135,166,167,168,45,44,
            169,43,170,171,1,3,100,100,103,103,
            103,103,102,102,105,104,104,107,106,138,
            109,108,115,26,142,4,9,112,101,4,
            153,101,2,120,26,120,26,26,120,59,
            101,4,101,101,112,176,151,150,117,101,
            152,101,26,101,26,101,101,26,164,101,
            26,154,101,151,176,9,112,4,2,127,
            129,101,46,150,101,148,125,149,101,148,
            174,120,175,101,144,46,183,52,12,184,
            101,26,151,112,112,140,101,2,142,148,
            101,148,144,60,46,174,60,139,52,12,
            101,101,179,59,140,2,101,144,139,164,
            150,180,46,59,142,144,46,119
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_sizeof_type_name_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_name",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_or_typedefname",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 47,
           SCOPE_UBOUND      = 34,
           SCOPE_SIZE        = 35,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 208,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2035,
           MAX_LA            = 2,
           NUM_RULES         = 310,
           NUM_NONTERMINALS  = 117,
           NUM_SYMBOLS       = 210,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1554,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1712,
           ERROR_ACTION      = 1725;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
