/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.gcc;

public class GCCSizeofExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, GCCSizeofExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            1,4,1,3,3,3,1,3,3,1,
            3,3,1,3,3,3,3,1,3,3,
            1,3,1,3,1,3,1,3,1,3,
            1,5,1,3,3,3,3,3,3,3,
            3,3,3,3,1,1,2,1,0,1,
            3,1,1,1,1,1,1,1,1,3,
            4,3,2,4,1,2,1,1,1,2,
            5,7,5,1,0,7,5,9,8,3,
            2,2,2,3,2,4,2,2,2,2,
            2,1,1,1,1,2,1,2,2,2,
            1,2,2,1,2,2,1,2,2,1,
            2,2,1,3,1,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            6,8,0,0,1,1,3,3,3,0,
            1,0,1,2,4,2,1,1,1,3,
            1,1,2,3,7,8,0,1,0,1,
            3,1,3,1,1,1,1,1,1,3,
            1,1,1,1,1,3,1,2,2,1,
            5,3,1,3,5,1,3,1,3,2,
            4,3,5,4,6,6,3,5,1,2,
            3,4,5,0,1,2,1,3,1,1,
            3,2,1,1,1,1,2,1,2,3,
            1,1,1,3,1,2,2,2,3,4,
            5,1,7,3,0,0,1,1,3,3,
            4,1,1,2,3,2,3,2,1,0,
            1,2,1,1,1,1,1,2,4,3,
            6,2,4,1,1,1,1,2,6,3,
            1,3,1,4,0,1,1,1,3,1,
            0,4,3,1,2,1,3,4,4,6,
            1,0,1,3,1,3,0,1,4,5,
            2,2,1,1,2,2,3,2,2,3,
            1,1,1,1,1,1,1,2,5,3,
            1,1,-38,0,0,0,0,0,0,0,
            0,0,0,-244,0,0,0,0,0,0,
            0,0,0,0,0,0,-2,-110,0,0,
            -4,-16,-18,-158,0,0,0,0,0,-139,
            -133,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-187,0,0,0,0,0,
            0,0,-48,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-146,-142,
            0,0,-19,0,-20,0,-184,0,-44,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-21,0,0,0,0,0,-153,
            -188,0,0,0,0,-212,0,-211,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-220,0,0,0,0,0,-45,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-195,-31,0,-35,-36,
            0,-32,0,0,0,-57,0,0,0,0,
            0,0,0,0,0,0,-22,0,0,0,
            0,0,0,0,0,0,-178,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-76,0,-69,-116,0,
            -74,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-201,
            -135,0,0,0,0,0,0,0,0,0,
            0,0,-23,0,-24,-25,-26,0,0,-180,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-122,-176,
            0,-70,0,-197,0,0,0,0,0,0,
            0,0,0,0,-27,0,0,0,0,0,
            0,0,0,-28,-120,0,0,-79,0,0,
            -71,-115,0,-118,0,0,0,-207,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-77,0,0,0,
            0,-3,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -150,-152,-80,-81,0,-155,-91,0,0,0,
            0,0,0,0,0,-92,0,0,-53,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-114,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-124,-126,-164,-121,0,-128,-129,
            0,-138,0,0,0,0,0,0,0,0,
            0,0,-93,0,0,0,0,0,0,0,
            0,-130,0,0,0,-140,0,0,0,0,
            -226,0,0,0,0,0,0,0,0,0,
            0,-193,0,0,0,0,0,0,0,0,
            0,-148,0,0,-29,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-168,-169,0,-94,0,-58,0,
            0,0,0,0,0,0,0,0,0,-157,
            0,0,0,0,0,0,0,0,0,-171,
            0,0,-59,0,0,0,0,0,0,0,
            0,0,0,-95,0,0,0,0,0,0,
            0,-191,-196,0,0,0,-60,0,0,0,
            0,0,0,0,0,0,0,-175,0,0,
            0,0,0,0,0,0,0,-198,0,0,
            -61,0,0,0,0,0,0,0,0,0,
            0,-186,0,0,0,0,0,0,0,-214,
            -224,0,0,0,-62,0,0,0,0,0,
            0,0,0,0,0,-199,0,0,0,0,
            0,0,0,0,0,-225,0,0,-63,0,
            0,0,0,0,0,0,0,0,0,-204,
            0,0,0,0,0,0,0,-228,-96,0,
            -97,0,-64,0,0,0,0,0,0,0,
            0,0,0,-217,0,0,0,0,0,0,
            0,-98,-99,-100,-101,0,-65,0,0,0,
            0,0,0,0,0,0,0,-223,0,0,
            0,0,0,0,0,-102,-103,0,-104,0,
            -66,0,0,0,0,0,0,0,0,0,
            0,-105,0,0,0,0,0,0,0,-106,
            -107,0,0,0,-67,0,0,0,0,0,
            0,0,0,0,0,-108,0,0,0,0,
            0,0,0,-109,-112,0,-123,0,-68,0,
            0,0,0,0,0,0,0,0,0,-134,
            0,0,0,0,0,0,0,-145,-143,-147,
            -151,0,-159,0,0,0,0,0,0,0,
            0,0,0,-156,0,0,0,0,0,0,
            0,-170,-172,-179,-183,0,-160,0,0,0,
            0,0,0,0,0,0,0,-205,0,0,
            0,0,0,0,0,-206,-230,-177,-238,0,
            -182,0,0,0,0,0,0,0,0,0,
            0,-194,0,0,0,0,0,0,0,-51,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-165,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-210,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-219,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-39,0,0,0,0,0,0,0,0,
            -8,0,0,0,0,0,0,-221,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-229,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-141,
            0,-185,0,0,-5,0,0,0,0,0,
            0,-240,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-167,-90,0,-137,0,0,0,0,0,
            0,0,0,0,-34,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -161,0,0,0,0,0,0,0,-132,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-216,-200,-218,0,0,0,0,
            0,0,0,0,0,-9,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-46,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-163,-181,0,0,
            0,-6,0,0,0,0,0,0,0,-54,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-189,0,0,0,-190,-239,
            -208,-222,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-1,0,0,0,0,0,0,0,0,
            0,0,0,-209,0,-83,0,-56,0,0,
            0,0,0,0,0,0,0,0,-233,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-227,0,0,0,0,0,0,
            0,-236,-241,0,-235,-237,0,0,-7,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-78,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-119,0,0,
            0,0,-33,0,0,0,0,0,0,0,
            0,-136,0,0,-192,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-82,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-73,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-111,0,0,0,0,0,-50,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-52,0,0,0,0,0,
            0,0,0,0,0,0,-84,0,0,0,
            0,0,0,0,-49,0,0,0,0,0,
            0,0,0,-87,-55,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-89,0,0,0,
            0,0,0,0,0,0,0,0,0,-231,
            0,0,0,-37,0,0,0,0,0,0,
            0,0,0,0,0,-154,0,0,0,0,
            0,0,-47,0,0,0,0,0,0,0,
            0,0,-75,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-14,0,0,
            0,0,0,0,0,-88,0,0,-40,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-166,0,0,0,-117,0,0,
            0,0,0,0,-162,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-232,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-10,
            0,0,0,0,0,0,-15,0,0,0,
            0,0,0,0,0,0,0,-11,0,0,
            0,0,0,0,0,-12,0,0,0,0,
            0,0,-13,0,0,0,0,0,0,-17,
            -30,-41,0,0,0,0,0,0,0,0,
            0,0,-42,0,0,0,0,0,0,-43,
            0,0,0,0,0,0,0,0,0,0,
            0,-72,0,0,0,0,0,0,-85,-174,
            0,0,0,0,0,0,-86,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-149,0,0,-215,0,0,0,0,0,
            -234,0,0,-213,0,0,0,0,0,-242,
            0,0,0,0,0,-144,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-113,0,0,0,0,0,0,-203,
            0,-125,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-127,0,0,
            0,0,-131,-202,0,0,0,-173,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-243,0,0,0,0,
            -245,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            96,11,28,28,24,24,44,44,75,75,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,58,58,76,
            76,5,5,5,5,5,5,5,5,5,
            5,6,6,7,7,7,7,8,8,8,
            9,9,9,10,10,10,10,10,12,12,
            12,13,13,14,14,15,15,16,16,17,
            17,18,18,23,23,23,23,23,23,23,
            23,23,23,23,23,115,52,45,97,97,
            79,79,46,116,116,116,116,116,116,116,
            117,117,117,118,118,123,123,124,124,119,
            119,120,120,120,126,126,121,121,121,121,
            122,122,122,122,122,125,125,30,30,30,
            30,30,32,32,32,85,85,80,80,80,
            80,81,81,81,82,82,82,83,83,83,
            84,84,84,127,127,128,128,129,33,35,
            35,35,35,35,59,60,60,60,60,60,
            60,60,60,60,60,60,60,68,68,29,
            29,65,65,98,99,69,69,66,66,66,
            70,86,86,87,87,71,71,71,54,100,
            100,88,72,72,72,67,67,101,89,89,
            90,90,73,73,26,27,27,27,34,47,
            47,36,36,36,36,39,39,41,37,37,
            38,42,42,130,130,40,131,131,102,102,
            31,31,31,31,31,31,31,31,31,91,
            55,55,55,55,43,62,62,61,61,61,
            63,63,56,56,103,103,77,77,64,64,
            64,48,48,48,49,50,50,50,51,51,
            51,51,53,53,53,57,104,78,78,78,
            78,74,105,106,106,107,107,108,108,132,
            132,133,133,134,134,134,134,136,136,135,
            135,135,137,137,19,19,19,25,25,20,
            20,109,109,92,92,92,93,93,110,110,
            94,94,21,21,111,111,95,95,95,22,
            138,139,139,140,140,141,141,141,142,142,
            142,5,5,125,32,129,129,129,88,88,
            88,101,98,99,43,70,107,107,112,113,
            74,96,96,1,14,19,15,402,684,43,
            463,403,484,465,36,633,567,636,635,675,
            637,73,354,314,315,316,90,151,26,133,
            214,226,287,144,69,135,132,134,158,411,
            981,672,14,19,15,402,684,43,463,403,
            484,465,1846,633,567,636,635,675,637,73,
            255,214,137,164,282,69,256,214,141,144,
            147,150,1566,792,14,19,15,402,41,43,
            463,1043,401,1633,1690,1777,1794,1817,1383,445,
            389,255,214,89,287,1001,491,86,1154,792,
            14,19,15,402,41,43,463,403,914,354,
            314,315,316,332,38,288,133,214,283,490,
            760,1106,135,132,134,158,1118,496,762,14,
            19,15,402,684,43,463,403,484,465,1846,
            633,567,636,635,675,637,73,256,214,137,
            164,282,256,214,1122,141,144,147,150,1566,
            792,14,19,15,402,41,43,463,403,1019,
            1633,1690,1777,1794,1817,1383,765,962,1188,799,
            799,287,962,1178,335,1154,792,14,19,15,
            402,41,43,463,403,484,465,18,633,567,
            636,1106,288,2052,16,294,1058,554,14,19,
            15,402,684,43,463,403,484,465,1846,633,
            567,636,635,675,637,73,67,211,799,69,
            282,495,14,19,15,402,684,43,463,403,
            484,465,599,633,567,636,635,675,637,73,
            646,385,1114,23,692,255,214,276,22,240,
            289,1444,404,610,1154,52,59,427,322,1162,
            702,14,19,15,402,684,43,463,403,484,
            465,290,633,567,636,635,675,637,73,445,
            1137,410,799,282,876,14,19,15,402,684,
            43,463,403,484,465,248,633,567,636,635,
            675,637,73,333,948,1065,21,330,37,1178,
            802,187,187,370,799,196,2106,1154,732,14,
            19,15,402,684,43,463,403,484,465,279,
            633,567,636,635,675,637,73,451,274,20,
            242,282,792,14,19,15,402,684,43,463,
            403,484,465,210,633,567,636,635,675,637,
            73,26,26,202,344,90,26,904,277,1010,
            1186,291,2060,660,334,1154,939,1352,328,792,
            14,19,15,402,41,43,463,403,484,465,
            459,633,567,1069,970,848,14,19,15,402,
            684,43,463,403,484,465,1672,633,567,636,
            635,675,637,73,164,1122,232,926,1385,1122,
            233,401,524,14,19,15,402,684,43,463,
            403,484,465,110,633,567,636,635,675,637,
            73,320,1122,2082,188,1411,799,229,187,1141,
            241,876,14,19,15,402,684,43,463,403,
            484,465,1065,633,567,636,635,675,637,73,
            280,189,799,2094,330,792,14,19,15,402,
            684,43,463,403,484,465,232,633,567,636,
            635,675,637,73,799,281,339,659,91,792,
            14,19,15,402,684,43,463,403,484,465,
            1099,633,567,636,635,675,637,73,281,923,
            528,435,84,792,14,19,15,402,684,43,
            463,403,484,465,520,633,567,636,635,675,
            637,73,799,799,337,329,83,792,14,19,
            15,402,684,43,463,403,484,465,26,633,
            567,636,635,675,637,73,226,319,799,2130,
            82,792,14,19,15,402,684,43,463,403,
            484,465,26,633,567,636,635,675,637,73,
            336,799,338,498,81,792,14,19,15,402,
            684,43,463,403,484,465,26,633,567,636,
            635,675,637,73,324,231,473,2085,80,792,
            14,19,15,402,684,43,463,403,484,465,
            790,633,567,636,635,675,637,73,796,579,
            235,618,79,792,14,19,15,402,684,43,
            463,403,484,465,790,633,567,636,635,675,
            637,73,852,589,697,670,78,792,14,19,
            15,402,684,43,463,403,484,465,760,633,
            567,636,635,675,637,73,1009,1015,1446,173,
            77,792,14,19,15,402,684,43,463,403,
            484,465,351,633,567,636,635,675,637,73,
            8,397,1605,195,76,792,14,19,15,402,
            684,43,463,403,484,465,185,633,567,636,
            635,675,637,73,330,297,1606,509,75,792,
            14,19,15,402,684,43,463,403,484,465,
            541,633,567,636,635,675,637,73,765,391,
            624,805,74,792,14,19,15,402,684,43,
            463,403,484,465,833,633,567,636,635,675,
            637,73,677,881,686,81,1515,792,14,19,
            15,402,684,43,463,403,484,465,851,633,
            567,636,635,675,637,73,905,291,739,537,
            1519,792,14,19,15,402,41,43,463,403,
            484,465,242,633,567,636,635,675,637,92,
            792,14,19,15,402,41,43,463,403,484,
            1066,317,314,315,316,2328,2328,2123,2328,2328,
            321,1162,26,275,565,2328,2328,1521,220,796,
            222,1234,224,225,230,1130,2328,875,2328,2328,
            270,717,596,273,792,14,19,15,402,41,
            43,463,403,484,465,228,633,567,636,635,
            675,637,92,792,14,19,15,402,41,43,
            463,403,484,465,2328,633,567,636,635,675,
            637,92,792,14,19,15,402,41,43,813,
            1522,792,14,19,15,402,41,39,792,14,
            19,15,402,41,43,463,403,484,465,213,
            633,567,636,635,675,637,92,792,14,19,
            15,402,41,43,463,403,484,465,2328,633,
            567,636,635,675,637,92,2328,2328,2328,2328,
            958,2328,739,2328,1602,820,14,19,15,402,
            352,1924,792,14,19,15,402,41,43,463,
            403,484,465,203,633,567,636,635,675,637,
            92,275,596,389,2328,187,219,796,222,1234,
            224,225,230,460,2328,26,284,264,268,717,
            596,273,354,314,315,316,722,2328,204,133,
            214,187,1350,244,265,136,132,134,158,792,
            14,19,15,402,41,43,463,403,484,465,
            2328,633,567,636,635,675,637,72,261,243,
            86,2328,138,164,179,739,739,691,142,145,
            148,151,1566,262,2328,1950,792,14,19,15,
            402,41,38,317,314,315,316,2328,2328,1579,
            792,14,19,15,402,41,43,463,403,1021,
            219,796,222,1234,224,225,230,1041,1122,181,
            205,1187,820,14,19,15,402,351,1675,2328,
            792,14,19,15,402,41,43,463,403,484,
            465,278,633,1082,2328,187,2091,296,275,187,
            405,418,187,219,796,222,1234,224,225,230,
            2328,1950,199,2328,922,268,717,596,273,317,
            314,315,316,245,1018,1579,2328,246,2328,295,
            297,694,613,2328,2328,2328,219,796,222,1234,
            224,225,230,722,1122,2328,1077,1187,792,14,
            19,15,402,41,43,463,403,484,465,179,
            633,567,636,635,1091,317,314,315,316,2328,
            1950,2132,2091,298,739,2328,2328,86,318,314,
            315,316,187,411,371,739,739,2328,200,820,
            14,19,15,402,40,219,796,222,1234,224,
            225,230,317,314,315,316,1187,2328,2123,2328,
            369,2328,2328,444,2328,2328,2328,2328,182,220,
            796,222,1234,224,225,230,1130,2328,397,206,
            384,2100,354,314,315,316,2328,2328,1032,133,
            214,2328,2328,620,794,140,132,134,158,460,
            2328,2328,69,2328,722,1046,2328,317,314,315,
            316,2328,2328,2123,2328,2328,460,2328,1350,2328,
            74,2328,139,164,317,314,315,316,255,214,
            2123,1115,2328,2328,2328,1350,2328,57,88,354,
            314,315,316,1733,260,2328,133,214,1115,826,
            2328,1139,143,132,134,158,317,314,315,316,
            1202,260,2123,352,410,2328,826,2328,1139,792,
            14,19,15,402,41,43,463,403,484,465,
            1115,1045,317,314,315,316,2328,2328,2123,2328,
            662,2328,1733,1143,275,792,14,19,15,402,
            41,43,463,403,484,1067,1130,158,2328,2328,
            2328,270,717,596,273,792,14,19,15,402,
            41,43,463,1044,974,26,354,314,315,316,
            2328,2328,2328,133,214,2328,722,2328,2328,146,
            132,134,158,354,314,315,316,986,2328,2328,
            133,214,2328,2328,2328,2328,149,132,134,158,
            1148,2328,2328,2328,454,2328,354,314,315,316,
            86,1950,2328,133,214,1707,1038,1090,2328,152,
            132,134,158,792,14,19,15,402,41,43,
            463,403,1042,996,2328,275,219,796,222,1234,
            224,225,230,2328,1658,1165,2328,922,2328,2328,
            2328,2328,268,717,596,273,2328,278,820,14,
            19,15,402,33,275,2328,459,2328,267,792,
            14,19,15,402,41,43,877,2328,2328,2328,
            2328,268,717,596,273,317,314,315,316,2328,
            2328,2163,2328,2328,57,2328,2328,694,585,14,
            19,15,402,41,35,585,14,19,15,402,
            41,35,2328,317,314,315,316,2328,2328,2123,
            57,1164,467,293,2328,2328,247,2328,640,367,
            2328,2328,2328,248,2328,2328,822,1115,2328,317,
            314,315,316,2328,2328,2123,2328,2328,2328,1202,
            792,14,19,15,402,41,37,820,14,19,
            15,402,32,1115,2328,2328,2328,800,792,14,
            19,15,402,41,36,1603,792,14,19,15,
            402,41,35,792,14,19,15,402,41,34,
            26,26,792,14,19,15,402,41,46,2328,
            2328,373,373,792,14,19,15,402,41,45,
            792,14,19,15,402,41,44,2328,2328,2328,
            198,198,642,14,19,15,402,41,42,95,
            224,2328,2328,2328,2328,86,86,295,2328,2328,
            2328,460,550,550,1834,1834,2328,2328,317,314,
            315,316,1104,2328,2158,334,317,314,315,316,
            198,1121,2158,2328,159,2328,460,549,598,2328,
            1130,317,314,315,316,460,350,2168,2328,2328,
            317,314,315,316,620,198,2186,460,2328,317,
            314,315,316,1084,1350,2191,2328,2328,2328,795,
            1137,193,1091,2328,2328,2328,1350,799,2328,620,
            2328,2328,318,314,315,316,1445,2164,2328,2328,
            260,318,314,315,316,971,193,1139,1098,1178,
            2328,2328,260,919,279,2328,2328,874,1111,1139,
            2328,1594,2164,2328,2328,460,2328,318,314,315,
            316,1163,318,314,315,316,1136,318,314,315,
            316,1142,2328,2328,198,2328,996,2328,2328,2328,
            2328,2328,2328,210,2328,318,314,315,316,2328,
            318,314,315,316,2328,2328,2328,2328,620,1034,
            1186,2328,2328,2328,2328,2328,2328,2328,2328,2328,
            2328,2328,2328,2328,2328,194,2328,0,688,127,
            0,743,127,0,744,127,0,688,128,0,
            743,128,0,744,128,0,688,129,0,743,
            129,0,744,129,0,688,186,0,743,186,
            0,744,186,0,186,190,0,688,185,0,
            743,185,0,744,185,0,185,190,0,688,
            130,0,743,130,0,744,130,0,688,131,
            0,743,131,0,744,131,0,17,178,0,
            18,177,0,1,688,0,1,743,0,1,
            744,0,1,2555,0,1,2566,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,0,8,9,
            10,11,12,13,14,15,16,0,18,19,
            20,21,22,23,24,0,26,27,28,12,
            30,31,32,33,34,0,0,0,2,39,
            40,41,42,43,44,45,46,47,48,49,
            50,0,52,53,54,0,0,2,0,3,
            4,5,7,8,9,10,0,12,0,62,
            15,16,17,0,37,38,3,4,5,11,
            0,13,14,17,11,0,13,14,0,0,
            35,36,37,38,0,1,8,3,4,5,
            6,28,17,30,31,32,33,34,0,0,
            55,56,57,58,59,60,61,8,63,68,
            65,66,67,68,69,67,71,72,73,74,
            75,76,77,78,79,80,81,82,83,0,
            55,2,62,0,56,57,7,8,9,10,
            0,12,9,10,15,16,17,0,0,1,
            3,4,5,0,1,56,57,0,11,6,
            13,14,0,0,35,36,37,38,0,1,
            2,3,4,5,0,28,0,30,31,32,
            33,34,29,7,55,56,57,58,59,60,
            61,0,63,2,65,66,67,68,69,51,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,0,1,0,3,4,5,6,
            7,0,0,1,11,85,13,14,6,67,
            62,0,1,2,3,4,5,0,17,8,
            64,28,68,30,31,32,33,34,17,36,
            35,29,39,40,41,42,43,44,45,46,
            47,48,49,50,0,52,53,54,0,1,
            0,3,4,5,6,7,0,7,2,11,
            0,13,14,70,0,1,0,3,4,5,
            6,15,16,17,8,25,28,0,30,31,
            32,33,34,0,36,35,69,39,40,41,
            42,43,44,45,46,47,48,49,50,0,
            52,53,54,0,1,0,3,4,5,6,
            7,55,7,0,11,2,13,14,70,0,
            0,0,62,2,3,4,5,71,29,8,
            25,28,12,30,31,32,33,34,17,36,
            35,0,39,40,41,42,43,44,45,46,
            47,48,49,50,0,52,53,54,0,1,
            0,3,4,5,6,11,0,13,14,11,
            51,13,14,70,0,1,2,3,4,5,
            0,1,2,3,4,5,28,0,30,31,
            32,33,34,0,7,35,0,39,40,41,
            42,43,44,45,46,47,48,49,50,0,
            52,53,54,0,0,1,3,4,5,0,
            0,7,2,0,11,2,13,14,0,1,
            7,3,4,5,6,69,62,17,51,25,
            17,28,0,30,31,32,33,34,25,7,
            0,64,39,40,41,42,43,44,45,46,
            47,48,49,50,0,1,2,25,72,73,
            6,7,8,9,10,0,12,35,0,15,
            16,0,18,19,20,21,22,23,24,0,
            26,27,28,0,1,2,18,0,1,6,
            7,8,9,10,7,12,0,1,15,16,
            0,18,19,20,21,22,23,24,8,26,
            27,28,25,0,1,2,37,38,64,6,
            7,8,9,10,0,12,2,0,15,16,
            0,18,19,20,21,22,23,24,0,26,
            27,17,29,0,0,1,2,64,0,36,
            6,7,8,9,10,0,12,9,10,15,
            16,0,18,19,20,21,22,23,24,0,
            26,27,0,1,2,37,38,0,6,0,
            8,9,10,0,12,2,7,15,16,0,
            18,19,20,21,22,23,24,0,26,27,
            0,0,1,2,25,0,51,6,64,8,
            9,10,7,12,37,38,15,16,0,18,
            19,20,21,22,23,24,8,26,27,0,
            29,0,1,2,65,66,0,6,2,8,
            9,10,70,12,0,0,15,16,0,18,
            19,20,21,22,23,24,0,26,27,0,
            29,0,1,2,0,9,10,6,0,8,
            9,10,0,12,56,57,15,16,0,18,
            19,20,21,22,23,24,0,26,27,84,
            29,0,1,2,65,66,0,6,0,8,
            9,10,0,12,0,7,15,16,63,18,
            19,20,21,22,23,24,0,26,27,0,
            29,0,1,2,0,1,0,6,0,8,
            9,10,0,12,36,11,15,16,0,18,
            19,20,21,22,23,24,0,26,27,0,
            29,0,1,2,35,0,0,6,0,8,
            9,10,7,12,0,7,15,16,0,18,
            19,20,21,22,23,24,0,26,27,0,
            1,2,0,25,35,6,0,8,9,10,
            35,12,0,29,15,16,0,18,19,20,
            21,22,23,24,0,26,27,0,1,2,
            0,0,0,6,0,8,9,10,0,12,
            0,29,15,16,0,18,19,20,21,22,
            23,24,0,26,27,0,1,2,0,84,
            0,6,0,8,9,10,0,12,37,38,
            15,16,0,18,19,20,21,22,23,24,
            0,26,27,0,0,2,3,4,5,29,
            7,8,0,63,11,29,13,14,0,1,
            17,3,4,5,6,0,0,2,25,29,
            0,28,7,30,31,32,33,34,0,35,
            2,3,4,5,0,7,8,0,0,11,
            25,13,14,0,0,17,0,0,1,2,
            0,0,1,25,7,0,28,6,30,31,
            32,33,34,0,17,0,3,4,5,0,
            0,0,25,0,11,0,13,14,3,4,
            5,11,35,13,14,0,11,2,13,14,
            0,28,7,30,31,32,33,34,0,0,
            63,0,17,28,0,30,31,32,33,34,
            25,74,75,76,77,78,79,80,81,82,
            83,0,0,0,3,4,5,0,1,8,
            0,1,2,6,0,0,0,7,3,4,
            5,0,0,8,17,0,0,17,58,59,
            60,61,7,0,0,25,58,59,60,61,
            0,7,58,59,60,61,0,0,0,3,
            4,5,51,0,0,0,3,4,5,25,
            0,36,55,3,4,5,51,0,0,0,
            3,4,5,0,0,0,3,4,5,11,
            0,13,14,3,4,5,11,0,13,14,
            0,0,1,3,4,5,0,6,11,0,
            13,14,3,4,5,0,0,1,3,4,
            5,0,6,0,3,4,5,0,1,2,
            0,1,0,0,0,0,6,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            2328,747,2020,688,743,744,756,2328,2006,1998,
            1980,2543,2013,2544,2545,1987,1888,63,2341,1609,
            2338,2339,2340,1456,1301,1,1355,1492,2489,1739,
            2490,2488,2546,2491,2487,286,2328,53,797,2494,
            2499,2498,2496,2497,2495,2500,2501,2493,2502,2503,
            2504,67,1896,2067,2059,1,254,2346,65,688,
            743,744,2346,2346,2346,2346,272,2346,2328,1419,
            2346,2346,2346,128,443,1785,2247,2250,2253,2543,
            2328,2544,2545,601,2543,292,2544,2545,47,2328,
            2346,2346,2346,2346,186,2274,2040,2265,2268,2271,
            2274,2489,1254,2490,2488,2546,2491,2487,2328,49,
            2346,2346,2346,2346,2346,2346,2346,2040,2346,759,
            2346,2346,2346,2346,2346,1500,2346,2346,2346,2346,
            2346,2346,2346,2346,2346,2346,2346,2346,2346,1,
            1564,2345,2696,50,2033,2022,2345,2345,2345,2345,
            2328,2345,1899,1292,2345,2345,2345,129,1,2325,
            2256,2259,2262,2328,2507,2033,2022,2328,2543,2508,
            2544,2545,66,2328,2345,2345,2345,2345,1,2555,
            1830,2313,2316,2319,68,2489,2328,2490,2488,2546,
            2491,2487,741,2331,2345,2345,2345,2345,2345,2345,
            2345,2328,2345,659,2345,2345,2345,2345,2345,2587,
            2345,2345,2345,2345,2345,2345,2345,2345,2345,2345,
            2345,2345,2345,2328,1,87,1,1,1,1,
            192,221,2328,2507,1,2237,1,1,2508,1500,
            1327,269,2555,1487,688,743,744,69,601,254,
            2330,1,759,1,1,1,1,1,601,192,
            855,742,1,1,1,1,1,1,1,1,
            1,1,1,1,2328,1,1,1,2328,1,
            2328,1,1,1,1,191,31,2333,1663,1,
            202,1,1,2525,185,2286,2328,2277,2280,2283,
            2286,2352,2353,1395,621,2332,1,2328,1,1,
            1,1,1,2328,191,546,556,1,1,1,
            1,1,1,1,1,1,1,1,1,2328,
            1,1,1,2328,1,2328,1,1,1,1,
            192,552,2333,2328,1,1117,1,1,2525,1,
            64,269,1362,1863,688,743,744,547,398,254,
            2332,1,1739,1,1,1,1,1,601,192,
            831,2328,1,1,1,1,1,1,1,1,
            1,1,1,1,250,1,1,1,2328,2506,
            257,688,743,744,2505,1,70,1,1,2543,
            2587,2544,2545,2525,1,2555,1830,2313,2316,2319,
            254,2555,1830,688,743,744,2489,2328,2490,2488,
            2546,2491,2487,2328,2331,1382,71,2494,2499,2498,
            2496,2497,2495,2500,2501,2493,2502,2503,2504,2328,
            1896,2067,2059,127,2328,1140,2238,2241,2244,2328,
            271,2333,685,1,2543,1863,2544,2545,207,3587,
            266,688,743,744,3587,556,1327,601,1308,2332,
            601,2489,2328,2490,2488,2546,2491,2487,266,2333,
            2328,2330,2494,2499,2498,2496,2497,2495,2500,2501,
            2493,2502,2503,2504,1,2345,2020,2332,1568,1795,
            2346,2331,1928,1998,1980,2328,2013,1189,2328,1987,
            1888,2328,2341,1609,2338,2339,2340,1456,1301,57,
            1355,1492,775,2328,2345,2020,852,2328,948,2346,
            2331,1935,1998,1980,2333,2013,2328,2567,1987,1888,
            2328,2341,1609,2338,2339,2340,1456,1301,890,1355,
            1492,1167,2332,1,2840,2020,443,1785,2330,2756,
            27,2006,1998,1980,223,2013,842,2328,1987,1888,
            2328,2341,1609,2338,2339,2340,1456,1301,56,1355,
            1492,601,3756,2328,2328,2345,2020,2330,52,27,
            2346,2331,2006,1998,1980,1,2013,1899,1292,1987,
            1888,2328,2341,1609,2338,2339,2340,1456,1301,61,
            1355,1492,2328,1,1,443,1785,55,1,1,
            1,1,1,336,1,900,89,1,1,2328,
            1,1,1,1,1,1,1,2328,1,1,
            2328,2328,2345,2020,89,1,2586,2346,2330,2006,
            1998,1980,2337,2013,443,1785,1987,1888,48,2341,
            1609,2338,2339,2340,1456,1301,2040,1355,1492,62,
            398,1,2840,2020,1765,1210,323,2756,664,2006,
            1998,1980,2700,2013,2328,2328,1987,1888,2328,2341,
            1609,2338,2339,2340,1456,1301,51,1355,1492,2328,
            3756,366,2345,2020,2328,1899,1292,2346,2328,2006,
            1998,1980,2328,2013,2033,2022,1987,1888,2328,2341,
            1609,2338,2339,2340,1456,1301,2328,1355,1492,2336,
            3756,2328,2345,2020,1765,1210,2328,2346,2328,2006,
            1998,1980,2328,2013,2328,2335,1987,1888,698,2341,
            1609,2338,2339,2340,1456,1301,2328,1355,1492,28,
            3756,1,2840,2020,325,2654,2328,2756,2328,2006,
            1998,1980,2328,2013,2334,2655,1987,1888,2328,2341,
            1609,2338,2339,2340,1456,1301,2328,1355,1492,28,
            3756,2328,2345,2020,577,2328,2328,2346,2328,2006,
            1998,1980,2337,2013,2328,2333,1987,1888,2328,2341,
            1609,2338,2339,2340,1456,1301,2328,1355,1492,2328,
            2345,2021,2328,2332,2355,2346,2328,2006,1998,1980,
            1520,2013,2328,938,1987,1888,2328,2341,1609,2338,
            2339,2340,1456,1301,2328,1355,1492,1,2345,2020,
            212,54,2328,2346,2328,2006,1998,1980,2328,2013,
            2328,962,1987,1888,2328,2341,1609,2338,2339,2340,
            1456,1301,2328,1355,1492,331,2345,2020,2328,2336,
            2328,2346,2328,2006,1998,1980,190,2013,443,1785,
            1987,1888,2328,2341,1609,2338,2339,2340,1456,1301,
            365,1355,1492,17,208,2307,178,178,178,986,
            2307,2307,2328,1273,178,207,178,178,361,3601,
            2307,688,743,744,3601,2328,2328,1138,2307,361,
            2328,178,2333,178,178,178,178,178,18,3851,
            2310,177,177,177,2328,2310,2310,41,2328,177,
            2332,177,177,2328,2328,2310,2328,1,2555,1487,
            2328,2328,2357,2310,263,2328,177,2358,177,177,
            177,177,177,130,601,2328,2289,2292,2295,2328,
            249,2328,263,2328,2543,131,2544,2545,2298,2301,
            2304,2543,263,2544,2545,1,2543,1863,2544,2545,
            58,2489,2333,2490,2488,2546,2491,2487,60,2328,
            1119,2328,601,2489,59,2490,2488,2546,2491,2487,
            2332,1095,1071,1047,1023,999,951,975,927,903,
            879,1,2328,2328,2313,2316,2319,2328,2507,254,
            1,2322,1487,2508,2328,1,2328,2333,2313,2316,
            2319,2328,2328,254,1191,285,2328,601,1853,1470,
            530,469,746,2328,1,2332,1853,1470,530,469,
            2328,2333,1853,1470,530,469,183,2328,2328,688,
            743,744,2587,364,2328,2328,688,743,744,2332,
            362,746,1488,688,743,744,2587,365,251,2328,
            688,743,744,184,2328,252,688,743,744,1,
            363,1,1,688,743,744,2543,253,2544,2545,
            201,2328,2507,688,743,744,2328,2508,2543,358,
            2544,2545,688,743,744,359,209,2507,688,743,
            744,360,2508,2328,688,743,744,1,2555,1830,
            208,524,2328,2328,2328,2328,524
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            337,1,118,45,118,118,118,118,118,118,
            118,118,118,118,118,3,466,55,52,59,
            57,65,63,67,66,69,68,14,118,466,
            509,509,171,118,49,49,280,466,118,118,
            118,118,118,118,118,118,118,118,118,118,
            118,118,118,118,118,118,118,118,118,118,
            118,118,118,118,118,118,118,118,49,49,
            334,92,284,112,430,328,192,364,396,396,
            396,376,357,376,357,357,376,357,376,482,
            237,237,52,52,57,57,57,57,55,55,
            63,59,59,66,65,145,68,67,110,90,
            280,287,284,289,334,462,116,49,398,433,
            194,188,135,108,357,509,506,509,108,509,
            357,118,90,287,384,462,334,115,112,49,
            387,482,48,435,311,188,187,49,359,198,
            110,231,233,165,228,110,384,462,118,118,
            334,116,430,323,322,284,435,49,48,193,
            188,110,359,198,231,231,228,88,320,147,
            509,118,145,84,228,90,462,384,334,334,
            49,398,433,387,311,49,170,49,198,228,
            137,198,231,233,317,233,92,333,509,118,
            90,384,435,48,198,139,233,228,118,509,
            118,334,233,49,48,170,228,80,118,76,
            391,284,139,77,228,334,228,510,139,118,
            391,77,77,233,77
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            85,0,51,84,3,4,5,17,2,55,
            71,15,16,12,8,9,10,56,57,37,
            38,58,59,60,61,65,66,67,68,69,
            72,73,36,63,74,75,76,77,78,80,
            79,81,82,83,62,64,85,35,25,7,
            0,8,56,57,9,10,38,37,58,59,
            60,61,65,66,12,67,68,69,51,64,
            25,36,85,72,73,62,5,4,3,84,
            7,35,0,63,17,55,0,7,36,17,
            55,15,16,12,8,9,10,23,24,19,
            27,26,2,20,21,22,18,1,6,29,
            0,11,13,14,28,64,7,2,20,21,
            22,1,6,15,16,12,8,9,10,23,
            24,19,27,26,18,0,84,7,8,1,
            2,5,4,3,62,0,63,29,15,16,
            12,8,9,10,23,24,19,27,26,2,
            20,21,22,18,1,6,17,55,0,35,
            19,20,21,22,18,6,15,16,12,8,
            9,10,23,24,26,27,2,25,7,1,
            0,17,35,25,7,2,0,30,39,11,
            40,52,31,41,32,42,43,33,13,44,
            45,28,53,34,54,46,47,14,48,49,
            50,1,6,3,4,5,70,7,36,0,
            1,6,7,36,35,0,13,28,34,14,
            33,32,31,11,30,55,71,15,16,12,
            9,10,56,57,37,38,58,59,60,61,
            65,66,67,68,69,72,73,63,74,75,
            76,77,78,79,80,81,82,83,35,7,
            25,2,17,5,4,3,8,0,11,13,
            14,2,20,21,22,18,1,6,15,16,
            12,8,9,10,23,24,19,27,26,0,
            7,35,25,1,11,0,7,35,36,63,
            0,2,62,84,3,4,5,7,35,25,
            17,0,51,64,7,0,19,20,21,22,
            18,1,6,2,15,16,12,8,9,10,
            23,24,26,27,70,0,1,6,29,5,
            4,3,0,47,39,44,42,43,41,40,
            45,46,48,49,50,62,84,34,31,28,
            30,33,32,11,13,14,7,35,25,17,
            8,3,4,5,1,2,0,8,30,39,
            11,40,52,31,41,32,42,43,33,13,
            44,45,28,53,34,54,46,47,14,48,
            49,50,1,6,51,5,4,3,0,8,
            2,17,25,7,30,39,40,52,31,41,
            32,42,43,33,44,45,28,53,34,54,
            46,47,48,49,50,1,6,3,4,5,
            51,11,13,14,0,19,20,21,22,18,
            2,15,16,12,8,9,10,23,24,26,
            27,52,53,54,47,39,44,42,43,41,
            40,45,46,48,49,50,34,31,28,30,
            33,11,13,14,32,5,4,3,6,1,
            0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            78,9,26,9,26,26,26,26,26,26,
            26,26,26,26,26,9,109,9,9,9,
            9,9,9,9,9,9,9,9,26,109,
            21,21,91,110,15,15,105,1,26,26,
            26,26,26,26,26,26,26,26,26,26,
            26,26,26,26,110,26,26,26,26,26,
            26,26,26,26,26,26,26,26,15,15,
            34,26,94,32,104,28,28,63,9,9,
            9,64,56,64,56,56,64,56,64,58,
            9,9,9,9,9,9,9,9,9,9,
            9,9,9,9,9,9,9,9,9,76,
            97,9,84,45,34,30,33,15,86,42,
            15,39,9,102,84,102,84,102,102,102,
            84,26,24,9,76,30,34,33,12,15,
            72,2,9,88,48,14,9,15,56,76,
            9,76,19,101,76,9,76,30,26,26,
            34,33,71,28,28,94,88,15,15,9,
            15,9,84,113,76,102,50,23,9,25,
            102,26,9,17,50,76,30,12,34,34,
            15,86,42,52,48,15,26,15,76,50,
            36,121,102,19,9,9,25,34,102,26,
            24,12,117,15,113,66,19,50,26,102,
            26,34,19,15,15,26,50,37,26,9,
            74,94,81,56,50,34,50,9,66,26,
            54,56,84,10,84
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,85,84,83,82,69,81,80,0,104,
            0,26,0,95,24,0,108,0,58,0,
            76,0,74,11,57,4,0,31,0,62,
            0,11,4,28,0,11,75,0,111,24,
            0,24,11,0,4,11,0,93,0,44,
            0,50,49,39,37,25,0,69,65,66,
            67,68,59,32,0,25,11,39,37,0,
            24,50,49,37,39,11,0,11,96,0,
            11,39,37,19,0,25,55,11,30,0,
            11,97,0,25,55,0,50,49,25,0,
            112,29,0,24,49,50,11,0,54,11,
            52,0,87,11,54,0,102,11,30,0,
            11,54,71,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,97,98,99,86,87,9,10,11,
            48,8,64,76,6,7,1,84,68,81,
            82,83,12,13,90,93,94,69,3,44,
            55,60,63,72,42,91,16,17,47,52,
            56,61,62,66,67,74,75,78,79,80,
            30,54,70,73,4,14,15,18,19,20,
            21,29,31,89,22,23,24,25,26,100,
            5,27,28,32,33,34,35,36,37,38,
            39,40,41,92,101,45,46,49,50,51,
            53,57,58,59,65,71,77,88,95,96
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,108,112,113,114,115,116,117,
            0,118,119,120,121,122,123,124,174,0,
            0,0,125,104,175,136,0,103,128,129,
            158,135,0,0,0,154,156,0,157,0,
            0,0,0,105,0,127,144,167,168,169,
            0,107,143,148,155,164,0,0,138,0,
            159,162,163,166,139,140,141,142,145,0,
            147,151,153,170,106,109,110,111,126,130,
            131,132,133,134,137,0,146,150,0,152,
            161,0,176,0,178,102,0,0,0,149,
            0,160,165,0,171,172,0,173,0,0,
            177,179,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            133,191,268,153,84,90,219,47,246,1,
            56,100,118,33,199,27,61,96,170,283,
            287,255,15,8,8,65,68,73,105,128,
            68,180,185,188,291,41,174,262,8,73,
            209,143,237,143,209,262,20,80,166,225,
            225,225,225,225,20,108,80,108,108
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            141,141,141,141,6,6,141,53,252,6,
            31,6,31,38,204,31,31,6,168,31,
            6,259,18,6,6,31,71,82,6,31,
            131,183,183,183,31,44,177,265,11,76,
            204,160,240,146,212,276,25,82,168,227,
            229,231,233,235,22,115,76,110,123
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            67,65,4,67,31,31,65,53,120,113,
            51,31,42,20,65,92,51,31,71,4,
            4,18,88,108,107,49,64,55,31,39,
            47,66,66,66,2,74,71,6,113,55,
            65,67,121,67,65,4,88,55,71,84,
            83,82,81,80,88,42,55,40,42
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            36,36,36,36,64,64,36,36,91,64,
            25,64,25,25,29,25,25,64,84,25,
            64,62,3,64,64,25,2,8,64,25,
            1,1,1,1,25,63,1,25,51,8,
            29,29,97,1,1,25,1,8,84,6,
            52,53,53,47,1,2,8,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static char scopeStateSet[] = {
            21,21,70,21,59,59,21,130,0,7,
            63,59,12,25,21,9,63,59,3,70,
            70,102,18,1,7,63,65,53,59,12,
            14,21,21,21,70,132,3,75,7,53,
            21,21,0,21,21,70,18,53,3,22,
            22,22,22,22,18,12,53,12,12
        };
    };
    public final static char scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            146,51,146,17,0,103,0,146,17,0,
            30,127,103,0,172,125,0,175,0,125,
            0,151,175,0,151,0,210,2,193,0,
            104,0,209,2,2,3,0,104,104,0,
            205,111,0,31,143,0,158,178,111,29,
            157,0,105,0,0,161,111,2,149,0,
            161,111,2,0,164,2,0,155,111,0,
            167,0,143,155,0,9,0,162,0,143,
            0,9,0,123,28,191,111,17,0,123,
            191,111,28,17,0,123,28,17,0,123,
            191,111,17,0,123,17,0,139,0,2,
            0,160,104,0,2,104,0,161,111,2,
            139,0,2,0,159,104,0,147,2,0,
            154,0,158,189,111,29,129,201,52,0,
            105,0,201,52,0,128,3,0,0,0,
            105,0,158,189,111,29,201,52,0,3,
            0,0,0,105,0,154,0,106,0,200,
            111,154,0,111,154,0,149,106,0,170,
            52,0,128,0,170,54,0,170,53,0,
            186,111,29,199,129,198,169,0,199,129,
            198,169,0,3,0,0,105,0,198,169,
            0,128,0,3,0,0,105,0,186,111,
            29,198,169,0,185,0,142,0,141,0,
            140,0,139,0,138,0,216,90,0,77,
            2,107,104,106,0,216,124,152,2,94,
            0,53,0,0,152,73,117,0,29,124,
            0,177,2,0,104,113,0,158,178,111,
            29,124,177,2,0,104,3,0,111,0,
            105,0,197,2,104,0,152,17,104,0,
            152,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            467,0,2085,2164,2060,0,1846,0,546,1138,
            0,1603,1202,1579,1830,1487,1350,1520,1444,0,
            1383,460,373,0,2191,2186,2100,1603,1520,2091,
            1579,1444,1202,2168,2082,460,2163,2158,2132,2123,
            1733,1383,1817,1896,1794,2067,2059,1777,1566,1690,
            1633,373,1950,1675,1924,1658,1707,0,1234,796,
            717,596,1202,1733,1487,1350,1863,1834,0,1987,
            1888,1609,1492,1355,1935,1928,2052,556,1568,1500,
            759,1765,1210,1739,1785,443,1853,1470,530,469,
            2040,2033,2022,1899,1292,2013,2006,1998,1980,1456,
            1301,1362,1327,831,1308,1273,1254,664,1191,1167,
            1143,802,1419,775,601,1119,1095,1071,1047,1023,
            999,975,951,927,903,879,373,855,722,698,
            640,498,577,411,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,196,111,179,26,27,19,24,23,10,
            9,8,12,16,15,104,2,108,107,110,
            109,113,112,115,114,117,116,105,35,2,
            71,55,2,17,177,152,154,111,10,9,
            57,56,8,61,60,59,58,37,38,12,
            66,65,68,67,73,72,69,83,82,81,
            79,80,78,77,76,75,74,63,177,197,
            152,124,111,17,2,150,149,180,3,4,
            5,181,169,182,54,53,183,52,184,185,
            1,6,107,107,109,109,109,109,108,108,
            112,110,110,114,113,152,116,115,124,29,
            155,143,125,28,123,111,8,164,111,2,
            2,2,2,198,125,170,125,170,201,170,
            125,62,111,143,8,111,123,191,162,161,
            130,111,163,111,2,211,1,18,129,29,
            129,29,178,111,29,157,8,111,191,28,
            123,8,2,137,139,111,35,161,209,193,
            2,199,125,111,29,111,158,35,205,212,
            55,17,129,206,111,29,111,162,123,123,
            147,111,2,155,35,124,2,1,29,186,
            154,187,111,189,129,190,63,146,55,17,
            111,162,111,210,111,111,189,158,63,35,
            51,146,178,161,202,35,186,200,62,147,
            2,111,125,172,158,146,158,35,35,62,
            155,172,125,144,125
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "typeof",
            "__alignof__",
            "MAX",
            "MIN",
            "__attribute__",
            "__declspec",
            "asm",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_sizeof_type_name_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_token",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "attribute_or_decl_specifier",
            "attribute_or_decl_specifier_se" +
            "q",
            "word",
            "extended_decl_modifier_seq",
            "extended_decl_modifier",
            "field_name_designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 70,
           SCOPE_UBOUND      = 58,
           SCOPE_SIZE        = 59,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 245,
           NT_OFFSET         = 100,
           LA_STATE_OFFSET   = 2700,
           MAX_LA            = 2,
           NUM_RULES         = 372,
           NUM_NONTERMINALS  = 142,
           NUM_SYMBOLS       = 242,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1552,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 85,
           EOLT_SYMBOL       = 85,
           ACCEPT_ACTION     = 2237,
           ERROR_ACTION      = 2328;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
