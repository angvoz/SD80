/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99NoCastExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, C99NoCastExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            4,1,1,3,3,3,1,3,3,1,
            3,3,1,3,3,3,3,1,3,3,
            1,3,1,3,1,3,1,3,1,3,
            1,5,1,3,3,3,3,3,3,3,
            3,3,3,3,1,1,2,1,0,1,
            3,1,1,1,1,1,1,1,1,3,
            4,3,2,4,1,2,1,1,1,2,
            5,7,5,1,0,7,5,9,8,3,
            2,2,2,3,2,4,2,2,2,2,
            2,1,1,1,1,2,1,2,2,2,
            1,2,2,1,2,2,1,2,2,1,
            2,2,1,3,1,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            6,8,0,0,1,1,3,3,3,0,
            1,0,1,2,4,2,1,1,1,3,
            1,1,2,3,7,8,0,1,0,1,
            3,1,3,1,1,1,1,1,1,3,
            1,1,1,1,1,3,1,2,2,1,
            5,3,1,3,5,1,3,1,3,2,
            4,3,5,4,6,6,3,5,1,2,
            3,4,5,0,1,2,1,3,1,1,
            3,2,1,1,1,1,2,1,2,3,
            1,1,1,3,1,2,2,2,3,4,
            5,1,7,3,0,0,1,1,3,3,
            4,1,1,2,3,2,3,2,1,0,
            1,2,1,1,1,1,1,2,4,3,
            6,2,4,1,1,-32,0,0,0,0,
            0,0,0,0,0,-2,0,0,0,0,
            0,0,0,0,0,0,0,-78,-79,-4,
            -72,-15,0,0,0,0,-121,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-16,0,
            -17,-76,-73,-209,-18,0,0,0,0,0,
            -37,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-127,-81,-138,0,0,
            -133,-19,0,0,0,0,0,0,0,0,
            0,0,0,-20,0,0,0,-21,0,-185,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-158,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-33,
            0,0,-55,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-38,
            0,0,0,0,0,0,0,0,0,-22,
            0,0,0,0,0,0,-157,-23,0,-6,
            0,0,0,0,0,0,-193,0,-70,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-181,0,0,0,0,0,0,0,
            0,0,-163,0,0,0,0,0,0,0,
            0,0,-3,0,0,0,0,0,0,0,
            0,0,-105,0,0,0,0,0,0,0,
            0,0,0,0,0,-51,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -29,0,-108,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-24,-30,-126,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-130,0,-142,0,-52,
            0,0,0,0,0,0,0,0,0,-123,
            0,0,0,-25,-26,0,0,0,0,0,
            -174,-68,0,0,0,0,-27,0,0,0,
            0,0,0,0,0,0,-175,0,0,0,
            0,0,0,0,0,0,0,0,-84,0,
            -210,-85,0,0,-88,0,0,0,0,0,
            -46,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-56,0,0,0,0,
            0,0,0,0,0,-89,0,0,0,0,
            0,0,0,0,0,-57,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-58,0,0,0,0,
            0,0,0,0,0,-90,0,0,0,0,
            0,0,0,0,0,-59,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-60,0,0,0,0,
            0,0,0,0,0,-91,0,0,0,0,
            0,0,0,0,0,-61,0,0,0,0,
            0,0,0,0,0,-92,0,0,0,0,
            0,0,0,0,0,-62,0,0,0,0,
            0,0,0,0,0,-93,0,0,0,0,
            0,0,0,0,0,-63,0,0,0,0,
            0,0,0,0,0,-94,0,0,0,0,
            0,0,0,0,0,-64,0,0,0,0,
            0,0,0,0,0,-95,0,0,0,0,
            0,0,0,0,0,-65,0,0,0,0,
            0,0,0,0,0,-162,0,0,0,0,
            0,0,0,0,0,-66,0,0,0,0,
            0,0,0,0,0,-96,0,0,0,0,
            0,0,0,0,0,-143,0,0,0,0,
            0,0,0,0,0,-97,0,0,0,0,
            0,0,0,0,0,-144,0,0,0,0,
            0,0,0,0,0,-98,0,0,0,0,
            0,0,0,0,0,-161,0,0,0,0,
            0,0,0,0,0,-99,0,0,0,0,
            0,0,0,0,-184,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-7,0,0,0,0,0,0,
            -100,0,-8,0,0,0,0,0,0,-101,
            -192,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-200,
            0,0,0,0,0,0,0,0,0,-102,
            0,0,0,0,0,0,0,0,-9,0,
            0,0,0,0,0,-34,0,-10,0,0,
            0,0,0,0,-103,-208,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-120,0,0,0,0,0,
            0,0,0,0,-129,0,0,0,0,0,
            0,0,0,-137,0,-5,0,0,0,0,
            0,0,-11,0,0,0,0,0,0,-165,
            0,-148,-87,-110,-147,0,-67,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-86,0,0,0,0,0,0,-166,
            0,-104,0,-186,0,-109,-83,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-107,0,0,0,0,0,0,0,
            -122,-131,0,0,0,0,0,-135,0,-54,
            0,0,0,0,0,0,0,0,0,-172,
            0,0,0,0,0,0,-112,-115,0,0,
            0,-189,-134,-136,-139,-116,0,0,0,0,
            0,0,0,0,0,0,-140,-153,0,-159,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-39,0,0,0,0,0,0,0,-48,
            0,0,0,0,0,0,0,0,0,-179,
            0,0,-207,-47,0,0,0,0,0,0,
            0,0,0,-42,0,0,0,0,0,0,
            0,0,0,0,0,-111,0,0,0,0,
            0,0,0,-180,-149,0,0,0,0,0,
            0,0,-12,0,0,0,0,0,0,0,
            -49,0,0,0,0,0,0,0,0,0,
            0,0,-50,0,0,0,0,0,0,0,
            0,0,-201,0,-43,0,0,0,0,0,
            0,0,0,0,0,0,-44,0,0,0,
            0,0,0,0,0,0,-45,0,0,0,
            0,0,0,0,0,0,-202,-71,-146,0,
            0,0,0,0,0,-114,0,0,-40,0,
            0,0,0,0,0,0,-31,-206,0,0,
            0,0,0,0,-74,-117,0,0,-128,0,
            0,0,0,0,0,0,-113,-35,0,0,
            0,0,0,0,0,0,0,0,-125,0,
            0,0,0,0,0,0,-170,0,0,0,
            0,0,-171,-141,-118,-119,0,0,-152,-14,
            -28,0,0,0,0,0,0,0,0,0,
            0,0,-155,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-41,0,0,0,
            0,0,0,-75,0,0,0,-77,0,0,
            0,0,-178,0,0,0,0,0,0,-154,
            0,-160,-80,0,0,0,-82,0,0,0,
            0,0,0,0,0,0,0,0,-106,-124,
            0,0,0,0,0,0,0,0,-187,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-132,-188,0,0,-164,-69,0,-1,0,
            -199,0,0,0,0,0,-190,-156,0,0,
            0,0,0,-145,-176,0,0,0,-13,0,
            0,0,0,0,0,0,-177,0,0,0,
            0,0,-150,0,-203,0,0,-36,0,0,
            0,0,-169,0,-53,0,0,0,0,-173,
            0,-151,-167,-195,0,0,-168,0,0,0,
            0,0,0,0,0,0,-191,-182,0,0,
            -183,0,0,0,0,0,0,0,-196,0,
            0,0,0,0,0,0,-194,-198,-204,0,
            0,0,0,0,0,-197,-205,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            87,10,23,23,22,22,32,32,69,69,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,51,51,70,
            70,5,5,5,5,5,5,5,5,5,
            5,5,6,7,7,7,7,8,8,8,
            9,9,9,11,11,11,11,11,12,12,
            12,13,13,14,14,15,15,16,16,17,
            17,18,18,19,19,19,19,19,19,19,
            19,19,19,19,19,101,45,40,88,88,
            73,73,46,102,102,102,102,102,102,102,
            103,103,103,104,104,109,109,110,110,105,
            105,106,106,106,112,112,107,107,107,107,
            108,108,108,108,108,111,111,25,25,25,
            25,25,27,27,27,79,79,74,74,74,
            74,75,75,75,76,76,76,77,77,77,
            78,78,78,113,113,114,114,115,28,30,
            30,30,30,30,52,54,54,54,54,54,
            54,54,54,54,54,54,54,63,63,24,
            24,60,60,89,90,64,64,61,61,61,
            65,80,80,81,81,66,66,66,48,91,
            91,82,83,83,83,62,62,92,84,84,
            85,85,67,67,20,21,21,21,29,47,
            47,33,33,33,33,36,36,38,34,34,
            35,39,39,116,116,37,117,117,93,93,
            26,26,26,26,26,26,26,26,26,86,
            49,49,49,49,31,56,56,55,55,55,
            57,57,50,50,94,94,71,71,58,58,
            58,41,41,41,42,43,43,43,44,44,
            44,44,53,53,53,59,95,72,72,72,
            72,68,96,97,97,98,98,99,99,118,
            118,119,119,120,120,120,120,122,122,121,
            121,121,123,123,87,87,1,14,19,15,
            342,655,43,371,369,402,156,375,418,414,
            498,490,654,614,73,90,133,214,199,242,
            283,288,744,135,132,134,158,424,14,19,
            15,342,655,43,371,369,402,398,375,418,
            414,498,490,654,614,73,282,276,137,246,
            164,69,104,50,654,6,141,144,147,150,
            372,511,14,19,15,342,42,43,695,340,
            1425,1504,1508,1523,1527,1177,377,292,549,277,
            287,119,10,1236,1426,1201,1247,220,1142,222,
            1325,224,225,230,327,288,256,214,14,1124,
            482,14,19,15,342,655,43,371,369,402,
            398,375,418,414,498,490,654,614,73,282,
            335,14,19,15,342,655,43,371,369,402,
            398,375,418,414,498,490,654,614,73,282,
            71,1228,1466,511,14,19,15,342,42,43,
            371,369,402,287,375,418,414,498,1085,1247,
            511,14,19,15,342,42,43,726,288,1465,
            323,1248,1624,289,1250,906,293,576,241,1247,
            511,14,19,15,342,42,39,488,290,275,
            14,19,15,342,655,43,371,369,402,1144,
            375,418,414,498,490,654,614,73,1176,26,
            23,1290,240,453,14,19,15,342,655,43,
            371,369,402,576,375,418,414,498,490,654,
            614,73,282,511,14,19,15,342,655,43,
            371,369,402,31,375,418,414,498,490,654,
            614,73,90,347,211,284,511,14,19,15,
            342,42,43,371,369,402,291,375,418,414,
            986,403,1247,569,14,19,15,342,655,43,
            371,369,402,1540,375,418,414,498,490,654,
            614,73,1449,662,284,403,305,14,19,15,
            342,655,43,371,369,402,340,375,418,414,
            498,490,654,614,73,1584,189,16,163,241,
            511,14,19,15,342,42,43,371,369,402,
            210,375,418,1021,172,587,133,214,255,214,
            638,576,281,135,132,134,158,511,14,19,
            15,342,655,43,371,369,402,635,375,418,
            414,498,490,654,614,73,91,1232,137,598,
            164,124,624,181,1170,151,141,144,147,150,
            372,511,14,19,15,342,42,43,371,866,
            1425,1504,1508,1523,1527,1177,511,14,19,15,
            342,655,43,371,369,402,194,375,418,414,
            498,490,654,614,73,84,511,14,19,15,
            342,655,43,371,369,402,196,375,418,414,
            498,490,654,614,73,83,511,14,19,15,
            342,655,43,371,369,402,30,375,418,414,
            498,490,654,614,73,82,511,14,19,15,
            342,655,43,371,369,402,283,375,418,414,
            498,490,654,614,73,81,511,14,19,15,
            342,655,43,371,369,402,382,375,418,414,
            498,490,654,614,73,80,511,14,19,15,
            342,655,43,371,369,402,413,375,418,414,
            498,490,654,614,73,79,511,14,19,15,
            342,655,43,371,369,402,470,375,418,414,
            498,490,654,614,73,78,511,14,19,15,
            342,655,43,371,369,402,490,375,418,414,
            498,490,654,614,73,77,511,14,19,15,
            342,655,43,371,369,402,519,375,418,414,
            498,490,654,614,73,76,511,14,19,15,
            342,655,43,371,369,402,582,375,418,414,
            498,490,654,614,73,75,511,14,19,15,
            342,655,43,371,369,402,44,375,418,414,
            498,490,654,614,73,74,511,14,19,15,
            342,655,43,371,369,402,110,375,418,414,
            498,490,654,614,73,1623,511,14,19,15,
            342,655,43,371,369,402,157,375,418,414,
            498,490,654,614,73,1627,511,14,19,15,
            342,42,43,371,369,402,344,375,418,414,
            498,490,654,614,92,511,14,19,15,342,
            42,43,371,369,402,294,375,418,414,498,
            490,654,614,92,511,14,19,15,342,42,
            38,343,1638,511,14,19,15,342,42,37,
            374,511,14,19,15,342,42,43,371,369,
            402,1657,375,418,414,498,490,654,614,92,
            511,14,19,15,342,42,43,371,369,402,
            557,375,418,414,498,490,654,614,92,511,
            14,19,15,342,42,36,71,213,511,14,
            19,15,342,42,35,547,511,14,19,15,
            342,42,43,371,369,402,203,375,418,414,
            498,490,654,614,92,511,14,19,15,342,
            42,43,371,369,402,668,375,418,414,498,
            490,654,614,72,609,1603,540,14,19,15,
            342,40,204,511,14,19,15,342,42,34,
            163,275,690,153,163,756,22,403,219,1142,
            222,1325,224,225,230,1457,268,373,341,273,
            255,214,264,403,255,214,20,278,229,1172,
            436,275,462,265,465,497,153,189,219,1142,
            222,1325,224,225,230,21,268,373,341,273,
            256,214,1613,516,256,214,1174,133,214,242,
            396,678,334,1227,136,132,134,158,562,262,
            511,14,19,15,342,42,43,371,369,402,
            762,375,418,414,498,490,1060,403,108,138,
            616,164,259,31,31,31,488,142,145,148,
            151,372,1605,1520,1578,543,275,586,625,274,
            354,1201,401,220,1142,222,1325,224,225,230,
            188,270,373,341,273,219,1142,222,1325,224,
            225,230,511,14,19,15,342,42,46,1363,
            511,14,19,15,342,42,43,371,369,402,
            652,375,926,259,511,14,19,15,342,42,
            43,371,886,1605,511,14,19,15,342,42,
            43,371,369,766,199,201,365,14,19,15,
            342,42,35,1571,693,612,219,1142,222,1325,
            224,225,230,511,14,19,15,342,33,247,
            1363,511,14,19,15,342,42,43,371,369,
            402,228,946,511,14,19,15,342,42,43,
            371,369,402,645,966,511,14,19,15,342,
            42,43,371,369,806,200,201,511,14,19,
            15,342,42,43,371,369,826,511,14,19,
            15,342,42,43,371,369,846,648,253,365,
            14,19,15,342,42,35,523,1605,1437,511,
            14,19,15,342,42,45,1562,116,458,1714,
            278,1714,248,1714,275,232,488,1567,279,403,
            219,1142,222,1325,224,225,230,574,412,268,
            373,341,273,275,1613,133,214,636,553,153,
            187,280,140,132,134,158,1227,574,268,373,
            341,273,1115,523,394,311,488,636,1193,403,
            31,31,244,1549,1140,267,1714,139,88,164,
            316,316,1115,31,1714,232,1539,260,1193,1208,
            189,281,1429,1597,1202,198,198,511,14,19,
            15,342,42,44,667,1714,1220,260,688,1714,
            86,86,1429,692,1202,615,615,1714,1417,1417,
            48,1714,488,709,133,214,1163,730,133,214,
            636,143,132,134,158,146,132,134,158,768,
            163,591,1147,133,214,198,296,133,214,588,
            149,132,134,158,152,132,134,158,1714,636,
            255,214,504,142,1637,275,31,97,677,395,
            1201,494,636,636,1115,1714,420,692,545,553,
            270,373,341,273,153,95,193,1115,198,511,
            14,19,15,342,32,636,396,545,1193,260,
            661,1585,1290,97,1649,97,1202,243,31,86,
            198,677,260,403,314,31,1539,1469,553,1202,
            31,1290,671,153,609,553,936,153,1659,193,
            1563,1714,636,677,1193,226,1193,576,153,1714,
            195,488,1666,1658,1585,210,245,1115,86,403,
            246,194,1220,1143,374,86,326,153,576,576,
            1030,295,1513,1324,210,298,342,576,1714,205,
            1714,231,261,1714,1714,1667,1714,1714,1714,1714,
            297,1577,1324,1714,1714,1714,1714,1714,235,1714,
            182,206,1714,1714,1714,1714,1714,1714,1714,691,
            1714,0,17,178,0,18,177,0,1,1941,
            0,1,1952,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,0,
            10,11,12,0,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,0,
            0,31,32,33,34,35,36,37,38,39,
            40,41,42,0,44,45,46,0,1,0,
            3,2,5,6,7,8,47,48,9,12,
            55,56,57,58,17,18,19,20,0,22,
            0,1,4,3,61,62,47,48,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,0,1,0,3,51,5,
            6,7,8,0,61,62,12,0,1,0,
            3,17,18,19,20,0,22,2,0,4,
            13,53,54,0,9,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,0,1,0,3,51,5,6,7,8,
            0,0,0,12,4,0,0,5,17,18,
            19,20,0,22,55,56,57,58,6,7,
            8,0,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,0,1,
            0,3,51,0,6,7,8,4,0,1,
            12,3,50,53,54,17,18,19,20,0,
            22,55,56,57,58,6,7,8,0,31,
            32,33,34,35,36,37,38,39,40,41,
            42,0,44,45,46,80,65,6,7,8,
            0,0,1,12,3,0,53,54,17,18,
            19,20,0,22,2,10,11,5,0,1,
            2,9,31,32,33,34,35,36,37,38,
            39,40,41,42,0,1,2,3,4,5,
            0,29,0,0,10,11,12,0,14,15,
            16,0,1,13,3,21,9,23,24,25,
            26,27,28,63,0,1,2,3,4,5,
            0,1,30,3,10,11,12,59,14,15,
            16,0,0,13,50,21,0,23,24,25,
            26,27,28,0,0,1,2,3,4,5,
            14,0,0,0,10,11,5,13,14,15,
            16,68,69,0,50,21,14,23,24,25,
            26,27,28,30,0,1,2,3,4,5,
            29,30,0,0,10,11,0,43,14,15,
            16,0,6,7,8,21,64,23,24,25,
            26,27,28,0,0,1,2,3,4,6,
            7,8,0,0,10,11,63,5,14,15,
            16,0,0,60,50,21,5,23,24,25,
            26,27,28,0,1,2,3,4,47,48,
            0,29,59,10,11,0,13,14,15,16,
            29,6,7,8,21,51,23,24,25,26,
            27,28,0,1,2,3,4,0,1,47,
            48,0,10,11,0,13,14,15,16,0,
            6,7,8,21,13,23,24,25,26,27,
            28,0,1,2,3,4,0,0,1,0,
            3,10,11,0,13,14,15,16,5,10,
            11,0,21,0,23,24,25,26,27,28,
            0,1,2,3,4,0,47,48,0,4,
            10,11,0,30,14,15,16,5,10,11,
            0,21,0,23,24,25,26,27,28,0,
            1,2,3,4,0,1,0,3,0,10,
            11,29,49,14,15,16,0,9,0,66,
            21,0,23,24,25,26,27,28,0,1,
            2,3,4,0,13,0,0,4,10,11,
            5,0,14,15,16,0,0,0,1,21,
            9,23,24,25,26,27,28,0,13,2,
            52,4,5,6,7,8,9,0,0,12,
            64,0,5,2,17,18,19,20,43,22,
            9,65,49,0,0,2,29,4,5,6,
            7,8,9,52,0,12,49,13,30,5,
            17,18,19,20,0,22,60,0,1,2,
            43,0,29,0,1,2,70,71,72,73,
            74,75,76,77,78,79,0,0,1,2,
            0,4,6,7,8,0,9,0,12,0,
            1,4,3,17,18,19,20,0,22,0,
            0,0,0,6,7,8,0,0,9,12,
            66,0,0,59,17,18,19,20,0,22,
            13,60,0,0,6,7,8,0,0,49,
            12,30,30,0,0,17,18,19,20,0,
            22,13,0,0,0,6,7,8,0,0,
            0,12,0,0,0,2,17,18,19,20,
            0,22,9,13,0,0,1,2,15,16,
            5,0,1,2,9,4,0,0,0,2,
            9,4,0,0,0,0,9,0,0,0,
            0,0,0,0,29,0,0,0,0,0,
            0,0,0,0,0,52,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            67,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1714,689,1470,692,1078,58,1929,1930,1931,53,
            1069,1023,1875,61,1133,1589,1333,1876,1874,1932,
            1877,1126,1873,1724,1725,1726,1727,1014,500,57,
            1,1880,1885,1884,1882,1883,1881,1886,1887,1879,
            1888,1889,1890,62,397,339,338,1714,1,271,
            1,1406,192,1,1,1,701,1294,509,1,
            1387,1377,1365,1304,1,1,1,1,47,1,
            1714,1743,1497,1744,1353,1341,701,1294,1,1,
            1,1,1,1,1,1,1,1,1,1,
            192,1,1,1,1714,1,254,1,1911,191,
            1,1,1,183,1353,1341,1,1714,1893,60,
            1894,1,1,1,1,266,1,1398,184,1,
            1233,1409,1272,286,509,1,1,1,1,1,
            1,1,1,1,1,1,1,191,1,1,
            1,1714,1,1714,1,1911,192,1,1,1,
            49,1714,1714,1,1497,1714,59,1717,1,1,
            1,1,1714,1,1387,1377,1365,1304,1929,1930,
            1931,69,1,1,1,1,1,1,1,1,
            1,1,1,1,192,1,1,1,1714,1892,
            1714,1891,1911,48,1929,1930,1931,1497,186,2727,
            1875,2727,1716,1409,1272,1876,1874,1932,1877,250,
            1873,1387,1377,1365,1304,1,1,1,1714,1880,
            1885,1884,1882,1883,1881,1886,1887,1879,1888,1889,
            1890,127,397,339,338,1701,463,1929,1930,1931,
            65,185,2748,1875,2748,50,1409,1272,1876,1874,
            1932,1877,1,1873,1398,480,381,1719,1,1941,
            1397,509,1880,1885,1884,1882,1883,1881,1886,1887,
            1879,1888,1889,1890,1,1731,1470,1732,1316,1717,
            1714,1718,87,71,1069,1023,593,272,1133,1589,
            1333,207,2770,563,2770,1126,509,1724,1725,1726,
            1727,1014,500,640,1714,1731,1470,1732,1399,1717,
            1714,1893,667,1894,1069,1023,956,1050,1133,1589,
            1333,1714,67,1234,1716,1126,63,1724,1725,1726,
            1727,1014,500,257,1,1731,1470,1732,1078,27,
            1280,1714,64,66,1069,1023,1719,2637,1133,1589,
            1333,1210,1615,1714,1716,1126,1280,1724,1725,1726,
            1727,1014,500,1622,1714,1731,1470,1732,1078,1717,
            1718,1418,1714,1714,1069,1023,249,27,1133,1589,
            1333,56,1929,1930,1931,1126,576,1724,1725,1726,
            1727,1014,500,251,1714,1,1,1,1,1,
            1,1,1714,1714,1,1,640,1719,1,1,
            1,1,55,533,1716,1,89,1,1,1,
            1,1,1,1,1731,1470,1732,1078,701,1294,
            1714,1718,1105,1069,1023,252,2637,1133,1589,1333,
            89,1929,1930,1931,1126,2029,1724,1725,1726,1727,
            1014,500,1714,1731,1470,1732,1078,1714,1953,701,
            1294,41,1069,1023,253,2637,1133,1589,1333,54,
            1929,1930,1931,1126,563,1724,1725,1726,1727,1014,
            500,1,1731,1470,1732,1078,1714,1714,1893,52,
            1894,1069,1023,1714,2637,1133,1589,1333,1723,480,
            381,1714,1126,1,1724,1725,1726,1727,1014,500,
            1714,1731,1470,1732,1078,1714,701,1294,51,650,
            1069,1023,1,1293,1133,1589,1333,1719,480,381,
            1714,1126,1714,1724,1725,1726,1727,1014,500,1714,
            1731,1471,1732,1078,209,1893,68,1894,1714,1069,
            1023,1718,1973,1133,1589,1333,70,976,1714,1722,
            1126,1714,1724,1725,1726,1727,1014,500,1,1731,
            1470,1732,1078,1,1483,1714,1714,254,1069,1023,
            1721,292,1133,1589,1333,1714,42,1,1711,1126,
            995,1724,1725,1726,1727,1014,500,17,1566,1702,
            1522,1702,1702,178,178,178,1702,285,28,178,
            576,223,1235,1463,178,178,178,178,1720,178,
            509,463,1973,18,1714,1705,1702,1705,1705,177,
            177,177,1705,1641,1,177,1973,1620,440,1723,
            177,177,177,177,202,177,916,1,1941,1397,
            1235,212,1705,254,1941,1397,896,876,856,836,
            816,776,796,756,736,716,128,263,1941,1145,
            1,1,1929,1930,1931,1714,509,1714,1875,208,
            507,1464,507,1876,1874,1932,1877,129,1873,221,
            1714,28,208,1929,1930,1931,1714,190,509,1875,
            1722,1714,1714,1086,1876,1874,1932,1877,130,1873,
            186,1031,1714,1714,1929,1930,1931,1714,190,1972,
            1875,1741,2709,1714,1714,1876,1874,1932,1877,131,
            1873,185,1714,1714,1714,1929,1930,1931,1714,1714,
            190,1875,1714,31,1714,1438,1876,1874,1932,1877,
            1714,1873,1608,207,1714,1,1708,1145,1738,1739,
            1719,269,1941,1145,509,254,1714,269,1714,1398,
            509,254,1714,1714,1714,1714,509,1714,1714,1714,
            1714,1714,1714,1714,1718,1714,1714,1714,1714,1714,
            1714,1714,1714,1714,1714,1076,1714,1714,1714,1714,
            1714,1714,1714,1714,1714,1714,1714,1714,1714,1714,
            460
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            415,1,76,41,76,76,76,76,76,76,
            76,76,76,374,3,188,185,192,190,198,
            196,200,199,202,201,10,76,374,166,166,
            320,374,292,292,355,76,76,76,76,76,
            76,76,76,76,76,76,76,76,76,76,
            76,76,76,76,76,76,76,76,76,76,
            76,76,76,76,76,76,166,68,324,70,
            262,164,163,295,307,66,307,66,66,307,
            66,307,388,120,120,166,45,185,185,190,
            190,190,190,188,188,196,192,192,199,198,
            260,201,200,173,50,320,324,93,45,411,
            74,166,326,265,66,292,292,66,292,76,
            50,324,315,411,45,73,70,166,318,388,
            165,267,68,213,68,243,245,170,240,68,
            315,411,76,76,45,74,262,255,254,324,
            267,166,68,213,243,243,240,48,252,292,
            76,169,240,50,411,315,45,45,166,326,
            265,318,213,240,113,213,243,245,249,245,
            52,45,292,76,50,315,267,213,115,245,
            240,76,292,45,245,166,165,240,209,76,
            208,89,324,240,240,293,115,76,89,245
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,66,9,2,52,67,15,16,14,
            4,10,11,53,54,47,48,55,56,57,
            58,61,62,63,64,65,68,69,43,60,
            70,71,72,73,74,76,75,77,78,79,
            59,29,80,30,50,5,0,5,43,9,
            52,15,16,14,4,10,11,27,28,21,
            2,23,24,25,26,1,3,13,0,6,
            7,8,12,50,5,23,24,25,26,3,
            15,16,14,10,11,27,28,21,4,2,
            1,0,6,7,8,2,23,24,25,26,
            1,3,15,16,14,4,10,11,27,28,
            21,0,66,5,4,1,2,59,0,7,
            12,22,8,20,19,18,6,17,52,67,
            15,16,14,10,11,53,54,47,48,55,
            56,57,58,61,62,63,64,65,68,69,
            60,70,71,72,73,74,75,76,77,78,
            79,4,2,9,30,29,5,0,60,9,
            52,0,60,70,71,72,73,74,75,76,
            77,78,79,13,4,53,54,10,11,48,
            47,55,56,57,58,61,62,14,63,64,
            65,50,29,43,80,68,69,59,66,5,
            30,0,17,31,6,32,44,18,33,19,
            34,35,20,7,36,37,12,45,22,46,
            38,39,8,40,41,42,1,3,51,5,
            43,0,1,3,5,43,30,0,5,30,
            43,60,0,2,5,30,29,66,9,59,
            0,4,2,9,29,5,17,31,6,32,
            44,18,33,19,34,35,20,7,36,37,
            12,45,22,46,38,39,8,40,41,42,
            49,3,1,0,39,31,36,34,35,33,
            32,37,38,40,41,42,59,66,22,18,
            12,17,20,19,6,7,8,30,1,5,
            29,2,9,4,0,4,17,31,6,32,
            44,18,33,19,34,35,20,7,36,37,
            12,45,22,46,38,39,8,40,41,42,
            1,3,49,0,5,29,21,23,24,25,
            26,1,3,2,15,16,14,4,10,11,
            27,28,0,21,23,24,25,26,2,15,
            16,14,4,10,11,27,28,3,1,44,
            45,46,39,31,36,34,35,33,32,37,
            38,40,41,42,22,18,12,17,20,19,
            6,7,8,0,21,23,24,25,26,1,
            3,2,15,16,14,4,10,11,27,28,
            51,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            108,9,26,9,26,26,26,26,26,26,
            26,26,26,89,9,9,9,9,9,9,
            9,9,9,9,9,9,26,89,79,79,
            74,1,28,28,86,90,26,26,26,26,
            26,26,26,26,26,26,26,26,26,26,
            26,26,90,26,26,26,26,26,26,26,
            26,26,26,26,26,26,79,9,105,32,
            73,10,10,62,63,12,63,17,17,63,
            16,63,57,9,9,79,34,9,9,9,
            9,9,9,9,9,9,9,9,9,9,
            9,9,9,9,55,97,9,36,34,48,
            33,79,81,78,71,71,71,71,71,26,
            24,9,55,48,34,33,14,79,51,2,
            9,83,21,55,9,55,46,19,55,9,
            55,48,26,26,34,33,50,10,10,105,
            83,79,9,93,55,71,30,23,9,71,
            26,44,30,55,48,14,34,34,79,81,
            78,65,55,30,39,111,71,46,9,9,
            25,34,71,26,24,14,101,93,53,46,
            30,26,71,34,46,79,79,30,40,26,
            9,53,105,30,30,9,53,26,67,42
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,79,78,77,76,64,75,74,0,26,
            0,89,0,20,0,92,65,0,97,0,
            90,0,68,10,59,4,0,70,0,32,
            0,10,4,23,0,4,10,0,10,69,
            0,95,0,99,0,51,0,56,0,22,
            43,42,36,34,10,0,64,60,61,62,
            63,52,27,0,43,42,36,34,31,0,
            24,0,22,42,43,10,0,10,22,0,
            31,49,10,25,0,10,88,0,48,10,
            45,0,81,10,48,0,43,42,31,0,
            93,10,25,0,31,49,0,10,87,0,
            10,48,66,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,1,10,
            11,69,3,8,6,7,44,55,60,63,
            68,72,81,82,83,84,12,13,90,42,
            47,52,56,61,62,66,67,74,75,78,
            79,80,91,54,70,73,16,17,30,89,
            93,4,14,15,18,19,20,21,29,31,
            22,23,24,25,26,92,5,27,28,32,
            33,34,35,36,37,38,39,40,41,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,101,105,106,107,108,109,0,
            110,111,112,113,114,115,116,117,118,129,
            0,97,96,121,122,150,128,0,0,0,
            0,98,146,148,0,149,0,0,0,0,
            159,160,161,0,100,120,137,141,147,156,
            0,131,136,0,151,154,155,158,0,132,
            133,134,135,138,0,140,145,162,99,102,
            103,104,119,123,124,125,126,127,130,0,
            139,143,0,0,144,153,95,0,0,0,
            142,0,152,157,0,163,164,0,165,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            82,113,156,92,35,41,121,12,136,21,
            51,69,28,47,103,152,174,178,145,1,
            1,32,56,79,182,6,107,127,164,99,
            59,59,59
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            90,90,90,90,4,4,90,18,142,26,
            4,26,26,4,101,26,26,4,149,4,
            4,26,4,26,26,9,110,130,167,101,
            66,61,74
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            62,60,4,62,26,26,60,53,106,44,
            26,39,44,26,66,5,4,4,18,99,
            98,42,26,36,2,68,66,107,4,66,
            39,37,39
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            43,43,43,43,50,50,43,43,86,29,
            50,29,29,50,66,29,29,50,59,50,
            50,29,50,29,29,60,1,92,29,66,
            2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            17,17,32,17,21,21,17,86,-1,25,
            21,9,25,21,3,32,32,32,61,1,
            7,25,21,9,32,87,3,-1,32,3,
            9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            139,9,0,96,0,189,103,0,31,136,
            0,144,165,103,13,152,0,98,0,0,
            148,103,2,135,0,97,0,148,103,2,
            0,151,2,0,112,12,179,103,9,0,
            112,179,103,12,9,0,112,12,9,0,
            112,179,103,9,0,112,9,0,129,0,
            2,0,152,97,0,2,97,0,148,103,
            2,129,0,2,0,151,97,0,140,2,
            0,144,177,103,13,117,185,44,0,98,
            0,144,177,103,13,185,44,0,141,0,
            99,0,184,103,141,0,103,141,0,142,
            99,0,173,103,13,183,117,182,157,0,
            173,103,13,182,157,0,195,85,0,77,
            2,100,97,99,0,195,115,138,2,89,
            0,53,0,0,138,69,110,0,29,117,
            0,164,2,21,0,144,165,103,13,115,
            164,2,0,164,2,0,97,3,0,104,
            0,98,0,181,2,97,0,138,9,97,
            0,138,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            906,0,1563,1585,1520,0,398,0,374,1293,
            1397,1232,1220,1145,1115,0,636,1177,316,0,
            1325,1142,373,341,1220,1145,1115,1539,1398,1417,
            0,1399,1316,463,1210,640,576,1353,1341,1280,
            1294,701,1387,1377,1365,1304,1497,1409,1272,480,
            381,1589,1333,1133,1078,1069,1023,1014,500,1126,
            1086,1050,1031,995,976,956,936,616,1105,593,
            509,916,896,876,856,836,816,796,776,756,
            736,716,316,667,553,533,420,440,347,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,180,103,166,21,28,27,11,10,4,
            14,16,15,2,97,101,100,104,102,106,
            105,108,107,110,109,98,30,2,164,138,
            141,103,67,52,2,9,11,10,54,53,
            4,58,57,56,55,47,48,14,62,61,
            64,63,69,68,65,79,78,77,75,76,
            74,73,72,71,70,60,164,115,103,9,
            2,136,135,167,168,157,169,46,45,170,
            44,171,172,1,3,181,138,100,100,102,
            102,102,102,101,101,105,104,104,107,106,
            138,109,108,115,13,142,124,12,112,103,
            4,151,103,2,182,158,158,185,158,59,
            103,124,4,103,112,179,149,148,118,103,
            150,103,117,13,117,13,165,103,13,152,
            4,103,179,12,112,4,2,127,129,103,
            30,148,183,103,13,103,144,30,189,52,
            9,190,103,13,103,149,112,112,140,103,
            2,142,13,173,141,174,103,177,117,178,
            60,139,52,9,103,149,103,103,103,177,
            144,60,30,139,165,148,186,173,184,59,
            140,2,103,144,144,30,30,59,142,125
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_cast_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_token",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 51,
           SCOPE_UBOUND      = 32,
           SCOPE_SIZE        = 33,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 210,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2029,
           MAX_LA            = 2,
           NUM_RULES         = 315,
           NUM_NONTERMINALS  = 123,
           NUM_SYMBOLS       = 216,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1569,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1701,
           ERROR_ACTION      = 1714;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
