/*******************************************************************************
* Copyright (c) 2006, 2007 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.c99;

public class C99Parserprs implements lpg.lpgjavaruntime.ParseTable, C99Parsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,3,1,4,
            3,4,3,3,2,2,7,8,1,3,
            1,2,2,2,2,2,2,2,2,2,
            4,1,4,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,1,3,1,
            1,1,1,1,1,1,1,3,3,2,
            1,2,4,1,2,1,1,1,2,5,
            7,5,7,5,9,8,8,7,8,7,
            7,6,8,7,7,6,3,2,2,2,
            3,1,2,4,2,2,2,2,1,2,
            1,2,1,2,3,2,1,1,2,3,
            2,2,1,3,2,2,1,3,2,2,
            1,1,3,1,3,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,5,5,6,6,2,2,1,
            1,0,1,2,4,2,1,1,3,1,
            2,3,1,5,6,6,7,2,1,0,
            1,3,1,3,1,1,1,1,1,3,
            1,3,1,1,2,5,3,1,3,5,
            1,3,2,4,3,5,4,6,6,3,
            5,1,2,3,4,1,2,1,3,1,
            1,3,2,1,2,1,3,1,2,2,
            1,3,3,1,2,2,3,4,5,1,
            4,5,1,1,3,3,3,2,1,2,
            3,2,1,0,1,2,1,1,1,1,
            4,6,2,1,2,-71,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-2,-7,0,
            0,-4,0,0,0,0,0,0,0,0,
            -126,0,0,0,0,0,0,0,0,0,
            0,0,0,-138,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-142,0,0,0,-6,
            0,0,0,0,0,0,0,0,-115,0,
            0,0,-52,0,0,0,0,0,0,0,
            -43,-145,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-116,0,0,0,
            0,0,0,0,0,0,-212,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-12,0,0,-29,-161,
            0,0,0,0,0,0,0,0,0,0,
            0,-260,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -13,0,0,-31,-34,0,0,-42,0,0,
            0,0,0,0,0,0,-262,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-47,0,0,-49,-60,
            0,0,-61,0,0,0,0,0,0,0,
            0,-263,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -22,0,0,-62,-63,0,0,0,0,0,
            0,0,0,0,0,0,-271,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-77,0,0,-64,-65,
            0,0,-66,0,0,0,0,0,0,0,
            0,-274,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -89,0,0,-67,-68,0,0,-69,0,0,
            0,0,0,0,0,0,-287,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-95,0,0,-70,-165,
            0,0,-75,0,0,0,0,0,0,0,
            0,-288,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -177,0,0,-93,-167,0,0,0,0,0,
            0,0,0,0,0,0,-290,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-172,0,0,-111,-143,
            0,0,0,0,0,0,0,0,0,0,
            0,-291,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -186,0,0,-144,-218,0,0,-146,0,0,
            0,0,0,0,0,0,-293,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-216,0,0,-147,-148,
            0,0,0,0,0,0,0,0,0,0,
            0,-297,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -229,0,0,-150,-220,0,0,-151,0,0,
            0,0,0,0,0,0,-299,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-230,0,0,-153,-221,
            0,0,0,0,0,0,0,0,0,0,
            0,-300,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -298,0,0,-168,-222,0,0,0,0,0,
            0,0,0,0,0,0,-301,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-169,0,0,-187,-250,
            0,0,0,0,0,0,0,0,0,0,
            0,-302,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -251,0,0,-188,-189,0,0,-190,0,0,
            0,0,0,0,0,0,-304,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-18,0,0,-191,-192,
            0,0,-193,0,0,0,0,0,0,0,
            0,-50,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-194,0,0,0,0,0,0,-237,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-152,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-113,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-195,0,-196,-197,
            -198,0,0,-51,0,0,0,0,0,0,
            -127,0,0,0,0,0,0,0,0,0,
            0,0,-223,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-114,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-199,0,-200,-201,-202,0,0,-58,0,
            0,0,0,0,0,-128,0,0,0,0,
            0,0,0,0,0,-19,0,-137,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-203,0,0,-206,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-208,-211,
            -234,0,0,-98,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-245,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-254,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-122,0,0,0,0,0,0,
            0,0,0,-132,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-235,-242,-15,
            -249,-266,0,0,-133,0,0,0,0,0,
            0,0,0,0,0,0,0,-59,0,0,
            0,0,0,0,-281,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-134,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -280,0,-129,0,0,0,0,0,0,0,
            0,0,-283,0,-130,0,0,0,0,0,
            0,0,0,0,-44,0,0,0,-286,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-135,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-131,0,0,0,
            0,0,0,0,0,0,0,0,-123,0,
            0,0,0,0,0,0,0,-285,0,-20,
            -73,0,-139,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-88,0,0,0,-238,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-90,0,0,-239,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -109,-110,0,-255,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-170,0,-183,0,
            -257,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-184,0,0,-259,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-185,-227,0,-273,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-241,-243,
            0,-276,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-244,-246,0,-277,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-295,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-21,-76,0,0,0,0,
            0,0,-24,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-97,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-8,0,0,-124,0,0,0,
            0,0,0,0,-125,0,0,0,0,0,
            0,0,0,0,0,-117,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-253,-269,0,-118,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-48,0,0,-136,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-264,0,0,-270,0,0,
            0,0,-53,0,0,0,0,0,0,0,
            0,-207,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-272,-275,0,-209,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-279,-289,0,-210,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-292,
            -294,0,-261,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-224,0,-46,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-157,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-175,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-171,0,-282,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-99,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-54,0,0,
            0,0,0,0,0,0,0,0,0,-100,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-101,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-102,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-103,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-104,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-105,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-106,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-107,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-108,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -176,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-180,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-236,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-248,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-268,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-55,0,0,0,0,0,0,
            -57,0,0,0,0,0,0,-30,-181,0,
            0,-56,0,0,0,0,0,0,0,0,
            0,0,-225,-3,0,-303,0,0,-284,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-154,-11,
            -32,-92,0,0,-87,0,-23,-163,0,0,
            0,0,0,0,-35,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-1,0,0,0,0,0,0,0,0,
            0,-74,0,-25,0,-91,0,0,0,0,
            0,0,0,-9,0,0,0,0,-265,-28,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-173,
            0,0,0,0,0,0,0,-26,-140,0,
            -159,0,0,0,0,0,0,-41,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -10,-232,0,0,0,0,0,0,0,0,
            0,-226,0,0,0,0,0,0,-17,0,
            0,0,0,0,-141,0,0,0,-182,0,
            0,0,-213,0,0,0,0,0,0,0,
            0,0,0,0,0,-14,0,0,0,0,
            0,0,0,0,0,-219,0,0,-178,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-40,0,-16,0,0,-79,0,
            0,0,-81,0,0,0,-5,-72,0,0,
            0,0,-149,0,0,0,0,0,0,0,
            0,0,-204,0,0,0,0,0,0,0,
            0,0,0,0,-162,0,0,0,0,-78,
            -80,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-96,0,0,0,0,0,
            0,-119,0,0,0,0,0,0,-120,0,
            0,0,0,0,0,-121,0,0,0,0,
            0,0,-156,-160,-174,-164,-179,0,0,0,
            0,0,0,0,-82,-205,0,-215,-217,0,
            -228,0,0,0,0,-231,0,-240,0,0,
            0,0,-233,0,0,0,0,0,-83,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-267,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-45,
            0,0,0,0,0,0,-252,-27,-166,0,
            -94,0,0,0,0,-37,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-38,
            0,0,0,0,-39,0,0,0,0,-33,
            -158,0,0,0,-112,0,0,0,-155,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-36,0,-214,0,0,0,0,-84,-247,
            -85,0,-86,0,0,0,0,0,-256,-258,
            0,-278,0,0,0,0,0,0,0,0,
            -296,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            84,19,1,1,42,42,22,22,37,37,
            20,20,2,2,2,2,3,3,3,4,
            4,4,4,4,4,4,4,4,4,85,
            85,5,5,5,5,5,5,5,5,5,
            5,5,6,6,7,7,7,7,8,8,
            8,9,9,9,10,10,10,10,10,11,
            11,11,12,12,13,13,14,14,15,15,
            16,16,17,17,18,18,18,18,18,18,
            18,18,18,18,18,18,27,26,21,21,
            52,28,28,28,28,28,28,28,29,29,
            29,34,24,24,86,86,71,71,30,30,
            31,31,31,32,32,32,32,32,32,32,
            32,32,32,32,32,32,32,33,33,33,
            33,33,87,46,46,25,25,25,25,43,
            43,43,43,43,43,56,56,56,56,56,
            73,73,73,73,74,74,74,74,75,75,
            75,75,72,72,57,57,35,35,35,35,
            35,48,48,48,48,48,48,48,48,48,
            48,48,48,67,65,65,65,65,65,65,
            76,58,58,59,59,53,53,45,88,88,
            77,77,77,60,66,66,66,66,66,78,
            78,79,79,68,68,23,23,23,36,44,
            44,38,38,38,38,39,40,40,69,69,
            80,90,90,41,41,41,41,41,41,41,
            41,41,47,47,47,47,61,61,54,54,
            54,55,55,50,50,50,89,89,64,64,
            62,62,62,51,51,51,51,51,51,51,
            49,49,49,70,70,70,70,63,91,92,
            92,81,81,84,84,93,93,82,82,82,
            82,83,83,83,94,94,127,17,16,19,
            520,519,44,523,555,554,590,589,624,593,
            628,625,659,74,88,2452,108,800,381,598,
            92,2449,291,2653,106,91,93,94,95,96,
            869,958,17,16,19,520,42,44,523,555,
            554,1009,107,293,1,17,16,19,520,519,
            44,523,555,554,590,589,624,593,628,625,
            659,74,88,2452,108,800,1090,104,92,2449,
            346,2653,106,91,93,94,95,96,869,718,
            24,103,344,958,17,16,19,520,42,39,
            107,304,299,17,16,19,520,519,44,523,
            555,554,590,589,624,593,628,625,659,74,
            88,225,108,800,246,105,92,718,23,2653,
            1239,91,93,94,95,96,869,299,17,16,
            19,520,519,44,523,555,554,590,589,624,
            593,628,625,659,74,88,306,108,800,640,
            583,92,1506,2746,2653,98,91,93,94,95,
            96,869,299,17,16,19,520,519,44,523,
            555,554,590,589,624,593,628,625,659,74,
            88,330,108,800,683,923,92,185,951,2653,
            114,91,93,94,95,96,869,299,17,16,
            19,520,519,44,523,555,554,590,589,624,
            593,628,625,659,74,88,233,108,800,471,
            721,92,449,469,2653,112,91,93,94,95,
            96,869,299,17,16,19,520,519,44,523,
            555,554,590,589,624,593,628,625,659,74,
            88,667,108,800,673,382,92,484,235,2653,
            1391,91,93,94,95,96,869,299,17,16,
            19,520,519,44,523,555,554,590,589,624,
            593,628,625,659,74,88,857,108,800,757,
            480,92,225,259,2653,126,91,93,94,95,
            96,869,299,17,16,19,520,519,44,523,
            555,554,590,589,624,593,628,625,659,74,
            88,859,108,800,288,886,92,225,393,2653,
            122,91,93,94,95,96,869,299,17,16,
            19,520,519,44,523,555,554,590,589,624,
            593,628,625,659,74,88,233,108,800,30,
            583,92,225,29,2653,125,91,93,94,95,
            96,869,299,17,16,19,520,519,44,523,
            555,554,590,589,624,593,628,625,659,74,
            88,233,108,800,350,737,92,184,237,2653,
            124,91,93,94,95,96,869,299,17,16,
            19,520,519,44,523,555,554,590,589,624,
            593,628,625,659,74,88,906,108,800,609,
            155,92,204,236,2653,121,91,93,94,95,
            96,869,299,17,16,19,520,519,44,523,
            555,554,590,589,624,593,628,625,659,74,
            88,233,108,800,796,583,92,265,912,2653,
            120,91,93,94,95,96,869,299,17,16,
            19,520,519,44,523,555,554,590,589,624,
            593,628,625,659,74,88,915,108,800,1105,
            800,92,187,20,2653,118,91,93,94,95,
            96,869,299,17,16,19,520,519,44,523,
            555,554,590,589,624,593,628,625,659,74,
            88,233,108,800,437,583,92,225,756,2653,
            111,91,93,94,95,96,869,299,17,16,
            19,520,519,44,523,555,554,590,589,624,
            593,628,625,659,74,88,233,108,800,1031,
            852,92,186,238,2653,123,91,93,94,95,
            96,869,299,17,16,19,520,519,44,523,
            555,554,590,589,624,593,628,625,659,74,
            88,233,108,800,474,583,92,205,239,2653,
            119,91,93,94,95,96,869,299,17,16,
            19,520,519,44,523,555,554,590,589,624,
            593,628,625,659,74,88,1093,108,800,1030,
            583,92,206,281,2653,117,91,93,94,95,
            96,869,299,17,16,19,520,519,44,523,
            555,554,590,589,624,593,628,625,659,74,
            88,969,108,800,1060,965,92,207,995,2653,
            116,91,93,94,95,96,869,299,17,16,
            19,520,519,44,523,555,554,590,589,624,
            593,628,625,659,74,88,206,108,800,519,
            700,92,265,911,2653,115,91,93,94,95,
            96,869,902,17,16,19,520,519,44,523,
            555,554,590,589,624,593,628,625,659,74,
            88,2452,1121,729,370,223,488,197,1562,958,
            17,16,19,520,42,44,523,555,554,590,
            589,624,593,628,625,659,73,2845,958,17,
            16,19,520,42,44,523,555,554,590,589,
            624,593,628,625,659,90,1561,902,17,16,
            19,520,519,44,523,555,554,590,589,624,
            593,628,625,659,74,88,2452,1136,729,1150,
            1151,942,197,1562,930,17,16,19,520,40,
            1240,958,17,16,19,520,42,44,523,555,
            554,1010,2845,958,17,16,19,520,42,44,
            523,555,554,590,589,624,593,628,625,659,
            90,1589,902,17,16,19,520,519,44,523,
            555,554,590,589,624,593,628,625,659,74,
            88,2452,711,729,647,1120,1097,197,1562,986,
            17,16,19,520,33,214,958,17,16,19,
            520,42,44,523,555,1013,287,2845,958,17,
            16,19,520,42,44,523,555,554,590,589,
            624,593,628,1176,64,391,1615,759,17,16,
            19,520,519,44,523,555,554,590,589,624,
            593,628,625,659,74,88,2452,1537,729,564,
            1135,1157,2449,2758,958,17,16,19,520,519,
            44,523,555,554,590,589,624,593,628,625,
            659,74,85,1510,846,17,16,19,520,519,
            44,523,555,554,590,589,624,593,628,625,
            659,74,270,2509,846,17,16,19,520,519,
            44,523,555,554,590,589,624,593,628,625,
            659,74,270,2509,958,17,16,19,520,42,
            44,523,939,273,958,17,16,19,520,42,
            44,523,555,554,590,589,1110,274,1169,1107,
            802,1170,1177,273,1885,958,17,16,19,520,
            42,44,523,555,554,590,1111,274,986,17,
            16,19,520,32,1888,633,17,16,19,520,
            519,44,523,555,554,590,589,624,593,628,
            625,659,74,270,2509,958,17,16,19,520,
            42,44,523,555,554,590,589,624,593,1172,
            485,1112,272,958,17,16,19,520,42,44,
            523,555,1042,1181,275,958,17,16,19,520,
            42,44,523,555,1107,206,2973,2973,276,633,
            17,16,19,520,519,44,523,555,554,590,
            589,624,593,628,625,659,74,270,2509,958,
            17,16,19,520,42,44,523,555,554,590,
            589,624,1174,621,223,224,28,958,17,16,
            19,520,42,44,523,555,1109,2973,275,958,
            17,16,19,520,42,44,523,974,669,2973,
            473,598,276,728,17,16,19,520,519,44,
            523,555,554,590,589,624,593,628,625,659,
            74,88,222,130,729,291,639,2973,2973,2663,
            728,17,16,19,520,519,44,523,555,554,
            590,589,624,593,628,625,659,74,88,247,
            1564,729,2973,2973,473,2973,2899,728,17,16,
            19,520,519,44,523,555,554,590,589,624,
            593,628,625,659,74,88,226,1591,729,280,
            2973,473,473,2900,690,17,16,19,520,519,
            44,523,555,554,590,589,624,593,628,625,
            659,74,88,2737,18,729,567,696,2973,473,
            1926,690,17,16,19,520,519,44,523,555,
            554,590,589,624,593,628,625,659,74,88,
            247,1241,729,602,2973,473,2973,1927,728,17,
            16,19,520,519,44,523,555,554,590,589,
            624,593,628,625,659,74,88,1328,1699,729,
            2973,2973,967,473,2902,690,17,16,19,520,
            519,44,523,555,554,590,589,624,593,628,
            625,659,74,88,22,263,729,672,2973,473,
            473,1954,690,17,16,19,520,519,44,523,
            555,554,590,589,624,593,628,625,659,74,
            88,462,497,729,742,2973,473,1123,1980,690,
            17,16,19,520,519,44,523,555,554,590,
            589,624,593,628,625,659,74,88,532,230,
            729,777,2973,2973,2973,1981,690,17,16,19,
            520,519,44,523,555,554,590,589,624,593,
            628,625,659,74,88,475,475,729,952,2973,
            2973,2973,2426,577,17,16,19,520,519,44,
            523,555,554,590,589,624,593,628,625,659,
            74,516,1863,441,17,16,19,520,519,44,
            523,555,554,590,589,624,593,628,625,659,
            74,691,1415,2841,764,233,247,958,17,16,
            19,520,42,44,975,958,17,16,19,520,
            42,44,978,2538,133,234,690,17,16,19,
            520,519,44,523,555,554,590,589,624,593,
            628,625,659,74,29,2973,473,473,21,958,
            17,16,19,520,519,44,523,555,554,590,
            589,624,593,628,625,659,74,88,268,269,
            729,2973,2973,304,2973,761,958,17,16,19,
            520,519,44,523,555,554,590,589,624,593,
            628,625,659,74,88,1018,246,729,1048,2973,
            2973,2973,1175,958,17,16,19,520,42,38,
            2973,1642,958,17,16,19,520,519,44,523,
            555,554,590,589,624,593,628,625,659,74,
            88,2973,271,729,1773,27,473,473,1669,958,
            17,16,19,520,519,44,523,555,554,590,
            589,624,593,628,625,659,74,88,637,707,
            729,2973,2973,473,473,1670,958,17,16,19,
            520,519,44,523,555,554,590,589,624,593,
            628,625,659,74,88,2911,847,729,2973,2973,
            473,473,1696,958,17,16,19,520,519,44,
            523,555,554,590,589,624,593,628,625,659,
            74,88,882,917,729,2973,2973,2973,1164,1953,
            874,17,16,19,520,519,44,523,555,554,
            590,589,624,593,628,625,659,74,656,2811,
            790,17,16,19,520,519,44,523,555,554,
            590,589,624,593,628,625,659,74,270,605,
            17,16,19,520,519,44,523,555,554,590,
            589,624,593,628,625,659,74,831,904,2973,
            2973,2973,247,2973,2973,2973,212,2973,475,165,
            790,17,16,19,520,519,44,523,555,554,
            590,589,624,593,628,625,659,74,270,958,
            17,16,19,520,519,44,523,555,554,590,
            589,624,593,628,625,659,74,84,958,17,
            16,19,520,42,37,2423,2973,2973,2973,277,
            958,17,16,19,520,519,44,523,555,554,
            590,589,624,593,628,625,659,74,83,958,
            17,16,19,520,519,44,523,555,554,590,
            589,624,593,628,625,659,74,82,958,17,
            16,19,520,519,44,523,555,554,590,589,
            624,593,628,625,659,74,81,958,17,16,
            19,520,519,44,523,555,554,590,589,624,
            593,628,625,659,74,80,958,17,16,19,
            520,519,44,523,555,554,590,589,624,593,
            628,625,659,74,79,958,17,16,19,520,
            519,44,523,555,554,590,589,624,593,628,
            625,659,74,78,958,17,16,19,520,519,
            44,523,555,554,590,589,624,593,628,625,
            659,74,77,958,17,16,19,520,519,44,
            523,555,554,590,589,624,593,628,625,659,
            74,76,958,17,16,19,520,519,44,523,
            555,554,590,589,624,593,628,625,659,74,
            75,958,17,16,19,520,519,44,523,555,
            554,590,589,624,593,628,625,659,74,866,
            958,17,16,19,520,519,44,523,555,554,
            590,589,624,593,628,625,659,74,89,958,
            17,16,19,520,519,44,523,555,554,590,
            589,624,593,628,625,659,74,30,958,17,
            16,19,520,42,44,523,555,554,590,589,
            624,593,628,625,659,90,958,17,16,19,
            520,42,44,523,555,554,590,589,624,593,
            628,625,659,90,958,17,16,19,520,42,
            36,958,17,16,19,520,42,34,48,475,
            201,2973,662,17,16,19,520,42,35,2973,
            2973,2973,2973,615,331,183,473,2639,202,958,
            17,16,19,520,42,44,523,555,554,590,
            589,624,593,628,625,659,90,141,987,764,
            205,48,394,183,240,304,2562,1138,936,139,
            143,621,223,224,264,48,2973,2579,2593,133,
            2643,1006,2561,141,971,141,2800,2452,246,227,
            135,901,190,197,2769,139,143,139,143,2450,
            2606,2636,795,2510,49,2579,492,136,137,138,
            2561,2424,289,2675,240,2973,2973,1794,135,1137,
            1029,194,134,296,2973,2078,1587,2450,2606,2636,
            370,223,322,2424,289,136,137,138,288,1794,
            451,102,2973,142,551,223,224,264,256,884,
            663,1138,370,223,322,140,144,726,290,2751,
            288,319,266,253,2973,2973,2973,1746,255,129,
            2749,476,850,227,285,287,318,2455,551,223,
            224,264,1138,319,1480,2504,586,223,322,378,
            183,726,663,2973,141,884,286,287,2973,671,
            279,2807,1643,256,267,162,139,143,2973,2973,
            2080,1478,142,264,2808,128,255,1481,2763,2561,
            2492,266,1745,971,140,144,990,146,231,662,
            17,16,19,520,42,35,2973,2634,2648,141,
            264,551,223,224,534,1745,1014,663,2973,170,
            726,139,143,170,2835,2830,2816,256,48,2840,
            162,1643,2973,884,551,223,224,141,2452,141,
            1331,241,2452,884,197,2492,1745,2849,197,139,
            143,139,143,109,2973,764,2973,2808,2973,2882,
            48,48,2561,131,2675,551,223,224,2675,2973,
            145,1480,193,198,2616,196,193,450,2458,2734,
            2736,660,2458,2973,2890,958,17,16,19,520,
            42,35,958,17,16,19,520,42,47,958,
            17,16,19,520,42,46,958,17,16,19,
            520,42,45,256,170,116,170,818,17,16,
            19,520,42,43,2973,48,884,2973,48,937,
            2973,175,1745,2452,2452,2452,48,2973,884,197,
            2496,197,2973,175,2809,2973,127,1264,2452,582,
            2452,551,223,224,2496,1284,2496,663,1618,2675,
            2973,2675,2452,990,2973,252,2973,193,2496,193,
            163,2973,765,2458,835,2458,2973,2973,2423,251,
            52,251,1745,1534,694,1836,694,52,491,582,
            2562,304,2973,251,2973,2973,1074,1836,694,2452,
            2973,551,223,224,2973,2496,2452,1331,2973,904,
            1089,142,2496,2973,246,1104,2973,211,1697,141,
            1044,206,2973,140,144,827,2973,695,936,48,
            251,139,143,141,1534,694,2634,251,141,2889,
            199,1837,694,142,2409,139,143,2973,2452,904,
            139,143,2049,2891,2449,140,144,211,2893,796,
            223,488,1059,2973,1153,2973,264,870,936,1119,
            879,1134,2973,1149,2973,294,726,2973,2973,884,
            884,2973,884,2452,2973,142,2973,259,292,2449,
            195,884,142,2973,142,2973,142,140,144,1645,
            1672,232,1726,2973,140,144,140,144,140,144,
            295,113,2973,2973,2973,2973,2973,2973,2973,2973,
            2973,2973,2973,2884,2973,0,1,3194,0,148,
            2975,0,2982,1,0,1,2976,0,1,2975,
            0,1,834,0,9,11,0,1,3229,0,
            110,812,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,0,0,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,0,0,49,
            50,0,4,53,54,55,56,57,58,59,
            60,61,62,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,23,24,25,26,
            27,43,64,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            81,82,49,50,63,0,53,54,55,56,
            57,58,59,60,61,62,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,0,1,30,31,32,33,
            34,35,36,37,38,39,40,41,42,0,
            44,45,46,4,0,49,50,3,63,53,
            54,55,56,57,58,59,60,61,62,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,0,0,1,2,3,5,
            6,7,43,9,10,11,12,13,14,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,0,44,45,46,4,63,49,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,0,0,1,2,0,5,
            6,7,73,9,10,11,12,13,14,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,0,44,45,46,0,0,49,0,
            0,5,6,7,5,6,7,65,0,1,
            2,3,4,0,17,0,8,2,5,6,
            7,21,73,15,16,17,18,19,20,21,
            22,23,24,25,26,27,21,0,30,0,
            0,2,2,3,76,5,6,7,8,9,
            10,11,12,13,14,0,1,49,50,0,
            21,53,54,55,56,57,58,59,60,61,
            62,31,32,33,34,35,36,37,38,39,
            40,41,42,28,44,45,46,0,29,2,
            0,0,5,6,7,8,9,10,11,12,
            13,14,0,0,0,2,15,16,5,6,
            7,8,9,10,11,12,13,14,31,32,
            33,34,35,36,37,38,39,40,41,42,
            0,44,45,46,31,32,33,34,35,36,
            37,38,39,40,41,42,0,44,45,46,
            0,1,2,3,4,5,6,7,8,9,
            0,1,2,73,4,15,16,17,18,19,
            20,0,22,23,24,25,26,27,0,77,
            0,3,0,0,0,0,4,3,28,0,
            5,6,7,47,9,10,11,12,13,14,
            0,0,1,2,3,5,6,7,48,9,
            10,11,12,13,14,65,31,32,33,34,
            35,36,37,38,39,40,41,42,0,28,
            48,31,32,33,34,35,36,37,38,39,
            40,41,42,0,64,67,68,64,5,6,
            7,0,9,10,11,12,13,14,69,70,
            71,72,0,83,84,85,86,87,88,89,
            90,91,92,0,31,32,33,34,35,36,
            37,38,39,40,41,42,0,1,2,3,
            4,0,0,2,8,9,4,69,70,71,
            72,15,16,17,18,19,20,0,22,23,
            24,25,26,27,0,1,2,3,0,5,
            6,7,8,50,0,1,2,3,21,15,
            16,17,18,19,20,43,22,23,24,25,
            26,27,0,1,2,3,4,29,0,0,
            8,65,28,5,6,7,0,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            21,0,1,2,3,4,0,1,0,8,
            0,1,0,0,4,43,15,16,17,18,
            19,20,0,22,23,24,25,26,27,0,
            1,2,3,4,28,0,28,8,28,0,
            5,6,7,21,15,16,17,18,19,20,
            0,22,23,24,25,26,27,0,48,2,
            0,1,76,51,52,8,65,0,1,2,
            3,4,64,0,66,8,0,48,18,19,
            4,0,15,16,17,18,19,20,28,22,
            23,24,25,26,27,0,0,30,0,1,
            2,3,4,0,0,29,8,4,69,70,
            71,72,0,15,16,17,18,19,20,43,
            22,23,24,25,26,27,66,77,30,0,
            1,2,3,30,0,0,1,8,4,0,
            80,0,47,2,15,16,17,18,19,20,
            21,22,23,24,25,26,27,0,1,2,
            3,0,21,29,30,8,0,1,29,3,
            74,75,15,16,17,18,19,20,21,22,
            23,24,25,26,27,0,1,2,3,0,
            1,0,3,8,28,4,0,1,0,1,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,0,1,2,3,28,0,0,
            29,8,4,0,28,0,28,4,15,16,
            17,18,19,20,43,22,23,24,25,26,
            27,0,1,2,3,0,1,29,30,8,
            0,0,1,30,0,1,15,16,17,18,
            19,20,0,22,23,24,25,26,27,0,
            1,2,3,28,0,0,0,8,2,4,
            0,0,28,21,15,16,17,18,19,20,
            0,22,23,24,25,26,27,0,1,2,
            3,51,52,78,0,8,0,3,0,1,
            4,21,15,16,17,18,19,20,43,22,
            23,24,25,26,27,0,1,2,3,0,
            1,2,0,8,0,29,28,3,0,63,
            15,16,17,18,19,20,0,22,23,24,
            25,26,27,0,48,74,75,0,5,6,
            7,4,9,10,11,12,13,14,0,0,
            0,67,68,5,6,7,47,9,10,11,
            12,13,14,0,15,16,29,0,5,6,
            7,4,9,10,11,12,13,14,0,0,
            43,67,68,5,6,7,0,9,10,11,
            12,13,14,0,15,16,29,47,5,6,
            7,0,9,10,11,12,13,14,0,0,
            43,2,0,5,6,7,0,9,10,11,
            12,13,14,0,0,1,0,1,5,6,
            7,0,9,10,11,12,13,14,0,0,
            0,29,0,5,6,7,4,9,10,11,
            12,13,14,0,0,0,0,0,5,6,
            7,4,9,10,11,12,13,14,0,0,
            0,29,0,5,6,7,0,9,10,11,
            12,13,14,0,28,2,47,17,0,0,
            48,51,52,21,78,0,0,21,2,0,
            0,47,2,0,0,48,51,52,0,21,
            79,0,0,2,0,0,0,0,0,0,
            51,52,66,0,0,0,0,0,0,0,
            0,0,0,0,0,0,47,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            2973,1022,2961,2705,1214,1,1,1,2955,1,
            1,1,1,1,1,2394,2118,2401,1348,1179,
            1114,2494,1893,383,2985,2986,2987,2988,164,72,
            2983,1,1,1,1,1,1,1,1,1,
            1,1,1,2981,1,1,1,1,1,3070,
            764,1,2952,2539,1068,2585,838,392,730,366,
            799,1483,768,9,2964,2964,2964,2964,2964,2964,
            2964,2964,2964,2964,2964,2964,2964,2964,2964,2964,
            2964,2964,2964,2964,2964,2964,2964,2964,2964,2964,
            2964,2981,2030,2964,2964,2964,2964,2964,2964,2964,
            2964,2964,2964,2964,2964,2964,2964,2964,2964,2964,
            1198,1866,2964,2964,3223,1,2964,2964,2964,2964,
            2964,2964,2964,2964,2964,2964,2973,1022,2961,2705,
            2984,1,1,1,2955,1,1,1,1,1,
            1,2394,2118,2401,1348,1179,1114,2494,1893,383,
            2985,2986,2987,2988,2973,1217,2983,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,192,1,3070,764,1196,3222,2539,
            1068,2585,838,392,730,366,799,1483,768,2973,
            2647,2946,1,2984,1,1,1,1,1,1,
            1,1,1,1,153,2973,2647,3194,2548,3188,
            3189,3190,192,3141,3142,3140,3191,3143,3139,2983,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2973,1,1,1,2978,3223,3263,2973,
            2647,2946,1,2984,1,1,1,1,1,1,
            1,1,1,1,157,1,2647,3194,66,3188,
            3189,3190,284,3141,3142,3140,3191,3143,3139,2983,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2973,1,1,1,242,64,3263,243,
            224,1,1,1,1,1,1,2977,2973,1022,
            834,2705,2984,2973,1335,2973,2976,3163,3188,3189,
            3190,228,283,2394,2118,2401,1348,1179,1114,2494,
            1893,383,2985,2986,2987,2988,2408,2973,2983,2973,
            2973,3163,2975,1196,1314,3188,3189,3190,2976,3141,
            3142,3140,3191,3143,3139,2973,2457,3070,764,248,
            2451,2539,1068,2585,838,392,730,366,799,1483,
            768,3145,3150,3149,3147,3148,3146,3151,3152,3144,
            3153,3154,3155,1753,1330,481,446,148,2735,2949,
            2973,51,3188,3189,3190,2976,3141,3142,3140,3191,
            3143,3139,68,2973,2973,2975,1805,1797,3188,3189,
            3190,2976,3141,3142,3140,3191,3143,3139,3145,3150,
            3149,3147,3148,3146,3151,3152,3144,3153,3154,3155,
            2973,1330,481,446,3145,3150,3149,3147,3148,3146,
            3151,3152,3144,3153,3154,3155,2,1330,481,446,
            2973,1022,2975,2619,2978,3188,3189,3190,2976,2301,
            1,2530,2946,2945,2980,2394,2118,2401,1348,1179,
            1114,2973,1893,383,2985,2986,2987,2988,48,1439,
            42,2726,2973,213,2973,147,2980,1196,1753,59,
            3188,3189,3190,101,3141,3142,3140,3191,3143,3139,
            148,254,2530,3194,1,3188,3189,3190,2979,3141,
            3142,3140,3191,3143,3139,2977,3145,3150,3149,3147,
            3148,3146,3151,3152,3144,3153,3154,3155,61,1753,
            2979,3145,3150,3149,3147,3148,3146,3151,3152,3144,
            3153,3154,3155,149,2282,2719,2712,1133,3188,3189,
            3190,2973,3141,3142,3140,3191,3143,3139,1457,1405,
            1393,1186,2973,2263,2244,2225,2206,2187,2149,2168,
            2130,2099,1244,2973,3145,3150,3149,3147,3148,3146,
            3151,3152,3144,3153,3154,3155,1,1022,2975,2412,
            2978,210,2973,3176,2976,2010,2982,1457,1405,1393,
            1186,2394,2118,2401,1348,1179,1114,2973,1893,383,
            2985,2986,2987,2988,2973,1022,2975,2705,87,3188,
            3189,3190,2976,1329,260,2530,3194,2548,2494,2394,
            2118,2401,1348,1179,1114,2981,1893,383,2985,2986,
            2987,2988,1,1022,2975,2705,2982,2320,244,189,
            2976,2977,1753,3188,3189,3190,67,2394,2118,2401,
            1348,1179,1114,2748,1893,383,2985,2986,2987,2988,
            2680,2973,1022,2975,2705,2978,219,2457,2973,2976,
            1,2589,54,2973,2980,2981,2394,2118,2401,1348,
            1179,1114,188,1893,383,2985,2986,2987,2988,2973,
            1022,2975,2705,2980,1753,245,2429,2976,1753,60,
            3188,3189,3190,2681,2394,2118,2401,1348,1179,1114,
            69,1893,383,2985,2986,2987,2988,2973,2979,2975,
            31,1816,1314,1304,1469,2976,2977,2973,1022,2975,
            2705,2984,3251,2973,1403,2976,2973,2979,2998,2999,
            2982,2973,2394,2118,2401,1348,1179,1114,1839,1893,
            383,2985,2986,2987,2988,2973,62,2983,1,1022,
            2958,2705,2984,1,2973,905,2955,2984,1457,1405,
            1393,1186,2973,2394,2118,2401,1348,1179,1114,2981,
            1893,383,2985,2986,2987,2988,417,1439,2983,2973,
            1022,2975,2705,2983,2973,2973,1902,2976,2984,86,
            379,2973,3073,3176,2394,2118,2401,1348,1179,1114,
            2748,1893,383,2985,2986,2987,2988,2973,1022,2975,
            2705,2973,2465,2733,2983,2976,258,2589,2320,1,
            1121,331,2394,2118,2401,1348,1179,1114,2756,1893,
            383,2985,2986,2987,2988,1,1022,2975,2705,260,
            2589,2973,2548,2976,1753,2982,219,2541,220,2457,
            2394,2118,2401,1348,1179,1114,2748,1893,383,2985,
            2986,2987,2988,1,1022,2975,2705,1753,2973,2973,
            940,2976,2984,2973,1753,70,1753,2984,2394,2118,
            2401,1348,1179,1114,2981,1893,383,2985,2986,2987,
            2988,1,1022,2958,2705,261,2572,2783,2983,2955,
            58,2973,1929,2983,220,2541,2394,2118,2401,1348,
            1179,1114,208,1893,383,2985,2986,2987,2988,2973,
            1087,2975,2705,1753,2973,1,1,2976,2967,191,
            2973,63,1753,2745,2394,2118,2401,1348,1179,1114,
            224,1893,383,2985,2986,2987,2988,2973,1022,2975,
            2705,1304,1469,1375,50,2976,2973,2726,262,2572,
            2980,229,2394,2118,2401,1348,1179,1114,191,1893,
            383,2985,2986,2987,2988,2973,1152,2975,2705,1,
            2647,3194,2973,2976,49,2339,1753,2726,2973,3223,
            2394,2118,2401,1348,1179,1114,2973,1893,383,2985,
            2986,2987,2988,161,2979,1121,331,2973,3188,3189,
            3190,2982,3141,3142,3140,3191,3143,3139,151,53,
            2973,2719,2712,3188,3189,3190,2358,3141,3142,3140,
            3191,3143,3139,155,1805,1797,1355,2973,3188,3189,
            3190,2982,3141,3142,3140,3191,3143,3139,159,52,
            2981,2719,2712,3188,3189,3190,2973,3141,3142,3140,
            3191,3143,3139,160,1805,1797,1419,427,3188,3189,
            3190,2973,3141,3142,3140,3191,3143,3139,156,2973,
            2981,3105,209,3188,3189,3190,71,3141,3142,3140,
            3191,3143,3139,152,2973,1956,2973,1983,3188,3189,
            3190,110,3141,3142,3140,3191,3143,3139,158,2973,
            57,4460,2973,3188,3189,3190,2980,3141,3142,3140,
            3191,3143,3139,154,2973,56,2973,1,3188,3189,
            3190,2980,3141,3142,3140,3191,3143,3139,150,55,
            65,1332,1,3188,3189,3190,41,3141,3142,3140,
            3191,3143,3139,2973,2429,3176,1049,1335,2973,200,
            2979,1304,1469,2494,1375,2973,2973,2756,3230,2973,
            2973,3072,3255,2973,2973,2979,1304,1469,2973,2756,
            2970,209,2973,2008,2973,2973,2973,2973,2973,2973,
            1304,1469,1403,2973,2973,2973,2973,2973,2973,2973,
            2973,2973,2973,2973,2973,2973,2376
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            342,1,152,3,371,8,504,369,342,412,
            424,503,503,424,503,424,408,371,432,440,
            41,107,378,247,123,371,412,424,43,289,
            43,289,424,43,337,424,424,424,424,412,
            432,3,176,371,380,250,334,176,183,139,
            26,26,26,26,26,318,26,26,26,63,
            194,199,197,205,201,208,207,210,209,211,
            124,153,504,103,110,41,100,289,289,289,
            289,337,337,424,424,424,176,432,107,440,
            435,153,439,176,334,26,247,26,26,26,
            26,26,26,26,26,26,26,26,440,440,
            214,472,139,139,405,405,270,26,26,26,
            26,26,26,26,26,26,26,26,26,26,
            26,26,26,26,26,26,26,123,24,104,
            104,406,373,373,11,373,373,103,104,66,
            219,26,219,369,153,371,225,371,378,289,
            315,56,289,289,315,337,117,116,117,432,
            41,437,375,380,250,26,334,318,225,26,
            41,375,440,440,439,334,197,197,194,194,
            201,201,199,199,199,199,207,205,209,208,
            219,210,121,104,104,137,26,180,26,26,
            219,11,371,478,223,100,380,315,58,315,
            117,315,26,406,435,378,440,443,334,334,
            223,472,443,182,504,26,26,24,24,104,
            440,373,440,440,223,439,103,26,216,315,
            437,380,440,223,270,104,270,104,24,11,
            26,11,11,117,244,406,58,26,440,117,
            11,440,270,11,440,270,270,104,440,122,
            221,225,406,26,243,221,11,11,440,11,
            11,440,11,440,270,104,11,334,11,11,
            11,11,440,11
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            73,0,21,64,29,30,4,28,1,0,
            54,56,21,60,62,57,50,58,59,55,
            53,61,49,30,4,1,24,25,26,27,
            2,8,18,19,17,15,16,22,23,20,
            3,0,10,5,11,12,13,6,9,14,
            7,28,29,48,21,30,4,3,47,2,
            1,0,65,48,43,47,66,80,18,19,
            17,3,15,16,67,68,51,52,69,70,
            71,72,74,75,76,77,78,81,82,83,
            84,85,86,87,88,89,90,91,92,64,
            28,1,29,30,4,0,47,28,1,29,
            48,30,4,64,0,64,43,4,29,0,
            73,79,43,54,56,21,60,62,57,50,
            58,59,55,53,61,49,30,4,18,19,
            17,15,16,22,23,20,1,24,25,26,
            27,3,10,31,32,44,11,33,12,34,
            35,13,36,37,9,45,14,46,38,39,
            40,41,42,2,8,5,6,7,0,50,
            0,21,64,83,84,85,86,87,89,88,
            90,91,92,3,67,68,15,16,52,51,
            69,70,71,72,74,75,17,76,77,78,
            43,81,82,65,48,29,30,4,47,0,
            43,4,28,66,1,24,25,26,27,2,
            8,18,19,17,3,15,16,22,23,20,
            21,0,64,28,66,0,65,4,9,5,
            6,7,18,19,17,3,15,16,22,23,
            20,1,2,8,24,25,26,27,0,1,
            24,25,26,27,2,8,18,19,17,3,
            15,16,22,23,20,48,4,0,10,31,
            5,32,44,11,33,12,34,35,13,6,
            36,37,9,45,14,46,38,39,7,40,
            41,42,2,8,43,4,0,18,19,17,
            3,15,16,22,23,20,1,2,8,24,
            25,26,27,65,4,0,29,2,43,4,
            0,73,10,31,5,32,44,11,33,12,
            34,35,13,6,36,37,9,45,14,46,
            38,39,7,40,41,42,8,49,30,4,
            3,2,1,0,3,1,28,48,4,10,
            31,5,32,44,11,33,12,34,35,13,
            6,36,37,9,45,14,46,38,39,7,
            40,41,42,63,8,2,0,8,44,45,
            46,39,31,36,34,35,33,32,37,38,
            40,41,42,47,30,14,11,9,10,13,
            12,5,6,7,3,2,28,1,29,48,
            4,0,10,31,5,32,44,11,33,12,
            34,35,13,6,36,37,9,45,14,46,
            38,39,7,40,41,42,2,8,63,3,
            0,48,4,3,1,28,0,10,31,5,
            32,44,11,33,12,34,35,13,6,36,
            37,9,45,14,46,38,39,7,40,41,
            42,8,2,21,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            75,108,61,108,113,16,134,55,84,65,
            66,26,26,66,38,66,101,87,5,59,
            122,16,68,47,42,97,104,105,108,5,
            108,5,105,108,5,105,66,66,66,65,
            5,108,20,82,4,11,49,20,108,28,
            12,12,12,12,12,48,12,12,12,108,
            108,108,108,108,108,108,108,108,108,108,
            1,5,134,36,108,122,16,5,109,5,
            109,5,38,105,105,105,20,107,16,59,
            80,62,108,20,49,12,51,12,12,12,
            12,12,12,12,12,12,12,12,59,59,
            108,94,28,28,18,18,58,12,12,12,
            12,12,12,12,12,12,12,12,12,12,
            12,12,12,12,12,12,12,7,35,36,
            36,14,108,108,22,108,108,108,36,108,
            108,12,108,55,127,113,12,124,68,109,
            43,55,71,109,43,38,43,108,108,107,
            122,16,92,4,52,12,49,48,12,12,
            122,93,59,59,59,49,108,108,108,108,
            108,108,108,108,108,108,108,108,108,108,
            108,108,108,36,36,32,12,108,12,12,
            108,22,113,131,5,16,116,43,113,43,
            43,43,12,38,81,68,59,120,49,49,
            5,95,120,108,108,12,12,35,35,36,
            59,108,59,59,11,59,36,12,108,43,
            16,4,59,11,58,36,58,36,35,22,
            12,22,22,43,89,108,113,12,59,43,
            22,59,58,22,59,58,58,36,59,108,
            40,12,108,12,45,40,22,22,59,22,
            22,59,22,59,58,36,22,49,22,22,
            22,22,59,22
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            34,4,86,25,19,0,34,25,37,71,
            19,4,0,87,0,41,0,1,0,61,
            0,34,4,28,0,76,0,19,45,4,
            0,19,25,46,4,20,0,60,0,4,
            63,19,37,0,81,0,19,4,42,0,
            42,4,23,0,20,19,0,4,22,0,
            47,67,66,65,48,43,0,19,22,0,
            19,45,53,0,93,25,40,19,0,19,
            51,38,0,25,19,82,40,0,92,91,
            0,38,22,19,51,0,19,40,90,0,
            65,66,67,48,35,36,23,0,59,19,
            45,0,38,19,0,89,19,25,0,19,
            25,47,0,40,80,0,25,19,94,0,
            19,25,46,24,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            2,85,9,96,51,67,79,95,72,47,
            58,63,66,75,10,11,8,6,7,71,
            3,12,13,86,87,88,89,1,42,93,
            50,55,59,64,65,69,70,77,78,81,
            82,83,92,57,73,76,29,91,99,80,
            16,17,48,49,52,53,54,60,61,62,
            68,74,30,31,90,4,14,15,18,19,
            20,21,84,22,23,24,25,26,56,5,
            27,28,32,33,34,35,36,37,38,39,
            40,41,43,44,45,94,97,98
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            100,0,0,106,111,112,113,114,115,116,
            117,118,119,120,121,122,123,110,0,104,
            125,102,142,128,134,105,124,127,0,0,
            0,0,0,129,141,143,103,160,0,162,
            163,101,140,149,154,132,161,144,150,171,
            173,126,153,164,170,136,148,0,152,157,
            169,172,174,108,145,146,147,159,165,109,
            131,135,137,138,139,151,156,0,158,166,
            177,179,0,0,107,130,133,155,167,168,
            175,176,178,180,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            164,164,38,44,70,95,101,70,134,24,
            54,62,76,107,112,76,15,31,50,85,
            143,160,184,188,15,147,1,10,35,59,
            67,117,122,192,89,154,125,154,154,6,
            81
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            22,19,4,4,22,22,22,19,140,29,
            4,29,22,22,22,19,22,29,4,83,
            22,29,29,4,19,151,4,13,29,4,
            29,120,120,29,92,157,128,178,171,8,
            83
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            4,4,41,41,66,65,65,66,31,51,
            41,40,66,65,65,66,49,51,41,53,
            24,5,4,4,49,17,81,63,51,41,
            38,74,73,3,53,6,32,4,4,91,
            53
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            43,29,65,65,43,43,43,29,79,48,
            65,48,43,43,43,29,43,48,65,30,
            43,48,48,65,29,47,65,24,48,65,
            48,14,14,48,2,48,50,48,48,64,
            30
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static char scopeStateSet[] = {
            17,17,143,143,157,157,157,157,98,150,
            143,161,157,157,157,157,4,150,143,11,
            119,17,17,17,4,47,1,6,150,143,
            161,158,158,17,11,20,98,17,17,2,
            11
        };
    };
    public final static char scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            150,28,0,101,0,190,0,31,0,189,
            117,0,150,0,168,117,21,0,42,103,
            0,103,0,152,117,1,149,0,102,0,
            152,117,1,0,160,1,0,116,9,159,
            117,28,0,116,159,117,9,28,0,116,
            9,28,0,116,159,117,28,0,116,28,
            0,152,117,1,136,0,142,1,0,176,
            117,21,158,44,0,176,117,21,44,0,
            143,0,104,0,186,117,143,0,117,143,
            0,155,104,0,156,117,21,174,46,0,
            156,117,21,174,45,0,156,117,21,46,
            0,156,117,21,45,0,164,141,0,140,
            0,163,141,0,126,57,0,80,2,105,
            102,104,0,126,120,124,1,60,0,56,
            127,0,184,117,21,0,124,82,114,0,
            29,123,0,162,1,0,102,112,0,162,
            1,20,0,168,117,21,120,162,1,0,
            102,3,0,109,42,103,0,102,3,0,
            109,103,0,183,1,102,0,124,28,102,
            0,124,1,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1478,2509,0,2080,2030,1419,1355,1284,1264,0,
            2736,2458,2734,2643,2639,0,1348,1179,1114,2737,
            2619,1198,1439,1375,1335,1314,1457,1405,1393,1186,
            1121,331,1805,1797,1469,1304,2726,2719,2712,2705,
            2401,2412,2394,2118,1893,383,1726,1419,2429,2080,
            1355,1699,1672,1645,2376,1983,1618,1591,1564,1284,
            2358,1264,1537,1510,1049,2339,1133,1956,1929,1902,
            1217,2320,2301,2049,2030,1068,1483,1866,1839,1816,
            1152,1087,2282,2263,2244,2225,2206,2187,2168,2149,
            2130,2099,1244,1773,1022,2010,1753,987,952,917,
            882,847,812,777,742,707,672,637,602,567,
            532,497,462,427,392,344,296,0,987,952,
            917,882,847,812,777,742,707,672,637,602,
            567,532,497,462,2884,427,392,344,1481,296,
            319,0,971,796,726,621,586,551,370,2562,
            2423,2589,2530,2845,2496,0,2579,2452,2424,0,
            2783,2423,2616,2593,2530,2841,2733,2496,1415,2538,
            1006,2504,2647,2482,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,182,117,138,1,136,167,123,191,146,
            163,46,45,164,44,165,141,145,3,142,
            117,136,1,28,21,117,141,141,174,21,
            174,21,141,158,21,141,165,164,163,146,
            3,138,117,145,117,9,116,117,103,1,
            20,23,22,16,15,3,17,19,18,102,
            105,107,106,109,108,111,110,113,112,114,
            117,188,167,170,142,117,136,21,117,21,
            117,21,117,141,141,141,117,159,136,152,
            123,117,153,117,116,3,159,92,91,90,
            88,89,87,86,85,84,83,64,162,124,
            119,143,1,1,80,66,1,28,68,67,
            3,51,52,16,15,75,74,72,71,70,
            69,76,17,78,77,82,81,184,61,53,
            55,59,58,50,57,62,60,119,125,2,
            56,54,132,123,117,29,64,145,1,117,
            156,143,157,117,156,117,176,158,177,159,
            117,149,1,29,159,9,116,3,120,29,
            117,1,162,162,183,124,106,106,105,105,
            108,108,107,107,107,107,110,109,112,111,
            124,113,4,124,185,1,1,126,1,1,
            150,47,117,192,21,136,117,156,117,156,
            176,29,64,29,145,1,160,117,116,116,
            21,145,117,120,120,29,47,144,118,124,
            124,50,124,124,117,187,186,47,142,29,
            149,117,152,117,118,124,118,124,118,120,
            1,120,120,168,117,29,29,47,152,168,
            120,124,118,120,124,118,118,124,124,126,
            29,189,66,28,190,29,120,120,124,120,
            120,124,120,124,118,120,79,150,120,120,
            120,120,124,120
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",//$NON-NLS-1$
            "[",//$NON-NLS-1$
            "(",//$NON-NLS-1$
            "{",//$NON-NLS-1$
            ".",//$NON-NLS-1$
            "->",//$NON-NLS-1$
            "++",//$NON-NLS-1$
            "--",//$NON-NLS-1$
            "&",//$NON-NLS-1$
            "*",//$NON-NLS-1$
            "+",//$NON-NLS-1$
            "-",//$NON-NLS-1$
            "~",//$NON-NLS-1$
            "!",//$NON-NLS-1$
            "/",//$NON-NLS-1$
            "%",//$NON-NLS-1$
            ">>",//$NON-NLS-1$
            "<<",//$NON-NLS-1$
            "<",//$NON-NLS-1$
            ">",//$NON-NLS-1$
            "<=",//$NON-NLS-1$
            ">=",//$NON-NLS-1$
            "==",//$NON-NLS-1$
            "!=",//$NON-NLS-1$
            "^",//$NON-NLS-1$
            "|",//$NON-NLS-1$
            "&&",//$NON-NLS-1$
            "||",//$NON-NLS-1$
            "?",//$NON-NLS-1$
            ":",//$NON-NLS-1$
            "...",//$NON-NLS-1$
            "=",//$NON-NLS-1$
            "*=",//$NON-NLS-1$
            "/=",//$NON-NLS-1$
            "%=",//$NON-NLS-1$
            "+=",//$NON-NLS-1$
            "-=",//$NON-NLS-1$
            ">>=",//$NON-NLS-1$
            "<<=",//$NON-NLS-1$
            "&=",//$NON-NLS-1$
            "^=",//$NON-NLS-1$
            "|=",//$NON-NLS-1$
            ",",//$NON-NLS-1$
            "#",//$NON-NLS-1$
            "##",//$NON-NLS-1$
            "nl",//$NON-NLS-1$
            "$empty",//$NON-NLS-1$
            "auto",//$NON-NLS-1$
            "break",//$NON-NLS-1$
            "case",//$NON-NLS-1$
            "char",//$NON-NLS-1$
            "const",//$NON-NLS-1$
            "continue",//$NON-NLS-1$
            "default",//$NON-NLS-1$
            "do",//$NON-NLS-1$
            "double",//$NON-NLS-1$
            "else",//$NON-NLS-1$
            "enum",//$NON-NLS-1$
            "extern",//$NON-NLS-1$
            "float",//$NON-NLS-1$
            "for",//$NON-NLS-1$
            "goto",//$NON-NLS-1$
            "if",//$NON-NLS-1$
            "inline",//$NON-NLS-1$
            "int",//$NON-NLS-1$
            "long",//$NON-NLS-1$
            "register",//$NON-NLS-1$
            "restrict",//$NON-NLS-1$
            "return",//$NON-NLS-1$
            "short",//$NON-NLS-1$
            "signed",//$NON-NLS-1$
            "sizeof",//$NON-NLS-1$
            "static",//$NON-NLS-1$
            "struct",//$NON-NLS-1$
            "switch",//$NON-NLS-1$
            "typedef",//$NON-NLS-1$
            "union",//$NON-NLS-1$
            "unsigned",//$NON-NLS-1$
            "void",//$NON-NLS-1$
            "volatile",//$NON-NLS-1$
            "while",//$NON-NLS-1$
            "_Bool",//$NON-NLS-1$
            "_Complex",//$NON-NLS-1$
            "_Imaginary",//$NON-NLS-1$
            "EOF_TOKEN",//$NON-NLS-1$
            "identifier",//$NON-NLS-1$
            "integer",//$NON-NLS-1$
            "floating",//$NON-NLS-1$
            "charconst",//$NON-NLS-1$
            "stringlit",//$NON-NLS-1$
            "RightBracket",//$NON-NLS-1$
            "RightParen",//$NON-NLS-1$
            "RightBrace",//$NON-NLS-1$
            "SemiColon",//$NON-NLS-1$
            "Invalid",//$NON-NLS-1$
            "Completion",//$NON-NLS-1$
            "EndOfCompletion",//$NON-NLS-1$
            "SingleLineComment",//$NON-NLS-1$
            "MultiLineComment",//$NON-NLS-1$
            "ERROR_TOKEN",//$NON-NLS-1$
            "ident",//$NON-NLS-1$
            "]",//$NON-NLS-1$
            ")",//$NON-NLS-1$
            "}",//$NON-NLS-1$
            ";",//$NON-NLS-1$
            "expression",//$NON-NLS-1$
            "postfix_expression",//$NON-NLS-1$
            "argument_expression_list",//$NON-NLS-1$
            "type_name",//$NON-NLS-1$
            "initializer_list",//$NON-NLS-1$
            "assignment_expression",//$NON-NLS-1$
            "unary_expression",//$NON-NLS-1$
            "cast_expression",//$NON-NLS-1$
            "multiplicative_expression",//$NON-NLS-1$
            "additive_expression",//$NON-NLS-1$
            "shift_expression",//$NON-NLS-1$
            "relational_expression",//$NON-NLS-1$
            "equality_expression",//$NON-NLS-1$
            "AND_expression",//$NON-NLS-1$
            "exclusive_OR_expression",//$NON-NLS-1$
            "inclusive_OR_expression",//$NON-NLS-1$
            "logical_AND_expression",//$NON-NLS-1$
            "logical_OR_expression",//$NON-NLS-1$
            "conditional_expression",//$NON-NLS-1$
            "expression_in_statement",//$NON-NLS-1$
            "expression_list",//$NON-NLS-1$
            "constant_expression",//$NON-NLS-1$
            "statement",//$NON-NLS-1$
            "compound_statement",//$NON-NLS-1$
            "label_identifier",//$NON-NLS-1$
            "block_item_list",//$NON-NLS-1$
            "block_item",//$NON-NLS-1$
            "declaration",//$NON-NLS-1$
            "goto_identifier",//$NON-NLS-1$
            "declaration_specifiers",//$NON-NLS-1$
            "init_declarator_list",//$NON-NLS-1$
            "simple_declaration_specifiers",//$NON-NLS-1$
            "struct_or_union_declaration_sp" +//$NON-NLS-1$
            "ecifiers",//$NON-NLS-1$
            "enum_declaration_specifiers",//$NON-NLS-1$
            "typdef_name_declaration_specif" +//$NON-NLS-1$
            "iers",//$NON-NLS-1$
            "no_type_declaration_specifiers",//$NON-NLS-1$
            "storage_class_specifier",//$NON-NLS-1$
            "type_qualifier",//$NON-NLS-1$
            "function_specifier",//$NON-NLS-1$
            "type_specifier",//$NON-NLS-1$
            "struct_or_union_specifier",//$NON-NLS-1$
            "enum_specifier",//$NON-NLS-1$
            "typedef_name",//$NON-NLS-1$
            "init_declarator",//$NON-NLS-1$
            "declarator",//$NON-NLS-1$
            "initializer",//$NON-NLS-1$
            "struct_or_union_identifier",//$NON-NLS-1$
            "struct_declaration_list",//$NON-NLS-1$
            "struct_declaration",//$NON-NLS-1$
            "specifier_qualifier_list",//$NON-NLS-1$
            "struct_declarator_list",//$NON-NLS-1$
            "struct_declarator",//$NON-NLS-1$
            "enum_identifier",//$NON-NLS-1$
            "enumerator_list",//$NON-NLS-1$
            "enumerator",//$NON-NLS-1$
            "direct_declarator",//$NON-NLS-1$
            "pointer",//$NON-NLS-1$
            "function_direct_declarator",//$NON-NLS-1$
            "array_modifier",//$NON-NLS-1$
            "parameter_type_list",//$NON-NLS-1$
            "function_declarator",//$NON-NLS-1$
            "knr_direct_declarator",//$NON-NLS-1$
            "identifier_list",//$NON-NLS-1$
            "knr_function_declarator",//$NON-NLS-1$
            "type_qualifier_list",//$NON-NLS-1$
            "parameter_list",//$NON-NLS-1$
            "parameter_declaration",//$NON-NLS-1$
            "abstract_declarator",//$NON-NLS-1$
            "direct_abstract_declarator",//$NON-NLS-1$
            "designated_initializer",//$NON-NLS-1$
            "designation",//$NON-NLS-1$
            "designator_list",//$NON-NLS-1$
            "designator",//$NON-NLS-1$
            "external_declaration_list",//$NON-NLS-1$
            "external_declaration",//$NON-NLS-1$
            "declaration_list"//$NON-NLS-1$
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 49,
           SCOPE_UBOUND      = 40,
           SCOPE_SIZE        = 41,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 304,
           NT_OFFSET         = 98,
           LA_STATE_OFFSET   = 3268,
           MAX_LA            = 2147483647,
           NUM_RULES         = 295,
           NUM_NONTERMINALS  = 95,
           NUM_SYMBOLS       = 193,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 2482,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 73,
           EOLT_SYMBOL       = 73,
           ACCEPT_ACTION     = 2945,
           ERROR_ACTION      = 2973;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
