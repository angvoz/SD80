/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.upc;

public class UPCSizeofExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, UPCSizeofExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            1,4,1,3,3,3,1,3,3,1,
            3,3,1,3,3,3,3,1,3,3,
            1,3,1,3,1,3,1,3,1,3,
            1,5,1,3,3,3,3,3,3,3,
            3,3,3,3,1,1,2,1,0,1,
            3,1,1,1,1,1,1,1,1,3,
            4,3,2,4,1,2,1,1,1,2,
            5,7,5,1,0,7,5,9,8,3,
            2,2,2,3,2,4,2,2,2,2,
            2,1,1,1,1,2,1,2,2,2,
            1,2,2,1,2,2,1,2,2,1,
            2,2,1,3,1,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            5,5,6,6,2,2,2,1,0,1,
            2,4,2,1,1,1,3,1,1,2,
            3,6,7,1,0,1,3,1,3,1,
            1,1,1,1,1,3,1,1,1,1,
            1,3,1,2,2,1,5,3,1,3,
            5,1,3,1,3,2,4,3,5,4,
            6,6,3,5,1,1,2,3,4,1,
            2,1,3,1,1,3,2,1,1,1,
            1,2,1,2,3,1,1,1,3,1,
            2,2,2,3,4,5,1,7,3,0,
            0,1,1,3,3,4,1,1,2,3,
            2,3,2,1,0,1,2,1,1,1,
            1,1,2,4,3,6,2,4,1,1,
            1,1,1,2,2,2,1,1,2,1,
            1,1,3,3,2,1,3,2,3,2,
            3,2,2,11,10,10,9,10,9,9,
            8,10,9,9,8,9,8,8,7,10,
            9,9,8,9,8,8,7,1,1,-39,
            0,0,0,0,0,0,0,0,-72,0,
            0,0,0,0,0,0,0,0,0,-2,
            0,0,0,0,-4,-17,-32,-19,0,0,
            0,0,0,-126,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-186,0,-9,0,0,0,
            0,0,0,0,0,0,0,-5,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -36,0,-6,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-200,-33,0,0,-198,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-173,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-109,-212,-83,
            -84,-147,-37,-57,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-20,-21,0,0,0,0,0,0,0,
            0,-80,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-22,0,-75,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-135,-111,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-192,-23,0,0,
            0,0,-194,0,0,0,0,0,0,0,
            0,-74,0,0,0,0,0,0,0,0,
            0,0,0,-24,0,0,-77,0,-81,-70,
            -71,-25,0,0,0,0,-114,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-146,0,0,-3,0,0,0,
            0,0,0,0,0,-112,0,0,0,0,
            0,0,0,0,0,0,-118,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-115,0,-131,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-26,0,
            0,-30,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-59,0,0,0,0,0,0,0,0,
            -130,0,0,0,0,0,0,0,0,0,
            0,-60,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-61,0,0,0,0,0,0,0,0,
            -138,0,0,0,0,0,0,0,0,0,
            0,-62,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-63,0,0,0,0,0,0,0,0,
            -154,0,0,0,0,0,0,0,0,0,
            0,-64,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-65,0,0,0,0,0,0,0,0,
            -181,0,0,0,0,0,0,0,0,0,
            0,-66,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-67,0,0,0,0,0,0,0,0,
            -182,0,0,0,0,0,0,0,0,0,
            0,-68,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-69,0,0,0,0,0,0,0,0,
            -195,0,0,0,0,0,0,0,0,0,
            0,-152,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-153,0,0,0,0,0,0,0,0,
            -159,0,0,0,0,0,0,0,0,0,
            0,-176,0,0,0,0,0,0,0,0,
            -86,0,0,0,0,0,0,0,0,0,
            -191,0,0,0,0,0,0,0,0,-168,
            0,0,0,0,0,0,0,0,0,0,
            -193,0,-207,-204,0,-49,0,0,0,0,
            0,0,0,0,-197,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-201,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-27,0,0,0,-28,0,-50,0,
            0,0,0,0,0,0,0,-211,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-125,0,0,0,
            0,0,0,0,0,-175,0,0,0,0,
            0,0,0,0,0,-134,-133,-29,-215,-163,
            0,-89,-113,-90,0,-58,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-156,-117,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-108,0,-7,0,0,0,0,
            0,-76,0,0,0,0,-91,0,-92,-78,
            0,-157,0,0,0,0,0,0,0,0,
            -88,-177,0,0,0,0,0,0,0,-8,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-82,
            0,0,0,0,-54,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-188,
            0,0,0,0,0,-93,0,-206,0,0,
            0,0,0,-94,0,0,0,0,-55,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-110,-210,0,0,0,0,0,0,
            0,0,0,-95,-96,-97,0,-98,0,-51,
            0,0,0,0,0,0,0,0,-161,0,
            0,0,-15,0,0,0,0,0,0,0,
            0,0,0,0,0,-35,-120,-122,-99,-100,
            0,0,0,0,0,0,0,0,-52,0,
            0,0,0,0,0,0,0,-79,0,0,
            -53,0,0,0,0,0,0,0,0,-101,
            0,0,-167,-123,0,0,-127,0,0,0,
            0,0,0,0,-102,0,-103,0,0,0,
            0,-45,0,0,0,0,0,0,0,0,
            0,0,-46,0,0,0,0,0,0,0,
            0,0,0,0,-47,0,0,0,0,0,
            0,0,0,-85,0,-48,0,0,0,0,
            0,0,0,0,-203,0,-10,0,0,0,
            0,0,0,0,0,0,0,0,-104,-38,
            -105,-106,-107,0,0,0,0,-87,0,-40,
            0,0,0,0,0,0,0,-183,-164,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-140,0,-119,-121,-124,0,0,0,
            0,0,0,0,0,0,0,-41,0,0,
            0,0,0,0,0,-16,0,0,0,0,
            0,0,-139,0,0,0,0,0,0,-155,
            0,0,0,0,0,0,-142,-145,-148,-136,
            -149,-169,0,-170,-174,0,0,0,0,0,
            -11,0,0,0,0,0,0,-12,0,0,
            0,0,0,0,-13,0,0,0,0,0,
            0,-14,0,0,0,0,0,0,-18,-31,
            -42,0,0,0,0,0,0,0,0,-43,
            0,0,0,0,0,0,-44,0,0,0,
            0,0,0,-202,0,0,-214,-56,-179,-116,
            -1,0,0,0,-141,-129,0,0,0,0,
            0,0,-128,0,0,-196,0,0,-73,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-158,0,0,0,0,-143,0,0,
            0,0,0,-162,0,0,0,-166,0,-144,
            0,0,0,0,0,-171,0,-184,0,0,
            0,0,0,0,-172,0,0,0,0,0,
            -199,0,0,0,-208,0,-137,0,0,0,
            0,0,-185,0,0,0,0,0,0,-150,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-132,0,0,-34,0,0,0,
            0,0,0,0,0,0,0,0,0,-151,
            0,-165,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-160,0,0,0,
            0,0,0,0,-180,0,-178,0,0,0,
            -187,-189,-190,-205,0,0,-213,-209,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            86,9,20,20,25,25,28,28,70,70,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,53,53,71,
            71,5,5,5,5,5,5,5,5,5,
            5,6,6,7,7,7,7,8,8,8,
            10,10,10,11,11,11,11,11,12,12,
            12,13,13,14,14,15,15,16,16,17,
            17,18,18,19,19,19,19,19,19,19,
            19,19,19,19,19,98,48,42,87,87,
            74,74,43,99,99,99,99,99,99,99,
            100,100,100,101,101,106,106,107,107,102,
            102,103,103,103,109,109,104,104,104,104,
            105,105,105,105,105,108,108,26,26,26,
            26,26,30,30,30,80,80,75,75,75,
            75,76,76,76,77,77,77,78,78,78,
            79,79,79,110,110,111,111,112,31,33,
            33,33,33,33,54,56,56,56,56,56,
            56,56,56,56,56,56,56,67,67,29,
            29,64,64,64,64,65,65,65,57,57,
            58,58,50,50,50,34,88,88,81,82,
            82,82,66,66,83,83,84,84,68,68,
            21,22,22,22,32,49,49,35,35,35,
            35,38,38,40,36,36,37,41,41,113,
            113,39,114,114,89,89,27,27,27,27,
            27,27,27,27,27,85,51,51,51,51,
            60,60,59,59,59,61,61,52,52,90,
            90,72,72,62,62,62,44,44,44,45,
            46,46,46,47,47,47,47,55,55,55,
            63,91,73,73,73,73,69,92,93,93,
            94,94,95,95,115,115,116,116,117,117,
            117,117,119,119,118,118,118,120,120,86,
            86,1,1,1,5,5,5,21,21,23,
            23,24,24,96,96,96,99,121,121,121,
            121,121,121,121,104,104,104,104,104,104,
            104,104,104,104,104,104,104,104,104,104,
            104,104,104,104,104,104,104,104,122,122,
            1,14,19,15,386,1168,43,532,388,909,
            556,533,634,608,739,642,1117,1113,73,90,
            74,133,210,317,318,117,183,125,174,20,
            135,132,134,158,707,14,19,15,386,1168,
            43,532,388,512,556,533,634,608,739,642,
            1117,1113,73,277,137,509,164,821,14,19,
            15,386,41,39,141,144,147,150,858,14,
            19,15,386,316,385,1388,639,1270,1454,1488,
            1241,641,270,858,14,19,15,386,315,282,
            216,1232,218,1663,220,221,226,1561,23,265,
            1230,637,268,283,638,125,1649,674,783,14,
            19,15,386,1168,43,532,388,512,556,533,
            634,608,739,642,1117,1113,73,277,470,14,
            19,15,386,1168,43,532,388,512,556,533,
            634,608,739,642,1117,1113,73,277,354,674,
            564,577,225,641,821,14,19,15,386,41,
            43,532,388,282,556,533,634,608,739,642,
            1481,1561,68,188,192,270,22,283,16,1515,
            1516,1063,750,284,216,1232,218,1663,220,221,
            226,1561,265,1230,637,268,242,285,396,14,
            19,15,386,1168,43,532,388,1173,556,533,
            634,608,739,642,1117,1113,73,686,236,341,
            895,14,19,15,386,1168,43,532,388,1636,
            556,533,634,608,739,642,1117,1113,73,771,
            133,210,317,318,1565,1242,288,533,566,135,
            132,134,158,745,14,19,15,386,1168,43,
            532,388,353,556,533,634,608,739,642,1117,
            1113,73,277,137,250,164,1562,405,319,978,
            641,641,610,141,144,147,150,558,14,19,
            15,386,41,35,1388,639,1270,1454,1488,1241,
            133,210,317,318,271,1483,21,243,286,143,
            132,134,158,508,845,207,1561,821,14,19,
            15,386,1168,43,532,388,909,556,533,634,
            608,739,642,1117,1113,73,90,595,14,19,
            15,386,41,43,532,388,238,556,533,634,
            608,739,642,1117,1113,92,641,325,433,14,
            19,15,386,1168,43,532,388,1695,556,533,
            634,608,739,642,1117,1113,73,851,237,368,
            811,269,821,14,19,15,386,1168,43,532,
            388,385,556,533,634,608,739,642,1117,1113,
            73,91,821,14,19,15,386,1168,43,532,
            388,909,556,533,634,608,739,642,1117,1113,
            73,84,821,14,19,15,386,1168,43,532,
            388,240,556,533,634,608,739,642,1117,1113,
            73,83,821,14,19,15,386,1168,43,532,
            388,909,556,533,634,608,739,642,1117,1113,
            73,82,821,14,19,15,386,1168,43,532,
            388,323,556,533,634,608,739,642,1117,1113,
            73,81,821,14,19,15,386,1168,43,532,
            388,909,556,533,634,608,739,642,1117,1113,
            73,80,821,14,19,15,386,1168,43,532,
            388,239,556,533,634,608,739,642,1117,1113,
            73,79,821,14,19,15,386,1168,43,532,
            388,909,556,533,634,608,739,642,1117,1113,
            73,78,821,14,19,15,386,1168,43,532,
            388,241,556,533,634,608,739,642,1117,1113,
            73,77,821,14,19,15,386,1168,43,532,
            388,909,556,533,634,608,739,642,1117,1113,
            73,76,821,14,19,15,386,1168,43,532,
            388,242,556,533,634,608,739,642,1117,1113,
            73,75,821,14,19,15,386,1168,43,532,
            388,909,556,533,634,608,739,642,1117,1113,
            73,74,821,14,19,15,386,1168,43,532,
            388,290,556,533,634,608,739,642,1117,1113,
            73,891,821,14,19,15,386,1168,43,532,
            388,353,556,533,634,608,739,642,1117,1113,
            73,931,821,14,19,15,386,41,43,532,
            388,602,556,533,634,608,739,642,1117,1113,
            92,821,14,19,15,386,41,43,532,388,
            878,556,533,634,608,739,642,1117,1113,92,
            1517,878,415,845,353,971,821,14,19,15,
            386,41,43,532,1336,821,14,19,15,386,
            41,43,532,388,209,556,533,634,608,739,
            642,1117,1113,92,821,14,19,15,386,41,
            43,532,388,1783,556,533,634,608,739,642,
            1117,1113,92,448,1784,509,1787,182,1298,821,
            14,19,15,386,41,43,532,1338,821,14,
            19,15,386,41,43,532,388,200,556,533,
            634,608,739,642,1117,1113,92,821,14,19,
            15,386,41,43,532,388,533,556,533,634,
            608,739,642,1117,1113,72,476,641,60,16,
            406,201,932,196,955,1011,821,14,19,15,
            386,41,43,532,388,291,556,533,634,608,
            739,1482,275,270,250,210,317,318,182,402,
            679,215,1232,218,1663,220,221,226,1688,1707,
            263,1230,637,268,6,259,858,14,19,15,
            386,314,439,394,273,274,270,195,260,239,
            91,1630,754,1734,215,1232,218,1663,220,221,
            226,341,282,263,1230,637,268,273,1498,270,
            858,14,19,15,386,40,257,272,718,225,
            278,716,133,210,317,318,263,1230,637,268,
            1001,136,132,134,158,821,14,19,15,386,
            41,43,532,388,716,556,533,634,608,1415,
            81,133,210,317,318,138,288,164,909,1064,
            146,132,134,158,319,142,145,148,151,821,
            14,19,15,386,41,43,532,388,292,556,
            533,634,1417,79,81,215,1232,218,1663,220,
            221,226,1643,1064,334,731,640,289,677,1624,
            821,14,19,15,386,41,43,532,388,641,
            556,533,1369,858,14,19,15,386,33,215,
            1232,218,1663,220,221,226,6,6,6,296,
            197,196,198,1624,276,677,1635,1668,464,821,
            14,19,15,386,41,43,532,388,508,556,
            1370,821,14,19,15,386,41,43,532,388,
            245,556,1400,406,6,197,198,307,86,133,
            210,317,318,1680,369,579,1720,751,140,132,
            134,158,821,14,19,15,386,41,43,532,
            388,181,1296,821,14,19,15,386,41,43,
            532,388,139,1304,164,821,14,19,15,386,
            41,43,532,388,1024,1334,821,14,19,15,
            386,41,43,532,388,543,1335,821,14,19,
            15,386,41,38,1064,133,210,317,318,722,
            69,606,718,572,149,132,134,158,1047,622,
            821,14,19,15,386,41,43,1227,641,637,
            215,1232,218,1663,220,221,226,270,1290,133,
            210,317,318,6,1498,716,727,755,152,132,
            134,158,1674,222,263,1230,637,268,821,14,
            19,15,386,41,43,1229,858,14,19,15,
            386,32,262,558,14,19,15,386,41,35,
            558,14,19,15,386,41,35,6,6,6,
            138,756,443,324,880,728,1678,1686,1777,193,
            244,821,14,19,15,386,41,37,821,14,
            19,15,386,41,36,821,14,19,15,386,
            41,35,821,14,19,15,386,41,34,6,
            6,821,14,19,15,386,41,46,360,360,
            821,14,19,15,386,41,45,821,14,19,
            15,386,41,44,726,195,195,615,6,6,
            803,632,1842,1480,1480,56,196,677,468,579,
            677,86,86,196,579,1842,533,513,513,669,
            14,19,15,386,41,42,1166,250,210,317,
            318,195,1842,479,250,210,317,318,113,1499,
            86,441,640,86,170,293,1479,579,284,309,
            415,508,255,579,1842,190,415,579,803,1167,
            224,1560,1170,1752,195,406,1734,579,1842,1842,
            195,51,1499,1750,195,641,1842,766,1499,1562,
            579,1842,1499,679,1166,1562,579,380,190,1842,
            196,982,1701,26,190,1403,1752,1166,190,1842,
            227,1781,1752,1166,364,1782,1752,485,228,415,
            255,250,210,317,318,1842,677,1167,206,1560,
            531,1842,227,255,206,251,210,317,318,255,
            1705,579,1560,1050,1564,1842,1349,804,1560,1061,
            1564,251,210,317,318,1070,579,406,195,88,
            1775,406,406,406,406,1842,1499,406,827,1842,
            1788,1842,1842,1166,1842,1842,251,210,317,318,
            1842,1842,191,1842,1842,279,1842,1842,1842,184,
            183,202,203,231,1842,1169,1842,1842,1842,256,
            1842,1842,1842,1842,641,1842,0,320,697,0,
            17,178,0,18,177,0,1,2065,0,1,
            2076,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,12,13,14,0,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,0,38,39,
            40,41,42,43,44,45,46,47,48,49,
            0,1,52,53,54,0,1,0,3,0,
            5,6,7,8,9,10,11,0,0,14,
            2,4,4,0,19,20,21,22,0,24,
            0,1,2,15,6,7,8,9,10,11,
            0,0,2,38,39,40,41,42,43,44,
            45,46,47,48,49,15,51,52,53,54,
            60,56,0,1,0,3,0,5,6,7,
            8,9,10,11,0,1,14,3,69,62,
            63,19,20,21,22,0,24,0,79,80,
            81,82,83,84,85,86,87,88,68,0,
            38,39,40,41,42,43,44,45,46,47,
            48,49,89,51,52,53,54,0,56,0,
            1,55,3,0,5,6,7,8,9,10,
            11,0,0,14,2,12,13,0,19,20,
            21,22,55,24,0,0,0,15,4,17,
            18,6,7,8,9,10,11,38,39,40,
            41,42,43,44,45,46,47,48,49,0,
            51,52,53,54,0,56,0,1,0,3,
            0,5,6,7,8,9,10,11,0,15,
            14,0,4,61,0,19,20,21,22,0,
            24,64,65,66,67,74,62,63,76,0,
            64,65,66,67,38,39,40,41,42,43,
            44,45,46,47,48,49,0,51,52,53,
            54,0,56,0,1,61,3,0,5,6,
            7,8,9,10,11,0,15,14,57,58,
            62,63,19,20,21,22,0,24,64,65,
            66,67,6,7,8,9,10,11,0,70,
            71,38,39,40,41,42,43,44,45,46,
            47,48,49,0,51,52,53,54,0,56,
            0,1,61,3,57,58,6,7,8,9,
            10,11,0,0,14,2,4,4,0,19,
            20,21,22,0,24,70,71,0,15,6,
            7,8,9,10,11,57,58,0,38,39,
            40,41,42,43,44,45,46,47,48,49,
            57,58,52,53,54,0,1,2,3,4,
            5,0,1,2,0,0,5,12,13,14,
            5,16,17,18,0,1,15,3,23,15,
            25,26,27,28,29,30,31,32,33,34,
            35,36,0,1,2,3,4,5,0,72,
            2,0,0,5,12,13,14,0,16,17,
            18,50,0,15,59,23,51,25,26,27,
            28,29,30,31,32,33,34,35,36,0,
            1,2,3,4,5,0,1,2,0,4,
            2,12,13,0,0,16,17,18,50,5,
            15,59,23,15,25,26,27,28,29,30,
            31,32,33,34,35,36,37,0,0,1,
            2,69,4,6,7,8,9,10,11,0,
            51,14,0,15,77,78,19,20,21,22,
            0,24,0,1,50,3,6,7,8,9,
            10,11,0,1,2,38,39,40,41,42,
            43,44,45,46,47,48,49,0,1,2,
            3,4,5,0,1,0,3,0,0,12,
            13,0,5,16,17,18,0,1,0,3,
            23,16,25,26,27,28,29,30,31,32,
            33,34,35,36,0,1,2,3,4,5,
            37,0,1,0,3,0,12,13,37,0,
            16,17,18,37,0,1,59,23,51,25,
            26,27,28,29,30,31,32,33,34,35,
            36,0,1,2,3,4,0,0,37,0,
            0,5,5,12,13,5,0,16,17,18,
            72,12,13,59,23,0,25,26,27,28,
            29,30,31,32,33,34,35,36,0,1,
            2,3,4,0,1,2,0,4,0,74,
            12,13,73,5,16,17,18,56,12,13,
            50,23,55,25,26,27,28,29,30,31,
            32,33,34,35,36,37,0,1,2,3,
            4,75,75,0,1,0,3,0,12,13,
            0,0,16,17,18,0,0,0,50,23,
            0,25,26,27,28,29,30,31,32,33,
            34,35,36,37,0,1,2,3,4,0,
            0,0,37,0,0,0,12,13,0,0,
            16,17,18,37,15,0,16,23,15,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,0,1,2,3,4,57,58,68,
            73,37,37,68,12,13,69,0,16,17,
            18,0,0,0,0,23,4,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            0,1,2,3,4,60,0,0,0,0,
            0,5,12,13,0,0,16,17,18,0,
            0,0,0,23,0,25,26,27,28,29,
            30,31,32,33,34,35,36,0,1,2,
            3,4,60,60,0,0,0,0,0,12,
            13,0,0,16,17,18,50,0,0,0,
            23,55,25,26,27,28,29,30,31,32,
            33,34,35,36,0,1,2,3,4,55,
            0,0,0,0,0,0,12,13,0,0,
            16,17,18,5,0,0,0,23,0,25,
            26,27,28,29,30,31,32,33,34,35,
            36,0,55,2,55,4,5,6,7,8,
            9,10,11,0,0,14,15,0,0,0,
            19,20,21,22,0,24,2,0,4,5,
            6,7,8,9,10,11,0,59,14,15,
            0,0,0,19,20,21,22,0,24,0,
            0,50,0,6,7,8,9,10,11,0,
            0,14,0,0,0,0,19,20,21,22,
            0,24,0,0,50,0,6,7,8,9,
            10,11,0,0,14,0,0,0,0,19,
            20,21,22,0,24,0,0,0,0,6,
            7,8,9,10,11,0,0,14,0,0,
            0,0,19,20,21,22,0,24,0,0,
            0,0,6,7,8,9,10,11,0,0,
            14,0,0,0,0,19,20,21,22,0,
            24,0,0,0,0,6,7,8,9,10,
            11,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1842,1172,1599,1174,1585,1,2053,2054,2055,2163,
            542,2164,1578,1571,2003,281,1592,1536,1353,2004,
            2002,2056,2005,1250,2001,1852,1853,1854,1855,1467,
            417,2153,2154,2155,1216,443,428,1842,2008,2013,
            2012,2010,2011,2009,2014,2015,2007,2016,2017,2018,
            1,1839,1031,511,510,1842,1,1842,1,41,
            189,1,1,1,1,1,1,47,261,1,
            1222,1617,1,1842,1,1,1,1,246,1,
            1,2065,1465,558,1,1,1,1,1,1,
            266,1842,1200,1,1,1,1,1,1,1,
            1,1,1,1,1,558,189,1,1,1,
            2096,2036,1842,1,1842,1,87,189,1,1,
            1,1,1,1,1842,1871,1,1872,962,1610,
            1601,1,1,1,1,1842,1,252,942,922,
            902,882,862,822,842,802,782,762,1094,1842,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1826,189,1,1,1,1842,2036,1842,
            1,742,1,50,189,1,1,1,1,1,
            1,69,31,1,1737,1528,1490,58,1,1,
            1,1,1767,1,49,1842,60,1366,1617,1866,
            1867,2053,2054,2055,2163,542,2164,1,1,1,
            1,1,1,1,1,1,1,1,1,1842,
            189,1,1,1,1842,2036,1842,1,1842,1,
            1842,188,1,1,1,1,1,1,48,1022,
            1,53,1617,465,59,1,1,1,1,61,
            1,1456,1445,1433,1422,1176,1610,1601,387,1842,
            1456,1445,1433,1422,1,1,1,1,1,1,
            1,1,1,1,1,1,1842,188,1,1,
            1,287,2036,1842,1,1156,1,57,189,1,
            1,1,1,1,1,62,1075,1,1066,1119,
            1610,1601,1,1,1,1,247,1,1456,1445,
            1433,1422,1,1,1,1,1,1,56,1391,
            1379,1,1,1,1,1,1,1,1,1,
            1,1,1,55,189,1,1,1,1842,2036,
            1842,2020,1646,2019,1066,1119,2053,2054,2055,2163,
            542,2164,1842,264,2003,1222,1323,1407,1842,2004,
            2002,2056,2005,245,2001,1391,1379,65,558,2053,
            2054,2055,2163,542,2164,1066,1119,1842,2008,2013,
            2012,2010,2011,2009,2014,2015,2007,2016,2017,2018,
            1066,1119,1031,511,510,1,1859,1599,1860,647,
            1845,1,1836,1199,267,1842,1847,1578,1571,580,
            1849,1592,1536,1353,205,2021,558,2022,1250,558,
            1852,1853,1854,1855,1467,417,2153,2154,2155,1216,
            443,428,1842,1859,1599,1860,1550,1845,1,1309,
            1222,1842,208,1847,1578,1571,1002,71,1592,1536,
            1353,1846,1842,558,1844,1250,1848,1852,1853,1854,
            1855,1467,417,2153,2154,2155,1216,443,428,1,
            1859,1599,1860,1585,27,258,2065,1199,219,1,
            1713,1578,1571,1842,1,1592,1536,1353,1846,89,
            558,1844,1250,558,1852,1853,1854,1855,1467,417,
            2153,2154,2155,1216,443,428,2769,127,264,2065,
            1199,1041,1407,2053,2054,2055,2163,542,2164,1842,
            27,2003,1842,558,514,1628,2004,2002,2056,2005,
            248,2001,1842,2021,89,2022,2053,2054,2055,2163,
            542,2164,1,2065,1465,2008,2013,2012,2010,2011,
            2009,2014,2015,2007,2016,2017,2018,1842,1859,1599,
            1860,1585,1845,1842,2021,63,2022,280,1842,1578,
            1571,1842,1559,1592,1536,1353,1842,2021,66,2022,
            1250,1340,1852,1853,1854,1855,1467,417,2153,2154,
            2155,1216,443,428,1842,1859,1599,1860,1543,1845,
            1367,1842,2021,1842,2022,70,1578,1571,1214,67,
            1592,1536,1353,1368,1842,2077,1844,1250,1559,1852,
            1853,1854,1855,1467,417,2153,2154,2155,1216,443,
            428,1842,1,1,1,1,1,1842,1404,52,
            1842,1851,1851,1,1,1847,1842,1,1,1,
            1309,1528,1490,1844,1,1842,1,1,1,1,
            1,1,1,1,1,1,1,1,1842,1859,
            1599,1860,1585,1842,2065,1465,51,1407,1,1176,
            1578,1571,1275,1847,1592,1536,1353,2152,1528,1490,
            1846,1250,1324,1852,1853,1854,1855,1467,417,2153,
            2154,2155,1216,443,428,1214,1,1859,1599,1860,
            1585,1850,1850,204,607,186,607,68,1578,1571,
            1842,1842,1592,1536,1353,199,185,1842,1846,1250,
            54,1852,1853,1854,1855,1467,417,2153,2154,2155,
            1216,443,428,2769,1842,1859,1599,1860,1585,320,
            64,1842,1513,217,187,1842,1578,1571,1842,1842,
            1592,1536,1353,1557,1827,1,1340,1250,558,1852,
            1853,1854,1855,1467,417,2153,2154,2155,1216,443,
            428,2769,1,1859,1599,1860,1585,1066,1119,1147,
            1275,1558,1629,1128,1578,1571,613,1842,1592,1536,
            1353,1842,1,1,1842,1250,1323,1852,1853,1854,
            1855,1467,417,2153,2154,2155,1216,443,428,2769,
            1842,1859,1599,1860,1585,2096,1842,1842,1842,1842,
            1842,1847,1578,1571,1842,1842,1592,1536,1353,1842,
            1842,1842,1842,1250,28,1852,1853,1854,1855,1467,
            417,2153,2154,2155,1216,443,428,1842,1859,1600,
            1860,1585,2096,2095,1842,1842,1842,1842,1842,1578,
            1571,1842,1842,1592,1536,1353,1846,28,1842,204,
            1250,1627,1852,1853,1854,1855,1467,417,2153,2154,
            2155,1216,443,428,1,1859,1599,1860,1585,488,
            1842,1842,1842,1842,1842,1842,1578,1571,1842,1842,
            1592,1536,1353,1845,1842,1842,1842,1250,1842,1852,
            1853,1854,1855,1467,417,2153,2154,2155,1216,443,
            428,17,1869,1830,2915,1830,1830,178,178,178,
            178,178,178,1842,1842,178,1830,1842,1842,1842,
            178,178,178,178,18,178,1833,1842,1833,1833,
            177,177,177,177,177,177,1842,1844,177,1833,
            1842,1842,1842,177,177,177,177,128,177,1842,
            1842,1830,1842,2053,2054,2055,2163,542,2164,1842,
            1842,2003,1842,1842,1842,1842,2004,2002,2056,2005,
            129,2001,1842,1842,1833,1842,2053,2054,2055,2163,
            542,2164,1842,1842,2003,1842,1842,1842,1842,2004,
            2002,2056,2005,130,2001,1842,1842,1842,1842,2053,
            2054,2055,2163,542,2164,1842,1842,2003,1842,1842,
            1842,1842,2004,2002,2056,2005,131,2001,1842,1842,
            1842,1842,2053,2054,2055,2163,542,2164,1842,1842,
            2003,1842,1842,1842,1842,2004,2002,2056,2005,249,
            2001,1842,1842,1842,1842,2053,2054,2055,2163,542,
            2164
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            451,1,170,41,170,170,170,170,170,170,
            170,170,170,170,170,170,3,111,79,76,
            83,81,89,87,91,90,93,92,10,170,
            111,304,304,475,170,268,268,372,111,170,
            170,170,170,170,170,170,170,170,170,170,
            170,170,170,170,170,170,170,170,170,170,
            170,170,170,170,170,170,170,170,170,268,
            268,45,52,376,161,271,266,265,344,104,
            356,356,72,72,356,72,356,131,219,219,
            76,76,81,81,81,81,79,79,87,83,
            83,90,89,412,92,91,74,50,372,364,
            164,45,154,194,268,419,274,194,391,311,
            391,311,378,391,170,50,364,154,154,45,
            193,161,268,370,131,267,276,45,194,311,
            311,311,311,378,378,380,308,341,74,154,
            364,170,170,45,194,271,407,406,376,276,
            268,311,341,384,311,311,341,380,414,380,
            378,341,48,417,304,170,307,341,50,364,
            45,45,268,419,274,370,341,386,341,341,
            170,304,380,52,45,304,170,50,276,100,
            170,99,189,376,341,45,380,268,267,386,
            170,189,341,305,380
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            89,0,75,15,2,61,76,17,18,16,
            4,12,13,62,63,57,58,64,65,66,
            67,70,71,72,73,74,77,78,51,69,
            79,80,81,82,83,85,84,86,87,88,
            68,50,89,55,59,5,0,5,51,15,
            61,17,18,16,4,12,13,29,30,23,
            34,35,36,2,25,26,27,28,31,32,
            33,1,3,37,0,4,62,63,12,13,
            58,57,64,65,66,67,70,71,16,72,
            73,74,59,50,51,89,77,78,68,75,
            5,55,0,5,68,55,59,50,75,15,
            23,25,26,27,28,2,17,18,16,4,
            12,13,29,30,31,32,33,34,35,36,
            3,1,52,53,54,46,38,43,41,42,
            40,39,44,45,47,48,49,24,20,14,
            19,22,21,6,7,8,10,9,11,0,
            59,5,14,6,7,8,9,10,11,25,
            26,27,28,31,32,33,3,17,18,16,
            12,13,29,30,23,34,35,36,4,2,
            1,0,14,59,5,17,18,16,4,12,
            13,29,30,23,34,35,36,2,1,3,
            25,26,27,28,31,32,33,0,7,14,
            24,8,22,21,20,6,19,9,10,11,
            61,76,17,18,16,12,13,62,63,57,
            58,64,65,66,67,70,71,72,73,74,
            77,78,69,79,80,81,82,83,84,85,
            86,87,88,4,2,15,55,50,5,0,
            4,2,15,50,5,19,38,6,39,52,
            20,40,21,41,42,22,7,43,44,14,
            53,24,54,45,46,8,47,48,49,9,
            10,11,60,3,1,0,69,15,61,0,
            19,38,6,39,52,20,40,21,41,42,
            22,7,43,44,14,53,24,54,45,46,
            8,47,48,49,1,3,9,10,11,56,
            5,51,0,46,38,43,41,42,40,39,
            44,45,47,48,49,68,75,24,20,14,
            19,22,21,6,7,8,9,10,11,55,
            1,5,50,2,15,4,0,1,3,5,
            51,55,0,75,5,4,1,2,68,0,
            19,6,20,21,22,7,14,24,8,1,
            4,9,10,11,37,2,5,55,50,75,
            15,68,0,5,55,51,69,0,19,38,
            6,39,52,20,40,21,41,42,22,7,
            43,44,14,53,24,54,45,46,8,47,
            48,49,1,3,9,10,11,60,4,0,
            23,25,26,27,28,1,3,2,17,18,
            16,4,12,13,29,30,31,32,33,34,
            35,36,56,0,5,50,23,25,26,27,
            28,1,3,2,17,18,16,4,12,13,
            29,30,31,32,33,34,35,36,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            78,8,14,8,14,14,14,14,14,14,
            14,14,14,14,14,14,8,70,8,8,
            8,8,8,8,8,8,8,8,8,14,
            70,9,9,91,71,47,47,50,1,14,
            14,14,14,14,14,14,14,14,14,14,
            14,14,14,14,14,71,14,14,14,14,
            14,14,14,14,14,14,14,14,14,47,
            47,24,14,76,22,49,29,29,58,20,
            59,59,16,16,59,16,59,54,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,87,51,87,
            26,24,37,23,47,74,46,23,8,87,
            8,87,87,8,14,12,87,37,37,24,
            23,89,47,40,2,8,86,24,23,87,
            81,87,81,16,87,31,18,87,8,37,
            89,14,14,24,23,39,29,29,76,86,
            47,81,35,67,94,81,35,31,8,8,
            16,35,11,8,16,14,61,35,87,89,
            24,24,47,74,46,41,35,63,35,35,
            14,16,31,13,24,16,14,12,85,68,
            14,8,63,76,35,24,31,47,47,63,
            14,43,35,8,33
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,80,79,78,77,76,75,0,71,0,
            69,9,63,4,0,29,0,93,0,96,
            0,9,4,20,0,4,9,0,27,0,
            53,0,91,0,28,0,60,0,25,9,
            46,45,38,36,0,9,25,0,25,9,
            46,45,0,64,65,66,67,54,30,0,
            95,0,9,38,36,0,9,70,0,34,
            9,48,0,9,26,51,0,9,86,0,
            58,9,34,0,89,26,9,0,21,0,
            9,87,0,9,34,50,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,96,97,
            98,10,11,69,1,8,6,7,44,55,
            60,63,68,72,81,82,83,84,12,13,
            93,94,95,100,101,102,3,47,52,56,
            61,62,66,67,74,75,78,79,80,90,
            91,54,70,73,42,107,16,17,89,30,
            4,14,15,18,19,20,21,29,31,22,
            23,24,25,26,92,5,27,28,32,33,
            34,35,36,37,38,39,40,41,108,45,
            46,49,50,51,53,57,58,59,65,71,
            77,88,99,103,104,105,106
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,115,119,120,121,122,0,123,
            124,125,126,127,128,129,130,131,132,110,
            143,0,0,0,111,136,163,112,135,142,
            0,0,0,154,159,161,0,162,0,0,
            0,0,134,172,173,174,0,114,151,153,
            160,169,0,145,150,0,0,152,164,167,
            168,171,0,146,147,148,149,158,175,113,
            116,117,118,133,137,138,139,140,141,144,
            156,0,0,157,166,109,0,155,165,170,
            0,176,177,0,178,179,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            202,108,47,57,117,137,143,12,180,21,
            75,93,149,154,63,28,71,40,127,217,
            221,40,40,189,40,1,1,1,32,35,
            80,103,35,225,6,131,196,171,196,123,
            159,159,159,159,159,83,83,83
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            115,115,4,4,115,115,115,18,186,26,
            4,26,115,115,68,26,4,4,125,26,
            4,44,68,193,53,4,4,4,26,38,
            4,26,106,26,9,134,199,174,210,125,
            161,163,165,167,169,90,85,98
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            4,66,27,27,66,64,64,55,103,47,
            27,41,64,64,27,47,27,27,50,4,
            4,27,27,18,27,96,95,94,45,62,
            27,38,49,2,69,50,6,104,4,50,
            79,78,77,76,75,41,39,41
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            51,51,59,59,51,51,51,51,95,50,
            59,50,51,51,25,50,59,59,75,50,
            59,4,25,68,14,59,59,59,50,2,
            59,50,1,50,69,1,50,101,50,75,
            3,52,53,53,46,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            36,21,25,25,21,21,21,96,-1,29,
            25,11,21,21,25,29,25,25,5,36,
            36,25,25,70,25,19,1,3,29,31,
            25,11,13,36,97,5,42,-1,36,5,
            22,22,22,22,22,11,11,11
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            150,15,0,110,0,199,116,0,31,150,
            0,160,180,116,37,170,0,112,0,0,
            166,116,2,152,0,111,0,166,116,2,
            0,169,2,0,158,116,0,172,0,192,
            116,15,0,9,110,0,126,14,192,116,
            15,0,69,132,110,0,126,192,116,14,
            15,0,192,116,14,15,0,132,110,0,
            126,14,15,0,126,192,116,15,0,126,
            15,0,145,0,2,0,165,111,0,2,
            111,0,166,116,2,145,0,2,0,164,
            111,0,156,2,0,159,0,160,190,116,
            37,136,52,0,112,0,160,190,116,37,
            52,0,141,0,113,0,195,116,141,0,
            116,141,0,155,113,0,164,116,37,136,
            54,0,164,116,37,136,53,0,164,116,
            37,54,0,164,116,37,53,0,187,0,
            149,0,148,0,147,0,146,0,145,0,
            206,94,0,77,2,114,111,113,0,206,
            132,155,2,98,0,53,0,0,155,78,
            124,0,29,131,0,179,2,0,111,120,
            0,160,180,116,37,132,179,2,0,111,
            3,0,118,0,112,0,194,2,111,0,
            155,15,111,0,155,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1242,0,512,0,1678,1752,1674,1668,1635,0,
            509,415,1324,1465,1290,1199,1166,0,542,0,
            1241,579,360,0,1663,1232,1230,637,415,508,
            1199,1166,1222,1480,0,1536,1353,1250,1216,443,
            428,1550,1543,647,1649,1176,514,1309,1275,1391,
            1379,1340,1119,1066,1456,1445,1433,1422,1617,1610,
            1601,1528,1490,1592,1585,1578,1571,1467,417,1128,
            1094,1075,1041,1022,1002,982,718,1147,697,580,
            558,962,942,922,902,882,862,842,822,802,
            782,762,360,742,677,613,468,488,394,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,193,116,181,36,35,34,23,30,29,
            13,12,4,16,18,17,111,2,115,114,
            118,117,120,119,122,121,124,123,112,55,
            2,76,61,2,15,179,155,141,116,13,
            12,63,62,4,67,66,65,64,57,58,
            16,71,70,73,72,78,77,74,88,87,
            86,84,85,83,82,81,80,79,69,179,
            194,155,132,116,15,2,153,152,182,10,
            183,184,54,53,185,52,186,187,1,3,
            114,114,117,117,117,117,115,115,119,118,
            118,121,120,155,123,122,132,37,158,4,
            14,126,116,4,169,116,2,15,136,37,
            136,37,37,136,68,116,4,116,116,126,
            192,167,166,133,116,168,116,150,4,37,
            116,37,116,116,37,180,116,37,170,116,
            167,192,14,126,4,2,143,145,116,55,
            166,116,164,141,165,116,164,190,136,191,
            116,160,55,199,61,15,200,116,37,167,
            126,126,156,116,2,158,164,116,164,160,
            69,55,190,69,150,61,15,116,116,195,
            68,156,2,116,160,150,180,166,196,55,
            68,158,160,55,135
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "MYTHREAD",
            "THREADS",
            "UPC_MAX_BLOCKSIZE",
            "relaxed",
            "shared",
            "strict",
            "upc_barrier",
            "upc_localsizeof",
            "upc_blocksizeof",
            "upc_elemsizeof",
            "upc_notify",
            "upc_fence",
            "upc_wait",
            "upc_forall",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_sizeof_type_name_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_name",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_or_typedefname",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "layout_qualifier"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 56,
           SCOPE_UBOUND      = 47,
           SCOPE_SIZE        = 48,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 215,
           NT_OFFSET         = 107,
           LA_STATE_OFFSET   = 2201,
           MAX_LA            = 2,
           NUM_RULES         = 359,
           NUM_NONTERMINALS  = 122,
           NUM_SYMBOLS       = 229,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1631,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 89,
           EOLT_SYMBOL       = 89,
           ACCEPT_ACTION     = 1826,
           ERROR_ACTION      = 1842;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
