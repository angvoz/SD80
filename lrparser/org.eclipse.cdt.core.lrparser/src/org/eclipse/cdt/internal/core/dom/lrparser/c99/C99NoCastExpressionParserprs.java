/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99NoCastExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, C99NoCastExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            4,1,1,3,3,3,1,3,3,1,
            3,3,1,3,3,3,3,1,3,3,
            1,3,1,3,1,3,1,3,1,3,
            1,5,1,3,3,3,3,3,3,3,
            3,3,3,3,1,1,2,1,0,1,
            3,1,1,1,1,1,1,1,1,3,
            4,3,2,4,1,2,1,1,1,2,
            5,7,5,1,0,7,5,9,8,3,
            2,2,2,3,2,4,2,2,2,2,
            2,1,1,1,1,2,1,2,2,2,
            1,2,2,1,2,2,1,2,2,1,
            2,2,1,3,1,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            5,5,6,6,2,2,2,1,0,1,
            2,4,2,1,1,1,3,1,1,2,
            3,6,7,1,0,1,3,1,3,1,
            1,1,1,1,1,3,1,1,1,1,
            1,3,1,2,2,1,5,3,1,3,
            5,1,3,1,3,2,4,3,5,4,
            6,6,3,5,1,1,2,3,4,1,
            2,1,3,1,1,3,2,1,1,1,
            1,2,1,2,3,1,1,1,3,1,
            2,2,2,3,4,5,1,7,3,0,
            0,1,1,3,3,4,1,1,2,3,
            2,3,2,1,0,1,2,1,1,1,
            1,1,2,4,3,6,2,4,1,1,
            -32,0,0,0,0,0,0,0,-208,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-5,0,0,0,0,0,0,0,
            0,0,-121,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-196,0,-12,0,0,0,0,
            0,0,0,0,0,0,-13,0,0,0,
            0,0,0,0,0,0,0,0,0,-33,
            -2,-127,-140,-4,-15,0,0,0,0,0,
            0,0,0,0,-16,-17,-18,0,-19,0,
            0,0,0,0,-191,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-166,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-34,-179,-144,-29,0,-55,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-113,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-70,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-20,0,-21,0,-187,0,0,0,
            0,0,0,0,-22,0,0,0,0,0,
            0,0,0,0,0,0,-3,0,0,0,
            0,0,0,0,-23,0,0,0,0,0,
            0,0,0,0,0,0,-24,-25,-26,-170,
            -68,-51,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-30,0,-107,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-67,
            -126,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -83,0,-84,0,-27,0,0,0,0,0,
            0,0,-87,0,0,0,0,0,0,0,
            0,0,0,0,-56,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-57,0,0,0,0,0,
            0,0,-88,0,0,0,0,0,0,0,
            0,0,0,0,-58,0,0,0,0,0,
            0,0,-89,0,0,0,0,0,0,0,
            0,0,0,0,-59,0,0,0,0,0,
            0,0,-90,0,0,0,0,0,0,0,
            0,0,0,0,-60,0,0,0,0,0,
            0,0,-91,0,0,0,0,0,0,0,
            0,0,0,0,-61,0,0,0,0,0,
            0,0,-92,0,0,0,0,0,0,0,
            0,0,0,0,-62,0,0,0,0,0,
            0,0,-93,0,0,0,0,0,0,0,
            0,0,0,0,-63,0,0,0,0,0,
            0,0,-94,0,0,0,0,0,0,0,
            0,0,0,0,-64,0,0,0,0,0,
            0,0,-95,0,0,0,0,0,0,0,
            0,0,0,0,-65,0,0,0,0,0,
            0,0,-96,0,0,0,0,0,0,0,
            0,0,0,0,-66,0,0,0,0,0,
            0,0,-130,0,0,0,0,0,0,0,
            0,0,0,0,-37,0,0,0,0,0,
            0,0,0,0,-205,-97,-98,-99,-77,-100,
            0,0,0,0,-145,0,0,0,0,0,
            0,0,-101,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-6,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-146,0,0,0,0,0,0,0,-102,
            0,0,0,0,0,0,0,0,0,0,
            0,-169,0,0,0,0,0,0,0,-103,
            0,0,0,0,0,0,0,0,0,0,
            -184,0,0,0,0,0,0,0,-114,0,
            0,0,0,0,0,0,0,0,0,-190,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-194,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-204,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-120,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-116,-129,-119,-131,-123,
            -72,-73,-143,0,0,-52,0,0,0,0,
            0,0,0,-142,0,0,0,0,0,0,
            0,0,0,0,-173,0,0,-150,-149,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-157,-162,0,0,0,-178,-185,-69,0,
            0,-85,0,0,0,-163,0,0,-167,-152,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-46,0,0,0,
            0,0,0,0,0,0,-82,-86,0,-54,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-195,-78,0,0,0,0,0,-80,-181,
            -110,0,0,0,0,0,0,0,-47,0,
            0,0,0,0,0,0,-104,0,0,0,
            0,-207,0,0,0,0,-139,0,0,0,
            0,0,0,0,0,0,0,0,0,-148,
            0,0,0,0,0,0,0,-48,0,0,
            0,0,0,0,0,-203,0,0,0,0,
            -108,-151,0,0,-49,0,0,0,0,0,
            0,0,-106,0,0,0,-115,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-7,0,0,0,0,
            0,0,0,-50,0,0,0,0,0,0,
            0,0,0,0,0,-42,0,0,0,0,
            0,0,0,-197,0,0,-38,0,0,0,
            0,0,0,0,0,0,-43,0,0,0,
            0,0,0,0,0,0,0,-44,0,0,
            0,0,0,0,0,-111,0,0,-45,0,
            0,0,0,0,0,0,-71,0,0,-74,
            -31,-161,0,-75,0,0,0,0,0,-8,
            0,0,0,0,0,0,0,-193,0,0,
            0,0,-125,0,0,0,-128,0,0,0,
            0,0,0,0,0,0,-147,0,0,0,
            0,0,0,0,0,0,-117,-118,0,-122,
            -133,0,0,0,0,0,0,0,0,0,
            0,-9,0,0,0,0,0,0,-10,0,
            0,0,0,0,0,-11,0,0,0,0,
            0,0,-14,-28,-156,0,-160,0,-76,-154,
            0,0,-39,0,0,0,0,0,0,-40,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-112,0,0,0,0,0,0,
            -79,0,0,0,0,-186,-81,0,0,-41,
            0,0,0,0,0,0,-134,0,-165,-171,
            0,0,0,-200,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-136,-135,
            0,-155,0,0,0,0,0,0,0,0,
            0,-159,0,-177,-168,-1,0,-189,-192,0,
            -137,0,0,0,0,0,0,0,-132,0,
            0,0,0,0,0,0,0,0,-164,-105,
            -138,0,0,0,0,0,0,0,0,0,
            -141,-174,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-109,
            0,-124,0,0,0,0,-158,0,0,0,
            0,0,0,0,0,0,0,0,-35,0,
            0,0,0,-175,0,-36,0,-180,-53,0,
            0,0,0,0,0,0,0,-153,0,-172,
            -176,-182,-201,-183,-202,0,0,0,-188,0,
            0,-198,-199,0,0,-206,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            84,8,23,23,22,22,26,26,68,68,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,51,51,69,
            69,5,5,5,5,5,5,5,5,5,
            5,5,6,7,7,7,7,9,9,9,
            10,10,10,11,11,11,11,11,12,12,
            12,13,13,14,14,15,15,16,16,17,
            17,18,18,19,19,19,19,19,19,19,
            19,19,19,19,19,95,45,40,85,85,
            72,72,46,96,96,96,96,96,96,96,
            97,97,97,98,98,103,103,104,104,99,
            99,100,100,100,106,106,101,101,101,101,
            102,102,102,102,102,105,105,24,24,24,
            24,24,28,28,28,78,78,73,73,73,
            73,74,74,74,75,75,75,76,76,76,
            77,77,77,107,107,108,108,109,29,31,
            31,31,31,31,52,54,54,54,54,54,
            54,54,54,54,54,54,54,65,65,27,
            27,62,62,62,62,63,63,63,55,55,
            56,56,48,48,48,32,86,86,79,80,
            80,80,64,64,81,81,82,82,66,66,
            20,21,21,21,30,47,47,33,33,33,
            33,36,36,38,34,34,35,39,39,110,
            110,37,111,111,87,87,25,25,25,25,
            25,25,25,25,25,83,49,49,49,49,
            58,58,57,57,57,59,59,50,50,88,
            88,70,70,60,60,60,41,41,41,42,
            43,43,43,44,44,44,44,53,53,53,
            61,89,71,71,71,71,67,90,91,91,
            92,92,93,93,112,112,113,113,114,114,
            114,114,116,116,115,115,115,117,117,84,
            84,1,14,19,15,395,569,43,406,71,
            405,409,407,525,523,555,535,568,567,73,
            90,133,210,642,14,19,15,395,40,135,
            132,134,158,526,14,19,15,395,569,43,
            406,393,405,409,407,525,523,555,535,568,
            567,73,277,137,503,164,613,14,19,15,
            395,33,1324,141,144,147,150,613,14,19,
            15,395,32,394,1370,1374,1459,1491,1497,1167,
            470,43,376,649,42,802,282,215,1108,218,
            1262,220,221,226,1094,388,68,58,278,430,
            283,1641,251,210,1227,584,14,19,15,395,
            569,43,406,393,405,409,407,525,523,555,
            535,568,567,73,277,435,14,19,15,395,
            569,43,406,393,405,409,407,525,523,555,
            535,568,567,73,277,470,346,408,501,23,
            613,14,19,15,395,42,43,406,282,405,
            409,407,525,523,555,950,1094,251,210,680,
            571,270,283,1139,570,288,1514,1559,284,216,
            1108,218,1262,220,221,226,1094,265,1082,1081,
            268,274,285,369,14,19,15,395,569,43,
            406,1600,405,409,407,525,523,555,535,568,
            567,73,1261,147,22,432,236,555,14,19,
            15,395,569,43,406,354,405,409,407,525,
            523,555,535,568,567,73,277,613,14,19,
            15,395,569,43,406,564,405,409,407,525,
            523,555,535,568,567,73,90,441,201,676,
            651,74,613,14,19,15,395,42,43,406,
            286,405,409,407,525,523,887,501,1094,671,
            14,19,15,395,569,43,406,1602,405,409,
            407,525,523,555,535,568,567,73,1393,16,
            501,401,14,19,15,395,569,43,406,394,
            405,409,407,525,523,555,535,568,567,73,
            1407,700,970,718,237,613,14,19,15,395,
            569,43,406,164,405,409,407,525,523,555,
            535,568,567,73,91,613,14,19,15,395,
            569,43,406,289,405,409,407,525,523,555,
            535,568,567,73,84,613,14,19,15,395,
            569,43,406,285,405,409,407,525,523,555,
            535,568,567,73,83,613,14,19,15,395,
            569,43,406,512,405,409,407,525,523,555,
            535,568,567,73,82,613,14,19,15,395,
            569,43,406,541,405,409,407,525,523,555,
            535,568,567,73,81,613,14,19,15,395,
            569,43,406,570,405,409,407,525,523,555,
            535,568,567,73,80,613,14,19,15,395,
            569,43,406,599,405,409,407,525,523,555,
            535,568,567,73,79,613,14,19,15,395,
            569,43,406,767,405,409,407,525,523,555,
            535,568,567,73,78,613,14,19,15,395,
            569,43,406,813,405,409,407,525,523,555,
            535,568,567,73,77,613,14,19,15,395,
            569,43,406,472,405,409,407,525,523,555,
            535,568,567,73,76,613,14,19,15,395,
            569,43,406,154,405,409,407,525,523,555,
            535,568,567,73,75,613,14,19,15,395,
            569,43,406,287,405,409,407,525,523,555,
            535,568,567,73,74,613,14,19,15,395,
            42,43,643,133,210,351,203,592,262,117,
            532,135,132,134,158,613,14,19,15,395,
            569,43,406,333,405,409,407,525,523,555,
            535,568,567,73,1582,137,989,164,216,1108,
            218,1262,220,221,226,141,144,147,150,613,
            14,19,15,395,42,39,1370,1374,1459,1491,
            1497,1167,613,14,19,15,395,569,43,406,
            431,405,409,407,525,523,555,535,568,567,
            73,1624,613,14,19,15,395,42,43,406,
            658,405,409,407,525,523,555,535,568,567,
            92,613,14,19,15,395,42,43,406,711,
            405,409,407,525,523,555,535,568,567,92,
            613,14,19,15,395,42,43,406,1649,405,
            409,407,525,523,555,535,568,567,92,613,
            14,19,15,395,42,43,406,209,405,409,
            407,525,523,555,535,568,567,92,613,14,
            19,15,395,42,43,406,1653,405,409,407,
            525,523,555,535,568,567,92,613,14,19,
            15,395,42,43,406,200,405,409,407,525,
            523,555,535,568,567,72,719,305,739,195,
            257,620,49,257,201,1140,613,14,19,15,
            395,42,43,406,814,405,409,407,525,888,
            250,210,270,250,210,442,271,272,622,65,
            215,1108,218,1262,220,221,226,1544,263,1082,
            1081,268,535,451,259,251,210,680,562,141,
            1200,273,501,225,270,1549,745,260,457,597,
            141,1105,215,1108,218,1262,220,221,226,228,
            263,1082,1081,268,21,1123,1641,613,14,19,
            15,395,42,43,406,257,783,287,6,1356,
            613,14,19,15,395,42,43,406,1570,405,
            409,407,525,523,555,535,903,133,210,456,
            193,20,539,213,207,136,132,134,158,310,
            443,464,14,19,15,395,42,35,1324,613,
            14,19,15,395,42,43,406,20,803,138,
            1076,164,433,1719,243,343,1078,340,1719,142,
            145,148,151,215,1108,218,1262,220,221,226,
            464,14,19,15,395,42,35,1192,613,14,
            19,15,395,42,43,406,443,405,409,407,
            823,6,97,244,1324,613,14,19,15,395,
            42,43,406,243,405,409,843,20,1509,196,
            198,1080,1719,1719,238,1507,1388,224,1719,215,
            1108,218,1262,220,221,226,613,14,19,15,
            395,42,38,1192,613,14,19,15,395,42,
            43,406,1719,405,409,886,613,14,19,15,
            395,42,43,406,141,405,703,613,14,19,
            15,395,42,43,683,197,198,613,14,19,
            15,395,42,43,406,1719,405,723,613,14,
            19,15,395,42,43,406,501,405,743,613,
            14,19,15,395,42,43,406,161,405,763,
            328,375,744,885,756,1484,1719,1719,269,1129,
            613,14,19,15,395,42,37,1719,810,273,
            133,210,270,6,133,210,270,501,140,132,
            134,158,143,132,134,158,1719,6,263,1082,
            1081,268,263,1082,1081,268,240,20,20,275,
            291,20,139,1644,164,1529,1551,1356,1083,1532,
            239,262,613,14,19,15,395,42,36,613,
            14,19,15,395,42,35,613,14,19,15,
            395,42,34,20,20,761,192,761,1719,768,
            501,311,311,613,14,19,15,395,42,46,
            613,14,19,15,395,42,45,195,195,133,
            210,182,276,181,69,1371,1371,146,132,134,
            158,780,863,86,86,1719,744,792,587,587,
            613,14,19,15,395,42,44,47,1077,761,
            761,133,210,1719,340,863,1719,133,210,149,
            132,134,158,458,610,152,132,134,158,95,
            20,195,143,1570,255,26,279,863,1542,1122,
            863,1397,239,1079,69,562,496,1652,562,169,
            863,480,863,195,547,190,195,863,1719,105,
            1719,1122,1455,1607,1122,1656,195,863,1077,480,
            407,20,291,1077,1122,293,1719,190,1123,1569,
            190,20,6,1077,1457,1607,86,1628,1607,1510,
            190,309,1719,456,255,270,1123,1642,1607,255,
            257,1397,257,1079,1719,241,1643,191,1079,255,
            1719,265,1082,1081,268,863,1460,206,1079,531,
            250,210,250,210,6,1719,20,547,761,20,
            391,195,1372,1136,547,206,1645,547,600,1122,
            20,501,761,501,761,811,863,242,415,6,
            1496,1136,761,6,184,191,761,1719,392,88,
            392,1719,1077,222,1719,227,86,231,183,86,
            202,1168,290,1719,890,1719,292,1719,203,1719,
            1719,1719,319,611,1719,895,1719,1719,256,1719,
            1719,1719,1719,1719,1719,1719,1719,1719,1719,1719,
            1719,1719,1719,1719,1132,1719,0,17,178,0,
            18,177,0,1,1942,0,1,1953,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            5,11,12,13,14,15,16,17,18,0,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,0,0,43,44,45,0,1,0,3,
            2,5,6,7,8,9,51,0,10,13,
            14,15,16,17,0,1,2,0,0,5,
            0,4,4,0,10,29,30,31,32,33,
            34,35,36,37,38,39,40,46,42,43,
            44,45,19,47,0,1,0,3,2,5,
            6,7,8,9,0,41,10,13,14,15,
            16,17,55,56,57,58,0,1,50,3,
            53,54,80,29,30,31,32,33,34,35,
            36,37,38,39,40,19,42,43,44,45,
            0,47,0,1,4,3,0,5,6,7,
            8,9,0,0,50,13,14,15,16,17,
            0,0,2,0,18,5,0,4,0,1,
            10,29,30,31,32,33,34,35,36,37,
            38,39,40,0,42,43,44,45,0,47,
            0,1,0,3,0,5,6,7,8,9,
            0,41,0,13,14,15,16,17,55,56,
            57,58,0,1,0,3,53,54,50,29,
            30,31,32,33,34,35,36,37,38,39,
            40,19,42,43,44,45,0,47,0,1,
            46,3,0,5,6,7,8,9,6,7,
            8,13,14,15,16,17,0,55,56,57,
            58,0,6,7,8,65,0,29,30,31,
            32,33,34,35,36,37,38,39,40,18,
            42,43,44,45,0,47,0,1,4,3,
            0,0,6,7,8,9,6,7,8,13,
            14,15,16,17,0,1,2,0,4,0,
            1,0,3,0,10,29,30,31,32,33,
            34,35,36,37,38,39,40,0,19,43,
            44,45,0,6,7,8,9,53,54,0,
            13,14,15,16,17,0,1,2,0,4,
            0,1,2,0,4,10,29,30,31,32,
            33,34,35,36,37,38,39,40,0,1,
            2,3,4,5,0,0,2,9,4,11,
            12,6,7,8,10,46,18,0,20,21,
            22,23,24,25,26,27,28,65,11,12,
            0,1,2,3,4,5,0,0,2,9,
            4,11,12,6,7,8,10,64,18,51,
            20,21,22,23,24,25,26,27,28,0,
            0,0,0,1,0,1,2,3,4,5,
            0,0,0,1,2,11,12,6,7,8,
            0,51,18,19,20,21,22,23,24,25,
            26,27,28,0,1,2,3,4,5,0,
            1,0,3,0,11,12,42,48,49,0,
            1,18,3,20,21,22,23,24,25,26,
            27,28,61,62,64,0,1,2,3,4,
            0,59,0,1,2,5,11,12,68,69,
            60,0,0,18,51,20,21,22,23,24,
            25,26,27,28,0,0,1,2,3,4,
            0,0,61,62,0,5,11,12,0,5,
            0,41,47,18,19,20,21,22,23,24,
            25,26,27,28,0,1,2,3,4,48,
            49,0,1,0,3,11,12,0,1,0,
            3,41,18,19,20,21,22,23,24,25,
            26,27,28,0,1,2,3,4,48,49,
            59,0,0,0,11,12,0,59,0,0,
            66,18,19,20,21,22,23,24,25,26,
            27,28,0,1,2,3,4,48,49,0,
            0,0,0,11,12,0,63,0,0,10,
            18,10,20,21,22,23,24,25,26,27,
            28,0,1,2,3,4,48,49,0,50,
            0,0,11,12,63,0,60,0,10,18,
            10,20,21,22,23,24,25,26,27,28,
            0,1,2,3,4,0,19,0,0,0,
            0,11,12,0,5,0,0,0,18,0,
            20,21,22,23,24,25,26,27,28,0,
            52,2,52,4,5,6,7,8,9,10,
            0,0,13,14,15,16,17,0,0,2,
            41,4,5,6,7,8,9,10,0,19,
            13,14,15,16,17,60,0,19,0,0,
            41,0,0,0,0,70,71,72,73,74,
            75,76,77,78,79,0,0,19,41,0,
            0,6,7,8,9,5,0,0,13,14,
            15,16,17,6,7,8,9,11,12,0,
            13,14,15,16,17,6,7,8,9,46,
            46,0,13,14,15,16,17,6,7,8,
            9,0,42,2,13,14,15,16,17,0,
            0,10,0,0,5,5,0,0,0,0,
            0,20,21,11,12,5,0,0,0,0,
            0,0,19,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,41,0,52,0,46,46,0,0,0,
            0,0,42,0,0,0,0,0,67,0,
            0,0,0,0,0,66,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1719,631,1453,633,1439,1719,1930,1931,1932,1880,
            1722,1432,1380,1881,1879,1933,1882,1878,1446,1,
            377,366,333,1729,1730,1731,1732,1296,929,1885,
            1890,1889,1887,1888,1886,1891,1892,1884,1893,1894,
            1895,87,1719,1199,1193,889,1719,1,266,1,
            479,189,1,1,1,1,1721,58,503,1,
            1,1,1,1,1,1713,1109,47,1,1724,
            281,1500,1273,1719,503,1,1,1,1,1,
            1,1,1,1,1,1,1,635,189,1,
            1,1,1217,1913,1719,1,219,1,1127,189,
            1,1,1,1,1,1723,503,1,1,1,
            1,1,1359,1348,1337,1316,1719,1898,1973,1899,
            1470,1463,1706,1,1,1,1,1,1,1,
            1,1,1,1,1,1277,189,1,1,1,
            1719,1913,1719,1,1273,1,63,189,1,1,
            1,1,1719,60,1973,1,1,1,1,1,
            1,1719,1367,49,1248,1724,1719,1500,1,1716,
            503,1,1,1,1,1,1,1,1,1,
            1,1,1,1719,189,1,1,1,1719,1913,
            1719,1,1719,1,252,188,1,1,1,1,
            69,1723,59,1,1,1,1,1,1359,1348,
            1337,1316,1719,1898,1719,1899,1470,1463,1973,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1417,188,1,1,1,1719,1913,1719,1,
            1638,1,246,189,1,1,1,1,1,1,
            1,1,1,1,1,1,1719,1359,1348,1337,
            1316,64,1930,1931,1932,460,1719,1,1,1,
            1,1,1,1,1,1,1,1,1,1248,
            189,1,1,1,48,1913,1719,1897,1500,1896,
            247,1719,1930,1931,1932,1880,1,1,1,1881,
            1879,1933,1882,1878,258,1942,1109,1719,1,1719,
            1898,1719,1899,1719,503,1885,1890,1889,1887,1888,
            1886,1891,1892,1884,1893,1894,1895,127,1418,1199,
            1193,889,70,1930,1931,1932,1880,1470,1463,28,
            1881,1879,1933,1882,1878,264,1942,1109,1719,1420,
            1719,1942,364,67,1420,503,1885,1890,1889,1887,
            1888,1886,1891,1892,1884,1893,1894,1895,1,1736,
            1453,1737,1201,1722,261,245,1367,589,1,1432,
            1380,1930,1931,1932,503,435,1446,50,377,366,
            333,1729,1730,1731,1732,1296,929,460,1327,875,
            1719,1736,1453,1737,1240,1722,264,248,1367,942,
            1420,1432,1380,1930,1931,1932,503,572,1446,1721,
            377,366,333,1729,1730,1731,1732,1296,929,53,
            68,61,1719,1954,1,1736,1453,1737,1439,27,
            71,249,1,1942,364,1432,1380,1930,1931,1932,
            208,1721,1446,2850,377,366,333,1729,1730,1731,
            1732,1296,929,1719,1736,1453,1737,1439,1722,1719,
            1748,62,1749,1719,1432,1380,27,1157,1209,205,
            1898,1446,1899,377,366,333,1729,1730,1731,1732,
            1296,929,1304,1265,572,1719,1,1,1,1,
            1719,1019,1,1942,364,1724,1,1,1170,1629,
            981,57,1719,1,1721,1,1,1,1,1,
            1,1,1,1,1719,1,1736,1453,1737,1439,
            1,1719,1304,1265,1,89,1432,1380,199,1728,
            56,1723,2029,1446,2850,377,366,333,1729,1730,
            1731,1732,1296,929,1719,1736,1453,1737,1439,1157,
            1209,1719,1898,65,1899,1432,1380,204,1128,55,
            1128,89,1446,2850,377,366,333,1729,1730,1731,
            1732,1296,929,1,1736,1453,1737,1439,1157,1209,
            1057,66,1719,1719,1432,1380,1719,1038,54,1,
            1727,1446,2850,377,366,333,1729,1730,1731,1732,
            1296,929,1719,1736,1453,1737,1439,1157,1209,267,
            1719,217,1719,1432,1380,1719,1086,1719,1719,503,
            1446,503,377,366,333,1729,1730,1731,1732,1296,
            929,1719,1736,1454,1737,1439,1157,1209,1719,1972,
            287,1719,1432,1380,1086,1719,527,41,962,1446,
            1000,377,366,333,1729,1730,1731,1732,1296,929,
            1,1736,1453,1737,1439,42,1217,1719,1719,1,
            1719,1432,1380,1719,1724,1719,1719,1719,1446,1719,
            377,366,333,1729,1730,1731,1732,1296,929,17,
            1545,1707,1548,1707,1707,178,178,178,178,1707,
            186,1719,178,178,178,178,178,18,185,1710,
            1723,1710,1710,177,177,177,177,1710,1719,1421,
            177,177,177,177,177,855,1719,1530,187,1719,
            1707,1719,1719,28,204,835,815,795,775,755,
            715,735,695,675,655,128,1719,1571,1710,1719,
            1719,1930,1931,1932,1880,1726,52,129,1881,1879,
            1933,1882,1878,1930,1931,1932,1880,1327,875,130,
            1881,1879,1933,1882,1878,1930,1931,1932,1880,1746,
            2597,131,1881,1879,1933,1882,1878,1930,1931,1932,
            1880,31,1725,1619,1881,1879,1933,1882,1878,1719,
            1719,1626,51,1719,1728,1724,1719,1719,1719,1719,
            280,1743,1744,1327,875,1581,1719,1719,1719,1719,
            1719,1719,1640,1719,1719,1719,1719,1719,1719,1719,
            1719,1719,1719,1719,1719,1719,1719,1719,1719,1719,
            1719,1723,1719,455,1719,1256,1222,1719,1719,1719,
            1719,1719,1581,1719,1719,1719,1719,1719,390,1719,
            1719,1719,1719,1719,1719,1727
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            408,1,76,41,76,76,76,76,76,76,
            76,76,76,338,3,181,178,185,183,191,
            189,193,192,195,194,10,76,338,163,163,
            326,338,298,298,426,76,76,76,76,76,
            76,76,76,76,76,76,76,76,76,76,
            76,76,76,76,76,76,76,76,76,76,
            76,76,76,76,76,76,163,68,330,70,
            268,161,160,301,313,313,66,66,313,66,
            313,352,117,117,163,45,178,178,183,183,
            183,183,181,181,189,185,185,192,191,224,
            194,193,166,50,326,321,97,45,375,74,
            163,379,271,206,238,206,238,332,206,76,
            50,321,375,375,45,73,70,163,324,352,
            162,273,238,238,238,238,332,332,334,94,
            265,68,375,321,76,76,45,74,268,219,
            218,330,273,163,238,265,226,238,238,265,
            334,233,334,332,265,48,236,298,76,93,
            265,50,321,45,45,163,379,271,324,265,
            228,265,265,76,298,334,52,45,298,76,
            50,273,202,76,201,89,330,265,45,334,
            163,162,228,76,89,265,299,334
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,66,10,2,52,67,20,21,18,
            4,11,12,53,54,48,49,55,56,57,
            58,61,62,63,64,65,68,69,42,60,
            70,71,72,73,74,76,75,77,78,79,
            59,41,80,46,51,5,0,5,42,10,
            52,20,21,18,4,11,12,27,28,22,
            2,23,24,25,26,1,3,19,0,6,
            7,8,9,51,5,23,24,25,26,3,
            20,21,18,11,12,27,28,22,4,2,
            1,0,60,10,52,0,6,7,8,2,
            23,24,25,26,1,3,20,21,18,4,
            11,12,27,28,22,0,7,9,17,8,
            16,15,14,6,13,52,67,20,21,18,
            11,12,53,54,48,49,55,56,57,58,
            61,62,63,64,65,68,69,60,70,71,
            72,73,74,75,76,77,78,79,4,2,
            10,46,41,5,0,60,70,71,72,73,
            74,75,76,77,78,79,19,4,53,54,
            11,12,49,48,55,56,57,58,61,62,
            18,63,64,65,51,41,42,80,68,69,
            59,66,5,46,0,13,6,14,15,16,
            7,9,17,8,1,4,19,2,5,46,
            41,66,10,59,0,66,5,4,1,2,
            59,0,5,46,42,60,0,13,29,6,
            30,43,14,31,15,32,33,16,7,34,
            35,9,44,17,45,36,37,8,38,39,
            40,1,3,47,5,42,0,4,2,10,
            41,5,13,29,6,30,43,14,31,15,
            32,33,16,7,34,35,9,44,17,45,
            36,37,8,38,39,40,50,3,1,0,
            37,29,34,32,33,31,30,35,36,38,
            39,40,59,66,17,14,9,13,16,15,
            6,7,8,46,1,5,41,2,10,4,
            0,1,3,5,42,46,0,22,23,24,
            25,26,2,20,21,18,4,11,12,27,
            28,3,1,43,44,45,37,29,34,32,
            33,31,30,35,36,38,39,40,17,14,
            9,13,16,15,6,7,8,0,13,29,
            6,30,43,14,31,15,32,33,16,7,
            34,35,9,44,17,45,36,37,8,38,
            39,40,1,3,50,4,0,22,23,24,
            25,26,1,3,2,20,21,18,4,11,
            12,27,28,47,0,5,41,22,23,24,
            25,26,1,3,2,20,21,18,4,11,
            12,27,28,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            80,8,20,8,20,20,20,20,20,20,
            20,20,20,66,8,8,8,8,8,8,
            8,8,8,8,8,8,20,66,23,23,
            62,1,11,11,93,67,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,67,20,20,20,20,20,20,20,
            20,20,20,20,20,20,23,8,74,25,
            61,36,36,52,53,53,34,34,53,34,
            53,48,8,8,23,27,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,85,63,85,31,27,87,26,
            23,72,22,8,85,8,85,85,8,20,
            18,85,87,87,27,26,13,23,39,2,
            8,84,85,76,85,76,34,85,59,15,
            85,8,87,13,20,20,27,26,38,36,
            36,74,84,23,76,70,45,89,76,70,
            59,8,8,34,70,17,8,34,20,29,
            70,85,13,27,27,23,72,22,40,70,
            55,70,70,20,34,59,19,27,34,20,
            18,83,46,20,8,55,74,70,27,59,
            23,23,55,20,42,70,8,9
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,78,77,76,75,74,73,0,89,0,
            69,0,20,0,91,0,67,8,61,4,
            0,8,22,0,8,4,23,0,93,0,
            4,8,0,27,0,25,0,22,8,43,
            42,36,34,0,8,68,0,62,63,64,
            65,52,28,0,8,36,34,0,51,0,
            22,8,43,42,0,32,8,45,0,26,
            0,8,24,49,0,56,8,32,0,8,
            84,0,87,24,8,0,58,0,8,32,
            48,0,8,85,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,69,1,
            10,11,44,55,60,63,72,8,3,6,
            7,68,81,82,83,84,12,13,47,52,
            56,61,62,66,67,74,75,78,79,80,
            90,91,54,70,73,42,93,16,17,30,
            89,4,14,15,18,19,20,21,29,31,
            22,23,24,25,26,92,5,27,28,32,
            33,34,35,36,37,38,39,40,41,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,101,105,106,107,0,108,109,
            110,111,112,113,114,115,116,117,118,129,
            0,97,96,122,149,98,121,128,0,0,
            0,140,145,147,0,148,0,0,0,0,
            158,159,160,0,100,120,137,139,146,155,
            0,131,136,0,0,138,150,153,154,157,
            0,132,133,134,135,144,161,99,102,103,
            104,119,123,124,125,126,127,130,142,0,
            0,143,152,95,0,141,151,156,0,162,
            163,0,164,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            162,82,35,41,91,111,117,12,142,21,
            51,69,123,128,28,47,101,158,180,184,
            151,1,1,32,56,79,188,6,105,133,
            170,97,59,59,59
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            89,89,4,4,89,89,89,18,148,26,
            4,26,89,89,26,4,99,26,26,4,
            155,4,4,26,4,26,26,9,108,136,
            173,99,66,61,74
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            4,64,25,25,64,62,62,53,100,44,
            25,39,62,62,44,25,48,5,4,4,
            18,93,92,42,25,36,2,67,48,101,
            4,48,39,37,39
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            42,42,51,51,42,42,42,42,86,41,
            51,41,42,42,41,51,66,41,41,51,
            59,51,51,41,51,41,41,60,1,92,
            41,66,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            34,19,23,23,19,19,19,88,-1,27,
            23,11,19,19,27,23,5,34,34,34,
            63,1,3,27,23,11,34,89,5,-1,
            34,5,11,11,11
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            139,10,0,96,0,183,101,0,31,136,
            0,144,164,101,19,154,0,98,0,0,
            150,101,2,135,0,97,0,150,101,2,
            0,153,2,0,112,9,176,101,10,0,
            112,176,101,9,10,0,112,9,10,0,
            112,176,101,10,0,112,10,0,129,0,
            2,0,151,97,0,2,97,0,150,101,
            2,129,0,2,0,150,97,0,140,2,
            0,144,174,101,19,120,43,0,98,0,
            144,174,101,19,43,0,125,0,99,0,
            179,101,125,0,101,125,0,141,99,0,
            148,101,19,120,45,0,148,101,19,120,
            44,0,148,101,19,45,0,148,101,19,
            44,0,189,85,0,77,2,100,97,99,
            0,189,115,138,2,89,0,53,0,0,
            138,69,110,0,29,117,0,163,2,22,
            0,144,164,101,19,115,163,2,0,163,
            2,0,97,3,0,104,0,98,0,178,
            2,97,0,138,10,97,0,138,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            570,0,393,0,1542,1607,1532,1529,1507,0,
            885,1256,364,1200,456,1109,1077,0,863,1167,
            311,0,1262,1108,1082,1081,456,1109,1077,1570,
            1367,1371,0,1240,1201,460,1170,1086,572,1304,
            1265,1248,1209,1157,1359,1348,1337,1316,1500,1470,
            1463,1327,875,377,366,1446,1439,1432,1380,1296,
            929,333,1038,1019,1000,981,962,942,895,611,
            1057,589,503,855,835,815,795,775,755,735,
            715,695,675,655,311,635,547,527,415,435,
            343,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,177,101,165,22,28,27,12,11,4,
            18,21,20,2,97,102,100,104,103,106,
            105,108,107,110,109,98,46,2,163,138,
            125,101,67,52,2,10,12,11,54,53,
            4,58,57,56,55,48,49,18,62,61,
            64,63,69,68,65,79,78,77,75,76,
            74,73,72,71,70,60,163,115,101,10,
            2,136,135,166,167,168,45,44,169,43,
            170,171,1,3,178,138,100,100,103,103,
            103,103,102,102,105,104,104,107,106,138,
            109,108,115,19,142,4,9,112,101,4,
            153,101,2,120,19,120,19,19,120,59,
            101,4,101,101,112,176,151,150,117,101,
            152,101,19,101,19,101,101,19,164,101,
            19,154,101,151,176,9,112,4,2,127,
            129,101,46,150,101,148,125,149,101,148,
            174,120,175,101,144,46,183,52,10,184,
            101,19,151,112,112,140,101,2,142,148,
            101,148,144,60,46,174,60,139,52,10,
            101,101,179,59,140,2,101,144,139,164,
            150,180,46,59,142,144,46,119
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_cast_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_name",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_or_typedefname",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 47,
           SCOPE_UBOUND      = 34,
           SCOPE_SIZE        = 35,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 208,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2029,
           MAX_LA            = 2,
           NUM_RULES         = 310,
           NUM_NONTERMINALS  = 117,
           NUM_SYMBOLS       = 210,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1546,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1706,
           ERROR_ACTION      = 1719;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
