/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99SizeofExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, C99SizeofExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            1,4,1,3,3,3,1,3,3,1,
            3,3,1,3,3,3,3,1,3,3,
            1,3,1,3,1,3,1,3,1,3,
            1,5,1,3,3,3,3,3,3,3,
            3,3,3,3,1,1,2,1,0,1,
            3,1,1,1,1,1,1,1,1,3,
            3,2,2,4,1,2,1,1,1,2,
            5,7,5,1,0,7,5,9,8,3,
            2,2,2,3,2,4,2,2,2,2,
            2,1,1,1,1,2,1,2,2,2,
            1,2,2,1,2,2,1,2,2,1,
            2,2,1,3,1,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            5,5,6,6,2,2,2,1,0,1,
            2,4,2,1,1,3,1,1,2,3,
            6,7,1,0,1,3,1,3,1,1,
            1,1,1,1,3,1,1,1,1,1,
            3,1,2,2,1,5,3,1,3,5,
            1,3,1,3,2,4,3,5,4,6,
            6,3,5,1,1,2,3,4,1,2,
            1,3,1,1,3,2,1,1,1,1,
            2,1,2,3,1,1,1,3,1,2,
            2,2,3,4,5,1,5,1,1,3,
            3,4,1,1,2,3,2,3,2,1,
            0,1,2,1,1,1,1,1,2,4,
            3,6,2,4,1,1,-36,0,0,0,
            0,0,0,0,0,-2,0,0,0,0,
            0,0,0,0,0,0,0,0,-5,0,
            0,0,0,0,0,0,0,0,-121,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-177,
            0,-12,0,0,0,0,0,0,0,0,
            0,-13,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-127,-4,-14,-140,-169,
            -104,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-16,0,-170,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-165,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-29,
            -30,-33,-34,-3,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-17,0,-49,0,0,0,0,0,0,
            0,0,-18,0,0,0,-72,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-71,0,0,0,
            -19,-20,-21,-22,0,-107,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-126,0,0,0,0,
            0,0,0,0,-23,0,0,0,0,0,
            0,0,0,0,0,0,-24,-25,0,-185,
            0,0,0,0,0,0,0,0,-26,0,
            0,0,0,0,0,0,0,0,0,-27,
            0,0,0,0,0,0,0,0,-85,0,
            0,0,0,0,0,0,0,0,0,-86,
            -87,-139,-88,-56,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-57,0,0,0,0,0,0,
            0,0,-89,0,0,0,0,0,0,0,
            0,0,0,-58,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-59,0,0,0,0,0,0,
            0,0,-90,0,0,0,0,0,0,0,
            0,0,0,-60,0,0,0,0,0,0,
            0,0,-91,0,0,0,0,0,0,0,
            0,0,0,-61,0,0,0,0,0,0,
            0,0,-92,0,0,0,0,0,0,0,
            0,0,0,-62,0,0,0,0,0,0,
            0,0,-93,0,0,0,0,0,0,0,
            0,0,0,-63,0,0,0,0,0,0,
            0,0,-94,0,0,0,0,0,0,0,
            0,0,0,-64,0,0,0,0,0,0,
            0,0,-191,0,0,0,0,0,0,0,
            0,0,0,-65,0,0,0,0,0,0,
            0,0,-95,0,0,0,0,0,0,0,
            0,0,0,-66,0,0,0,0,0,0,
            0,0,-130,0,0,0,0,0,0,0,
            0,0,0,-46,0,0,0,0,0,0,
            0,0,0,0,-96,-97,-98,-99,-79,0,
            0,0,0,0,-144,0,0,0,0,0,
            0,0,0,-100,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-101,-102,-103,
            -151,-114,-80,0,0,0,0,-6,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -145,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -168,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-182,
            0,0,0,0,0,0,0,0,-116,0,
            0,0,0,0,0,0,0,0,-37,0,
            0,0,0,0,0,0,0,-47,0,0,
            0,0,0,0,0,0,-188,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-192,0,0,0,0,
            0,0,0,0,-82,0,0,0,0,0,
            0,0,0,0,-38,0,0,0,0,0,
            0,0,0,-7,0,0,0,0,0,0,
            -119,0,-202,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-120,0,0,0,0,0,0,0,0,
            -131,0,0,0,0,0,0,0,0,0,
            -129,-8,0,0,0,0,0,0,0,0,
            -51,0,0,0,0,0,0,0,0,-155,
            0,0,0,0,0,0,-161,-162,-123,-69,
            -142,-148,-74,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-203,0,0,0,
            0,0,0,0,-113,-67,0,0,-166,-193,
            0,-204,-106,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-54,0,0,0,0,0,0,0,
            0,-160,0,0,0,0,0,0,0,-55,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-52,0,0,0,0,
            0,0,0,0,-84,0,0,0,0,-76,
            -179,-9,0,0,0,0,0,0,-115,0,
            0,-143,0,0,0,0,-167,0,-68,0,
            0,-171,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-184,0,0,0,0,-75,
            0,0,-77,0,-111,0,0,0,0,-48,
            0,0,0,0,0,0,0,0,-201,0,
            0,0,0,0,0,-152,0,0,0,0,
            0,0,0,0,0,0,-50,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-10,0,
            0,0,0,0,0,0,-42,0,0,0,
            0,0,0,0,0,0,0,-43,0,0,
            0,0,0,0,0,0,-117,0,-11,0,
            0,0,0,0,0,0,0,0,-44,0,
            0,0,0,0,0,0,0,-108,0,-45,
            0,0,0,0,0,0,0,0,-194,0,
            -73,-187,-156,-109,-118,-35,-124,0,0,0,
            0,0,0,0,0,-110,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -147,0,0,0,0,0,0,-15,-28,-31,
            0,0,-122,-78,0,0,0,0,0,0,
            0,0,-125,0,-39,0,0,0,0,0,
            0,0,0,0,0,0,0,-133,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-40,0,0,0,0,0,
            0,-41,0,0,0,0,0,0,-70,0,
            0,0,0,0,0,-81,0,0,-112,-83,
            0,-135,0,-195,0,-138,0,0,-134,-176,
            0,-128,-136,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-154,0,0,-158,0,0,
            0,0,-141,0,0,-149,0,0,0,-137,
            -175,0,0,-190,-105,0,0,0,0,0,
            0,0,0,0,0,-146,0,0,0,0,
            0,-1,0,0,0,-32,0,0,-132,0,
            0,-150,0,-153,0,0,-163,0,0,0,
            0,-189,0,0,-183,0,0,0,0,0,
            0,-172,0,0,-174,0,0,0,-157,0,
            0,0,0,0,0,0,0,0,-53,-159,
            0,0,-164,-173,0,-199,0,0,0,0,
            0,-178,0,-200,-180,0,-181,0,-186,0,
            0,-197,0,-196,-198,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            83,9,23,23,22,22,26,26,67,67,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,51,51,68,
            68,5,5,5,5,5,5,5,5,5,
            5,6,6,7,7,7,7,8,8,8,
            10,10,10,11,11,11,11,11,12,12,
            12,13,13,14,14,15,15,16,16,17,
            17,18,18,19,19,19,19,19,19,19,
            19,19,19,19,19,93,45,40,84,84,
            71,71,46,94,94,94,94,94,94,94,
            95,95,95,96,96,101,101,102,102,97,
            97,98,98,98,104,104,99,99,99,99,
            100,100,100,100,100,103,103,24,24,24,
            24,24,28,28,28,77,77,72,72,72,
            72,73,73,73,74,74,74,75,75,75,
            76,76,76,105,105,106,106,107,29,31,
            31,31,31,31,52,54,54,54,54,54,
            54,54,54,54,54,54,54,64,64,27,
            27,61,61,61,61,62,62,62,55,55,
            56,56,48,48,32,85,85,78,79,79,
            79,63,63,80,80,81,81,65,65,20,
            21,21,21,30,47,47,33,33,33,33,
            36,36,38,34,34,35,39,39,108,108,
            37,109,109,86,86,25,25,25,25,25,
            25,25,25,25,82,49,49,49,49,58,
            58,57,57,57,59,59,50,50,87,87,
            69,69,60,60,60,41,41,41,42,43,
            43,43,44,44,44,44,53,53,70,70,
            70,70,66,88,89,89,90,90,91,91,
            110,110,111,111,112,112,112,112,114,114,
            113,113,113,115,115,83,83,1,14,19,
            15,388,579,43,482,408,194,521,493,523,
            522,555,524,568,567,73,90,133,209,362,
            14,19,15,388,40,135,132,134,158,292,
            14,19,15,388,579,43,482,408,389,521,
            493,523,522,555,524,568,567,73,276,137,
            480,164,362,14,19,15,388,33,141,144,
            147,150,362,14,19,15,388,32,387,1210,
            1263,1444,1506,1510,1205,269,556,407,52,290,
            490,24,278,215,1556,217,1592,219,220,225,
            339,264,1260,1103,267,279,250,209,69,612,
            292,14,19,15,388,579,43,482,408,389,
            521,493,523,522,555,524,568,567,73,276,
            195,14,19,15,388,579,43,482,408,389,
            521,493,523,522,555,524,568,567,73,276,
            98,98,578,578,340,14,19,15,388,579,
            43,482,408,278,521,493,523,522,555,524,
            568,567,73,90,1499,16,279,1129,390,284,
            1602,285,251,280,340,14,19,15,388,41,
            43,482,408,30,521,845,281,145,14,19,
            15,388,579,43,482,408,1384,521,493,523,
            522,555,524,568,567,73,1368,389,23,22,
            235,36,622,51,347,387,384,14,19,15,
            388,579,43,482,408,1387,521,493,523,522,
            555,524,568,567,73,1453,170,14,19,15,
            388,579,43,482,408,10,521,493,523,522,
            555,524,568,567,73,1576,1565,101,6,236,
            316,14,19,15,388,579,43,482,408,390,
            521,493,523,522,555,524,568,567,73,276,
            340,14,19,15,388,579,43,482,408,406,
            521,493,523,522,555,524,568,567,73,91,
            416,273,640,321,340,14,19,15,388,579,
            43,482,408,282,521,493,523,522,555,524,
            568,567,73,84,340,14,19,15,388,579,
            43,482,408,566,521,493,523,522,555,524,
            568,567,73,83,340,14,19,15,388,579,
            43,482,408,1633,521,493,523,522,555,524,
            568,567,73,82,340,14,19,15,388,579,
            43,482,408,570,521,493,523,522,555,524,
            568,567,73,81,340,14,19,15,388,579,
            43,482,408,581,521,493,523,522,555,524,
            568,567,73,80,340,14,19,15,388,579,
            43,482,408,584,521,493,523,522,555,524,
            568,567,73,79,340,14,19,15,388,579,
            43,482,408,217,521,493,523,522,555,524,
            568,567,73,78,340,14,19,15,388,579,
            43,482,408,582,521,493,523,522,555,524,
            568,567,73,77,340,14,19,15,388,579,
            43,482,408,574,521,493,523,522,555,524,
            568,567,73,76,340,14,19,15,388,579,
            43,482,408,117,521,493,523,522,555,524,
            568,567,73,75,340,14,19,15,388,579,
            43,482,408,49,521,493,523,522,555,524,
            568,567,73,74,340,14,19,15,388,41,
            43,482,743,133,209,62,78,587,624,345,
            192,135,132,134,158,340,14,19,15,388,
            579,43,482,408,314,521,493,523,522,555,
            524,568,567,73,1612,137,882,164,420,393,
            500,389,609,521,141,144,147,150,340,14,
            19,15,388,41,39,1210,1263,1444,1506,1510,
            1205,340,14,19,15,388,579,43,482,408,
            949,521,493,523,522,555,524,568,567,73,
            1634,340,14,19,15,388,41,43,482,408,
            360,521,493,523,522,555,524,568,567,92,
            340,14,19,15,388,41,43,482,408,635,
            521,493,523,522,555,524,568,567,92,340,
            14,19,15,388,41,43,611,1649,340,14,
            19,15,388,41,43,482,763,340,14,19,
            15,388,41,43,482,408,208,521,493,523,
            522,555,524,568,567,92,340,14,19,15,
            388,41,43,482,408,545,521,493,523,522,
            555,524,568,567,92,340,14,19,15,388,
            41,43,613,1652,340,14,19,15,388,41,
            38,637,1031,340,14,19,15,388,41,43,
            482,408,199,521,493,523,522,555,524,568,
            567,92,340,14,19,15,388,41,43,482,
            408,638,521,493,523,522,555,524,568,567,
            72,448,340,14,19,15,388,41,37,200,
            881,340,14,19,15,388,41,43,482,408,
            606,521,493,523,522,847,269,588,646,547,
            580,547,511,193,214,1556,217,1592,219,220,
            225,1561,262,1260,1103,267,182,31,258,249,
            209,249,209,20,272,591,578,269,270,594,
            645,259,63,120,1589,214,1556,217,1592,219,
            220,225,1099,262,1260,1103,267,273,880,1615,
            215,1556,217,1592,219,220,225,1222,256,1232,
            1696,1696,1265,340,14,19,15,388,41,43,
            482,408,643,521,493,523,522,555,524,878,
            340,14,19,15,388,41,43,482,408,1696,
            521,493,523,522,555,879,340,14,19,15,
            388,41,43,482,408,49,521,493,523,848,
            97,243,340,14,19,15,388,41,36,24,
            1514,1696,565,1647,1696,133,209,627,1519,578,
            133,209,569,136,132,134,158,1696,140,132,
            134,158,250,209,214,1556,217,1592,219,220,
            225,21,250,209,287,643,1696,138,1130,164,
            427,1696,139,447,164,578,142,145,148,151,
            340,14,19,15,388,41,43,482,408,243,
            521,493,803,133,209,271,642,268,1514,195,
            197,143,132,134,158,823,783,340,14,19,
            15,388,41,43,482,408,1654,521,846,1696,
            1071,1696,214,1556,217,1592,219,220,225,340,
            14,19,15,388,41,35,1130,340,14,19,
            15,388,41,43,482,408,255,643,340,14,
            19,15,388,41,43,482,408,24,683,340,
            14,19,15,388,41,34,1523,196,197,340,
            14,19,15,388,41,43,482,408,580,703,
            340,14,19,15,388,41,43,482,408,151,
            723,532,627,618,547,24,533,547,1514,1696,
            1509,237,1211,1696,1560,517,221,14,19,15,
            388,41,35,272,249,209,269,249,209,289,
            1696,269,214,1556,217,1592,219,220,225,242,
            1696,1696,262,1260,1103,267,1615,262,1260,1103,
            267,221,14,19,15,388,41,35,24,24,
            514,1265,386,552,470,386,261,307,307,454,
            193,1696,1101,580,243,340,14,19,15,388,
            41,46,194,194,133,209,546,1696,24,855,
            1386,1386,146,132,134,158,239,1545,86,86,
            88,1696,1696,453,453,340,14,19,15,388,
            41,45,340,14,19,15,388,41,44,268,
            14,19,15,388,41,42,479,452,1126,586,
            502,1696,24,1696,389,1696,24,1696,823,590,
            591,1548,578,590,1229,1597,133,209,823,1564,
            133,209,823,1071,149,132,134,158,152,132,
            134,158,227,194,274,590,1696,194,590,1696,
            1696,1383,1696,24,823,1383,417,823,1565,254,
            599,586,410,1117,219,548,1522,190,1061,194,
            823,190,194,823,1090,1619,580,1383,1630,1619,
            1383,224,246,1696,1696,1071,24,1097,1071,458,
            269,454,608,190,578,454,190,599,823,238,
            1642,1619,640,1645,1619,627,264,1260,1103,267,
            360,254,580,1071,254,578,275,223,1522,621,
            1061,1636,86,1061,1097,205,86,305,823,24,
            606,1100,1097,606,580,240,578,221,454,254,
            1172,1098,606,194,488,606,1594,606,1061,580,
            1644,1383,580,1655,606,606,181,241,226,26,
            1696,1696,205,1696,1696,316,230,191,184,86,
            206,183,286,201,864,288,1696,1255,1098,1696,
            202,277,1696,0,17,178,0,18,177,0,
            1,1918,0,1,1929,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,0,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,0,24,25,26,27,28,0,
            0,1,2,3,0,0,36,37,38,39,
            40,41,42,43,44,45,46,47,0,1,
            0,0,4,2,6,7,8,57,58,59,
            9,0,0,1,13,14,31,32,0,64,
            22,62,24,25,26,27,28,0,10,11,
            51,52,53,54,36,37,38,39,40,41,
            42,43,44,45,46,47,0,0,1,48,
            0,4,6,7,8,57,58,59,0,0,
            60,61,51,52,53,54,0,66,22,0,
            24,25,26,27,28,6,7,8,51,52,
            53,54,36,37,38,39,40,41,42,43,
            44,45,46,47,0,1,2,3,4,5,
            0,1,2,0,10,11,12,13,14,15,
            16,17,18,19,20,21,22,67,68,0,
            1,2,3,4,5,0,60,61,34,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,0,0,0,1,2,3,4,5,
            0,9,0,34,10,11,12,13,14,15,
            16,17,18,19,20,21,0,23,0,1,
            0,1,2,3,4,5,10,11,0,35,
            10,11,12,13,14,15,16,17,18,19,
            20,21,0,1,2,0,1,2,3,4,
            0,33,0,3,34,10,11,12,13,14,
            15,16,17,18,19,20,21,0,1,2,
            3,4,0,80,0,3,0,10,11,12,
            13,14,15,16,17,18,19,20,21,0,
            23,0,1,2,3,4,0,55,9,49,
            50,10,11,12,13,14,15,16,17,18,
            19,20,21,0,23,0,1,2,3,4,
            0,49,50,3,79,10,11,12,13,14,
            15,16,17,18,19,20,21,48,23,0,
            1,2,3,4,0,1,0,0,4,10,
            11,12,13,14,15,16,17,18,19,20,
            21,0,1,2,3,4,0,23,55,49,
            50,10,11,12,13,14,15,16,17,18,
            19,20,21,0,1,2,3,4,0,0,
            0,3,0,10,11,12,13,14,15,16,
            17,18,19,20,21,0,0,2,3,63,
            5,6,7,8,9,0,0,2,3,0,
            5,6,7,8,9,9,0,22,2,24,
            25,26,27,28,29,9,30,22,0,24,
            25,26,27,28,29,56,0,0,1,2,
            3,0,6,7,8,63,9,0,69,70,
            71,72,73,74,75,76,77,78,22,0,
            24,25,26,27,28,6,7,8,0,0,
            1,2,3,64,6,7,8,0,9,0,
            33,22,5,24,25,26,27,28,9,0,
            22,0,24,25,26,27,28,6,7,8,
            0,1,2,0,0,5,29,30,5,9,
            0,1,23,22,4,24,25,26,27,28,
            0,0,0,2,2,3,5,48,0,29,
            9,9,29,23,0,1,0,0,4,2,
            3,0,6,7,8,0,9,6,7,8,
            29,6,7,8,0,0,0,23,0,0,
            6,7,8,0,6,7,8,0,5,0,
            0,0,5,0,5,0,0,0,3,0,
            0,10,11,0,5,5,31,32,0,1,
            31,32,4,30,0,0,29,0,0,2,
            5,31,32,34,31,32,9,0,33,29,
            0,0,5,0,35,5,0,1,0,1,
            4,23,4,12,0,12,0,0,65,0,
            35,0,0,56,0,0,0,0,62,56,
            0,0,0,0,0,35,0,23,0,23,
            0,0,0,0,0,0,0,30,0,30,
            0,0,30,0,33,30,0,0,0,0,
            0,0,65,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,55,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1696,599,1438,1319,610,69,1906,1907,1908,65,
            1212,1072,1349,372,362,329,1706,1707,1708,1709,
            1024,888,1857,1,1858,1856,1909,1859,1855,58,
            1696,1918,1379,1443,1696,53,1862,1867,1866,1864,
            1865,1863,1868,1869,1861,1870,1871,1872,1696,1874,
            61,31,1873,1440,1906,1907,1908,1005,883,849,
            1586,60,1696,1930,1720,1721,834,968,50,1180,
            1857,1196,1858,1856,1909,1859,1855,59,1015,959,
            1370,1359,1338,1327,1862,1867,1866,1864,1865,1863,
            1868,1869,1861,1870,1871,1872,127,1696,1725,451,
            71,1726,1906,1907,1908,1005,883,849,1696,1696,
            1297,484,1370,1359,1338,1327,62,450,1857,245,
            1858,1856,1909,1859,1855,1,1,1,1370,1359,
            1338,1327,1862,1867,1866,1864,1865,1863,1868,1869,
            1861,1870,1871,1872,1,1713,1438,1396,1714,1699,
            1,1918,1379,1696,1212,1072,1349,372,362,329,
            1706,1707,1708,1709,1024,888,526,1163,1629,1696,
            1713,1438,1431,1714,1699,1696,1297,484,1698,1212,
            1072,1349,372,362,329,1706,1707,1708,1709,1024,
            888,901,266,1696,1,1713,1438,1319,1714,27,
            1696,497,1696,1698,1212,1072,1349,372,362,329,
            1706,1707,1708,1709,1024,888,52,1553,1,1693,
            1696,1713,1438,1319,1714,1699,1015,959,1696,27,
            1212,1072,1349,372,362,329,1706,1707,1708,1709,
            1024,888,1,1918,1379,1696,1,1,1,1,
            47,1949,1696,1492,1698,1,1,1,1,1,
            1,1,1,1,1,1,1,1696,1713,1438,
            1319,1714,49,1683,1696,1492,1696,1212,1072,1349,
            372,362,329,1706,1707,1708,1709,1024,888,1696,
            391,1,1713,1438,1319,1714,1696,996,921,1485,
            1455,1212,1072,1349,372,362,329,1706,1707,1708,
            1709,1024,888,1696,1553,1696,1713,1438,1319,1714,
            48,1485,1455,1492,2002,1212,1072,1349,372,362,
            329,1706,1707,1708,1709,1024,888,1227,1553,1696,
            1713,1438,1319,1714,1696,1875,67,1696,1876,1212,
            1072,1349,372,362,329,1706,1707,1708,1709,1024,
            888,1696,1713,1439,1319,1714,1696,1219,1052,1485,
            1455,1212,1072,1349,372,362,329,1706,1707,1708,
            1709,1024,888,1,1713,1438,1319,1714,1696,41,
            1696,1133,68,1212,1072,1349,372,362,329,1706,
            1707,1708,1709,1024,888,17,87,1684,1684,1081,
            1684,178,178,178,1684,18,216,1687,1687,70,
            1687,177,177,177,1687,497,265,178,1125,178,
            178,178,178,178,1684,497,590,177,1696,177,
            177,177,177,177,1687,814,128,257,1918,1102,
            1,1696,1906,1907,1908,1081,497,1,794,774,
            754,734,714,674,694,654,634,614,1857,129,
            1858,1856,1909,1859,1855,1906,1907,1908,130,263,
            1918,1102,1443,1180,1906,1907,1908,1696,497,283,
            1949,1857,1701,1858,1856,1909,1859,1855,977,1696,
            1857,131,1858,1856,1909,1859,1855,1906,1907,1908,
            1,1690,1102,1,1696,1701,1700,1132,89,497,
            1696,1875,391,1857,1876,1858,1856,1909,1859,1855,
            1696,1,260,1381,1381,1,1701,1382,1696,1700,
            497,497,89,1347,1696,1875,1696,263,1876,1381,
            1443,246,1906,1907,1908,244,497,1,1,1,
            1700,1906,1907,1908,247,57,1696,1385,248,56,
            1906,1907,1908,1696,1906,1907,1908,1696,1705,1696,
            55,51,1701,54,1699,1,66,207,1133,1,
            1,1015,959,1696,189,1701,834,968,204,1875,
            834,968,1876,1279,1696,1696,1700,218,186,1520,
            1703,834,968,1698,834,968,497,1,1949,1700,
            1,63,1705,64,189,188,1696,1875,203,1605,
            1876,1468,1605,1270,185,1270,187,251,1704,28,
            1702,1,28,940,198,203,1696,1696,1196,570,
            1696,1696,1696,1696,1696,188,1696,1512,1696,1516,
            1696,1696,1696,1696,1696,1696,1696,1286,1696,430,
            1696,1696,1723,1696,1948,2631,1696,1696,1696,1696,
            1696,1696,1704,1696,1696,1696,1696,1696,1696,1696,
            1696,1696,1696,1696,1696,1696,1696,1696,1696,1033
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            414,1,108,41,108,108,108,108,108,108,
            108,108,108,3,325,77,74,81,79,87,
            85,89,88,91,90,10,108,325,309,309,
            366,108,191,191,244,325,108,108,108,108,
            108,108,108,108,108,108,108,108,108,108,
            108,108,108,108,108,108,108,108,108,108,
            108,108,108,108,108,108,191,191,45,56,
            248,102,279,189,188,219,231,231,70,70,
            231,70,231,339,145,145,74,74,79,79,
            79,79,77,77,85,81,81,88,87,212,
            90,89,72,54,244,239,125,45,362,106,
            191,385,282,194,250,194,250,319,194,108,
            54,239,362,362,45,105,102,191,242,339,
            190,284,250,250,250,250,319,319,321,49,
            54,362,239,108,108,45,106,279,207,206,
            248,284,191,250,276,312,250,250,276,321,
            214,321,319,276,52,217,309,108,48,54,
            239,45,45,191,385,282,242,276,314,276,
            276,108,309,321,56,45,309,108,321,284,
            98,108,97,121,248,276,45,276,191,190,
            314,108,121,310
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,65,9,2,48,66,13,14,12,
            3,10,11,49,50,31,32,51,52,53,
            54,60,61,62,63,64,67,68,35,56,
            69,70,71,72,73,75,74,76,77,78,
            55,29,80,30,34,5,0,56,9,48,
            0,5,35,9,48,13,14,12,3,10,
            11,20,21,15,2,16,17,18,19,1,
            4,23,0,3,49,50,10,11,32,31,
            51,52,53,54,60,61,12,62,63,64,
            34,29,35,80,67,68,55,65,5,30,
            0,6,7,8,22,34,5,16,17,18,
            19,4,13,14,12,10,11,20,21,15,
            3,2,1,0,6,7,8,2,16,17,
            18,19,1,4,13,14,12,3,10,11,
            20,21,15,0,7,22,28,8,27,26,
            25,6,24,48,66,13,14,12,10,11,
            49,50,31,32,51,52,53,54,60,61,
            62,63,64,67,68,56,69,70,71,72,
            73,74,75,76,77,78,3,2,9,30,
            29,5,0,24,6,25,26,27,7,22,
            28,8,1,3,23,2,5,30,29,65,
            9,55,0,5,30,35,56,0,44,36,
            41,39,40,38,37,42,43,45,46,47,
            55,65,28,25,22,24,27,26,6,7,
            8,30,1,5,29,2,9,3,0,24,
            36,6,37,57,25,38,26,39,40,27,
            7,41,42,22,58,28,59,43,44,8,
            45,46,47,1,4,35,5,0,3,2,
            9,29,5,24,36,6,37,57,25,38,
            26,39,40,27,7,41,42,22,58,28,
            59,43,44,8,45,46,47,33,4,1,
            0,65,5,3,1,2,55,0,1,4,
            5,35,30,0,15,16,17,18,19,2,
            13,14,12,3,10,11,20,21,4,1,
            57,58,59,44,36,41,39,40,38,37,
            42,43,45,46,47,28,25,22,24,27,
            26,6,7,8,0,5,29,15,16,17,
            18,19,1,4,2,13,14,12,3,10,
            11,20,21,0,24,36,6,37,57,25,
            38,26,39,40,27,7,41,42,22,58,
            28,59,43,44,8,45,46,47,1,4,
            33,3,0,15,16,17,18,19,1,4,
            2,13,14,12,3,10,11,20,21,79,
            0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            83,8,17,8,17,17,17,17,17,17,
            17,17,17,8,64,8,8,8,8,8,
            8,8,8,8,8,8,17,64,19,19,
            68,65,41,41,55,1,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,65,17,17,17,17,17,17,17,
            17,17,17,17,17,17,41,41,23,17,
            73,21,54,38,38,47,48,48,27,27,
            48,27,48,43,8,8,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,81,56,81,16,23,62,22,
            41,71,40,8,81,8,81,81,8,17,
            16,81,62,62,23,22,9,41,32,2,
            8,80,81,75,81,75,27,81,25,11,
            81,62,9,17,17,23,22,31,38,38,
            73,80,41,75,29,59,86,75,29,25,
            8,8,27,29,15,8,27,17,13,16,
            9,23,23,41,71,40,33,29,50,29,
            29,17,27,25,17,23,27,17,25,79,
            60,17,8,50,73,29,23,29,41,41,
            50,17,35,8
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,77,76,75,74,73,72,0,20,0,
            89,0,91,0,66,9,4,0,68,0,
            9,4,23,0,51,0,27,0,26,0,
            22,9,43,42,36,34,0,25,0,9,
            22,0,61,62,63,64,52,28,0,9,
            36,34,0,22,9,43,42,0,9,67,
            0,58,0,32,9,45,0,9,84,0,
            9,24,49,0,56,9,32,0,86,24,
            9,0,9,83,0,9,32,48,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,9,86,87,48,64,76,1,10,
            11,8,6,7,68,81,82,83,84,12,
            13,69,3,44,55,60,63,72,90,42,
            16,17,30,89,91,47,52,56,61,62,
            66,67,74,75,78,79,80,4,14,15,
            18,19,20,21,29,31,54,70,73,22,
            23,24,25,26,92,5,27,28,32,33,
            34,35,36,37,38,39,40,41,93,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,101,105,106,107,108,0,109,
            110,111,112,113,114,115,116,117,118,129,
            0,97,96,122,149,98,121,128,0,0,
            0,140,145,147,0,148,0,0,0,0,
            158,159,160,0,100,120,137,139,146,155,
            0,131,136,0,0,138,150,153,154,157,
            132,133,134,135,144,161,99,102,103,104,
            119,123,124,125,126,127,130,142,0,0,
            143,152,95,0,141,151,156,162,163,0,
            164,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            160,80,33,39,87,107,113,138,12,19,
            49,67,119,124,26,45,97,175,179,147,
            1,1,30,54,77,183,6,101,154,129,
            154,93,57,57,57
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            17,17,4,4,17,17,17,144,17,24,
            4,24,17,17,24,4,95,24,4,151,
            4,4,24,4,24,24,9,104,157,132,
            168,95,64,59,72
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            4,63,25,25,63,61,61,98,53,44,
            25,39,61,61,44,25,48,4,4,18,
            91,90,42,25,36,2,66,48,6,99,
            4,48,39,37,39
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            35,35,34,34,35,35,35,86,35,29,
            34,29,35,35,29,34,65,29,34,55,
            34,34,29,34,29,29,56,1,29,92,
            29,65,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            34,19,23,23,19,19,19,-1,89,27,
            23,11,19,19,27,23,5,34,34,64,
            1,3,27,23,11,34,90,5,37,-1,
            34,5,11,11,11
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            139,9,0,96,0,181,102,0,31,136,
            0,144,163,102,23,0,98,0,150,102,
            2,135,0,97,0,150,102,2,0,153,
            2,0,112,22,175,102,9,0,112,175,
            102,22,9,0,112,22,9,0,112,175,
            102,9,0,112,9,0,129,0,2,0,
            151,97,0,2,97,0,150,102,2,129,
            0,2,0,150,97,0,140,2,0,144,
            173,102,23,120,57,0,144,173,102,23,
            57,0,125,0,99,0,178,102,125,0,
            102,125,0,141,99,0,148,102,23,120,
            59,0,148,102,23,120,58,0,148,102,
            23,59,0,148,102,23,58,0,187,85,
            0,77,2,100,97,99,0,187,115,138,
            2,89,0,53,0,0,138,68,110,0,
            29,117,0,162,2,0,97,106,0,144,
            163,102,23,115,162,2,0,97,3,0,
            104,0,98,0,177,2,97,0,138,9,
            97,0,138,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            390,0,389,0,1548,1619,1545,1523,1519,0,
            1117,1279,1379,1211,360,1102,1071,0,823,1205,
            307,0,1592,1556,1260,1103,360,1102,1071,1565,
            1381,1386,0,372,362,329,1431,1396,1499,1180,
            1163,1196,1081,1297,484,1270,968,834,1370,1359,
            1338,1327,1492,1485,1455,1015,959,1349,1319,1212,
            1072,1024,888,1033,996,977,940,921,901,855,
            546,1052,526,497,814,794,774,754,734,714,
            694,674,654,634,614,307,590,454,570,410,
            430,339,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,176,102,164,15,21,20,11,10,3,
            12,14,13,97,2,101,100,104,103,106,
            105,108,107,110,109,98,30,2,66,48,
            2,9,162,138,125,102,11,10,50,49,
            3,54,53,52,51,31,32,12,61,60,
            63,62,68,67,64,78,77,76,74,75,
            73,72,71,70,69,56,162,177,138,115,
            102,9,2,136,135,165,166,167,59,58,
            168,57,169,170,1,4,100,100,103,103,
            103,103,101,101,105,104,104,107,106,138,
            109,108,115,23,142,3,22,112,102,3,
            153,102,2,120,23,120,23,23,120,55,
            102,3,102,102,112,175,151,150,117,102,
            152,102,23,102,23,102,102,23,163,102,
            23,102,151,175,22,112,3,2,127,129,
            102,30,150,102,148,125,149,102,148,173,
            120,174,102,144,30,181,48,9,182,102,
            151,112,112,140,102,2,142,148,102,148,
            144,56,30,173,56,139,48,9,163,102,
            178,55,140,2,102,144,139,144,150,179,
            30,55,142,30
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_sizeof_type_name_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_name",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_or_typedefname",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 79,
           SCOPE_UBOUND      = 34,
           SCOPE_SIZE        = 35,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 204,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2002,
           MAX_LA            = 2,
           NUM_RULES         = 306,
           NUM_NONTERMINALS  = 115,
           NUM_SYMBOLS       = 208,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1582,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1683,
           ERROR_ACTION      = 1696;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
