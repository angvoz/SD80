/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.upc;

public class UPCSizeofExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, UPCSizeofExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            1,4,1,3,3,3,1,3,3,1,
            3,3,1,3,3,3,3,1,3,3,
            1,3,1,3,1,3,1,3,1,3,
            1,5,1,3,3,3,3,3,3,3,
            3,3,3,3,1,1,2,1,0,1,
            3,1,1,1,1,1,1,1,1,3,
            4,3,2,4,1,2,1,1,1,2,
            5,7,5,1,0,7,5,9,8,3,
            2,2,2,3,2,4,2,2,2,2,
            2,1,1,1,1,2,1,2,2,2,
            1,2,2,1,2,2,1,2,2,1,
            2,2,1,3,1,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            6,8,0,0,1,1,3,3,3,0,
            1,0,1,2,4,2,1,1,1,3,
            1,1,2,3,7,8,0,1,0,1,
            3,1,3,1,1,1,1,1,1,3,
            1,1,1,1,1,3,1,2,2,1,
            5,3,1,3,5,1,3,1,3,2,
            4,3,5,4,6,6,3,5,1,2,
            3,4,5,0,1,2,1,3,1,1,
            3,2,1,1,1,1,2,1,2,3,
            1,1,1,3,1,2,2,2,3,4,
            5,1,7,3,0,0,1,1,3,3,
            4,1,1,2,3,2,3,2,1,0,
            1,2,1,1,1,1,1,2,4,3,
            6,2,4,1,1,1,1,1,2,2,
            2,1,1,2,1,1,1,3,3,2,
            1,3,2,3,2,3,2,2,11,10,
            10,9,10,9,9,8,10,9,9,8,
            9,8,8,7,10,9,9,8,9,8,
            8,7,1,1,-39,0,0,0,0,0,
            0,0,0,0,-109,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-2,
            -164,-77,-4,0,0,0,0,-126,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-74,0,0,
            0,-17,-19,-78,0,-81,0,0,0,0,
            0,-40,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-82,0,0,0,0,0,-41,
            0,0,0,0,0,0,0,0,0,-20,
            -21,0,-192,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-165,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-54,0,0,0,0,0,0,0,
            0,0,-120,0,0,0,0,0,-135,-22,
            -36,-118,-144,0,-115,0,0,0,0,0,
            0,0,0,-23,0,-24,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-37,0,-125,0,0,0,0,0,0,
            0,0,0,-145,0,0,0,0,0,0,
            0,0,0,-140,0,0,0,-25,-26,-32,
            0,0,0,0,0,-49,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -75,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-188,0,0,0,0,0,0,0,0,
            0,-33,0,0,0,0,0,0,0,0,
            0,-3,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-27,0,-58,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-112,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-28,-72,-119,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-131,0,0,
            0,0,0,0,0,0,0,-29,0,0,
            0,0,0,0,0,0,0,0,-90,0,
            -30,0,0,0,0,0,0,0,0,0,
            -113,0,0,0,0,0,0,0,0,0,
            -59,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -60,0,0,0,0,0,0,0,0,0,
            -130,0,0,0,0,0,0,0,0,0,
            -61,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -62,0,0,0,0,0,0,0,0,0,
            -138,0,0,0,0,0,0,0,0,0,
            -63,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -64,0,0,0,0,0,0,0,0,0,
            -152,0,0,0,0,0,0,0,0,0,
            -65,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -66,0,0,0,0,0,0,0,0,0,
            -174,0,0,0,0,0,0,0,0,0,
            -67,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -68,0,0,0,0,0,0,0,0,0,
            -175,0,0,0,0,0,0,0,0,0,
            -69,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -150,0,0,0,0,0,0,0,0,0,
            -91,0,0,0,0,0,0,0,0,0,
            -151,0,0,0,0,0,0,0,0,0,
            -80,0,0,0,0,0,0,0,0,0,
            -168,0,0,0,0,0,0,0,0,0,
            -155,0,0,0,0,0,0,0,0,-191,
            0,0,0,0,0,0,0,0,0,-182,
            0,0,0,0,0,0,0,0,0,0,
            -169,-128,-92,0,-9,0,0,0,0,0,
            0,0,-199,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-207,0,0,0,0,0,0,0,0,
            0,-93,0,0,0,0,0,0,0,0,
            -84,-157,0,-94,-95,0,-185,-210,-85,-179,
            0,-70,-200,-121,-215,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-134,0,-71,0,0,0,0,
            0,-132,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-154,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-10,0,0,0,0,0,0,
            -96,0,-97,0,0,-5,0,0,0,0,
            0,0,0,0,0,0,0,0,-98,-99,
            0,0,0,0,-122,0,-45,0,0,0,
            0,0,0,0,0,0,0,-89,-116,0,
            -57,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-206,0,0,
            0,0,-100,0,-156,-83,0,0,0,0,
            -55,0,0,0,0,0,0,0,0,0,
            -196,0,0,0,-101,-123,0,0,0,0,
            0,0,0,0,0,0,0,0,-133,0,
            0,0,0,0,-139,0,0,0,0,0,
            0,0,-214,-102,-124,0,0,0,0,0,
            0,0,0,0,0,-189,-201,-103,0,0,
            -51,0,0,0,0,0,0,0,0,0,
            0,0,0,-104,-105,0,0,0,0,0,
            0,0,0,0,-11,0,0,0,0,0,
            0,0,-159,-197,0,0,-153,0,0,0,
            0,0,0,0,-52,0,0,0,0,0,
            0,0,0,0,-217,0,0,0,-167,-79,
            -6,0,0,0,0,0,0,0,-53,0,
            0,0,0,0,0,0,0,0,-170,0,
            0,0,0,0,0,-106,0,-202,0,0,
            0,0,-46,0,0,0,0,0,0,0,
            0,0,-47,0,0,0,0,0,0,0,
            0,0,0,0,-176,0,-48,0,0,0,
            0,0,0,0,0,0,-209,-50,0,0,
            0,0,0,0,0,0,0,-107,-181,0,
            0,-216,-141,-76,-12,0,0,0,0,0,
            0,0,0,0,-13,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-108,
            -86,0,0,-111,0,0,0,0,0,0,
            0,0,0,-88,-190,-34,-87,0,0,0,
            0,0,0,0,0,0,-127,-198,-38,0,
            0,0,0,0,0,0,0,0,0,-136,
            0,-143,0,0,0,0,-142,-147,-146,-117,
            -158,0,-177,-203,-160,-166,0,0,0,0,
            0,0,0,-14,0,0,0,0,0,0,
            -18,-31,0,0,0,0,0,0,0,0,
            0,0,0,0,-186,0,-148,-187,0,-42,
            0,0,0,0,0,0,0,0,0,-208,
            0,0,0,0,0,0,0,-213,0,0,
            0,0,0,0,0,0,0,-110,0,0,
            0,0,-43,0,0,0,0,0,0,-44,
            0,0,0,0,0,0,-73,0,0,0,
            0,0,0,0,0,0,-114,-162,-171,-161,
            0,-129,-204,0,0,-194,-137,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-178,0,0,0,0,0,0,-195,-149,
            -163,0,0,0,0,-1,0,-35,0,-7,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-180,0,-8,0,
            0,0,0,0,0,-205,0,0,0,0,
            -211,0,0,0,0,0,0,0,-183,0,
            -15,0,0,0,0,0,0,-172,0,0,
            0,-16,0,0,0,0,0,-173,-184,0,
            0,0,0,-212,0,0,0,0,0,0,
            0,0,-193,-56,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            89,10,20,20,25,25,34,34,71,71,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,53,53,72,
            72,5,5,5,5,5,5,5,5,5,
            5,6,6,7,7,7,7,8,8,8,
            9,9,9,11,11,11,11,11,12,12,
            12,13,13,14,14,15,15,16,16,17,
            17,18,18,19,19,19,19,19,19,19,
            19,19,19,19,19,104,48,42,90,90,
            75,75,43,105,105,105,105,105,105,105,
            106,106,106,107,107,112,112,113,113,108,
            108,109,109,109,115,115,110,110,110,110,
            111,111,111,111,111,114,114,27,27,27,
            27,27,29,29,29,81,81,76,76,76,
            76,77,77,77,78,78,78,79,79,79,
            80,80,80,116,116,117,117,118,30,32,
            32,32,32,32,54,56,56,56,56,56,
            56,56,56,56,56,56,56,65,65,26,
            26,62,62,91,92,66,66,63,63,63,
            67,82,82,83,83,68,68,68,50,93,
            93,84,85,85,85,64,64,94,86,86,
            87,87,69,69,21,22,22,22,31,49,
            49,35,35,35,35,38,38,40,36,36,
            37,41,41,119,119,39,120,120,95,95,
            28,28,28,28,28,28,28,28,28,88,
            51,51,51,51,33,58,58,57,57,57,
            59,59,52,52,96,96,73,73,60,60,
            60,44,44,44,45,46,46,46,47,47,
            47,47,55,55,55,61,97,74,74,74,
            74,70,98,99,99,100,100,101,101,121,
            121,122,122,123,123,123,123,125,125,124,
            124,124,126,126,89,89,1,1,1,5,
            5,5,21,21,23,23,24,24,102,102,
            102,105,127,127,127,127,127,127,127,110,
            110,110,110,110,110,110,110,110,110,110,
            110,110,110,110,110,110,110,110,110,110,
            110,110,110,128,128,1,14,19,15,422,
            748,43,470,423,530,6,471,546,544,589,
            588,715,675,73,90,398,133,214,322,323,
            404,541,450,314,135,132,134,158,582,14,
            19,15,422,748,43,470,423,530,574,471,
            546,544,589,588,715,675,73,282,59,137,
            276,164,69,251,241,26,839,141,144,147,
            150,454,681,14,19,15,422,41,43,1083,
            393,1410,426,1286,1521,1534,1258,133,214,322,
            323,1524,277,287,61,143,132,134,158,1568,
            681,14,19,15,422,41,43,1122,288,1638,
            364,15,533,648,14,19,15,422,748,43,
            470,423,530,574,471,546,544,589,588,715,
            675,73,282,354,14,19,15,422,748,43,
            470,423,530,574,471,546,544,589,588,715,
            675,73,282,681,14,19,15,422,41,43,
            470,423,530,184,471,546,544,1348,287,225,
            39,591,621,781,1568,440,14,19,15,422,
            41,35,1677,288,25,523,73,1438,289,584,
            133,214,322,323,1568,247,1657,279,135,132,
            134,158,591,290,681,14,19,15,422,41,
            43,470,423,530,883,471,546,544,589,588,
            715,675,72,137,115,164,391,16,78,387,
            125,141,144,147,150,454,681,14,19,15,
            422,41,43,470,1239,1410,426,1286,1521,1534,
            1258,281,14,19,15,422,748,43,470,423,
            530,1667,471,546,544,589,588,715,675,73,
            771,240,615,14,19,15,422,748,43,470,
            423,530,125,471,546,544,589,588,715,675,
            73,282,681,14,19,15,422,748,43,470,
            423,530,23,471,546,544,589,588,715,675,
            73,90,1576,1081,293,323,1575,681,14,19,
            15,422,41,43,470,423,530,291,471,546,
            544,589,1488,1568,747,14,19,15,422,748,
            43,470,423,530,1672,471,546,544,589,588,
            715,675,73,811,22,654,415,474,14,19,
            15,422,41,43,470,423,530,393,471,546,
            544,589,588,715,675,92,20,330,315,14,
            19,15,422,748,43,470,423,530,723,471,
            546,544,589,588,715,675,73,891,241,780,
            851,681,14,19,15,422,748,43,470,423,
            530,415,471,546,544,589,588,715,675,73,
            91,681,14,19,15,422,748,43,470,423,
            530,242,471,546,544,589,588,715,675,73,
            84,681,14,19,15,422,748,43,470,423,
            530,415,471,546,544,589,588,715,675,73,
            83,681,14,19,15,422,748,43,470,423,
            530,244,471,546,544,589,588,715,675,73,
            82,681,14,19,15,422,748,43,470,423,
            530,415,471,546,544,589,588,715,675,73,
            81,681,14,19,15,422,748,43,470,423,
            530,328,471,546,544,589,588,715,675,73,
            80,681,14,19,15,422,748,43,470,423,
            530,415,471,546,544,589,588,715,675,73,
            79,681,14,19,15,422,748,43,470,423,
            530,243,471,546,544,589,588,715,675,73,
            78,681,14,19,15,422,748,43,470,423,
            530,415,471,546,544,589,588,715,675,73,
            77,681,14,19,15,422,748,43,470,423,
            530,245,471,546,544,589,588,715,675,73,
            76,681,14,19,15,422,748,43,470,423,
            530,415,471,546,544,589,588,715,675,73,
            75,681,14,19,15,422,748,43,470,423,
            530,246,471,546,544,589,588,715,675,73,
            74,681,14,19,15,422,748,43,470,423,
            530,819,471,546,544,589,588,715,675,73,
            931,681,14,19,15,422,748,43,470,423,
            530,837,471,546,544,589,588,715,675,73,
            971,681,14,19,15,422,41,43,470,423,
            530,926,471,546,544,589,588,715,675,92,
            681,14,19,15,422,41,43,470,423,530,
            756,471,546,544,589,588,715,675,92,229,
            1301,911,183,480,1346,681,14,19,15,422,
            41,39,1700,681,14,19,15,422,41,43,
            470,423,530,1347,471,546,544,589,588,715,
            675,92,681,14,19,15,422,41,43,470,
            423,530,840,471,546,544,589,588,715,675,
            92,288,59,324,488,863,213,882,59,360,
            389,196,591,446,446,681,14,19,15,422,
            41,43,470,423,530,203,471,546,544,589,
            588,715,675,92,348,1524,591,1520,275,1605,
            188,1524,239,1547,1132,220,1051,222,1285,224,
            225,230,294,1140,270,424,392,273,204,1492,
            1548,21,275,256,214,322,323,587,1144,219,
            1051,222,1285,224,225,230,1245,1573,268,424,
            392,273,211,264,681,14,19,15,422,41,
            38,871,278,881,265,275,714,14,19,15,
            422,321,219,1051,222,1285,224,225,230,783,
            822,268,424,392,273,446,1465,681,14,19,
            15,422,41,43,470,423,1134,1259,225,591,
            262,681,14,19,15,422,41,43,470,423,
            530,187,471,546,544,589,588,1436,290,133,
            214,322,323,129,274,620,859,136,132,134,
            158,681,14,19,15,422,41,43,470,423,
            530,324,471,546,1364,75,253,133,214,322,
            323,1138,138,228,164,146,132,134,158,591,
            142,145,148,151,454,440,14,19,15,422,
            41,35,1567,324,131,446,219,1051,222,1285,
            224,225,230,1138,280,329,415,415,590,195,
            1620,681,14,19,15,422,41,43,470,423,
            530,189,471,1283,171,237,295,297,219,1051,
            222,1285,224,225,230,681,14,19,15,422,
            41,37,1620,591,882,199,201,440,14,19,
            15,422,41,35,1278,681,14,19,15,422,
            41,43,470,423,530,152,1305,248,281,446,
            388,714,14,19,15,422,320,200,201,681,
            14,19,15,422,41,43,470,423,530,541,
            1334,133,214,322,323,296,843,1751,781,140,
            132,134,158,681,14,19,15,422,41,43,
            470,423,1135,681,14,19,15,422,41,43,
            470,423,1221,284,139,591,164,681,14,19,
            15,422,41,43,470,423,1223,87,681,14,
            19,15,422,41,43,470,1240,1138,720,541,
            226,1784,686,6,653,681,14,19,15,422,
            41,36,283,1670,1570,681,14,19,15,422,
            41,35,219,1051,222,1285,224,225,230,278,
            53,879,275,181,414,1547,1465,220,1051,222,
            1285,224,225,230,899,446,522,416,268,424,
            392,273,133,214,322,323,652,721,541,70,
            149,132,134,158,1259,133,214,322,323,418,
            656,298,6,152,132,134,158,860,877,6,
            832,738,1701,832,591,880,861,275,88,1429,
            529,529,205,529,681,14,19,15,422,41,
            34,6,6,268,424,392,273,1164,1164,231,
            1164,365,365,1524,1335,862,1524,402,900,267,
            681,14,19,15,422,41,46,1768,198,198,
            451,1638,260,261,1140,260,1166,1319,181,1560,
            1319,1306,1560,86,86,1884,1884,1884,238,562,
            562,1549,1549,681,14,19,15,422,41,45,
            681,14,19,15,422,41,44,549,14,19,
            15,422,41,42,531,1142,275,127,6,6,
            57,1547,127,719,1884,1884,753,292,1779,473,
            529,1884,270,424,392,273,529,529,255,214,
            322,323,621,255,214,322,323,198,235,169,
            127,482,1676,1164,1164,1884,508,1884,6,529,
            714,14,19,15,422,319,652,232,652,1884,
            1070,255,214,322,323,1172,198,1605,260,260,
            1172,1884,1884,1574,1383,1560,1560,6,193,714,
            14,19,15,422,40,1884,541,1699,86,1070,
            86,541,1489,1759,314,738,716,1884,1778,113,
            1001,714,14,19,15,422,33,193,127,529,
            210,1673,714,14,19,15,422,32,507,482,
            182,1746,1759,1884,541,206,198,1137,1608,255,
            214,322,323,548,6,390,1884,1884,1884,256,
            214,322,323,1884,652,1605,1884,1884,1884,1070,
            1884,1884,1884,1884,256,214,322,323,1405,1884,
            1884,1884,1884,1884,1884,1884,1793,194,1884,1884,
            1884,1884,1884,1884,1884,1884,86,1884,1884,1884,
            1884,1884,1365,1884,1884,1884,1884,1884,210,1884,
            1884,1884,1884,1884,1884,1884,1884,1884,1884,1884,
            1884,1884,1884,1884,1884,1384,1608,1884,0,325,
            717,0,17,178,0,18,177,0,1,2111,
            0,1,2122,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,12,13,0,15,16,17,18,19,
            20,21,22,23,0,25,26,27,28,29,
            30,31,32,33,34,35,36,37,0,15,
            40,41,42,43,44,45,46,47,48,49,
            50,51,0,53,54,55,0,1,0,3,
            0,5,6,7,8,9,10,11,0,0,
            2,2,0,4,0,19,24,0,64,65,
            66,67,14,14,16,17,0,1,2,33,
            34,35,36,37,56,57,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,0,1,0,3,60,5,6,7,
            8,9,10,11,0,1,0,3,0,61,
            0,19,6,7,8,9,10,11,64,65,
            66,67,70,71,76,33,34,35,36,37,
            73,0,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,0,1,
            0,3,60,5,6,7,8,9,10,11,
            0,1,0,0,1,15,3,19,6,7,
            8,9,10,11,64,65,66,67,70,71,
            0,33,34,35,36,37,0,24,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,0,1,0,3,60,0,
            6,7,8,9,10,11,0,0,0,2,
            0,4,2,19,6,7,8,9,10,11,
            0,14,0,1,14,3,0,33,34,35,
            36,37,12,13,40,41,42,43,44,45,
            46,47,48,49,50,51,24,53,54,55,
            0,1,2,3,4,5,0,0,1,0,
            3,0,12,13,5,15,16,17,18,19,
            20,21,22,23,68,25,26,27,28,29,
            30,31,32,0,0,1,2,3,4,5,
            0,0,0,0,1,2,12,13,39,15,
            16,17,18,19,20,21,22,23,58,25,
            26,27,28,29,30,31,32,0,1,2,
            59,4,39,0,1,2,3,4,5,0,
            1,14,3,0,75,12,13,4,15,16,
            17,18,58,20,21,22,23,24,25,26,
            27,28,29,30,31,32,0,0,0,1,
            2,68,4,6,7,8,9,10,11,77,
            78,0,14,0,0,52,19,6,7,8,
            9,10,11,0,0,0,1,4,3,5,
            33,34,35,36,37,62,63,40,41,42,
            43,44,45,46,47,48,49,50,51,0,
            1,2,3,4,5,0,1,0,3,0,
            0,12,13,0,15,16,17,18,72,20,
            21,22,23,14,25,26,27,28,29,30,
            31,32,58,0,1,2,3,4,5,0,
            0,0,1,4,3,12,13,0,15,16,
            17,18,89,20,21,22,23,58,25,26,
            27,28,29,30,31,32,0,0,1,2,
            3,4,6,7,8,9,10,11,68,12,
            13,0,15,16,17,18,5,20,21,22,
            23,58,25,26,27,28,29,30,31,32,
            0,62,63,56,57,5,0,0,0,1,
            2,3,4,6,7,8,9,10,11,38,
            12,13,0,15,16,17,18,60,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,0,1,2,3,4,0,1,2,0,
            0,5,52,12,13,5,15,16,17,18,
            14,20,21,22,23,24,25,26,27,28,
            29,30,31,32,0,1,2,3,4,0,
            0,2,0,0,38,5,12,13,38,15,
            16,17,18,14,20,21,22,23,24,25,
            26,27,28,29,30,31,32,0,1,2,
            3,4,0,0,2,0,0,5,38,12,
            13,72,15,16,17,18,14,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            0,1,2,3,4,0,1,2,0,1,
            38,3,12,13,39,15,16,17,18,0,
            20,21,22,23,5,25,26,27,28,29,
            30,31,32,0,1,2,3,4,0,0,
            0,0,0,5,4,12,13,74,15,16,
            17,18,0,20,21,22,23,0,25,26,
            27,28,29,30,31,32,0,1,2,3,
            4,52,0,1,0,0,38,39,12,13,
            5,15,16,17,18,0,20,21,22,23,
            0,25,26,27,28,29,30,31,32,0,
            0,2,0,4,5,6,7,8,9,10,
            11,69,73,14,12,13,59,0,19,0,
            0,79,80,81,82,83,84,85,86,87,
            88,59,33,34,35,36,37,38,0,39,
            2,0,4,5,6,7,8,9,10,11,
            75,0,14,12,13,4,0,19,0,0,
            0,0,0,4,6,7,8,9,10,11,
            14,33,34,35,36,37,38,19,0,0,
            0,0,0,0,6,7,8,9,10,11,
            0,33,34,35,36,37,0,19,0,0,
            0,0,0,24,6,7,8,9,10,11,
            59,33,34,35,36,37,14,19,0,0,
            24,62,63,24,6,7,8,9,10,11,
            0,33,34,35,36,37,74,19,56,57,
            39,0,0,0,14,0,56,57,0,69,
            69,33,34,35,36,37,56,57,39,14,
            0,0,0,61,0,24,24,24,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,61,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1884,759,1591,1011,1505,1,2099,2100,2101,2210,
            1031,2211,1495,1375,58,1584,1772,1761,1739,2045,
            1894,1895,1896,1897,63,1214,1085,2200,2201,2202,
            1710,1411,1226,2046,2044,2102,2047,2043,53,1351,
            2050,2055,2054,2052,2053,2051,2056,2057,2049,2058,
            2059,2060,1884,1537,1139,1131,1884,1,254,1,
            183,192,1,1,1,1,1,1,31,266,
            1536,1494,61,1,60,1,375,67,1467,1453,
            1443,1247,1708,611,1908,1909,1,2111,1477,1,
            1,1,1,1,596,1478,1,1,1,1,
            1,1,1,1,1,1,1,1,192,1,
            1,1,1884,1,184,1,2081,191,1,1,
            1,1,1,1,1884,1913,1884,1914,62,642,
            59,1,2099,2100,2101,2210,1031,2211,1467,1453,
            1443,1247,1419,1395,590,1,1,1,1,1,
            513,286,1,1,1,1,1,1,1,1,
            1,1,1,1,191,1,1,1,1884,1,
            64,1,2081,192,1,1,1,1,1,1,
            1884,2123,250,1884,2063,1351,2064,1,1,1,
            1,1,1,1,1467,1453,1443,1247,1419,1395,
            1884,1,1,1,1,1,1884,1493,1,1,
            1,1,1,1,1,1,1,1,1,1,
            192,1,1,1,1884,2062,1884,2061,2081,1884,
            2099,2100,2101,2210,1031,2211,1884,269,249,1494,
            271,254,532,2045,2099,2100,2101,2210,1031,2211,
            50,611,1884,2063,611,2064,1884,2046,2044,2102,
            2047,2043,460,432,2050,2055,2054,2052,2053,2051,
            2056,2057,2049,2058,2059,2060,1562,1537,1139,1131,
            1,1901,1591,1902,535,1887,1884,186,3170,1884,
            3170,1,1495,1375,1893,1584,1772,1761,1739,694,
            1894,1895,1896,1897,564,1214,1085,2200,2201,2202,
            1710,1411,1226,87,1884,1901,1591,1902,1387,1887,
            1884,1884,71,1,2111,1477,1495,1375,1333,1584,
            1772,1761,1739,1021,1894,1895,1896,1897,1886,1214,
            1085,2200,2201,2202,1710,1411,1226,263,2111,1197,
            2143,1,761,1,1901,1591,1902,1505,27,185,
            3171,611,3171,47,1892,1495,1375,1650,1584,1772,
            1761,1739,1886,1894,1895,1896,1897,2948,1214,1085,
            2200,2201,2202,1710,1411,1226,65,127,269,2111,
            1197,1112,254,2099,2100,2101,2210,1031,2211,1261,
            1794,251,611,1884,1884,27,2045,1,1,1,
            1,1,1,1884,1884,207,3172,1082,3172,1887,
            2046,2044,2102,2047,2043,1643,1610,2050,2055,2054,
            2052,2053,2051,2056,2057,2049,2058,2059,2060,1884,
            1901,1591,1902,1505,1887,1884,2063,1884,2064,272,
            202,1495,1375,1884,1584,1772,1761,1739,1291,1894,
            1895,1896,1897,611,1214,1085,2200,2201,2202,1710,
            1411,1226,1886,1884,1901,1591,1902,1325,1887,49,
            1884,209,2063,1650,2064,1495,1375,57,1584,1772,
            1761,1739,1868,1894,1895,1896,1897,1886,1214,1085,
            2200,2201,2202,1710,1411,1226,252,1884,1,1,
            1,1,2099,2100,2101,2210,1031,2211,1145,1,
            1,1,1,1,1,1,89,1,1,1,
            1,1886,1,1,1,1,1,1,1,1,
            1884,1643,1610,596,1478,1891,1884,253,1884,1901,
            1591,1902,1505,2099,2100,2101,2210,1031,2211,89,
            1495,1375,1884,1584,1772,1761,1739,2199,1894,1895,
            1896,1897,375,1214,1085,2200,2201,2202,1710,1411,
            1226,1,1901,1591,1902,1505,1,1878,1197,66,
            1884,1889,1890,1495,1375,1889,1584,1772,1761,1739,
            611,1894,1895,1896,1897,2948,1214,1085,2200,2201,
            2202,1710,1411,1226,1884,1901,1591,1902,1505,223,
            1,1692,1884,1884,1888,1889,1495,1375,1888,1584,
            1772,1761,1739,611,1894,1895,1896,1897,2948,1214,
            1085,2200,2201,2202,1710,1411,1226,1,1901,1591,
            1902,1505,1,69,1494,257,1884,1889,1888,1495,
            1375,1291,1584,1772,1761,1739,611,1894,1895,1896,
            1897,2948,1214,1085,2200,2201,2202,1710,1411,1226,
            1884,1901,1591,1902,1505,254,2111,1477,208,1143,
            1888,1143,1495,1375,1571,1584,1772,1761,1739,285,
            1894,1895,1896,1897,1569,1214,1085,2200,2201,2202,
            1710,1411,1226,1884,1901,1592,1902,1505,1884,68,
            1884,1884,41,1889,1607,1495,1375,677,1584,1772,
            1761,1739,1884,1894,1895,1896,1897,1,1214,1085,
            2200,2201,2202,1710,1411,1226,1,1901,1591,1902,
            1505,1569,1,1881,1884,1,1888,1628,1495,1375,
            1893,1584,1772,1761,1739,1884,1894,1895,1896,1897,
            1884,1214,1085,2200,2201,2202,1710,1411,1226,17,
            28,1872,52,1872,1872,178,178,178,178,178,
            178,981,513,1872,460,432,2142,1884,178,1884,
            1884,961,941,921,901,881,841,861,821,801,
            781,2143,178,178,178,178,178,1872,18,493,
            1875,51,1875,1875,177,177,177,177,177,177,
            1892,1,1875,460,432,254,325,177,128,48,
            1884,1884,70,1650,2099,2100,2101,2210,1031,2211,
            1869,177,177,177,177,177,1875,2045,129,1884,
            1884,212,56,1884,2099,2100,2101,2210,1031,2211,
            55,2046,2044,2102,2047,2043,1884,2045,130,1884,
            54,28,1884,1668,2099,2100,2101,2210,1031,2211,
            2143,2046,2044,2102,2047,2043,1041,2045,131,208,
            1669,1643,1610,1737,2099,2100,2101,2210,1031,2211,
            292,2046,2044,2102,2047,2043,677,2045,596,1478,
            1911,190,190,190,1060,221,596,1478,1884,632,
            1093,2046,2044,2102,2047,2043,596,1478,2937,611,
            1884,1884,1884,1409,1884,186,185,207,1884,1884,
            1884,1884,1884,1884,1884,1884,1884,1884,1884,1884,
            1884,1884,1884,1884,1884,1884,1884,1884,1884,1884,
            1884,1535
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            461,1,113,41,113,113,113,113,113,113,
            113,113,113,113,113,113,3,221,51,48,
            55,53,61,59,63,62,65,64,10,113,
            221,390,390,393,113,211,211,318,221,113,
            113,113,113,113,113,113,113,113,113,113,
            113,113,113,113,113,113,113,113,113,113,
            113,113,113,113,113,113,113,113,113,211,
            211,45,80,322,104,357,209,208,290,214,
            302,100,302,100,100,302,100,302,241,162,
            162,48,48,53,53,53,53,51,51,59,
            55,55,62,61,288,64,63,102,78,318,
            322,107,45,264,137,211,424,360,137,100,
            390,390,100,390,113,78,322,310,264,45,
            136,104,211,316,241,210,362,45,137,102,
            324,102,418,420,279,354,102,310,264,113,
            113,45,137,357,283,282,322,362,211,102,
            324,418,418,354,76,459,390,113,278,354,
            78,264,310,45,45,211,424,360,316,324,
            354,271,324,418,420,456,420,80,45,390,
            113,78,310,362,324,273,420,354,113,390,
            45,420,211,210,354,72,113,71,132,322,
            354,354,391,273,113,132,420
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            89,0,75,14,2,61,76,16,17,15,
            4,12,13,62,63,56,57,64,65,66,
            67,70,71,72,73,74,77,78,52,69,
            79,80,81,82,83,85,84,86,87,88,
            68,38,89,39,58,5,0,4,62,63,
            12,13,57,56,64,65,66,67,70,71,
            15,72,73,74,58,38,52,89,77,78,
            68,75,5,39,0,5,52,14,61,16,
            17,15,4,12,13,25,26,18,30,31,
            32,2,20,21,22,23,27,28,29,1,
            3,24,0,58,5,19,6,7,8,9,
            10,11,20,21,22,23,27,28,29,3,
            16,17,15,12,13,25,26,18,30,31,
            32,4,2,1,0,19,58,5,16,17,
            15,4,12,13,25,26,18,30,31,32,
            2,1,3,20,21,22,23,27,28,29,
            0,7,19,37,8,36,35,34,6,33,
            9,10,11,61,76,16,17,15,12,13,
            62,63,56,57,64,65,66,67,70,71,
            72,73,74,77,78,69,79,80,81,82,
            83,84,85,86,87,88,4,2,14,39,
            38,5,0,5,68,39,58,38,75,14,
            18,20,21,22,23,2,16,17,15,4,
            12,13,25,26,27,28,29,30,31,32,
            3,1,53,54,55,48,40,45,43,44,
            42,41,46,47,49,50,51,37,34,19,
            33,36,35,6,7,8,10,9,11,0,
            75,5,4,1,2,68,0,69,14,61,
            0,2,5,39,38,75,14,68,0,48,
            40,45,43,44,42,41,46,47,49,50,
            51,68,75,37,34,19,33,36,35,6,
            7,8,9,10,11,39,1,5,38,2,
            14,4,0,33,40,6,41,53,34,42,
            35,43,44,36,7,45,46,19,54,37,
            55,47,48,8,49,50,51,1,3,9,
            10,11,60,5,52,0,4,2,14,38,
            5,33,40,6,41,53,34,42,35,43,
            44,36,7,45,46,19,54,37,55,47,
            48,8,49,50,51,9,10,11,59,3,
            1,0,5,38,18,20,21,22,23,1,
            3,2,16,17,15,4,12,13,25,26,
            27,28,29,30,31,32,0,1,3,5,
            52,39,0,4,33,40,6,41,53,34,
            42,35,43,44,36,7,45,46,19,54,
            37,55,47,48,8,49,50,51,1,3,
            9,10,11,59,0,5,39,52,69,0,
            18,20,21,22,23,1,3,2,16,17,
            15,4,12,13,25,26,27,28,29,30,
            31,32,60,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            110,9,22,9,22,22,22,22,22,22,
            22,22,22,22,22,22,9,92,9,9,
            9,9,9,9,9,9,9,9,9,22,
            92,35,35,81,93,27,27,77,1,22,
            22,22,22,22,22,22,22,22,22,22,
            22,22,22,22,22,93,22,22,22,22,
            22,22,22,22,22,22,22,22,22,27,
            27,39,22,14,37,76,12,12,71,44,
            72,17,72,85,85,72,84,72,66,9,
            9,9,9,9,9,9,9,9,9,9,
            9,9,9,9,9,9,9,9,64,96,
            9,41,39,100,38,27,87,26,38,24,
            24,24,24,24,22,20,9,64,100,39,
            38,57,27,60,2,9,89,39,38,33,
            64,9,64,29,31,64,9,64,100,22,
            22,39,38,59,12,12,14,89,27,9,
            102,64,24,10,19,9,24,22,49,10,
            64,100,57,39,39,27,87,26,51,64,
            10,46,113,24,29,9,9,21,39,24,
            22,20,57,106,102,62,29,10,22,24,
            39,29,27,27,10,47,22,9,62,14,
            10,10,9,62,22,53,74
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,81,80,79,78,66,77,76,0,34,
            0,28,0,33,51,0,91,0,70,10,
            61,4,0,26,0,10,25,0,53,0,
            99,0,92,0,72,0,10,4,20,0,
            4,10,0,102,0,10,71,0,101,0,
            46,45,38,36,33,0,21,0,25,46,
            45,38,36,10,0,66,62,63,64,65,
            54,29,0,97,0,25,45,46,10,0,
            10,90,0,94,67,0,33,51,10,27,
            0,50,10,48,0,46,45,33,0,58,
            0,83,10,50,0,95,10,27,0,10,
            89,0,10,50,68,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,96,97,
            98,10,11,1,8,6,7,68,69,81,
            82,83,84,3,12,13,93,94,95,100,
            101,102,44,55,60,63,72,90,42,47,
            52,56,61,62,66,67,74,75,78,79,
            80,91,54,70,73,16,17,89,30,107,
            4,14,15,18,19,20,21,29,31,22,
            23,24,25,26,92,5,27,28,32,33,
            34,35,36,37,38,39,40,41,108,45,
            46,49,50,51,53,57,58,59,65,71,
            77,88,99,103,104,105,106
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,115,119,120,121,122,123,0,
            124,125,126,127,128,129,130,131,132,110,
            143,0,0,0,111,135,136,164,142,0,
            0,0,0,112,160,162,0,163,0,0,
            0,0,134,173,174,175,0,114,151,155,
            161,170,0,145,150,0,165,168,169,172,
            0,146,147,148,149,152,0,154,159,176,
            113,116,117,118,133,137,138,139,140,141,
            144,0,153,157,0,0,158,167,109,0,
            0,0,156,0,166,171,0,177,178,0,
            179,180,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            108,139,196,118,47,57,147,12,174,21,
            75,93,63,28,71,40,129,211,215,40,
            40,183,40,1,1,1,32,35,80,103,
            35,219,6,133,190,165,190,125,153,153,
            153,153,153,83,83,83
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            116,116,116,116,4,4,116,18,180,26,
            4,26,68,26,4,4,127,26,4,44,
            68,187,53,4,4,4,26,38,4,26,
            106,26,9,136,193,168,204,127,155,157,
            159,161,163,90,85,98
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            64,62,4,64,28,28,62,55,109,47,
            28,41,28,47,28,28,68,4,4,28,
            28,18,28,102,101,100,45,60,28,38,
            49,2,70,68,6,110,4,68,80,79,
            78,77,76,41,39,41
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            52,52,52,52,58,58,52,52,95,38,
            58,38,20,38,58,58,75,38,58,4,
            20,68,19,58,58,58,38,2,58,38,
            1,38,69,1,38,101,38,75,3,53,
            54,54,48,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            19,19,34,19,23,23,19,94,-1,27,
            23,9,23,27,23,23,3,34,34,23,
            23,68,23,17,1,7,27,29,23,9,
            11,34,95,3,40,-1,34,3,20,20,
            20,20,20,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            150,14,0,110,0,205,117,0,31,150,
            0,160,181,117,24,168,0,112,0,0,
            164,117,2,152,0,111,0,164,117,2,
            0,167,2,0,158,117,0,173,0,195,
            117,14,0,9,110,0,126,19,195,117,
            14,0,69,132,110,0,126,195,117,19,
            14,0,195,117,19,14,0,132,110,0,
            126,19,14,0,126,195,117,14,0,126,
            14,0,145,0,2,0,166,111,0,2,
            111,0,164,117,2,145,0,2,0,165,
            111,0,156,2,0,160,0,160,193,117,
            24,133,201,53,0,112,0,160,193,117,
            24,201,53,0,157,0,113,0,200,117,
            157,0,117,157,0,156,113,0,189,117,
            24,199,133,198,173,0,189,117,24,198,
            173,0,188,0,149,0,148,0,147,0,
            146,0,145,0,212,94,0,77,2,114,
            111,113,0,212,132,155,2,98,0,53,
            0,0,155,78,124,0,29,131,0,180,
            2,0,111,120,0,160,181,117,24,132,
            180,2,0,111,3,0,118,0,112,0,
            197,2,111,0,155,14,111,0,155,2,
            0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1081,0,1699,1759,1670,0,574,0,1492,1140,
            1333,1477,1301,1197,1164,0,1031,0,1258,529,
            365,0,1285,1051,424,392,1140,1638,1197,1164,
            1494,1549,0,1772,1761,1739,1710,1411,1226,1387,
            1325,535,1657,677,1261,1291,513,1419,1395,1351,
            1478,596,1467,1453,1443,1247,1650,1643,1610,460,
            432,1584,1505,1495,1375,1214,1085,1145,1112,1093,
            1060,1041,1021,1001,738,564,717,694,611,981,
            961,941,921,901,881,861,841,821,801,781,
            365,761,652,632,473,493,398,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,196,117,182,32,31,30,18,26,25,
            13,12,4,15,17,16,111,2,115,114,
            118,116,120,119,122,121,124,123,112,39,
            2,76,61,2,14,180,155,157,117,13,
            12,63,62,4,67,66,65,64,56,57,
            15,71,70,73,72,78,77,74,88,87,
            86,84,85,83,82,81,80,79,69,180,
            197,155,132,117,14,2,153,152,183,10,
            184,173,185,55,54,186,53,187,188,1,
            3,114,114,116,116,116,116,115,115,119,
            118,118,121,120,155,123,122,132,24,158,
            140,19,126,117,4,167,117,2,14,198,
            174,174,201,174,68,117,140,4,117,126,
            195,165,164,134,117,166,117,150,4,133,
            24,133,24,181,117,24,168,4,117,195,
            19,126,4,2,143,145,117,39,164,199,
            117,24,117,160,39,205,61,14,206,117,
            24,117,165,126,126,156,117,2,158,24,
            189,157,190,117,193,133,194,69,150,61,
            14,117,165,117,117,117,193,160,69,39,
            150,181,164,202,189,200,68,156,2,117,
            160,160,39,39,68,158,141
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "MYTHREAD",
            "THREADS",
            "UPC_MAX_BLOCKSIZE",
            "relaxed",
            "shared",
            "strict",
            "upc_barrier",
            "upc_localsizeof",
            "upc_blocksizeof",
            "upc_elemsizeof",
            "upc_notify",
            "upc_fence",
            "upc_wait",
            "upc_forall",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_sizeof_type_id_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_token",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "layout_qualifier"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 60,
           SCOPE_UBOUND      = 45,
           SCOPE_SIZE        = 46,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 217,
           NT_OFFSET         = 107,
           LA_STATE_OFFSET   = 2248,
           MAX_LA            = 2,
           NUM_RULES         = 364,
           NUM_NONTERMINALS  = 128,
           NUM_SYMBOLS       = 235,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1706,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 89,
           EOLT_SYMBOL       = 89,
           ACCEPT_ACTION     = 1868,
           ERROR_ACTION      = 1884;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
