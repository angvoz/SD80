/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99ExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, C99ExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            4,1,4,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,5,9,8,
            3,2,2,2,3,2,4,2,2,2,
            2,2,1,1,1,1,2,1,2,2,
            2,1,2,2,1,2,2,1,2,2,
            1,2,2,1,3,1,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,5,5,6,6,2,2,2,1,0,
            1,2,4,2,1,1,1,3,1,1,
            2,3,6,7,1,0,1,3,1,3,
            1,1,1,1,1,1,3,1,1,1,
            1,1,3,1,2,2,1,5,3,1,
            3,5,1,3,1,3,2,4,3,5,
            4,6,6,3,5,1,1,2,3,4,
            1,2,1,3,1,1,3,2,1,1,
            1,1,2,1,2,3,1,1,1,3,
            1,2,2,2,3,4,5,1,7,3,
            0,0,1,1,3,3,4,1,1,2,
            3,2,3,2,1,0,1,2,1,1,
            1,1,1,2,4,3,6,2,4,1,
            1,-37,0,0,0,0,0,0,0,-2,
            0,0,0,0,0,0,0,0,0,0,
            0,-73,0,0,-4,-14,-16,-81,-17,0,
            0,0,0,-124,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-38,0,0,0,
            0,0,0,0,0,0,0,0,-18,-19,
            0,-20,-21,0,0,0,0,0,0,0,
            -5,0,0,0,0,0,0,-6,0,0,
            0,0,0,0,0,-12,0,0,0,0,
            0,0,-30,-22,0,-194,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-169,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-182,-130,-188,-82,-23,
            -56,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-143,
            0,-34,0,0,0,0,0,-31,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-71,0,-74,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-24,0,-25,0,-190,
            0,0,0,0,0,0,0,-26,0,0,
            0,0,0,0,0,0,0,0,0,-3,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-87,-88,-52,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-89,
            0,-110,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-76,-147,-129,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-90,0,0,-27,0,
            0,0,0,0,0,0,-35,0,0,0,
            0,0,0,0,0,0,0,0,-57,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-58,0,
            0,0,0,0,0,0,-68,0,0,0,
            0,0,0,0,0,0,0,0,-59,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-60,0,
            0,0,0,0,0,0,-69,0,0,0,
            0,0,0,0,0,0,0,0,-61,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-62,0,
            0,0,0,0,0,0,-70,0,0,0,
            0,0,0,0,0,0,0,0,-63,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-64,0,
            0,0,0,0,0,0,-114,0,0,0,
            0,0,0,0,0,0,0,0,-65,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-66,0,
            0,0,0,0,0,0,-91,0,0,0,
            0,0,0,0,0,0,0,0,-67,0,
            0,0,0,0,0,0,-133,0,0,0,
            0,0,0,0,0,0,0,0,-39,0,
            0,0,0,0,0,0,-131,0,0,-92,
            -93,-94,-84,-95,0,0,0,0,-148,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-7,0,0,0,0,0,0,-77,0,
            0,0,0,-13,0,0,0,0,0,0,
            0,0,0,0,0,-149,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-172,0,0,0,0,
            0,0,0,-96,0,0,0,0,0,0,
            0,0,0,0,-187,0,0,0,0,0,
            0,0,-173,0,0,0,0,0,0,0,
            0,0,0,-193,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-197,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-207,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -123,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-97,
            -132,-142,-176,-98,-99,0,-155,0,0,-53,
            0,0,0,0,0,0,0,-100,0,0,
            0,0,0,0,0,0,-113,0,0,0,
            0,0,0,-152,0,0,0,0,0,0,
            0,0,0,0,0,0,-33,0,-160,-107,
            0,-109,0,0,0,0,0,0,0,0,
            0,-86,-101,-126,-211,-164,-116,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-102,0,0,0,0,0,0,0,0,
            0,0,0,0,-55,0,0,0,0,0,
            0,0,-157,0,0,0,0,0,0,0,
            0,-184,-118,0,-140,0,0,0,-111,0,
            0,0,0,-103,0,0,0,0,-49,0,
            0,0,0,0,0,0,-206,0,0,0,
            0,0,0,-128,0,0,0,0,0,0,
            0,0,-104,0,-105,-150,-79,-153,0,-43,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -32,0,0,0,0,0,0,0,0,-106,
            0,0,-179,-117,-119,0,0,0,-50,0,
            0,0,0,0,0,0,-120,0,0,0,
            -122,-134,0,0,0,0,0,-51,0,0,
            0,0,0,0,0,-189,0,0,0,-44,
            0,0,0,0,0,0,0,-167,0,0,
            -45,0,0,0,0,0,0,0,-145,0,
            0,-46,0,0,0,0,0,0,0,-199,
            0,0,-171,-154,0,0,-177,0,-47,0,
            0,0,0,0,0,0,0,0,-48,0,
            0,0,0,0,0,0,-165,0,0,0,
            0,-196,-75,0,0,0,0,0,0,0,
            0,-78,-36,-112,0,-121,0,-125,-181,-178,
            0,-166,0,0,-108,0,0,0,0,0,
            -80,-170,0,0,0,0,-198,0,0,0,
            0,0,0,0,0,0,0,0,-208,0,
            -210,0,0,-192,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-151,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-8,
            0,0,0,0,0,0,0,0,-9,0,
            0,0,0,0,0,-10,0,0,0,0,
            0,0,-11,0,0,0,0,0,0,-15,
            -136,-28,-138,-29,-159,-204,0,0,0,0,
            0,0,-40,0,0,0,0,0,0,-141,
            -144,-175,0,-205,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-191,0,
            0,0,0,0,0,-41,0,0,0,0,
            0,0,-42,0,0,0,0,0,0,-83,
            -203,0,0,0,-85,0,-72,0,0,0,
            0,0,0,-163,-115,-54,-1,-168,0,-174,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-137,0,-139,0,
            0,0,-158,0,0,0,0,-200,0,0,
            0,0,-180,-183,-202,-127,0,0,-195,0,
            0,0,0,0,0,0,0,-146,0,0,
            0,0,-162,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-135,
            0,0,0,-185,0,-186,-201,0,0,0,
            -156,0,0,0,-209,0,-161,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            84,8,24,24,20,20,26,26,69,69,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,51,51,70,
            70,5,5,5,5,5,5,5,5,5,
            5,5,6,6,7,7,7,7,9,9,
            9,10,10,10,11,11,11,11,11,12,
            12,12,13,13,14,14,15,15,16,16,
            17,17,18,18,19,19,19,19,19,19,
            19,19,19,19,19,19,95,41,33,85,
            85,72,72,46,96,96,96,96,96,96,
            96,97,97,97,98,98,103,103,104,104,
            99,99,100,100,100,106,106,101,101,101,
            101,102,102,102,102,102,105,105,23,23,
            23,23,23,28,28,28,78,78,73,73,
            73,73,74,74,74,75,75,75,76,76,
            76,77,77,77,107,107,108,108,109,29,
            31,31,31,31,31,52,54,54,54,54,
            54,54,54,54,54,54,54,54,66,66,
            27,27,63,63,63,63,64,64,64,55,
            55,56,56,48,48,48,32,86,86,79,
            80,80,80,65,65,81,81,82,82,67,
            67,21,22,22,22,30,47,47,34,34,
            34,34,37,37,39,35,35,36,40,40,
            110,110,38,111,111,87,87,25,25,25,
            25,25,25,25,25,25,83,49,49,49,
            49,58,58,57,57,57,59,59,50,50,
            88,88,62,62,60,60,60,42,42,42,
            43,44,44,44,45,45,45,45,53,53,
            53,61,89,71,71,71,71,68,90,91,
            91,92,92,93,93,112,112,113,113,114,
            114,114,114,116,116,115,115,115,117,117,
            84,84,1,14,19,15,336,538,44,339,
            109,337,380,379,383,382,460,414,528,526,
            74,91,412,134,211,42,338,51,215,104,
            136,133,135,159,546,14,19,15,336,538,
            44,339,480,337,380,379,383,382,460,414,
            528,526,74,278,138,1274,165,633,14,19,
            15,336,42,44,590,142,145,148,151,14,
            107,1395,93,280,335,1382,1237,1401,1550,1555,
            1142,662,14,19,15,336,40,283,633,14,
            19,15,336,42,39,1329,691,14,19,15,
            336,33,284,56,153,1082,604,14,19,15,
            336,538,44,339,480,337,380,379,383,382,
            460,414,528,526,74,278,429,14,19,15,
            336,538,44,339,480,337,380,379,383,382,
            460,414,528,526,74,278,772,348,651,263,
            343,633,14,19,15,336,42,44,339,283,
            337,380,379,383,382,460,1233,1329,252,211,
            501,271,377,23,284,1367,1275,1551,56,285,
            217,1238,219,1344,221,222,227,1329,266,929,
            612,269,1557,262,286,369,14,19,15,336,
            538,44,339,1384,337,380,379,383,382,460,
            414,528,526,74,1199,208,307,20,141,237,
            575,14,19,15,336,538,44,339,727,337,
            380,379,383,382,460,414,528,526,74,278,
            633,14,19,15,336,538,44,339,22,337,
            380,379,383,382,460,414,528,526,74,91,
            1402,993,289,749,775,633,14,19,15,336,
            42,44,339,287,337,380,379,383,382,1098,
            200,1329,720,14,19,15,336,538,44,339,
            1606,337,380,379,383,382,460,414,528,526,
            74,1224,219,487,399,14,19,15,336,538,
            44,339,335,337,380,379,383,382,460,414,
            528,526,74,1236,252,211,248,272,238,633,
            14,19,15,336,538,44,339,377,337,380,
            379,383,382,460,414,528,526,74,92,633,
            14,19,15,336,538,44,339,16,337,380,
            379,383,382,460,414,528,526,74,85,633,
            14,19,15,336,538,44,339,377,337,380,
            379,383,382,460,414,528,526,74,84,633,
            14,19,15,336,538,44,339,1235,337,380,
            379,383,382,460,414,528,526,74,83,633,
            14,19,15,336,538,44,339,377,337,380,
            379,383,382,460,414,528,526,74,82,633,
            14,19,15,336,538,44,339,1270,337,380,
            379,383,382,460,414,528,526,74,81,633,
            14,19,15,336,538,44,339,377,337,380,
            379,383,382,460,414,528,526,74,80,633,
            14,19,15,336,538,44,339,21,337,380,
            379,383,382,460,414,528,526,74,79,633,
            14,19,15,336,538,44,339,377,337,380,
            379,383,382,460,414,528,526,74,78,633,
            14,19,15,336,538,44,339,270,337,380,
            379,383,382,460,414,528,526,74,77,633,
            14,19,15,336,538,44,339,251,337,380,
            379,383,382,460,414,528,526,74,76,633,
            14,19,15,336,538,44,339,287,337,380,
            379,383,382,460,414,528,526,74,75,633,
            14,19,15,336,42,44,636,377,134,211,
            261,398,474,311,524,136,133,135,159,633,
            14,19,15,336,538,44,339,276,337,380,
            379,383,382,460,414,528,526,74,1347,138,
            1291,165,633,14,19,15,336,42,38,415,
            142,145,148,151,691,14,19,15,336,32,
            1382,1237,1401,1550,1555,1142,633,14,19,15,
            336,538,44,339,273,337,380,379,383,382,
            460,414,528,526,74,1390,633,14,19,15,
            336,42,44,339,611,337,380,379,383,382,
            460,414,528,526,93,633,14,19,15,336,
            42,44,339,712,337,380,379,383,382,460,
            414,528,526,93,633,14,19,15,336,42,
            44,339,1529,337,380,379,383,382,460,414,
            528,526,93,633,14,19,15,336,42,44,
            339,210,337,380,379,383,382,460,414,528,
            526,93,633,14,19,15,336,42,44,339,
            1605,337,380,379,383,382,460,414,528,526,
            93,633,14,19,15,336,42,44,339,201,
            337,380,379,383,382,460,414,528,526,73,
            588,737,763,557,62,110,290,412,202,1087,
            633,14,19,15,336,42,44,339,465,337,
            380,379,383,1143,252,211,271,458,14,19,
            15,336,42,35,435,216,1238,219,1344,221,
            222,227,1603,264,929,612,269,6,260,641,
            6,244,67,1568,274,550,456,1192,344,271,
            1144,261,287,237,115,27,771,581,216,1238,
            219,1344,221,222,227,1650,264,929,612,269,
            87,1273,136,134,211,251,211,275,503,258,
            137,133,135,159,807,633,14,19,15,336,
            42,44,339,377,337,380,379,383,382,460,
            414,1204,386,6,139,551,165,1656,194,262,
            1598,1587,613,277,285,143,146,149,152,633,
            14,19,15,336,42,44,339,386,337,380,
            379,1080,1367,239,262,1598,216,1238,219,1344,
            221,222,227,265,279,504,262,807,567,1407,
            633,14,19,15,336,42,44,339,241,337,
            847,216,1238,219,1344,221,222,227,134,211,
            240,292,207,226,1407,144,133,135,159,550,
            536,197,199,377,583,591,1146,1392,1372,633,
            14,19,15,336,42,44,339,6,337,380,
            1084,702,99,223,89,1589,198,199,633,14,
            19,15,336,42,44,339,771,337,380,1085,
            633,14,19,15,336,42,44,339,551,337,
            890,633,14,19,15,336,42,44,339,710,
            337,891,633,14,19,15,336,42,44,339,
            678,337,892,651,610,1367,767,262,1598,633,
            14,19,15,336,42,44,339,1657,894,633,
            14,19,15,336,42,44,339,499,974,225,
            292,242,147,464,216,1238,219,1344,221,222,
            227,1565,328,201,115,207,6,1273,163,581,
            262,332,784,274,1195,808,1618,1609,271,1306,
            1392,827,673,134,211,251,211,184,271,229,
            141,133,135,159,243,264,929,612,269,592,
            271,506,134,211,651,264,929,612,269,147,
            133,135,159,807,140,1730,165,266,929,612,
            269,193,457,263,458,14,19,15,336,42,
            35,294,1730,217,1238,219,1344,221,222,227,
            633,14,19,15,336,42,37,614,245,633,
            14,19,15,336,42,36,633,14,19,15,
            336,42,35,633,14,19,15,336,42,34,
            6,6,6,6,6,639,377,1730,312,1593,
            312,1623,312,633,14,19,15,336,42,47,
            6,6,6,196,831,196,228,196,1318,1570,
            416,183,1383,87,1383,87,1383,87,1730,262,
            1730,647,1730,647,232,647,633,14,19,15,
            336,42,46,633,14,19,15,336,42,45,
            847,763,482,291,687,867,727,517,14,19,
            15,336,42,43,639,475,6,488,639,1730,
            639,134,211,867,550,550,134,211,150,133,
            135,159,1730,153,133,135,159,47,1081,95,
            182,1730,1730,143,26,867,280,867,412,87,
            87,867,1665,475,639,262,115,1162,310,667,
            196,867,196,1730,1395,256,196,867,115,1129,
            1730,1129,887,239,1292,1129,1081,251,211,293,
            185,867,1081,1730,1730,191,1730,191,1730,251,
            211,191,1495,1667,1564,1667,196,1419,1604,1667,
            625,320,456,256,639,1129,639,639,867,256,
            887,638,1292,1730,457,639,1496,191,1292,867,
            1730,191,1730,1081,1730,867,1083,1730,1654,1667,
            184,1730,203,204,1081,1730,1730,1730,1730,899,
            196,1145,1730,1730,1730,1730,1514,1730,1730,1129,
            256,1730,1730,1730,1730,1730,1730,1183,1730,1292,
            1730,257,1730,1730,1730,192,1730,0,17,179,
            0,18,178,0,1,1954,0,1,1965,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,12,0,14,15,16,17,18,19,
            20,21,22,23,24,25,0,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,0,0,43,44,45,0,1,0,3,
            0,5,6,7,8,0,1,11,3,9,
            10,0,16,17,18,19,0,21,55,56,
            57,58,6,7,8,29,30,31,32,33,
            34,35,36,37,38,39,40,46,42,43,
            44,45,0,47,0,1,0,3,0,5,
            6,7,8,0,12,11,0,4,0,0,
            16,17,18,19,0,21,55,56,57,58,
            6,7,8,29,30,31,32,33,34,35,
            36,37,38,39,40,0,42,43,44,45,
            0,47,0,1,46,3,0,5,6,7,
            8,5,0,11,48,49,53,54,16,17,
            18,19,0,21,55,56,57,58,6,7,
            8,29,30,31,32,33,34,35,36,37,
            38,39,40,0,42,43,44,45,80,47,
            0,1,46,3,59,5,6,7,8,0,
            0,11,2,4,4,65,16,17,18,19,
            0,21,66,13,0,1,64,3,0,29,
            30,31,32,33,34,35,36,37,38,39,
            40,13,42,43,44,45,0,47,0,1,
            26,3,59,5,6,7,8,0,12,11,
            0,4,53,54,16,17,18,19,0,21,
            0,0,0,1,0,3,5,29,30,31,
            32,33,34,35,36,37,38,39,40,0,
            42,43,44,45,0,47,0,1,26,3,
            0,0,6,7,8,0,5,11,48,49,
            53,54,16,17,18,19,0,21,48,49,
            0,1,51,3,0,29,30,31,32,33,
            34,35,36,37,38,39,40,0,64,43,
            44,45,41,6,7,8,26,0,11,2,
            61,62,0,16,17,18,19,0,21,65,
            13,14,15,6,7,8,29,30,31,32,
            33,34,35,36,37,38,39,40,0,1,
            2,3,4,5,68,69,0,9,10,11,
            12,5,14,15,0,0,1,2,20,52,
            22,23,24,25,0,27,28,0,0,1,
            2,3,4,5,67,63,0,9,10,11,
            12,0,14,15,0,4,2,41,20,51,
            22,23,24,25,0,27,28,13,0,1,
            2,3,4,5,0,1,2,9,10,5,
            12,0,14,15,59,48,49,13,20,51,
            22,23,24,25,26,27,28,0,1,2,
            3,4,5,0,0,2,9,10,5,12,
            42,14,15,0,0,41,13,20,4,22,
            23,24,25,0,27,28,0,0,1,2,
            3,4,6,7,8,0,9,10,0,12,
            0,14,15,0,41,0,1,20,51,22,
            23,24,25,13,27,28,0,1,2,3,
            4,48,49,0,50,9,10,63,12,26,
            14,15,9,10,47,0,20,0,22,23,
            24,25,26,27,28,0,1,2,3,4,
            0,1,52,3,9,10,0,12,60,14,
            15,26,6,7,8,20,0,22,23,24,
            25,26,27,28,0,1,2,3,4,13,
            0,0,0,9,10,5,12,0,14,15,
            0,0,1,2,20,4,22,23,24,25,
            26,27,28,0,1,2,3,4,26,0,
            0,2,9,10,0,12,26,14,15,9,
            10,41,13,20,0,22,23,24,25,26,
            27,28,0,1,2,3,4,0,0,0,
            0,9,10,5,12,5,14,15,61,62,
            0,1,20,3,22,23,24,25,0,27,
            28,0,1,2,3,4,0,1,0,0,
            9,10,0,12,50,14,15,0,1,2,
            42,20,0,22,23,24,25,50,27,28,
            0,1,2,3,4,0,1,0,3,9,
            10,0,12,0,14,15,66,0,5,0,
            20,0,22,23,24,25,50,27,28,0,
            1,2,3,4,13,0,0,26,9,10,
            0,12,60,14,15,26,0,1,2,20,
            4,22,23,24,25,42,27,28,0,13,
            2,0,4,5,6,7,8,0,0,11,
            0,13,0,52,16,17,18,19,0,21,
            0,0,1,2,0,4,2,0,4,5,
            6,7,8,0,13,11,60,13,0,41,
            16,17,18,19,0,21,70,71,72,73,
            74,75,76,77,78,79,0,0,46,2,
            0,4,6,7,8,41,46,11,0,0,
            13,0,16,17,18,19,0,21,0,46,
            0,0,6,7,8,5,0,11,0,0,
            0,0,16,17,18,19,0,21,0,0,
            0,0,6,7,8,0,0,11,0,0,
            0,0,16,17,18,19,0,21,0,0,
            0,41,6,7,8,0,46,11,0,0,
            0,0,16,17,18,19,0,21,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1730,573,1490,574,1476,1,1942,1943,1944,1469,
            1460,1892,1483,59,934,406,1893,1891,1945,1894,
            391,1890,1740,1741,1742,1743,282,922,398,1897,
            1902,1901,1899,1900,1898,1903,1904,1896,1905,1906,
            1907,88,1730,893,459,338,1730,1,1730,1,
            51,190,1,1,1,1730,1759,1,1760,879,
            367,61,1,1,1,1,247,1,1332,1321,
            1310,1240,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,639,190,1,
            1,1,64,1925,1730,1,1730,1,253,190,
            1,1,1,48,1209,1,54,1543,1730,60,
            1,1,1,1,1730,1,1332,1321,1310,1240,
            1942,1943,1944,1,1,1,1,1,1,1,
            1,1,1,1,1,1730,190,1,1,1,
            70,1925,1730,1,1661,1,1730,190,1,1,
            1,1739,68,1,1349,1359,1536,1503,1,1,
            1,1,248,1,1332,1321,1310,1240,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,200,190,1,1,1,1717,1925,
            1730,1,1217,1,1061,189,1,1,1,50,
            262,1,1373,1543,1,461,1,1,1,1,
            1730,1,1738,505,1730,1910,575,1911,268,1,
            1,1,1,1,1,1,1,1,1,1,
            1,505,189,1,1,1,65,1925,1730,1,
            1193,1,1042,190,1,1,1,49,1209,1,
            58,1543,1536,1503,1,1,1,1,1730,1,
            57,1730,1730,1910,69,1911,1733,1,1,1,
            1,1,1,1,1,1,1,1,1,62,
            190,1,1,1,71,1925,1730,1909,1287,1908,
            1730,1,1942,1943,1944,1730,90,1892,1349,1359,
            1536,1503,1893,1891,1945,1894,72,1890,1349,1359,
            1730,1910,1732,1911,1730,1897,1902,1901,1899,1900,
            1898,1903,1904,1896,1905,1906,1907,128,575,893,
            459,338,90,1942,1943,1944,1386,31,1892,1261,
            1298,1279,66,1893,1891,1945,1894,246,1890,461,
            1127,1754,1755,1942,1943,1944,1897,1902,1901,1899,
            1900,1898,1903,1904,1896,1905,1906,1907,1,1747,
            1490,1748,1107,1733,1175,1566,1730,1469,1460,592,
            1483,1735,934,406,1730,1,1954,1340,391,488,
            1740,1741,1742,1743,1730,922,398,56,1730,1747,
            1490,1748,1444,1733,413,1090,1730,1469,1460,946,
            1483,1730,934,406,267,1132,1147,1734,391,1732,
            1740,1741,1742,1743,1730,922,398,505,1,1747,
            1490,1748,1476,27,1,1724,1114,1469,1460,1735,
            1483,1730,934,406,1023,1349,1359,505,391,1732,
            1740,1741,1742,1743,2745,922,398,1730,1747,1490,
            1748,1476,1733,1,67,1373,1469,1460,1735,1483,
            27,934,406,55,1,1734,505,391,1132,1740,
            1741,1742,1743,1730,922,398,249,1730,1,1,
            1,1,1942,1943,1944,1730,1,1,209,1,
            1730,1,1,41,1734,1730,1966,1,1732,1,
            1,1,1,966,1,1,1730,1747,1490,1748,
            1476,1349,1359,53,1985,1469,1460,1090,1483,1130,
            934,406,879,367,2041,1730,391,1730,1740,1741,
            1742,1743,1130,922,398,1,1747,1490,1748,1476,
            206,1910,1343,1911,1469,1460,250,1483,985,934,
            406,1130,1942,1943,1944,391,218,1740,1741,1742,
            1743,2745,922,398,1730,1747,1490,1748,1476,505,
            1,1730,187,1469,1460,1735,1483,63,934,406,
            186,1730,1954,1340,391,1388,1740,1741,1742,1743,
            2745,922,398,1,1747,1490,1748,1476,1491,220,
            52,1389,1469,1460,1730,1483,1493,934,406,879,
            367,1734,505,391,1,1740,1741,1742,1743,2745,
            922,398,1730,1747,1490,1748,1476,1,1730,1730,
            1,1469,1460,1737,1483,1739,934,406,1298,1279,
            1730,1910,391,1911,1740,1741,1742,1743,1730,922,
            398,1730,1747,1492,1748,1476,1,1727,1730,1730,
            1469,1460,1730,1483,1985,934,406,1,1954,1340,
            1736,391,1730,1740,1741,1742,1743,1984,922,398,
            1730,1747,1494,1748,1476,205,458,1730,458,1469,
            1460,188,1483,281,934,406,1738,1730,1511,1730,
            391,288,1740,1741,1742,1743,1985,922,398,1,
            1747,1490,1748,1476,1004,1730,42,1510,1469,1460,
            1730,1483,530,934,406,1512,259,1954,1114,391,
            1,1740,1741,1742,1743,1511,922,398,17,505,
            1718,1730,1718,1718,179,179,179,1730,1730,179,
            1730,1718,28,1424,179,179,179,179,1730,179,
            28,265,1954,1114,18,1388,1721,1730,1721,1721,
            178,178,178,205,505,178,859,1721,1730,1718,
            178,178,178,178,1730,178,839,819,799,779,
            759,719,739,699,679,659,129,265,436,1373,
            1730,1388,1942,1943,1944,1721,1757,1892,1730,1730,
            505,1730,1893,1891,1945,1894,130,1890,1730,2737,
            1730,1730,1942,1943,1944,1735,1730,1892,1730,1730,
            1730,1730,1893,1891,1945,1894,131,1890,1730,1730,
            1730,1730,1942,1943,1944,1730,1730,1892,1730,1730,
            1730,1730,1893,1891,1945,1894,132,1890,1730,1730,
            1730,1734,1942,1943,1944,1730,1421,1892,1730,1730,
            1730,1730,1893,1891,1945,1894,1730,1890
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            427,1,76,41,76,76,76,76,76,76,
            76,76,76,3,357,218,215,222,220,228,
            226,230,229,232,231,10,76,357,357,317,
            317,243,76,139,139,345,357,76,76,76,
            76,76,76,76,76,76,76,76,76,76,
            76,76,76,76,76,76,76,76,76,76,
            76,76,76,76,76,76,76,139,139,139,
            45,52,349,70,287,137,136,320,332,332,
            66,66,332,66,332,371,93,93,215,215,
            220,220,220,220,218,218,226,222,222,229,
            228,280,231,230,203,68,50,345,340,142,
            45,394,74,139,398,290,262,173,262,173,
            351,262,76,50,340,394,394,45,73,70,
            139,343,371,138,292,173,173,173,173,351,
            351,353,163,200,68,394,340,76,76,45,
            74,287,275,274,349,292,139,173,200,166,
            173,173,200,353,282,353,351,200,48,285,
            317,76,162,200,50,340,45,45,139,398,
            290,343,200,168,200,200,76,317,353,52,
            45,317,76,50,292,239,76,238,89,349,
            200,45,353,139,138,168,76,89,200,318,
            353
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,66,13,2,52,67,14,15,12,
            4,9,10,53,54,48,49,55,56,57,
            58,61,62,63,64,65,68,69,42,60,
            70,71,72,73,74,76,75,77,78,79,
            59,41,80,46,51,5,0,5,42,13,
            52,14,15,12,4,9,10,27,28,20,
            2,22,23,24,25,1,3,26,0,6,
            7,8,11,51,5,22,23,24,25,3,
            14,15,12,9,10,27,28,20,4,2,
            1,0,7,11,21,8,19,18,17,6,
            16,52,67,14,15,12,9,10,53,54,
            48,49,55,56,57,58,61,62,63,64,
            65,68,69,60,70,71,72,73,74,75,
            76,77,78,79,4,2,13,46,41,5,
            0,6,7,8,2,22,23,24,25,1,
            3,14,15,12,4,9,10,27,28,20,
            0,60,13,52,0,66,5,4,1,2,
            59,0,16,29,6,30,43,17,31,18,
            32,33,19,7,34,35,11,44,21,45,
            36,37,8,38,39,40,1,3,47,5,
            42,0,60,70,71,72,73,74,75,76,
            77,78,79,26,4,53,54,9,10,49,
            48,55,56,57,58,61,62,12,63,64,
            65,51,41,42,80,68,69,59,66,5,
            46,0,5,41,20,22,23,24,25,1,
            3,2,14,15,12,4,9,10,27,28,
            0,16,6,17,18,19,7,11,21,8,
            1,4,26,2,5,46,41,66,13,59,
            0,5,46,42,60,0,4,2,13,41,
            5,16,29,6,30,43,17,31,18,32,
            33,19,7,34,35,11,44,21,45,36,
            37,8,38,39,40,50,3,1,0,37,
            29,34,32,33,31,30,35,36,38,39,
            40,59,66,21,17,11,16,19,18,6,
            7,8,46,1,5,41,2,13,4,0,
            1,3,5,42,46,0,20,22,23,24,
            25,2,14,15,12,4,9,10,27,28,
            3,1,43,44,45,37,29,34,32,33,
            31,30,35,36,38,39,40,21,17,11,
            16,19,18,6,7,8,0,16,29,6,
            30,43,17,31,18,32,33,19,7,34,
            35,11,44,21,45,36,37,8,38,39,
            40,1,3,50,4,0,20,22,23,24,
            25,1,3,2,14,15,12,4,9,10,
            27,28,47,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            81,8,16,8,16,16,16,16,16,16,
            16,16,16,8,71,8,8,8,8,8,
            8,8,8,8,8,8,16,71,71,11,
            11,61,72,55,55,65,1,16,16,16,
            16,16,16,16,16,16,16,16,16,16,
            16,16,16,72,16,16,16,16,16,16,
            16,16,16,16,16,16,16,55,55,55,
            24,16,79,22,64,29,29,49,50,50,
            9,9,50,9,50,45,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,90,66,90,26,
            24,69,23,55,77,54,8,90,8,90,
            90,8,16,14,90,69,69,24,23,18,
            55,36,2,8,89,90,84,90,84,9,
            90,33,20,90,8,69,18,16,16,24,
            23,35,29,29,79,89,55,84,75,42,
            92,84,75,33,8,8,9,75,13,8,
            9,16,31,75,90,18,24,24,55,77,
            54,37,75,57,75,75,16,9,33,15,
            24,9,16,14,88,43,16,8,57,79,
            75,24,33,55,55,57,16,39,75,8,
            52
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,78,77,76,75,74,73,0,27,0,
            70,0,68,8,61,4,0,21,0,91,
            0,8,4,24,0,4,8,0,25,0,
            93,0,51,0,20,8,44,43,37,35,
            0,8,69,0,63,64,65,66,52,28,
            0,89,0,8,20,0,8,37,35,0,
            8,85,0,20,8,44,43,0,58,0,
            32,8,41,0,26,0,8,23,49,0,
            8,84,0,56,8,32,0,87,23,8,
            0,8,32,48,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,10,11,
            69,8,1,6,7,44,55,60,63,68,
            72,81,82,83,84,3,12,13,47,52,
            56,61,62,66,67,74,75,78,79,80,
            90,91,54,70,73,42,93,16,17,30,
            89,4,14,15,18,19,20,21,29,31,
            22,23,24,25,26,92,5,27,28,32,
            33,34,35,36,37,38,39,40,41,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,101,105,106,107,0,108,109,
            110,111,112,113,114,115,116,117,118,97,
            129,0,122,96,149,98,121,128,0,0,
            0,140,0,145,147,0,148,0,0,0,
            100,158,159,160,0,120,137,139,146,155,
            0,131,136,0,0,138,150,153,154,157,
            0,103,132,133,134,135,144,161,99,102,
            104,119,123,124,125,126,127,130,142,0,
            0,143,152,95,0,141,151,156,0,162,
            163,0,164,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            168,82,35,41,91,111,117,12,142,21,
            51,69,123,128,28,47,101,164,183,187,
            151,1,1,32,56,79,191,6,105,158,
            133,158,97,59,59,59
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            89,89,4,4,89,89,89,18,148,26,
            4,26,89,89,26,4,99,26,26,4,
            155,4,4,26,4,26,26,9,108,161,
            136,176,99,66,61,74
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            4,65,25,25,65,63,63,53,100,45,
            25,40,63,63,45,25,48,5,4,4,
            18,93,92,43,25,37,2,68,48,6,
            101,4,48,40,38,40
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            42,42,51,51,42,42,42,42,86,41,
            51,41,42,42,41,51,66,41,41,51,
            59,51,51,41,51,41,41,60,1,41,
            92,41,66,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            34,19,23,23,19,19,19,89,-1,27,
            23,11,19,19,27,23,5,34,34,34,
            64,1,3,27,23,11,34,90,5,37,
            -1,34,5,11,11,11
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            139,13,0,96,0,183,101,0,31,136,
            0,144,164,101,26,154,0,98,0,0,
            150,101,2,136,0,97,0,150,101,2,
            0,153,2,0,112,11,176,101,13,0,
            112,176,101,11,13,0,112,11,13,0,
            112,176,101,13,0,112,13,0,130,0,
            2,0,151,97,0,2,97,0,150,101,
            2,130,0,2,0,150,97,0,140,2,
            0,144,174,101,26,120,43,0,98,0,
            144,174,101,26,43,0,125,0,99,0,
            179,101,125,0,101,125,0,141,99,0,
            148,101,26,120,45,0,148,101,26,120,
            44,0,148,101,26,45,0,148,101,26,
            44,0,189,85,0,77,2,100,97,99,
            0,189,113,134,2,89,0,53,0,0,
            134,69,110,0,29,117,0,155,2,0,
            97,106,0,155,2,20,0,144,164,101,
            26,113,155,2,0,97,3,0,104,0,
            98,0,178,2,97,0,134,13,97,0,
            134,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            993,0,480,0,1623,1667,1593,1589,1587,0,
            1419,1217,1340,1192,456,1114,1081,0,867,1142,
            312,0,1344,1238,929,612,456,1114,1081,1395,
            1373,1383,0,934,406,391,1444,1107,1557,461,
            1175,1090,575,1298,1279,1209,1359,1349,1332,1321,
            1310,1240,1543,1536,1503,879,367,1483,1476,1469,
            1460,922,398,1042,1023,1004,985,966,946,899,
            614,1061,592,505,859,839,819,799,779,759,
            739,719,699,679,659,312,639,550,530,416,
            436,344,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,177,101,165,20,28,27,10,9,4,
            12,15,14,97,2,102,100,104,103,106,
            105,108,107,110,109,98,46,2,2,67,
            52,2,13,155,134,125,101,10,9,54,
            53,4,58,57,56,55,48,49,12,62,
            61,64,63,69,68,65,79,78,77,75,
            76,74,73,72,71,70,60,155,155,178,
            134,113,101,13,2,137,136,166,167,168,
            45,44,169,43,170,171,1,3,100,100,
            103,103,103,103,102,102,105,104,104,107,
            106,134,109,108,113,113,26,142,4,11,
            112,101,4,153,101,2,120,26,120,26,
            26,120,59,101,4,101,101,112,176,151,
            150,116,101,152,101,26,101,26,101,101,
            26,164,101,26,154,101,151,176,11,112,
            4,2,128,130,101,46,150,101,148,125,
            149,101,148,174,120,175,101,144,46,183,
            52,13,184,101,26,151,112,112,140,101,
            2,142,148,101,148,144,60,46,174,60,
            139,52,13,101,101,179,59,140,2,101,
            144,139,164,150,180,46,59,142,144,46,
            119
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "expression_parser_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_name",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_or_typedefname",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 47,
           SCOPE_UBOUND      = 35,
           SCOPE_SIZE        = 36,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 211,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2041,
           MAX_LA            = 2,
           NUM_RULES         = 311,
           NUM_NONTERMINALS  = 117,
           NUM_SYMBOLS       = 210,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1567,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1717,
           ERROR_ACTION      = 1730;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
