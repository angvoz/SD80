/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99ExpressionStatementParserprs implements lpg.lpgjavaruntime.ParseTable, C99ExpressionStatementParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,3,1,1,1,4,
            4,3,3,2,2,8,1,0,1,1,
            1,2,2,2,2,2,2,2,2,2,
            4,1,4,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,3,2,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,5,9,8,
            3,2,2,2,3,2,4,2,2,2,
            2,2,1,1,1,1,2,1,2,2,
            2,1,2,2,1,2,2,1,2,2,
            1,2,2,1,3,1,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,5,5,6,6,2,2,2,1,0,
            1,2,4,2,1,1,1,3,1,1,
            2,3,6,7,1,0,1,3,1,3,
            1,1,1,1,1,1,3,1,1,1,
            1,1,3,1,2,2,1,5,3,1,
            3,5,1,3,1,3,2,4,3,5,
            4,6,6,3,5,1,1,2,3,4,
            1,2,1,3,1,1,3,2,1,1,
            1,1,2,1,2,3,1,1,1,3,
            1,2,2,2,3,4,5,1,5,1,
            1,3,3,4,1,1,2,3,2,3,
            2,1,0,1,2,1,1,1,1,1,
            2,4,3,6,2,4,2,1,-38,0,
            0,0,0,0,0,0,-3,0,0,0,
            0,0,0,0,0,0,0,0,-2,0,
            0,-5,-15,-31,-82,-17,0,0,0,0,
            -125,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-39,0,0,0,0,0,0,
            0,0,0,0,0,-18,-19,0,-20,0,
            0,0,0,0,0,0,-7,0,0,0,
            0,0,0,0,-54,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-32,
            0,-174,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-169,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-181,-21,-22,-23,-187,-4,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-35,0,0,
            -144,0,0,-24,0,0,0,0,0,0,
            0,0,-25,0,0,0,0,0,-77,0,
            -75,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -143,-26,0,0,0,-173,-27,0,-111,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-130,0,
            0,0,0,0,0,0,-195,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-189,0,0,0,0,0,0,
            0,-36,0,0,0,0,0,0,0,0,
            0,0,0,-28,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-88,-89,-90,0,0,-58,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-59,0,
            0,0,0,0,0,0,-69,0,0,0,
            0,0,0,0,0,0,0,0,-60,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-61,0,
            0,0,0,0,0,0,-70,0,0,0,
            0,0,0,0,0,0,0,0,-62,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-63,0,
            0,0,0,0,0,0,-71,0,0,0,
            0,0,0,0,0,0,0,0,-64,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-65,0,
            0,0,0,0,0,0,-115,0,0,0,
            0,0,0,0,0,0,0,0,-66,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-67,0,
            0,0,0,0,0,0,-91,0,0,0,
            0,0,0,0,0,0,0,0,-68,0,
            0,0,0,0,0,0,-134,0,0,0,
            0,0,0,0,0,0,0,0,-40,0,
            0,0,0,0,0,0,-74,0,0,-92,
            -93,-94,-83,-95,0,0,0,0,-148,0,
            0,0,0,0,0,0,-85,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-8,0,0,0,0,0,0,-72,0,
            0,0,0,0,-96,0,-97,-98,0,0,
            0,0,0,0,-149,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-172,0,0,0,0,0,
            0,0,-99,0,0,0,0,0,0,0,
            0,0,0,-186,0,0,0,0,0,0,
            0,-100,0,0,0,0,0,0,0,0,
            0,0,-192,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-196,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -206,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-124,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-101,-133,
            -6,0,0,0,0,0,0,0,-57,0,
            0,0,0,0,0,0,-102,0,0,0,
            0,0,0,0,0,-114,0,0,0,0,
            0,0,-152,0,0,0,0,0,0,0,
            0,0,0,0,0,-117,0,-108,-78,0,
            -110,-171,0,0,-33,0,-112,0,0,0,
            -80,-103,0,-131,-104,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-105,0,0,0,0,0,0,
            0,0,0,-56,0,0,0,0,0,0,
            0,-129,0,0,0,0,0,0,0,0,
            -53,0,0,0,0,0,0,0,-87,0,
            0,0,0,0,0,0,-183,-9,0,0,
            0,0,0,0,0,-119,-121,-122,0,0,
            0,-191,-153,0,0,0,0,0,0,0,
            -48,0,0,0,0,0,0,0,-164,0,
            0,0,0,0,0,0,0,0,0,-106,
            0,-107,0,0,-151,0,0,0,0,0,
            0,0,0,0,0,-50,0,0,0,0,
            0,0,0,-205,0,0,0,0,0,-126,
            -180,0,-137,-127,0,0,-132,0,0,0,
            0,0,-51,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-13,0,0,0,0,0,
            0,-52,0,0,0,0,0,0,0,-118,
            0,0,0,-44,0,0,0,0,0,0,
            0,0,0,0,-10,0,0,0,0,0,
            0,0,0,-45,0,0,0,0,0,0,
            0,-154,0,0,-46,0,0,0,0,0,
            0,0,-120,0,0,-47,0,0,0,0,
            0,0,0,-198,0,0,0,-123,-155,-150,
            -135,0,-49,0,0,0,0,0,0,0,
            -37,0,-159,-139,-76,-79,-142,-145,0,-165,
            -81,0,0,0,0,0,-207,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-188,0,
            0,-166,-157,-146,0,-11,0,0,0,0,
            0,0,-12,0,0,0,0,0,0,-16,
            -178,-29,0,-30,0,0,-147,0,-170,0,
            -197,0,-41,0,0,0,0,0,0,-176,
            0,-208,0,0,0,0,0,0,0,0,
            -160,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-42,0,0,0,0,
            0,0,-43,0,0,0,0,0,0,-84,
            -193,0,0,0,-86,0,-73,0,0,0,
            0,0,0,-199,-116,-163,-1,-168,-113,-182,
            0,0,0,-177,0,0,0,0,0,0,
            0,0,0,0,0,0,-138,0,-140,0,
            0,0,-158,0,0,0,0,0,0,0,
            0,0,-179,-184,0,0,-128,0,-194,0,
            0,0,0,0,0,0,0,-175,0,-141,
            0,0,-162,0,0,0,0,0,0,0,
            0,0,-190,-201,0,-203,0,-109,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -136,0,0,-167,0,0,0,0,0,0,
            0,-14,0,0,0,0,0,0,0,0,
            0,0,0,0,-161,-34,0,-55,0,-156,
            0,-204,0,0,0,0,-185,0,-200,0,
            0,-202,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            83,8,24,24,20,20,26,26,61,61,
            1,1,1,1,2,2,2,3,3,4,
            4,4,4,4,4,4,4,51,51,69,
            69,5,5,5,5,5,5,5,5,5,
            5,5,6,6,7,7,7,7,9,9,
            9,10,10,10,11,11,11,11,11,12,
            12,12,13,13,14,14,15,15,16,16,
            17,17,18,18,19,19,19,19,19,19,
            19,19,19,19,19,19,93,41,33,84,
            84,71,71,46,94,94,94,94,94,94,
            94,95,95,95,96,96,101,101,102,102,
            97,97,98,98,98,104,104,99,99,99,
            99,100,100,100,100,100,103,103,23,23,
            23,23,23,28,28,28,77,77,72,72,
            72,72,73,73,73,74,74,74,75,75,
            75,76,76,76,105,105,106,106,107,29,
            31,31,31,31,31,52,54,54,54,54,
            54,54,54,54,54,54,54,54,66,66,
            27,27,63,63,63,63,64,64,64,55,
            55,56,56,48,48,48,32,85,85,78,
            79,79,79,65,65,80,80,81,81,67,
            67,21,22,22,22,30,47,47,34,34,
            34,34,37,37,39,35,35,36,40,40,
            108,108,38,109,109,86,86,25,25,25,
            25,25,25,25,25,25,82,49,49,49,
            49,58,58,57,57,57,59,59,50,50,
            87,87,62,62,60,60,60,42,42,42,
            43,44,44,44,45,45,45,45,53,53,
            70,70,70,70,68,88,89,89,90,90,
            91,91,110,110,111,111,112,112,112,112,
            114,114,113,113,113,115,115,83,83,1,
            14,19,15,333,527,44,376,139,336,379,
            377,454,453,484,455,522,493,74,91,155,
            134,211,42,831,415,118,192,136,133,135,
            159,554,14,19,15,333,527,44,376,481,
            336,379,377,454,453,484,455,522,493,74,
            278,138,1290,165,612,14,19,15,333,42,
            44,616,142,145,148,151,209,13,307,56,
            332,1366,1101,1371,1500,1505,1159,612,14,19,
            15,333,42,39,280,612,14,19,15,333,
            42,44,376,23,336,379,377,454,1057,281,
            415,521,554,14,19,15,333,527,44,376,
            481,336,379,377,454,453,484,455,522,493,
            74,278,434,14,19,15,333,527,44,376,
            481,336,379,377,454,453,484,455,522,493,
            74,278,429,107,187,183,626,612,14,19,
            15,333,527,44,376,280,336,379,377,454,
            453,484,455,522,493,74,91,271,472,22,
            281,673,1501,1370,537,282,217,1183,219,1322,
            221,222,227,374,266,1089,499,269,1507,279,
            283,368,14,19,15,333,527,44,376,1519,
            336,379,377,454,453,484,455,522,493,74,
            1097,479,135,208,272,237,754,702,332,696,
            14,19,15,333,527,44,376,1557,336,379,
            377,454,453,484,455,522,493,74,1142,401,
            14,19,15,333,527,44,376,708,336,379,
            377,454,453,484,455,522,493,74,1350,1449,
            526,286,1518,238,583,14,19,15,333,527,
            44,376,472,336,379,377,454,453,484,455,
            522,493,74,278,612,14,19,15,333,527,
            44,376,16,336,379,377,454,453,484,455,
            522,493,74,92,724,743,212,287,193,612,
            14,19,15,333,527,44,376,284,336,379,
            377,454,453,484,455,522,493,74,85,612,
            14,19,15,333,527,44,376,472,336,379,
            377,454,453,484,455,522,493,74,84,612,
            14,19,15,333,527,44,376,1210,336,379,
            377,454,453,484,455,522,493,74,83,612,
            14,19,15,333,527,44,376,472,336,379,
            377,454,453,484,455,522,493,74,82,612,
            14,19,15,333,527,44,376,1212,336,379,
            377,454,453,484,455,522,493,74,81,612,
            14,19,15,333,527,44,376,472,336,379,
            377,454,453,484,455,522,493,74,80,612,
            14,19,15,333,527,44,376,21,336,379,
            377,454,453,484,455,522,493,74,79,612,
            14,19,15,333,527,44,376,472,336,379,
            377,454,453,484,455,522,493,74,78,612,
            14,19,15,333,527,44,376,270,336,379,
            377,454,453,484,455,522,493,74,77,612,
            14,19,15,333,527,44,376,257,336,379,
            377,454,453,484,455,522,493,74,76,612,
            14,19,15,333,527,44,376,286,336,379,
            377,454,453,484,455,522,493,74,75,612,
            14,19,15,333,42,44,807,260,134,211,
            210,492,512,166,569,136,133,135,159,612,
            14,19,15,333,527,44,376,214,336,379,
            377,454,453,484,455,522,493,74,1460,138,
            1333,165,612,14,19,15,333,42,38,117,
            142,145,148,151,1348,375,1588,440,508,1366,
            1101,1371,1500,1505,1159,612,14,19,15,333,
            527,44,376,20,336,379,377,454,453,484,
            455,522,493,74,1524,612,14,19,15,333,
            42,44,376,58,336,379,377,454,453,484,
            455,522,493,93,612,14,19,15,333,42,
            44,376,106,336,379,377,454,453,484,455,
            522,493,93,612,14,19,15,333,42,44,
            376,1583,336,379,377,454,453,484,455,522,
            493,93,612,14,19,15,333,42,44,376,
            210,336,379,377,454,453,484,455,522,493,
            93,612,14,19,15,333,42,44,376,1584,
            336,379,377,454,453,484,455,522,493,93,
            612,14,19,15,333,42,44,376,201,336,
            379,377,454,453,484,455,522,493,73,592,
            396,640,14,19,15,333,40,202,1349,612,
            14,19,15,333,42,44,376,218,336,379,
            377,454,453,484,1124,271,463,14,19,15,
            333,42,35,840,216,1183,219,1322,221,222,
            227,1553,264,1089,499,269,705,260,6,469,
            244,59,626,274,1611,470,341,117,271,1244,
            261,782,562,457,331,380,275,216,1183,219,
            1322,221,222,227,273,264,1089,499,269,289,
            1441,239,134,211,413,252,211,258,89,144,
            133,135,159,767,612,14,19,15,333,42,
            44,376,117,336,379,377,454,453,484,455,
            1105,612,14,19,15,333,42,44,376,286,
            336,379,377,454,453,1039,241,152,612,14,
            19,15,333,42,37,1514,6,6,6,727,
            134,211,626,646,1537,1539,1570,137,133,135,
            159,612,14,19,15,333,42,44,376,630,
            895,216,1183,219,1322,221,222,227,226,291,
            29,139,531,165,1451,463,14,19,15,333,
            42,35,143,146,149,152,612,14,19,15,
            333,42,44,376,152,336,379,377,898,245,
            299,705,1514,6,290,197,199,472,1424,1559,
            1647,1543,557,612,14,19,15,333,42,44,
            376,229,336,379,933,251,211,276,216,1183,
            219,1322,221,222,227,668,14,19,15,333,
            33,1451,612,14,19,15,333,42,44,376,
            563,336,379,952,612,14,19,15,333,42,
            44,376,1447,336,850,612,14,19,15,333,
            42,36,198,199,612,14,19,15,333,42,
            44,376,588,336,851,612,14,19,15,333,
            42,44,376,620,336,852,612,14,19,15,
            333,42,44,376,72,336,854,225,624,260,
            117,449,1514,612,14,19,15,333,42,44,
            376,491,897,309,6,844,327,6,6,847,
            568,795,1573,1515,240,1614,412,350,216,1183,
            219,1322,221,222,227,274,271,134,211,183,
            271,1441,134,211,141,133,135,159,452,147,
            133,135,159,264,1089,499,269,264,1089,499,
            269,217,1183,219,1322,221,222,227,140,630,
            165,263,682,472,290,767,612,14,19,15,
            333,42,35,612,14,19,15,333,42,34,
            6,472,6,277,6,251,211,340,309,674,
            309,676,309,612,14,19,15,333,42,47,
            117,223,683,196,1710,196,1710,196,252,211,
            1649,505,1361,87,1361,87,1361,87,1710,1167,
            1710,582,1568,582,242,582,612,14,19,15,
            333,42,46,612,14,19,15,333,42,45,
            808,479,478,1710,647,821,687,525,14,19,
            15,333,42,43,260,595,309,496,309,290,
            309,134,211,827,117,457,134,211,150,133,
            135,159,194,153,133,135,159,46,1040,94,
            251,211,182,142,26,827,185,827,243,1710,
            87,827,1652,595,309,1710,1710,290,317,597,
            196,827,196,1377,1588,256,196,827,376,1471,
            501,1471,1247,238,1351,1471,1040,1104,251,211,
            184,827,1040,117,117,191,472,191,530,252,
            211,191,1363,1635,1516,1635,196,1370,1520,1635,
            329,549,452,256,1710,1471,228,288,290,256,
            1247,48,1351,271,501,1104,1586,1710,1351,827,
            1710,191,668,14,19,15,333,32,1554,1635,
            266,1089,499,269,1040,190,6,207,6,859,
            539,1370,308,827,457,1642,457,309,827,309,
            1199,1422,309,1710,1710,1710,1710,1710,196,1710,
            1710,256,232,1040,1710,1710,1710,1471,1423,87,
            1351,87,1710,203,1710,204,1710,889,279,1102,
            1710,207,1710,192,1710,1710,1710,1710,1710,1710,
            257,1710,1710,1710,1419,1422,1710,0,17,179,
            0,18,178,0,1,1934,0,1,1945,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,0,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,0,29,
            30,31,32,33,34,35,36,37,38,39,
            40,0,42,43,44,0,1,0,3,0,
            5,6,7,8,9,0,28,0,0,14,
            15,16,17,18,6,7,8,55,56,57,
            58,0,1,2,29,30,31,32,33,34,
            35,36,37,38,39,40,45,42,43,44,
            0,46,47,0,1,0,3,50,5,6,
            7,8,9,48,49,0,0,14,15,16,
            17,18,55,56,57,58,0,0,1,13,
            3,5,29,30,31,32,33,34,35,36,
            37,38,39,40,0,42,43,44,0,46,
            47,0,1,5,3,28,5,6,7,8,
            9,0,1,2,0,14,15,16,17,18,
            55,56,57,58,0,0,1,51,3,0,
            29,30,31,32,33,34,35,36,37,38,
            39,40,0,42,43,44,0,46,47,0,
            1,0,3,28,5,6,7,8,9,61,
            66,10,11,14,15,16,17,18,0,0,
            59,0,4,0,1,4,3,0,29,30,
            31,32,33,34,35,36,37,38,39,40,
            13,42,43,44,80,46,47,0,1,0,
            3,28,5,6,7,8,9,65,62,63,
            0,14,15,16,17,18,0,48,49,0,
            4,53,54,4,53,54,29,30,31,32,
            33,34,35,36,37,38,39,40,0,42,
            43,44,0,46,47,0,1,0,3,0,
            12,6,7,8,9,6,7,8,0,14,
            15,16,17,18,6,7,8,0,0,53,
            54,0,5,5,29,30,31,32,33,34,
            35,36,37,38,39,40,0,42,43,44,
            0,0,6,7,8,9,6,7,8,0,
            14,15,16,17,18,6,7,8,41,0,
            1,2,45,4,46,29,30,31,32,33,
            34,35,36,37,38,39,40,0,1,2,
            3,4,5,0,0,0,9,10,11,0,
            13,6,7,8,10,11,19,20,21,22,
            23,24,25,26,27,0,1,2,0,4,
            0,1,2,3,4,5,0,12,0,9,
            10,11,0,13,0,1,0,3,51,19,
            20,21,22,23,24,25,26,27,0,1,
            2,0,4,0,1,2,3,4,5,0,
            12,68,69,10,11,66,13,0,0,10,
            11,51,19,20,21,22,23,24,25,26,
            27,28,0,1,2,3,4,5,0,0,
            2,0,10,11,5,13,5,65,0,46,
            12,19,20,21,22,23,24,25,26,27,
            0,0,2,45,4,0,1,2,3,4,
            0,1,12,3,0,10,11,0,13,5,
            41,0,41,51,19,20,21,22,23,24,
            25,26,27,45,0,1,2,3,4,0,
            0,2,0,4,10,11,0,13,0,48,
            49,12,47,19,20,21,22,23,24,25,
            26,27,28,0,1,2,3,4,28,48,
            49,0,0,10,11,61,13,0,0,62,
            63,0,19,20,21,22,23,24,25,26,
            27,28,0,1,2,3,4,0,50,2,
            28,0,10,11,0,13,0,1,4,12,
            64,19,20,21,22,23,24,25,26,27,
            28,0,1,2,3,4,48,49,0,0,
            59,10,11,0,13,0,1,60,3,0,
            19,20,21,22,23,24,25,26,27,0,
            1,2,3,4,50,0,50,28,0,10,
            11,28,13,0,1,64,3,12,19,20,
            21,22,23,24,25,26,27,0,1,2,
            3,4,0,0,45,0,0,10,11,0,
            13,0,0,1,12,0,19,20,21,22,
            23,24,25,26,27,0,1,2,3,4,
            0,0,0,0,0,10,11,0,13,5,
            0,0,5,0,19,20,21,22,23,24,
            25,26,27,0,52,2,45,4,5,6,
            7,8,9,60,59,12,0,14,15,16,
            17,18,0,0,2,41,4,5,6,7,
            8,9,45,0,12,0,14,15,16,17,
            18,60,0,0,41,12,0,0,61,0,
            0,70,71,72,73,74,75,76,77,78,
            79,0,0,41,0,0,0,6,7,8,
            9,0,0,0,0,14,15,16,17,18,
            6,7,8,9,0,52,0,0,14,15,
            16,17,18,6,7,8,9,0,0,0,
            0,14,15,16,17,18,6,7,8,9,
            0,0,2,0,14,15,16,17,18,0,
            1,2,12,0,5,2,0,0,5,19,
            20,12,0,0,0,12,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            41,0,52,0,41,0,0,0,0,0,
            0,0,0,0,0,0,0,67,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1710,614,1440,615,1426,1,1922,1923,1924,1872,
            1305,1168,59,1433,1873,1871,1925,1874,1870,1622,
            1275,1041,1720,1721,1722,1723,882,387,41,1877,
            1882,1881,1879,1880,1878,1883,1884,1876,1885,1886,
            1887,88,867,853,335,1710,1,1,1,1710,
            190,1,1,1,1,54,1088,61,247,1,
            1,1,1,1,1,1,1,1336,1325,1314,
            1294,1,1934,1344,1,1,1,1,1,1,
            1,1,1,1,1,1,594,1,1,1,
            1710,190,1905,1710,1,1710,1,1965,190,1,
            1,1,1,1191,1353,60,64,1,1,1,
            1,1,1336,1325,1314,1294,1710,1710,1890,1226,
            1891,1713,1,1,1,1,1,1,1,1,
            1,1,1,1,70,1,1,1,1710,190,
            1905,1710,1,1719,1,1176,190,1,1,1,
            1,1,1934,1344,1710,1,1,1,1,1,
            1336,1325,1314,1294,1710,1710,1890,1712,1891,1710,
            1,1,1,1,1,1,1,1,1,1,
            1,1,68,1,1,1,62,190,1905,1710,
            1,51,1,1177,189,1,1,1,1,1718,
            1049,839,364,1,1,1,1,1,48,58,
            982,50,1493,1710,1890,1493,1891,65,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1226,1,1,1,1697,189,1905,1710,1,1710,
            1,1178,190,1,1,1,1,1151,1282,1253,
            1710,1,1,1,1,1,49,1191,1353,1710,
            1493,1486,1453,1091,1486,1453,1,1,1,1,
            1,1,1,1,1,1,1,1,268,1,
            1,1,1710,190,1905,1710,1889,1710,1888,1710,
            501,1922,1923,1924,1872,1922,1923,1924,248,1873,
            1871,1925,1874,1870,1,1,1,1710,1710,1486,
            1453,1710,1715,1717,1877,1882,1881,1879,1880,1878,
            1883,1884,1876,1885,1886,1887,128,867,853,335,
            246,1710,1922,1923,1924,1872,1922,1923,1924,249,
            1873,1871,1925,1874,1870,1922,1923,1924,1714,1710,
            1934,1344,1462,1240,1716,1877,1882,1881,1879,1880,
            1878,1883,1884,1876,1885,1886,1887,1,1727,1440,
            1728,1066,1713,72,53,250,529,1305,1168,71,
            1433,1922,1923,1924,839,364,1622,1275,1041,1720,
            1721,1722,1723,882,387,259,1934,1073,1710,1,
            1710,1727,1440,1728,1215,1713,1710,501,1710,905,
            1305,1168,69,1433,1710,1739,1710,1740,1712,1622,
            1275,1041,1720,1721,1722,1723,882,387,265,1934,
            1073,1710,1240,1,1727,1440,1728,1426,27,52,
            501,1134,1638,1305,1168,1049,1433,1710,253,839,
            364,1712,1622,1275,1041,1720,1721,1722,1723,882,
            387,1368,1710,1727,1440,1728,1426,1713,267,1,
            1086,1710,1305,1168,90,1433,1715,1151,28,27,
            501,1622,1275,1041,1720,1721,1722,1723,882,387,
            262,57,1365,1640,1,1710,1,1,1,1,
            206,1890,501,1891,1,1,1,63,1,1719,
            90,56,1714,1712,1,1,1,1,1,1,
            1,1,1,432,1710,1727,1440,1728,1426,265,
            1710,1365,1710,1240,1305,1168,66,1433,1,1191,
            1353,501,2018,1622,1275,1041,1720,1721,1722,1723,
            882,387,1088,1,1727,1440,1728,1426,1088,1191,
            1353,1710,187,1305,1168,1718,1433,209,55,1282,
            1253,1710,1622,1275,1041,1720,1721,1722,1723,882,
            387,1368,1710,1727,1440,1728,1426,220,1964,1241,
            1243,67,1305,1168,1,1433,1,1707,1091,501,
            395,1622,1275,1041,1720,1721,1722,1723,882,387,
            1368,1710,1727,1440,1728,1426,1191,1353,1710,186,
            1020,1305,1168,188,1433,1710,1890,944,1891,28,
            1622,1275,1041,1720,1721,1722,1723,882,387,1710,
            1727,1442,1728,1426,1965,218,1965,1364,1710,1305,
            1168,1367,1433,205,456,395,456,501,1622,1275,
            1041,1720,1721,1722,1723,882,387,1710,1727,1444,
            1728,1426,1710,1710,1737,200,1710,1305,1168,1710,
            1433,205,1710,1946,925,1710,1622,1275,1041,1720,
            1721,1722,1723,882,387,1,1727,1440,1728,1426,
            1710,42,1710,1710,1,1305,1168,1710,1433,1715,
            1710,1710,1719,1710,1622,1275,1041,1720,1721,1722,
            1723,882,387,17,1092,1698,2672,1698,1698,179,
            179,179,179,574,1001,1698,1710,179,179,179,
            179,179,18,1710,1701,1714,1701,1701,178,178,
            178,178,1234,285,1701,1710,178,178,178,178,
            178,819,1710,1710,1698,963,1710,1710,1718,1710,
            1710,799,779,759,739,719,679,699,659,639,
            619,129,1710,1701,1710,1710,1710,1922,1923,1924,
            1872,1710,1710,1710,130,1873,1871,1925,1874,1870,
            1922,1923,1924,1872,1710,1182,1710,131,1873,1871,
            1925,1874,1870,1922,1923,1924,1872,1710,1710,1710,
            132,1873,1871,1925,1874,1870,1922,1923,1924,1872,
            31,1710,1095,1710,1873,1871,1925,1874,1870,1,
            1704,1073,1636,1,1715,1365,1710,1710,1715,1734,
            1735,501,1710,1710,1710,501,1710,1710,1710,1710,
            1710,1710,1710,1710,1710,1710,1710,1710,1710,1710,
            1710,1710,1710,1710,1710,1710,1710,1710,1710,1710,
            1714,1710,410,1710,1714,1710,1710,1710,1710,1710,
            1710,1710,1710,1710,1710,1710,1710,334
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            425,1,44,75,40,75,75,75,75,75,
            75,75,75,75,3,346,23,20,27,25,
            33,31,35,34,37,36,9,75,346,346,
            312,312,168,75,162,162,340,346,75,75,
            75,75,75,75,75,75,75,75,75,75,
            75,75,75,75,75,75,75,75,75,75,
            75,75,75,75,75,75,75,75,162,162,
            162,165,51,344,69,282,160,159,315,327,
            327,65,65,327,65,327,360,116,116,20,
            20,25,25,25,25,23,23,31,27,27,
            34,33,280,36,35,223,67,49,340,335,
            96,165,383,73,162,396,285,262,187,262,
            187,217,262,75,49,335,383,383,165,72,
            69,162,338,360,161,287,187,187,187,187,
            217,217,258,93,49,383,335,75,75,165,
            73,282,275,274,344,287,162,187,259,389,
            187,187,259,258,257,258,217,259,47,387,
            312,75,92,49,335,165,165,162,396,285,
            338,259,391,259,259,75,312,258,51,165,
            312,75,258,287,43,75,42,88,344,259,
            165,259,162,161,391,75,88,313
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,12,2,52,67,19,20,60,70,
            71,72,73,74,76,75,77,78,79,4,
            53,54,10,11,49,48,55,56,57,58,
            62,63,13,64,65,66,46,68,69,51,
            41,59,45,61,5,0,5,46,12,52,
            19,20,13,4,10,11,26,27,21,2,
            22,23,24,25,1,3,28,0,6,7,
            8,9,51,5,22,23,24,25,3,19,
            20,13,10,11,26,27,21,4,2,1,
            0,60,12,52,0,6,7,8,2,22,
            23,24,25,1,3,19,20,13,4,10,
            11,26,27,21,0,7,9,18,8,17,
            16,15,6,14,52,67,19,20,13,10,
            11,53,54,48,49,55,56,57,58,62,
            63,64,65,66,68,69,60,70,71,72,
            73,74,75,76,77,78,79,4,2,12,
            45,41,5,0,51,5,0,5,41,21,
            22,23,24,25,1,3,2,19,20,13,
            4,10,11,26,27,0,14,29,6,30,
            42,15,31,16,32,33,17,7,34,35,
            9,43,18,44,36,37,8,38,39,40,
            1,3,5,46,47,0,1,3,5,45,
            46,0,13,4,10,11,53,54,48,49,
            55,56,57,58,62,63,64,65,66,68,
            69,59,70,71,72,73,74,75,76,77,
            78,79,51,41,61,28,60,45,46,5,
            0,14,6,15,16,17,7,9,18,8,
            1,4,28,2,5,45,41,61,12,59,
            0,4,2,12,41,5,14,29,6,30,
            42,15,31,16,32,33,17,7,34,35,
            9,43,18,44,36,37,8,38,39,40,
            50,3,1,0,37,29,34,32,33,31,
            30,35,36,38,39,40,59,61,18,15,
            9,14,17,16,6,7,8,45,1,5,
            41,2,12,4,0,21,22,23,24,25,
            2,19,20,13,4,10,11,26,27,3,
            1,42,43,44,37,29,34,32,33,31,
            30,35,36,38,39,40,18,15,9,14,
            17,16,6,7,8,0,60,0,61,5,
            4,1,2,59,0,14,29,6,30,42,
            15,31,16,32,33,17,7,34,35,9,
            43,18,44,36,37,8,38,39,40,1,
            3,50,4,0,21,22,23,24,25,1,
            3,2,19,20,13,4,10,11,26,27,
            47,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            73,8,67,15,8,15,15,15,15,15,
            15,15,15,15,8,62,8,8,8,8,
            8,8,8,8,8,8,8,15,62,62,
            9,9,39,63,37,37,58,1,15,15,
            15,15,15,15,15,15,15,15,15,15,
            15,15,15,15,63,15,15,15,15,15,
            15,15,15,15,15,15,15,15,37,37,
            37,23,15,71,21,57,19,19,48,49,
            49,11,11,49,11,49,44,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,85,59,85,
            14,23,77,22,37,69,36,8,85,8,
            85,85,8,15,14,85,77,77,23,22,
            42,37,30,2,8,84,85,79,85,79,
            11,85,25,17,85,77,42,15,15,23,
            22,29,19,19,71,84,37,79,55,66,
            87,79,55,25,8,8,11,55,13,8,
            11,15,27,14,42,23,23,37,69,36,
            31,55,51,55,55,15,11,25,15,23,
            11,15,25,83,67,15,8,51,71,55,
            23,55,37,37,51,15,33,8
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            4,77,76,75,74,73,72,0,69,0,
            27,0,68,8,4,0,89,0,25,0,
            8,4,24,0,51,0,91,0,20,8,
            44,43,37,35,0,8,20,0,8,84,
            0,21,0,63,64,65,66,52,28,0,
            8,37,35,0,26,0,20,8,44,43,
            0,32,8,41,0,8,61,0,8,23,
            49,0,8,41,83,0,58,0,56,8,
            32,0,86,23,8,0,8,32,48,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,69,10,
            11,1,8,44,55,60,63,72,6,7,
            68,81,82,83,84,12,13,3,47,52,
            56,61,62,66,67,74,75,78,79,80,
            90,54,70,73,42,91,93,16,17,30,
            89,4,14,15,18,19,20,21,29,31,
            92,22,23,24,25,26,5,27,28,32,
            33,34,35,36,37,38,39,40,41,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,0,0,101,105,106,107,0,108,109,
            110,111,112,113,114,115,116,117,118,97,
            129,0,122,96,149,98,121,128,0,0,
            0,140,0,145,147,0,148,0,0,0,
            100,158,159,160,0,120,137,139,146,155,
            0,131,136,0,0,138,150,153,154,157,
            99,103,132,133,134,135,144,161,102,104,
            119,123,124,125,126,127,130,142,0,0,
            143,152,95,0,141,151,156,162,163,0,
            164,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            164,80,33,39,87,107,113,138,12,19,
            49,67,119,124,26,45,97,160,179,183,
            147,1,1,30,54,77,187,6,101,154,
            129,154,93,57,57,57
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            17,17,4,4,17,17,17,144,17,24,
            4,24,17,17,24,4,95,24,24,4,
            151,4,4,24,4,24,24,9,104,157,
            132,172,95,64,59,72
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            4,65,25,25,65,63,63,98,53,45,
            25,40,63,63,45,25,48,5,4,4,
            18,91,90,43,25,37,2,68,48,6,
            99,4,48,40,38,40
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            46,46,51,51,46,46,46,86,46,41,
            51,41,46,46,41,51,61,41,41,51,
            59,51,51,41,51,41,41,60,1,41,
            92,41,61,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            34,19,23,23,19,19,19,-1,89,27,
            23,11,19,19,27,23,5,34,34,34,
            64,1,3,27,23,11,34,90,5,37,
            -1,34,5,11,11,11
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            139,12,0,96,0,181,101,0,31,136,
            0,144,163,101,28,0,98,0,150,101,
            2,136,0,97,0,150,101,2,0,153,
            2,0,112,9,175,101,12,0,112,175,
            101,9,12,0,112,9,12,0,112,175,
            101,12,0,112,12,0,130,0,2,0,
            151,97,0,2,97,0,150,101,2,130,
            0,2,0,150,97,0,140,2,0,144,
            173,101,28,120,42,0,144,173,101,28,
            42,0,125,0,99,0,178,101,125,0,
            101,125,0,141,99,0,148,101,28,120,
            44,0,148,101,28,120,43,0,148,101,
            28,44,0,148,101,28,43,0,187,85,
            0,77,2,100,97,99,0,187,113,134,
            2,89,0,53,0,0,134,69,110,0,
            29,117,0,155,2,0,97,106,0,155,
            2,21,0,144,163,101,28,113,155,2,
            0,97,3,0,104,0,98,0,177,2,
            97,0,134,12,97,0,134,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            526,0,481,0,1573,1635,1543,1539,1537,0,
            1377,1234,1344,1167,452,1073,1040,0,827,1159,
            309,0,1322,1183,1089,499,452,1073,1040,1588,
            1365,1361,0,1622,1275,1041,1215,1066,1507,1049,
            1134,395,1151,1282,1253,1226,1353,1191,1336,1325,
            1314,1294,1493,1486,1453,839,364,1433,1426,1305,
            1168,882,387,1001,982,963,944,925,905,859,
            549,1020,529,501,819,799,779,759,739,719,
            699,679,659,639,619,309,594,457,574,412,
            432,341,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,176,134,101,164,21,27,26,11,10,
            4,13,20,19,97,2,102,100,104,103,
            106,105,108,107,110,109,98,45,2,2,
            67,52,2,12,155,134,125,101,11,10,
            54,53,4,58,57,56,55,48,49,13,
            63,62,65,64,69,68,66,79,78,77,
            75,76,74,73,72,71,70,60,155,155,
            177,134,113,101,12,2,137,136,165,166,
            167,44,43,168,42,169,170,1,3,100,
            100,103,103,103,103,102,102,105,104,104,
            107,106,134,109,108,113,113,28,142,4,
            9,112,101,4,153,101,2,120,28,120,
            28,28,120,59,101,4,101,101,112,175,
            151,150,116,101,152,101,28,101,28,101,
            101,28,163,101,28,101,151,175,9,112,
            4,2,128,130,101,45,150,101,148,125,
            149,101,148,173,120,174,101,144,45,181,
            52,12,182,101,151,112,112,140,101,2,
            142,148,101,148,144,60,45,173,60,139,
            52,12,163,101,178,59,140,2,101,144,
            139,144,150,179,45,59,142,45
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "expression_parser_start",
            "]",
            ")",
            "}",
            ";",
            "expression",
            "postfix_expression",
            "member_name",
            "type_name",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "identifier_or_typedefname",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "typedef_name_in_declspec",
            "initializer",
            "declarator",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 47,
           SCOPE_UBOUND      = 35,
           SCOPE_SIZE        = 36,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 208,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2018,
           MAX_LA            = 2,
           NUM_RULES         = 308,
           NUM_NONTERMINALS  = 115,
           NUM_SYMBOLS       = 208,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1517,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1697,
           ERROR_ACTION      = 1710;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
