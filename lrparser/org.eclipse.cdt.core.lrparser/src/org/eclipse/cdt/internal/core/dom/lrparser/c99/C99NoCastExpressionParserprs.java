/*******************************************************************************
* Copyright (c) 2006, 2009 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99NoCastExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, C99NoCastExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,4,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,4,1,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,5,9,8,
            3,2,2,2,3,2,4,2,2,2,
            2,2,1,1,1,1,2,1,2,2,
            2,1,2,2,1,2,2,1,2,2,
            1,2,2,1,3,1,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,6,8,
            0,0,1,1,3,3,3,0,1,0,
            1,2,4,2,1,1,1,3,1,1,
            2,3,7,8,0,1,0,1,3,1,
            3,1,1,1,1,1,1,3,1,1,
            1,1,1,3,1,2,2,1,5,3,
            1,3,5,1,3,1,3,2,4,3,
            5,4,6,6,3,5,1,3,4,5,
            6,0,1,2,1,3,1,1,3,2,
            1,1,1,1,2,1,2,3,1,1,
            1,3,1,2,2,2,3,4,5,1,
            1,7,3,0,0,1,1,3,3,4,
            1,1,2,3,2,3,2,1,0,1,
            2,1,1,1,1,1,2,1,3,6,
            4,2,4,1,1,-32,0,0,0,0,
            0,0,0,0,0,0,-2,0,0,0,
            0,0,0,0,0,0,0,0,-4,-156,
            -115,0,-15,0,0,0,0,-70,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -167,0,-33,0,-104,0,0,0,0,-78,
            0,0,-116,0,-16,0,-17,0,0,0,
            0,0,0,0,-138,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-174,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-178,0,-128,-76,0,0,-48,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-34,0,0,0,-18,0,-42,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-6,0,0,0,0,0,0,0,0,
            -189,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-3,0,0,0,0,0,0,0,0,
            0,0,-19,0,0,0,0,0,0,0,
            0,0,0,0,-117,0,0,-118,0,-119,
            0,0,0,-43,0,0,0,0,0,0,
            0,0,0,0,0,-108,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-5,0,0,0,
            0,0,0,0,-127,0,0,0,0,0,
            0,0,0,0,0,-79,0,0,0,0,
            0,0,0,0,0,-131,0,-158,0,-55,
            0,0,0,0,0,0,0,0,0,0,
            -122,0,0,0,0,0,0,0,0,0,
            -20,0,-21,0,0,0,0,-27,0,0,
            0,0,0,0,0,0,0,0,-22,0,
            0,0,0,0,0,0,0,0,0,0,
            -23,0,-188,0,-24,0,0,0,0,-72,
            0,-12,0,0,0,0,0,0,0,0,
            0,0,0,0,-56,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-57,0,0,0,0,
            0,0,0,0,0,0,-25,0,0,0,
            0,0,0,0,0,0,-58,0,0,0,
            0,0,0,0,0,0,0,-26,0,0,
            0,0,0,0,0,0,0,-59,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-60,0,
            0,0,0,0,0,0,0,0,0,-84,
            0,0,0,0,0,0,0,0,0,-61,
            0,0,0,0,0,0,0,0,0,0,
            -87,0,0,0,0,0,0,0,0,0,
            -62,0,0,0,0,0,0,0,0,0,
            0,-88,0,0,0,0,0,0,0,0,
            0,-63,0,0,0,0,0,0,0,0,
            0,0,-89,0,0,0,0,0,0,0,
            0,0,-64,0,0,0,0,0,0,0,
            0,0,0,-90,0,0,0,0,0,0,
            0,0,0,-65,0,0,0,0,0,0,
            0,0,0,0,-91,0,0,0,0,0,
            0,0,0,0,-66,0,0,0,0,0,
            0,0,0,0,0,-92,0,0,0,0,
            0,0,0,0,0,-120,0,0,0,0,
            0,0,0,0,0,0,-93,0,0,0,
            0,0,0,0,0,0,-141,0,0,0,
            0,0,0,0,0,0,0,-94,0,0,
            0,0,0,0,0,0,0,-142,0,0,
            0,0,0,0,0,0,0,0,-95,0,
            0,0,0,0,0,0,0,0,-177,0,
            0,0,0,0,0,0,0,0,0,-134,
            0,0,0,0,0,0,0,0,-186,0,
            0,0,0,0,0,0,0,0,0,-96,
            0,0,0,0,0,0,0,0,-13,0,
            0,0,0,0,0,0,-7,0,0,0,
            0,0,0,0,-192,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-198,0,0,0,0,0,
            0,0,0,0,0,-135,0,0,0,0,
            0,0,0,0,-155,-170,0,-176,0,0,
            -97,0,-8,0,0,0,0,0,0,0,
            -206,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -54,0,0,0,0,0,0,0,0,0,
            0,-130,0,0,0,0,0,0,-98,-180,
            -191,0,0,0,0,-73,-99,0,-37,0,
            0,0,0,0,0,0,0,0,-100,-145,
            0,0,-110,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-200,-193,-124,0,
            -187,0,0,0,0,0,-101,0,-102,0,
            -146,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-35,0,-105,0,0,0,
            0,0,0,0,0,0,0,0,0,-184,
            -107,-83,0,-29,0,0,-51,0,0,0,
            0,0,0,0,0,0,0,-121,0,0,
            0,0,0,0,0,-69,0,0,0,0,
            0,0,0,-52,0,0,0,0,0,0,
            0,0,0,0,-164,0,0,0,-137,-154,
            0,-30,0,-123,0,0,0,-183,0,0,
            -67,0,0,0,0,-132,0,-136,0,-81,
            0,0,0,-140,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-38,0,0,0,
            0,0,0,0,0,0,-49,0,0,0,
            0,0,0,0,0,0,0,0,0,-50,
            0,0,0,0,0,0,0,0,0,0,
            -205,0,0,0,-153,0,-157,-85,0,0,
            -151,0,-171,-172,-175,0,-199,0,0,-44,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-9,
            0,0,0,0,0,0,0,-166,0,-45,
            0,0,0,0,0,0,0,0,0,0,
            -46,0,0,0,0,0,0,0,0,0,
            -47,0,0,0,0,0,0,0,0,0,
            -71,0,0,-74,-86,-109,0,-112,-139,-165,
            -204,0,-111,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-207,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -147,0,0,0,0,-144,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-173,0,0,
            -10,0,0,0,0,0,0,0,-11,0,
            0,0,0,0,0,0,-31,-39,0,0,
            0,0,0,0,0,0,-113,0,-40,0,
            0,0,0,0,0,0,0,0,-68,-126,
            -143,-162,0,-41,0,0,0,0,0,0,
            0,0,0,0,-14,-129,-159,0,0,0,
            0,-28,-36,0,0,0,0,-179,0,-160,
            -148,-190,0,0,0,-185,0,0,0,0,
            0,0,0,0,0,-196,0,-75,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -77,0,0,0,-197,-80,0,0,0,0,
            0,-106,-169,0,0,0,0,0,0,-82,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-125,0,0,-152,-181,0,0,0,
            0,-182,0,0,0,0,0,0,-133,0,
            0,-168,0,0,0,-203,-1,-114,-163,0,
            0,0,0,0,-53,0,0,0,0,0,
            0,-150,-149,0,-202,0,0,0,-103,0,
            0,0,0,0,0,0,0,0,0,-201,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -161,-194,-195,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            87,11,102,24,24,23,23,39,39,69,
            69,1,1,2,2,2,2,3,3,3,
            4,5,5,5,5,5,5,5,5,59,
            59,70,6,6,6,6,6,6,6,6,
            6,6,6,7,8,8,8,8,9,9,
            9,10,10,10,12,12,12,12,12,13,
            13,13,14,14,15,15,16,16,17,17,
            18,18,19,19,20,20,20,20,20,20,
            20,20,20,20,20,20,103,45,40,88,
            88,72,72,47,104,104,104,104,104,104,
            104,105,105,105,106,106,111,111,112,112,
            107,107,108,108,108,114,114,109,109,109,
            109,110,110,110,110,110,113,113,25,25,
            25,25,25,28,28,28,78,78,73,73,
            73,73,74,74,74,75,75,75,76,76,
            76,77,77,77,115,115,116,116,117,29,
            31,31,31,31,31,53,54,54,54,54,
            54,54,54,54,54,54,54,54,63,60,
            60,89,90,65,65,61,61,61,66,79,
            79,80,80,67,67,67,49,91,91,81,
            82,82,82,62,62,92,83,83,84,84,
            68,68,21,22,22,22,30,48,48,32,
            32,32,32,35,35,37,33,33,34,38,
            38,118,118,36,119,119,93,93,26,26,
            26,26,26,26,26,26,26,85,50,50,
            50,50,27,56,56,55,55,55,57,57,
            51,51,94,94,71,71,58,58,58,41,
            41,41,42,43,43,43,44,44,44,44,
            64,64,46,46,52,96,95,95,95,95,
            86,97,98,98,99,99,100,100,120,120,
            121,121,122,122,122,122,124,124,123,123,
            123,125,126,126,87,87,1,780,17,21,
            18,343,738,44,387,385,523,293,467,633,
            631,661,649,717,665,74,91,134,212,431,
            236,108,990,687,136,133,135,159,275,20,
            17,21,18,343,738,44,387,385,523,1153,
            467,633,631,661,649,717,665,74,1426,138,
            165,519,238,71,31,31,142,145,148,151,
            199,445,1268,71,186,246,1228,69,339,1424,
            1578,1591,1596,1610,1212,424,20,17,21,18,
            343,738,44,387,385,523,340,467,633,631,
            661,649,717,665,74,280,335,20,17,21,
            18,343,738,44,387,385,523,340,467,633,
            631,661,649,717,665,74,280,1355,442,292,
            194,281,583,25,210,104,383,1197,482,20,
            17,21,18,343,43,44,387,385,523,286,
            467,969,281,71,31,254,212,6,1197,482,
            20,17,21,18,343,43,44,387,385,843,
            288,287,482,20,17,21,18,343,43,40,
            1075,453,20,17,21,18,343,738,44,387,
            385,523,289,467,633,631,661,649,717,665,
            74,280,482,20,17,21,18,343,738,44,
            387,385,523,10,467,633,631,661,649,717,
            665,74,91,24,341,71,185,281,281,1278,
            71,187,293,1197,482,20,17,21,18,343,
            43,44,387,385,864,290,540,20,17,21,
            18,343,738,44,387,385,523,1633,467,633,
            631,661,649,717,665,74,1530,511,20,17,
            21,18,343,41,339,305,20,17,21,18,
            343,738,44,387,385,523,429,467,633,631,
            661,649,717,665,74,1531,189,178,163,239,
            482,20,17,21,18,343,43,44,387,385,
            523,31,467,633,631,661,1179,134,212,253,
            212,327,395,14,136,133,135,159,482,20,
            17,21,18,343,738,44,387,385,523,516,
            467,633,631,661,649,717,665,74,92,138,
            165,156,535,124,1130,243,142,145,148,151,
            295,445,482,20,17,21,18,343,34,1424,
            1578,1591,1596,1610,1212,482,20,17,21,18,
            343,738,44,387,385,523,274,467,633,631,
            661,649,717,665,74,85,482,20,17,21,
            18,343,738,44,387,385,523,172,467,633,
            631,661,649,717,665,74,84,482,20,17,
            21,18,343,738,44,387,385,523,530,467,
            633,631,661,649,717,665,74,83,482,20,
            17,21,18,343,738,44,387,385,523,282,
            467,633,631,661,649,717,665,74,82,482,
            20,17,21,18,343,738,44,387,385,523,
            569,467,633,631,661,649,717,665,74,81,
            482,20,17,21,18,343,738,44,387,385,
            523,151,467,633,631,661,649,717,665,74,
            80,482,20,17,21,18,343,738,44,387,
            385,523,194,467,633,631,661,649,717,665,
            74,79,482,20,17,21,18,343,738,44,
            387,385,523,30,467,633,631,661,649,717,
            665,74,78,482,20,17,21,18,343,738,
            44,387,385,523,441,467,633,631,661,649,
            717,665,74,77,482,20,17,21,18,343,
            738,44,387,385,523,470,467,633,631,661,
            649,717,665,74,76,482,20,17,21,18,
            343,738,44,387,385,523,500,467,633,631,
            661,649,717,665,74,75,482,20,17,21,
            18,343,738,44,387,385,523,313,467,633,
            631,661,649,717,665,74,73,482,20,17,
            21,18,343,738,44,387,385,523,343,467,
            633,631,661,649,717,665,74,1547,482,20,
            17,21,18,343,738,44,387,385,523,44,
            467,633,631,661,649,717,665,74,1560,482,
            20,17,21,18,343,43,44,387,385,523,
            119,467,633,631,661,649,717,665,93,482,
            20,17,21,18,343,43,44,387,385,523,
            110,467,633,631,661,649,717,665,93,482,
            20,17,21,18,343,33,1562,482,20,17,
            21,18,343,43,39,482,20,17,21,18,
            343,43,44,387,385,523,211,467,633,631,
            661,649,717,665,93,482,20,17,21,18,
            343,43,44,387,385,523,31,467,633,631,
            661,649,717,665,93,657,683,1636,71,295,
            1351,157,1656,482,20,17,21,18,343,43,
            38,482,20,17,21,18,343,43,44,387,
            385,523,201,467,633,631,661,649,717,665,
            93,482,20,17,21,18,343,43,44,387,
            385,523,611,467,633,631,661,649,1177,344,
            436,71,297,1561,1488,1566,50,619,202,482,
            20,17,21,18,343,43,44,801,273,562,
            699,254,212,163,217,1181,220,1461,222,223,
            228,1532,275,266,1136,670,271,557,465,97,
            262,71,1353,276,253,212,273,487,1690,520,
            263,656,217,1181,220,1461,222,223,228,254,
            212,266,1136,670,271,352,1284,641,1711,217,
            1181,220,1461,222,223,228,512,227,1428,444,
            683,549,189,178,292,1711,260,482,20,17,
            21,18,343,43,44,387,385,523,490,467,
            633,631,1129,134,212,89,97,1529,585,209,
            137,133,135,159,482,20,17,21,18,343,
            43,44,387,385,523,705,467,633,1137,31,
            501,1353,292,1211,640,139,165,283,259,1675,
            1260,292,143,146,149,152,626,445,662,1690,
            458,273,1264,1348,377,19,1602,218,1181,220,
            1461,222,223,228,1679,608,268,1136,670,271,
            217,1181,220,1461,222,223,228,482,20,17,
            21,18,343,43,44,822,1357,482,20,17,
            21,18,343,43,44,387,385,523,208,1010,
            482,20,17,21,18,343,43,44,387,385,
            523,259,1081,1076,1354,31,540,394,292,197,
            199,684,1690,582,688,661,1603,623,1558,1595,
            482,20,17,21,18,343,43,44,387,385,
            885,23,538,217,1181,220,1461,222,223,228,
            482,20,17,21,18,343,43,37,490,1357,
            482,20,17,21,18,343,43,44,387,385,
            906,482,20,17,21,18,343,43,44,387,
            927,482,20,17,21,18,343,43,44,387,
            948,253,198,199,232,153,153,179,292,97,
            31,241,1517,365,20,17,21,18,343,43,
            36,1642,1756,1756,276,134,212,273,595,22,
            240,272,141,133,135,159,1347,245,1756,1756,
            1756,570,266,1136,670,271,365,20,17,21,
            18,343,43,36,1756,1264,1756,140,165,1428,
            218,1181,220,1461,222,223,228,226,490,1756,
            246,482,20,17,21,18,343,43,36,482,
            20,17,21,18,343,43,35,116,482,20,
            17,21,18,343,43,47,1756,413,1236,482,
            20,17,21,18,343,43,46,663,606,374,
            153,153,413,273,482,20,17,21,18,343,
            43,45,1122,606,1211,31,292,153,266,1136,
            670,271,31,31,242,241,316,1122,163,1211,
            153,97,153,316,512,265,490,1602,258,278,
            196,243,1546,1756,1276,28,490,196,610,253,
            212,1197,1255,258,244,87,294,1546,1211,1276,
            1262,631,87,87,1507,494,652,1262,1425,134,
            212,1507,711,501,1353,203,144,133,135,159,
            673,1255,134,212,1168,180,1214,134,212,147,
            133,135,159,1271,150,133,135,159,273,1264,
            1756,134,212,163,1756,1756,48,545,153,133,
            135,159,142,268,1136,670,271,606,606,614,
            1756,1756,95,606,253,212,153,395,403,403,
            606,196,1122,606,193,31,1756,196,512,1649,
            1637,208,292,645,1122,490,512,196,1756,634,
            296,277,230,1756,606,371,1210,1354,258,444,
            97,371,1712,1756,1276,279,1756,87,1122,1756,
            258,371,314,191,1672,87,1276,1756,1756,191,
            1149,292,292,342,204,1388,1652,1211,937,192,
            1756,1576,1652,1756,259,28,1756,1756,1756,1756,
            1713,1197,1756,1756,224,229,233,1756,1756,1756,
            1448,1756,1756,1756,327,1756,0,20,178,0,
            1,1981,0,1,1992,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,0,
            10,11,12,0,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,0,
            0,31,32,33,34,35,36,37,38,39,
            40,41,42,0,44,45,46,0,1,0,
            3,2,5,6,7,8,47,48,9,12,
            55,56,57,58,17,18,19,20,0,22,
            0,1,4,3,61,62,47,48,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,0,1,0,3,51,5,
            6,7,8,0,61,62,12,0,1,0,
            3,17,18,19,20,0,22,2,0,4,
            13,53,54,0,9,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,0,1,0,3,51,5,6,7,8,
            0,0,0,12,4,0,0,5,17,18,
            19,20,0,22,55,56,57,58,6,7,
            8,0,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,0,1,
            0,3,51,0,6,7,8,4,0,1,
            12,3,50,53,54,17,18,19,20,0,
            22,55,56,57,58,6,7,8,63,31,
            32,33,34,35,36,37,38,39,40,41,
            42,0,44,45,46,0,65,6,7,8,
            0,1,0,12,9,0,53,54,17,18,
            19,20,0,22,2,10,11,5,0,1,
            2,9,31,32,33,34,35,36,37,38,
            39,40,41,42,0,1,2,3,4,5,
            0,1,30,3,10,11,12,52,14,15,
            16,0,0,13,0,21,5,23,24,25,
            26,27,28,9,0,1,2,3,4,5,
            68,69,0,0,10,11,12,59,14,15,
            16,30,10,11,50,21,0,23,24,25,
            26,27,28,0,0,1,2,3,4,5,
            14,0,0,0,10,11,5,13,14,15,
            16,0,10,11,50,21,5,23,24,25,
            26,27,28,0,0,1,2,3,4,5,
            29,30,80,0,10,11,0,43,14,15,
            16,30,6,7,8,21,13,23,24,25,
            26,27,28,0,0,1,2,3,4,6,
            7,8,0,0,10,11,63,5,14,15,
            16,0,0,0,50,21,4,23,24,25,
            26,27,28,0,1,2,3,4,0,1,
            0,3,30,10,11,0,13,14,15,16,
            0,6,7,8,21,51,23,24,25,26,
            27,28,0,1,2,3,4,0,1,29,
            3,49,10,11,0,13,14,15,16,0,
            6,7,8,21,0,23,24,25,26,27,
            28,0,1,2,3,4,0,47,48,0,
            0,10,11,0,5,14,15,16,5,0,
            0,1,21,3,23,24,25,26,27,28,
            0,1,2,3,4,0,47,48,0,0,
            10,11,29,5,14,15,16,0,1,0,
            3,21,43,23,24,25,26,27,28,0,
            1,2,3,4,0,1,47,48,0,10,
            11,65,4,14,15,16,0,1,2,66,
            21,0,23,24,25,26,27,28,0,0,
            2,2,4,5,6,7,8,9,9,64,
            12,0,0,64,66,17,18,19,20,60,
            22,9,0,49,0,1,2,5,30,70,
            71,72,73,74,75,76,77,78,79,0,
            0,1,2,0,4,6,7,8,0,9,
            59,12,0,0,0,0,17,18,19,20,
            0,22,14,0,52,43,6,7,8,0,
            0,60,12,4,0,0,13,17,18,19,
            20,0,22,13,29,0,0,6,7,8,
            0,0,49,12,9,0,0,0,17,18,
            19,20,0,22,13,0,0,0,6,7,
            8,59,0,0,12,29,0,0,2,17,
            18,19,20,49,22,9,13,0,0,1,
            2,15,16,5,0,1,2,9,4,0,
            0,29,2,9,4,0,29,0,0,9,
            60,0,13,0,0,0,0,0,30,0,
            13,13,0,0,0,0,0,0,52,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,67,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1756,1767,1545,1768,1491,59,1969,1970,1971,54,
            1380,1083,1918,62,1499,1019,672,1919,1917,1972,
            1920,577,1916,1769,1770,1771,1772,1027,482,58,
            1,1923,1928,1927,1925,1926,1924,1929,1930,1922,
            1931,1932,1933,63,1280,596,380,1756,1,269,
            1,1658,190,1,1,1,1401,1411,348,1,
            1390,1360,544,469,1,1,1,1,48,1,
            1756,1767,1534,1768,1330,1317,1401,1411,1,1,
            1,1,1,1,1,1,1,1,1,1,
            190,1,1,1,1756,1,252,1,1951,189,
            1,1,1,181,1330,1317,1,1756,1767,61,
            1768,1,1,1,1,264,1,1421,182,1,
            1066,1519,1508,285,348,1,1,1,1,1,
            1,1,1,1,1,1,1,189,1,1,
            1,1756,1,1756,1,1951,190,1,1,1,
            50,1756,1756,1,1534,66,60,1760,1,1,
            1,1,1756,1,1390,1360,544,469,1969,1970,
            1971,70,1,1,1,1,1,1,1,1,
            1,1,1,1,190,1,1,1,1756,1767,
            1756,1768,1951,49,1969,1970,1971,1534,184,2781,
            1918,2781,1759,1519,1508,1919,1917,1972,1920,247,
            1916,1390,1360,544,469,1969,1970,1971,1244,1923,
            1928,1927,1925,1926,1924,1929,1930,1922,1931,1932,
            1933,128,1280,596,380,1756,610,1969,1970,1971,
            1756,1993,72,1918,979,51,1519,1508,1919,1917,
            1972,1920,1,1916,1421,1307,1139,1762,1,1981,
            1167,348,1923,1928,1927,1925,1926,1924,1929,1930,
            1922,1931,1932,1933,1,1767,1545,1768,1433,1760,
            1756,1767,1761,1768,1380,1083,556,1078,1499,1019,
            672,1756,1756,1259,270,577,1762,1769,1770,1771,
            1772,1027,482,348,1756,1767,1545,1768,1466,1760,
            1111,1665,53,1756,1380,1083,958,1055,1499,1019,
            672,1761,1307,1139,1759,577,64,1769,1770,1771,
            1772,1027,482,1756,1,1767,1545,1768,1491,29,
            448,1756,52,67,1380,1083,1762,2664,1499,1019,
            672,1,1307,1139,1759,577,90,1769,1770,1771,
            1772,1027,482,1756,1756,1767,1545,1768,1491,1760,
            1431,1761,1746,1756,1380,1083,248,29,1499,1019,
            672,90,1,1,1,577,2664,1769,1770,1771,
            1772,1027,482,249,1756,1,1,1,1,1,
            1,1,1,1756,1,1,1244,1762,1,1,
            1,1756,1,1756,1759,1,252,1,1,1,
            1,1,1,1,1767,1545,1768,1491,183,2789,
            88,2789,1761,1380,1083,250,2664,1499,1019,672,
            57,1969,1970,1971,577,2071,1769,1770,1771,1772,
            1027,482,1756,1767,1545,1768,1491,205,2790,638,
            2790,2013,1380,1083,251,2664,1499,1019,672,56,
            1969,1970,1971,577,1756,1769,1770,1771,1772,1027,
            482,1756,1767,1545,1768,1491,71,1401,1411,1756,
            1756,1380,1083,1756,1764,1499,1019,672,1766,55,
            207,1767,577,1768,1769,1770,1771,1772,1027,482,
            1756,1767,1552,1768,1491,68,1401,1411,1,69,
            1380,1083,1341,1766,1499,1019,672,206,1171,43,
            1171,577,1763,1769,1770,1771,1772,1027,482,1,
            1767,1545,1768,1491,1,1753,1401,1411,1756,1380,
            1083,610,1169,1499,1019,672,1,1981,1167,1765,
            577,1756,1769,1770,1771,1772,1027,482,20,221,
            1747,1659,1747,1747,178,178,178,1747,348,1217,
            178,210,291,1217,1765,178,178,178,178,895,
            178,1035,284,2013,252,1981,1167,375,1747,874,
            853,832,811,790,748,769,727,706,685,129,
            261,1981,1150,1,1,1969,1970,1971,65,348,
            916,1918,200,1756,1756,255,1919,1917,1972,1920,
            130,1916,448,42,1131,375,1969,1970,1971,1756,
            1756,999,1918,1429,1,1756,2664,1919,1917,1972,
            1920,131,1916,621,1673,219,30,1969,1970,1971,
            1756,1756,2013,1918,348,1756,1756,1756,1919,1917,
            1972,1920,132,1916,1345,1756,1756,1756,1969,1970,
            1971,1091,30,1756,1918,416,32,206,1195,1919,
            1917,1972,1920,2012,1916,1553,1430,1756,1,1750,
            1150,1782,1783,1762,267,1981,1150,348,252,188,
            267,1785,1421,348,252,1756,2599,188,188,348,
            491,1756,184,1756,1756,1756,1756,1756,1761,1756,
            183,205,1756,1756,1756,1756,1756,1756,463,1756,
            1756,1756,1756,1756,1756,1756,1756,1756,1756,1756,
            1756,1756,1756,373
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            375,1,54,41,54,54,54,54,54,54,
            54,54,54,334,3,23,20,27,25,33,
            31,35,34,37,36,9,54,334,170,170,
            291,334,263,263,203,54,54,54,54,54,
            54,54,54,54,54,54,54,54,54,54,
            54,54,54,54,54,54,54,54,54,54,
            54,54,54,54,54,54,170,98,295,48,
            233,168,167,266,278,96,278,96,96,278,
            96,278,348,124,170,45,20,20,25,25,
            25,25,23,23,31,27,27,34,33,303,
            36,35,393,200,98,291,295,104,45,371,
            52,170,305,236,96,263,263,96,263,54,
            200,80,295,286,371,45,51,48,170,289,
            348,169,238,98,173,98,222,80,286,286,
            54,54,45,52,233,298,297,295,238,170,
            98,173,222,222,224,101,286,371,45,45,
            170,305,236,289,173,200,71,173,222,224,
            228,224,200,78,231,263,54,100,371,286,
            238,173,73,224,200,54,263,3,82,45,
            263,54,286,170,169,200,429,54,428,67,
            295,200,45,264,73,54,67
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,9,2,52,67,15,16,60,70,
            71,72,73,74,76,75,77,78,79,4,
            53,54,10,11,48,47,55,56,57,58,
            61,62,14,63,64,65,43,66,68,69,
            59,30,80,29,50,5,0,6,7,8,
            12,50,5,23,24,25,26,3,15,16,
            14,10,11,27,28,21,4,2,1,0,
            66,5,4,1,2,59,0,5,43,9,
            52,15,16,14,4,10,11,27,28,21,
            2,23,24,25,26,1,3,13,0,60,
            9,52,0,6,7,8,2,23,24,25,
            26,1,3,15,16,14,4,10,11,27,
            28,21,0,7,12,22,8,20,19,18,
            6,17,52,67,15,16,14,10,11,53,
            54,47,48,55,56,57,58,61,62,63,
            64,65,68,69,60,70,71,72,73,74,
            75,76,77,78,79,4,2,9,29,30,
            5,0,17,31,6,32,44,18,33,19,
            34,35,20,7,36,37,12,45,22,46,
            38,39,8,40,41,42,1,3,51,5,
            43,0,5,30,21,23,24,25,26,1,
            3,2,15,16,14,4,10,11,27,28,
            0,1,3,5,43,29,0,5,29,43,
            60,0,4,2,9,30,5,17,31,6,
            32,44,18,33,19,34,35,20,7,36,
            37,12,45,22,46,38,39,8,40,41,
            42,49,3,1,0,39,31,36,34,35,
            33,32,37,38,40,41,42,59,66,22,
            18,12,17,20,19,6,7,8,29,1,
            5,30,2,9,4,0,2,5,29,30,
            66,9,59,0,4,17,31,6,32,44,
            18,33,19,34,35,20,7,36,37,12,
            45,22,46,38,39,8,40,41,42,1,
            3,49,0,21,23,24,25,26,2,15,
            16,14,4,10,11,27,28,1,3,44,
            45,46,39,31,36,34,35,33,32,37,
            38,40,41,42,22,18,12,17,20,19,
            6,7,8,0,21,23,24,25,26,1,
            3,2,15,16,14,4,10,11,27,28,
            51,0,14,4,10,11,53,54,47,48,
            55,56,57,58,61,62,63,64,65,68,
            69,60,70,71,72,73,74,75,76,77,
            78,79,50,30,43,80,13,59,66,5,
            29,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            117,41,23,41,23,23,23,23,23,23,
            23,23,23,97,41,41,41,41,41,41,
            41,41,41,41,41,41,23,97,121,121,
            85,1,18,18,59,98,23,23,23,23,
            23,23,23,23,23,23,23,23,23,23,
            23,23,98,23,23,23,23,23,23,23,
            23,23,23,23,23,23,121,94,72,11,
            84,44,44,67,68,29,68,82,82,68,
            81,68,62,41,121,13,41,41,41,41,
            41,41,41,41,41,41,41,41,41,41,
            41,41,94,55,41,101,41,31,13,57,
            12,121,89,120,7,7,7,7,7,23,
            70,55,41,79,57,13,12,27,121,51,
            34,41,91,46,55,41,55,21,79,55,
            23,23,13,12,50,44,44,72,91,121,
            41,105,55,7,48,9,55,57,13,13,
            121,89,120,75,55,70,15,113,7,48,
            41,41,70,20,41,7,23,25,57,27,
            109,105,53,48,70,23,7,42,22,13,
            7,23,27,121,121,70,16,23,41,53,
            72,70,13,41,53,23,77
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            78,76,75,65,74,73,1,0,98,0,
            11,5,24,0,11,69,0,70,0,86,
            11,52,5,0,100,0,21,0,89,0,
            5,11,0,78,77,76,75,65,74,73,
            0,96,0,26,0,90,0,59,0,23,
            43,42,35,33,11,0,56,0,11,88,
            0,65,60,61,62,63,53,28,0,39,
            0,27,50,0,43,42,35,33,27,0,
            92,66,0,23,42,43,11,0,27,50,
            11,25,0,52,46,0,49,11,45,0,
            43,42,27,0,80,11,49,0,93,11,
            25,0,11,49,67,0,11,87,0,11,
            23,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,1,10,
            11,69,3,8,6,7,44,55,60,63,
            68,72,81,82,83,84,12,13,42,90,
            47,52,56,61,62,66,67,74,75,78,
            79,80,91,54,70,73,16,17,30,89,
            93,4,14,15,18,19,20,21,29,31,
            22,23,24,25,26,92,5,27,28,32,
            33,34,35,36,37,38,39,40,41,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            100,0,0,0,102,106,107,108,109,110,
            0,111,112,113,114,115,116,117,0,118,
            128,0,97,96,121,149,0,127,0,0,
            0,145,147,0,148,0,0,0,98,0,
            158,159,160,0,101,105,120,136,140,146,
            155,0,130,0,150,153,154,157,0,131,
            132,133,134,135,137,0,139,144,99,103,
            104,119,122,123,124,125,126,129,0,138,
            142,0,0,143,152,162,95,0,0,0,
            141,0,151,156,161,0,163,164,0,165,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            82,113,92,35,41,121,12,136,21,51,
            69,28,47,103,152,162,166,145,1,1,
            32,56,79,170,6,107,156,127,99,59,
            59,59
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            90,90,90,4,4,90,18,142,26,4,
            26,26,4,101,26,26,4,149,4,4,
            26,4,26,26,9,110,159,130,101,66,
            61,74
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            62,60,62,26,26,60,46,108,44,26,
            38,44,26,67,6,5,5,19,100,99,
            42,26,35,3,86,67,5,109,67,38,
            36,38
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            43,43,43,50,50,43,43,86,30,50,
            30,30,50,66,30,30,50,59,50,50,
            30,50,30,30,60,1,30,92,66,2,
            2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            23,23,23,27,27,23,17,-1,31,27,
            9,31,27,5,38,38,38,67,1,3,
            31,27,9,38,93,5,38,-1,5,9,
            9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            140,9,0,96,0,190,104,0,31,135,
            0,152,188,104,13,145,0,98,0,0,
            148,104,2,135,0,97,0,148,104,2,
            0,151,2,0,113,12,178,104,9,0,
            113,178,104,12,9,0,113,12,9,0,
            113,178,104,9,0,113,9,0,128,0,
            2,0,151,97,0,2,97,0,148,104,
            2,128,0,2,0,150,97,0,141,2,
            0,152,176,104,13,94,185,44,0,98,
            0,152,176,104,13,185,44,0,142,0,
            99,0,184,104,142,0,104,142,0,141,
            99,0,172,104,13,183,94,182,158,0,
            172,104,13,182,158,0,197,85,0,77,
            2,101,97,99,0,197,116,138,2,89,
            0,53,0,0,138,69,111,0,29,118,
            0,164,2,21,0,164,2,0,97,105,
            0,181,2,98,0,138,9,98,0,138,
            2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            442,0,340,0,1642,1652,1636,0,1448,1341,
            1167,1268,1255,1150,1122,0,491,416,395,1679,
            1529,0,606,1212,316,0,1461,1181,1136,670,
            1255,1150,1122,1602,1421,1507,0,1466,1433,610,
            1111,1244,1217,1330,1317,448,1411,1401,1390,1360,
            544,469,1534,1519,1508,1307,1139,1019,672,1499,
            1491,1380,1083,1027,482,577,1091,1055,1035,491,
            999,979,958,937,585,916,556,348,895,874,
            853,832,811,790,769,748,727,706,685,316,
            638,512,416,395,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,180,104,165,21,28,27,11,10,4,
            14,16,15,2,98,102,101,105,103,107,
            106,109,108,111,110,99,29,2,164,138,
            142,104,67,52,2,9,11,10,54,53,
            4,58,57,56,55,47,48,14,62,61,
            64,63,69,68,65,79,78,77,75,76,
            74,73,72,71,70,60,164,116,104,9,
            2,136,135,166,167,158,168,46,45,169,
            44,170,171,94,181,138,101,101,103,103,
            103,103,102,102,106,105,105,108,107,138,
            110,109,116,13,145,143,120,12,113,104,
            4,151,104,2,182,159,159,185,159,59,
            104,13,120,4,104,113,178,149,148,118,
            104,150,104,94,13,94,13,104,4,120,
            178,12,113,4,2,126,128,104,29,148,
            183,104,13,104,188,104,120,104,113,113,
            141,104,2,143,13,172,142,173,104,176,
            94,177,152,29,190,52,9,191,104,149,
            104,104,104,176,152,60,29,132,60,140,
            52,9,149,148,186,172,184,59,141,2,
            104,152,140,29,29,59,143
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_cast_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "initializer_seq",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 51,
           SCOPE_UBOUND      = 31,
           SCOPE_SIZE        = 32,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 207,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2071,
           MAX_LA            = 2,
           NUM_RULES         = 315,
           NUM_NONTERMINALS  = 126,
           NUM_SYMBOLS       = 219,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1657,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1746,
           ERROR_ACTION      = 1756;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
