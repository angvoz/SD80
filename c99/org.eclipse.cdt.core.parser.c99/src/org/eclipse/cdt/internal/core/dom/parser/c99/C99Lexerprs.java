/*******************************************************************************
* Copyright (c) 2006, 2007 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*******************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.c99;

public class C99Lexerprs implements lpg.lpgjavaruntime.ParseTable, C99Lexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2,2,2,1,1,1,1,1,
            1,1,1,2,2,1,1,2,2,2,
            2,1,1,2,2,1,1,1,3,1,
            2,2,2,2,2,3,3,2,2,2,
            1,1,2,2,2,2,2,2,4,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2,2,2,5,1,2,3,2,2,
            0,1,2,2,1,1,3,4,4,1,
            2,1,2,1,2,2,2,1,2,2,
            1,2,1,2,1,1,1,1,2,2,
            1,1,1,2,3,2,2,3,3,4,
            3,4,1,2,2,2,3,3,2,3,
            2,1,1,2,2,3,3,2,3,2,
            1,2,1,1,1,1,3,4,1,2,
            1,1,1,1,1,1,2,2,2,2,
            2,2,2,2,2,2,2,2,3,2,
            3,3,4,1,2,1,1
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,23,23,23,1,1,1,1,1,
            1,1,1,1,1,37,37,37,37,37,
            37,37,37,3,3,3,3,3,3,3,
            3,3,3,3,3,3,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,38,38,38,38,38,38,12,12,12,
            12,12,12,12,12,12,12,13,13,13,
            13,13,13,13,13,13,13,14,14,14,
            14,39,39,39,39,39,39,39,24,24,
            24,24,24,24,24,24,24,31,31,31,
            31,40,40,41,41,42,44,44,43,43,
            43,43,32,32,32,25,25,6,6,19,
            33,33,33,33,45,46,47,47,26,26,
            26,26,26,26,26,15,15,21,21,22,
            22,34,34,48,48,48,48,48,48,49,
            49,49,49,5,5,50,50,50,27,27,
            27,27,16,16,51,51,51,28,28,28,
            28,20,20,11,11,11,11,35,35,29,
            29,17,17,7,7,7,7,8,8,8,
            8,8,8,8,8,8,8,8,9,10,
            36,36,36,36,30,30,18,18,201,578,
            112,1422,365,357,236,1212,365,398,177,178,
            1577,179,583,306,326,303,304,305,99,327,
            199,235,1116,232,222,324,1088,1380,274,350,
            501,2,3,4,5,1433,274,426,340,493,
            220,1222,318,521,519,513,261,262,371,980,
            187,188,266,189,437,306,301,303,304,305,
            1170,486,302,689,177,178,299,179,404,306,
            326,303,304,305,1391,327,1256,133,445,319,
            1240,324,980,187,188,265,189,1276,306,301,
            303,304,305,459,1613,302,495,177,178,299,
            179,1573,306,326,303,304,305,1585,327,1324,
            133,472,292,1601,325,592,187,188,268,189,
            1616,306,301,303,304,305,1197,1617,302,786,
            177,178,300,179,1590,306,326,303,304,305,
            1614,327,883,187,188,270,189,325,306,301,
            303,304,305,1372,464,302,1,208,209,300,
            210,1451,626,301,201,202,626,171,254,1277,
            211,1077,234,112,101,208,209,236,210,1607,
            230,1473,274,1183,133,1580,291,1307,211,1270,
            1400,1574,1409,511,235,1221,233,511,228,1228,
            504,204,224,552,574,252,574,1596,593,1620,
            520,483,520,483,1621,243,1203,241,272,1409,
            624,1226,1150,133,624,292,1256,133,1164,291,
            1256,133,1619,602,456,599,1256,133,1171,602,
            1409,632,1409,634,1105,632,439,634,1572,589,
            537,1296,133,1194,291,237,606,642,609,1256,
            133,642,602,1462,628,249,250,642,628,1462,
            630,612,1256,133,630,616,1462,636,238,1462,
            638,636,1352,133,638,292,1256,133,642,620,
            1256,133,642,239,1484,274,1495,274,1506,274,
            1517,274,1528,274,1539,274,1550,274,1561,274,
            642,642
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,0,99,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,0,99,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,98,97,0,99,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,96,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            96,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,61,62,63,64,65,66,67,68,
            69,70,71,72,73,74,75,76,77,78,
            79,80,81,82,83,84,85,86,87,88,
            89,90,91,92,93,94,95,96,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,78,79,80,81,
            82,83,84,85,86,87,88,89,90,91,
            92,93,94,95,96,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,39,40,41,42,43,44,
            45,46,47,48,49,50,51,52,53,54,
            55,56,57,58,59,60,61,62,63,64,
            65,66,67,68,69,70,71,72,73,74,
            75,76,77,78,79,80,81,82,83,84,
            85,86,87,88,89,90,91,92,93,94,
            95,96,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,0,84,85,86,87,88,89,90,
            91,92,93,94,95,96,0,1,2,3,
            4,5,6,7,8,9,10,0,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,0,0,30,31,32,0,
            34,35,36,37,38,0,29,41,14,15,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,0,
            1,2,3,4,5,6,7,8,9,10,
            84,12,13,0,0,16,17,18,19,0,
            0,22,23,24,25,26,27,28,15,30,
            11,32,0,1,2,3,4,5,6,7,
            8,9,10,0,12,13,0,82,16,17,
            18,19,0,33,22,23,24,25,26,27,
            28,0,1,2,3,4,5,6,7,8,
            0,0,0,12,0,0,30,0,32,18,
            19,20,21,12,13,14,15,16,17,0,
            20,21,31,0,42,34,35,36,37,80,
            11,0,41,28,43,0,1,2,3,4,
            5,6,7,8,9,10,0,12,13,0,
            43,16,17,18,19,0,0,22,23,24,
            25,26,27,14,15,0,11,11,0,20,
            21,98,81,0,83,0,1,2,3,4,
            5,6,7,8,9,10,0,12,13,0,
            83,16,17,18,19,39,0,22,23,24,
            25,26,27,0,1,2,3,4,5,6,
            7,8,9,10,0,12,13,31,0,16,
            17,18,19,0,38,22,23,24,25,26,
            27,0,1,2,3,4,5,6,7,8,
            9,10,0,12,13,0,0,16,17,18,
            19,0,0,22,23,24,25,26,27,0,
            1,2,3,4,5,6,7,8,9,10,
            0,20,21,0,0,16,17,0,0,0,
            0,0,12,13,14,15,0,28,0,1,
            2,3,4,5,6,7,8,9,10,20,
            21,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,0,0,0,39,40,28,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,0,0,0,0,0,0,0,0,
            0,0,0,11,0,14,15,14,15,0,
            11,20,21,20,21,0,12,13,14,15,
            0,12,13,14,15,33,0,12,13,14,
            15,11,0,0,42,0,0,11,0,0,
            0,0,0,11,11,0,11,11,0,29,
            11,11,14,33,0,29,0,0,0,0,
            0,29,0,0,0,0,40,0,76,73,
            74,75,0,0,0,0,77,78,0,0,
            0,0,0,0,0,0,0,0,0,98,
            0,0,0,97,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,79,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            642,757,758,759,760,761,762,763,764,765,
            766,801,707,733,713,739,706,732,702,703,
            722,748,704,705,728,729,730,731,797,802,
            717,725,743,798,715,719,721,723,751,794,
            796,857,790,856,708,709,710,711,712,714,
            716,718,720,724,726,727,734,735,736,737,
            738,740,741,742,744,745,746,747,749,750,
            752,753,807,839,841,842,800,871,504,791,
            809,803,789,855,812,792,793,804,805,808,
            810,811,788,806,799,795,854,840,231,858,
            642,757,758,759,760,761,762,763,764,765,
            766,801,707,733,713,739,706,732,702,703,
            722,748,704,705,728,729,730,731,797,802,
            717,725,743,798,715,719,721,723,751,794,
            796,857,790,856,708,709,710,711,712,714,
            716,718,720,724,726,727,734,735,736,737,
            738,740,741,742,744,745,746,747,749,750,
            752,753,807,839,841,842,800,867,869,791,
            809,803,789,855,812,792,793,804,805,808,
            810,811,788,806,799,795,854,840,642,858,
            642,517,758,759,760,761,762,763,764,765,
            766,417,707,733,713,529,706,732,702,703,
            722,748,704,705,728,729,730,731,331,424,
            717,725,743,356,715,719,721,723,751,499,
            509,525,443,337,708,709,710,711,712,714,
            716,718,720,724,726,727,734,735,736,737,
            738,740,741,742,744,745,746,747,749,750,
            752,753,755,839,841,842,431,515,457,470,
            390,678,352,379,756,650,651,648,649,652,
            653,662,450,410,680,693,641,840,642,859,
            219,757,758,759,760,761,762,763,764,765,
            766,801,707,733,713,739,706,732,702,703,
            722,748,704,705,728,729,730,731,797,802,
            717,725,743,798,715,719,721,723,751,794,
            796,816,790,815,708,709,710,711,712,714,
            716,718,720,724,726,727,734,735,736,737,
            738,740,741,742,744,745,746,747,749,750,
            752,753,807,849,847,848,800,817,818,791,
            809,803,789,814,812,792,793,804,805,808,
            810,811,788,806,799,795,845,642,757,758,
            759,760,761,762,763,764,765,766,801,707,
            733,713,739,706,732,702,703,722,748,704,
            705,728,729,730,731,797,802,717,725,743,
            798,715,719,721,723,751,794,796,335,790,
            962,708,709,710,711,712,714,716,718,720,
            724,726,727,734,735,736,737,738,740,741,
            742,744,745,746,747,749,750,752,753,807,
            828,826,827,800,824,825,791,809,803,789,
            823,812,792,793,804,805,808,810,811,788,
            806,799,795,822,642,757,758,759,760,761,
            762,763,764,765,766,801,707,733,713,739,
            706,732,702,703,722,748,704,705,728,729,
            730,731,797,802,717,725,743,798,715,719,
            721,723,751,794,796,335,790,963,708,709,
            710,711,712,714,716,718,720,724,726,727,
            734,735,736,737,738,740,741,742,744,745,
            746,747,749,750,752,753,807,828,826,827,
            800,824,825,791,809,803,789,823,812,792,
            793,804,805,808,810,811,788,806,799,795,
            822,642,757,758,759,760,761,762,763,764,
            765,766,801,707,733,713,739,706,732,702,
            703,722,748,704,705,728,729,730,731,797,
            802,717,725,743,798,715,719,721,723,751,
            794,796,335,790,833,708,709,710,711,712,
            714,716,718,720,724,726,727,734,735,736,
            737,738,740,741,742,744,745,746,747,749,
            750,752,753,807,838,836,837,800,834,835,
            791,809,803,789,939,812,792,793,804,805,
            808,810,811,788,806,799,795,832,642,757,
            758,759,760,761,762,763,764,765,766,801,
            707,733,713,739,706,732,702,703,722,748,
            704,705,728,729,730,731,797,802,717,725,
            743,798,715,719,721,723,751,794,796,335,
            790,964,708,709,710,711,712,714,716,718,
            720,724,726,727,734,735,736,737,738,740,
            741,742,744,745,746,747,749,750,752,753,
            807,828,826,827,800,824,825,791,809,803,
            789,823,812,792,793,804,805,808,810,811,
            788,806,799,795,822,642,757,758,759,760,
            761,762,763,764,765,766,801,707,733,713,
            739,706,732,702,703,722,748,704,705,728,
            729,730,731,797,802,717,725,743,798,715,
            719,721,723,751,794,796,335,790,965,708,
            709,710,711,712,714,716,718,720,724,726,
            727,734,735,736,737,738,740,741,742,744,
            745,746,747,749,750,752,753,807,828,826,
            827,800,824,825,791,809,803,789,823,812,
            792,793,804,805,808,810,811,788,806,799,
            795,822,642,757,758,759,760,761,762,763,
            764,765,766,801,707,733,713,739,706,732,
            702,703,722,748,704,705,728,729,730,731,
            797,802,717,725,743,798,715,719,721,723,
            751,794,796,335,790,833,708,709,710,711,
            712,714,716,718,720,724,726,727,734,735,
            736,737,738,740,741,742,744,745,746,747,
            749,750,752,753,807,838,836,837,800,834,
            835,791,809,803,789,940,812,792,793,804,
            805,808,810,811,788,806,799,795,832,642,
            757,758,759,760,761,762,763,764,765,766,
            801,707,733,713,739,706,732,702,703,722,
            748,704,705,728,729,730,731,797,802,717,
            725,743,798,715,719,721,723,751,794,796,
            335,790,833,708,709,710,711,712,714,716,
            718,720,724,726,727,734,735,736,737,738,
            740,741,742,744,745,746,747,749,750,752,
            753,807,838,836,837,800,834,835,791,809,
            803,789,642,812,792,793,804,805,808,810,
            811,788,806,799,795,832,1,757,758,759,
            760,761,762,763,764,765,766,37,707,733,
            713,739,706,732,702,703,722,748,704,705,
            728,729,730,731,248,642,717,725,743,642,
            715,719,721,723,751,52,697,525,562,558,
            708,709,710,711,712,714,716,718,720,724,
            726,727,734,735,736,737,738,740,741,742,
            744,745,746,747,749,750,752,753,755,245,
            757,758,759,760,761,762,763,764,765,766,
            756,781,787,258,642,780,786,776,777,33,
            642,778,779,782,783,784,785,581,902,572,
            692,570,642,757,758,759,760,761,762,763,
            764,765,766,221,781,787,642,695,780,786,
            776,777,58,701,778,779,782,783,784,785,
            556,642,767,768,769,770,771,772,773,774,
            642,263,642,955,642,642,572,97,570,953,
            954,566,560,935,937,936,938,549,522,32,
            566,560,406,642,568,956,957,958,959,677,
            691,642,952,681,950,642,757,758,759,760,
            761,762,763,764,765,766,642,781,787,242,
            393,780,786,776,777,40,18,778,779,782,
            783,784,785,562,558,642,672,686,642,897,
            898,218,951,642,949,285,757,758,759,760,
            761,762,763,764,765,766,115,781,787,642,
            412,780,786,776,777,656,642,778,779,782,
            783,784,785,284,757,758,759,760,761,762,
            763,764,765,766,642,781,787,888,642,780,
            786,776,777,642,889,778,779,782,783,784,
            785,286,757,758,759,760,761,762,763,764,
            765,766,642,781,787,642,642,780,786,776,
            777,253,642,778,779,782,783,784,785,244,
            757,758,759,760,761,762,763,764,765,766,
            264,897,898,642,642,549,522,642,642,251,
            642,642,935,937,936,938,642,491,642,757,
            758,759,760,761,762,763,764,765,766,897,
            898,12,757,758,759,760,761,762,763,764,
            765,766,275,757,758,759,760,761,762,763,
            764,765,766,642,642,642,642,924,925,551,
            276,757,758,759,760,761,762,763,764,765,
            766,642,757,758,759,760,761,762,763,764,
            765,766,281,757,758,759,760,761,762,763,
            764,765,766,279,757,758,759,760,761,762,
            763,764,765,766,277,757,758,759,760,761,
            762,763,764,765,766,280,757,758,759,760,
            761,762,763,764,765,766,278,757,758,759,
            760,761,762,763,764,765,766,290,757,758,
            759,760,761,762,763,764,765,766,288,757,
            758,759,760,761,762,763,764,765,766,289,
            757,758,759,760,761,762,763,764,765,766,
            287,757,758,759,760,761,762,763,764,765,
            766,273,26,240,642,642,218,642,642,22,
            642,642,642,670,267,244,244,562,558,269,
            684,244,244,897,898,271,935,937,936,938,
            23,935,937,936,938,696,19,935,937,936,
            938,685,27,16,698,21,17,687,257,25,
            24,642,642,671,690,642,673,683,642,699,
            689,688,901,546,642,655,642,642,642,642,
            642,539,642,642,642,642,657,642,544,839,
            841,842,642,642,642,642,865,348,642,642,
            642,642,642,642,642,642,642,642,642,244,
            642,642,642,840,642,642,642,642,642,642,
            642,642,642,642,642,642,642,642,642,642,
            642,642,676
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 88,
           NT_OFFSET         = 99,
           LA_STATE_OFFSET   = 969,
           MAX_LA            = 1,
           NUM_RULES         = 327,
           NUM_NONTERMINALS  = 52,
           NUM_SYMBOLS       = 151,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 328,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 98,
           EOLT_SYMBOL       = 65,
           ACCEPT_ACTION     = 641,
           ERROR_ACTION      = 642;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
