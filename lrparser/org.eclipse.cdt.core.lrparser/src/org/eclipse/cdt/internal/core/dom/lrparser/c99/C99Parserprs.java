/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99Parserprs implements lpg.lpgjavaruntime.ParseTable, C99Parsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,3,1,1,
            4,4,3,3,2,2,8,1,0,1,
            1,2,2,2,2,2,2,2,2,2,
            4,1,4,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,5,9,8,
            3,2,2,2,3,2,4,2,2,2,
            2,2,1,1,1,1,2,1,2,2,
            2,1,2,2,1,2,2,1,2,2,
            1,2,2,1,3,1,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,6,8,
            0,0,1,1,3,3,3,0,1,0,
            1,2,4,2,1,1,1,3,1,1,
            2,3,7,8,0,1,0,1,3,1,
            3,1,1,1,1,1,1,3,1,1,
            1,1,1,3,1,2,2,1,5,3,
            1,3,5,1,3,1,3,2,4,3,
            5,4,6,6,3,5,1,2,3,4,
            5,0,1,2,1,3,1,1,3,2,
            1,1,1,1,2,1,2,3,1,1,
            1,3,1,2,2,2,3,4,5,1,
            7,3,0,0,1,1,3,3,4,1,
            1,2,3,2,3,2,1,0,1,2,
            1,1,1,1,1,2,4,3,6,2,
            4,-73,0,-2,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-28,
            0,0,-137,0,-17,-133,0,0,-260,0,
            -6,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-191,0,0,0,
            0,0,0,-23,0,0,0,0,-19,0,
            -3,0,0,0,0,0,0,-121,-120,0,
            0,0,0,0,0,0,-18,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-141,0,0,0,0,0,0,0,-87,
            0,-146,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-34,0,0,0,0,0,0,
            0,0,0,0,0,0,-163,0,0,0,
            0,0,0,0,-182,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-241,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -30,0,0,-284,0,-271,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-37,0,-183,0,
            -256,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-145,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-20,0,0,0,0,
            0,0,0,0,-176,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-53,-29,0,0,-32,0,-274,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -51,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-180,0,-9,0,0,0,0,
            0,0,0,0,0,0,0,0,-38,0,
            0,-39,-55,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -204,0,0,-35,0,0,0,-285,0,-41,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-264,0,0,-263,0,
            -181,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-123,0,0,-118,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-33,0,0,-81,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-45,0,0,0,0,-108,0,
            -70,0,-47,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-49,-62,0,0,-174,0,-59,0,0,
            0,0,0,0,0,0,0,0,-4,0,
            0,0,0,0,-11,0,0,0,0,0,
            -50,-190,0,0,0,-63,0,0,0,0,
            0,0,0,0,0,0,0,-12,0,0,
            0,0,0,0,-65,0,0,0,0,0,
            0,0,-147,0,-82,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -66,0,0,-106,0,-148,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-149,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-142,0,0,-158,
            0,-150,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-151,0,-144,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-186,0,0,-159,0,-152,0,-187,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -153,0,-69,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-195,0,-154,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-197,0,0,0,0,-155,0,-212,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-198,0,-156,
            0,-43,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-157,0,-217,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -36,0,0,-71,0,-201,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-218,0,0,-205,0,-206,0,
            -74,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-210,
            0,-219,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-86,0,0,0,0,0,0,0,
            -211,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-238,0,
            0,-248,0,-250,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-270,0,-283,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-172,0,-84,0,0,
            0,0,0,0,0,-277,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-95,0,0,-288,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-207,0,-96,
            -77,0,-278,-42,0,0,-97,-175,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -22,0,0,-165,0,0,-98,0,-24,0,
            0,0,0,0,0,0,0,0,0,-99,
            -135,-68,0,0,0,-57,0,0,-177,0,
            0,0,0,0,0,0,0,0,0,0,
            -85,0,0,0,0,-107,0,0,-208,0,
            -164,0,0,0,0,0,0,0,0,0,
            0,0,0,-100,0,0,0,0,0,-237,
            -262,0,0,0,0,0,0,-25,0,0,
            0,0,0,0,-26,0,-7,0,0,0,
            0,0,0,0,0,0,-60,0,-125,0,
            0,0,0,0,0,0,-101,0,-27,0,
            0,0,0,-14,0,-102,0,0,-44,0,
            0,0,0,-64,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-8,-103,
            0,0,-61,0,0,0,-220,-46,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -188,-31,0,0,0,-185,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-267,0,0,0,0,0,
            -67,0,-239,-48,0,0,0,0,0,0,
            -104,0,0,0,0,0,0,0,0,-199,
            0,0,0,-72,0,0,0,0,0,0,
            0,-16,0,-21,0,0,-76,0,0,-105,
            0,0,0,0,-40,-117,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-78,
            0,0,-124,0,0,-83,0,0,0,0,
            0,0,-111,-109,0,0,0,0,0,0,
            0,0,0,0,0,0,-56,-112,0,0,
            0,0,-132,0,0,0,-52,0,0,-240,
            -114,0,0,0,0,0,-170,0,-115,0,
            0,0,0,0,0,0,0,0,0,-192,
            0,0,0,0,0,-116,0,0,0,0,
            0,0,-136,0,0,0,0,0,-79,0,
            0,0,0,0,0,0,0,-126,0,0,
            -122,-255,0,0,-127,-119,0,0,0,0,
            -130,0,0,0,0,0,-194,0,0,-128,
            0,0,-129,0,0,0,0,0,0,0,
            0,0,0,-253,0,-276,0,0,-88,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-200,0,0,0,0,
            0,-242,-249,0,0,0,0,0,-131,-189,
            0,-138,0,0,0,-203,0,0,-139,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-178,0,-196,0,0,0,0,0,0,
            0,0,0,-244,0,0,0,0,-134,0,
            0,0,0,0,-209,-140,0,0,0,0,
            0,0,0,-221,0,-222,0,0,-246,0,
            0,0,0,0,0,0,0,0,0,-223,
            0,0,-224,-193,-225,0,0,-89,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-247,0,0,-254,-272,
            0,-252,0,0,-91,0,-226,0,0,0,
            0,0,0,0,-266,0,0,-282,0,0,
            0,-279,0,0,0,0,0,0,0,0,
            0,-110,0,0,0,0,-281,0,0,-289,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-290,0,0,-273,0,-227,0,
            0,-293,0,0,-54,-286,0,0,0,0,
            0,0,0,0,0,-269,0,0,0,0,
            -90,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-287,0,
            0,0,0,-228,0,-229,0,0,0,0,
            -291,0,0,0,-230,-231,0,0,0,0,
            0,-232,-233,-234,-215,-179,0,0,0,0,
            0,0,0,0,0,0,0,-171,0,-235,
            0,0,0,0,0,0,0,0,0,0,
            -1,0,0,-173,0,-292,0,0,0,0,
            0,0,0,-216,0,0,-236,-160,0,0,
            -251,-258,0,0,0,-213,0,0,0,0,
            0,0,0,0,-92,0,0,0,0,0,
            0,0,0,-259,0,-113,0,0,0,0,
            0,0,0,0,-268,-275,0,0,0,0,
            0,0,-143,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-167,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-168,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-169,0,-10,
            0,0,0,0,0,0,0,0,-214,0,
            0,0,0,0,0,0,0,-257,-5,0,
            0,0,0,0,0,0,-13,0,0,-75,
            -15,0,0,0,0,-80,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-202,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-93,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-94,0,0,0,0,0,0,0,
            -161,-162,0,0,0,0,0,0,-261,0,
            0,0,0,0,0,0,0,-58,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-243,0,0,0,0,0,0,0,0,
            -265,-280,0,0,0,0,0,0,0,-166,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-184,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-245,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            106,2,39,39,23,23,41,41,18,18,
            1,1,3,3,3,3,4,4,4,5,
            6,6,6,6,6,6,6,6,68,68,
            90,7,7,7,7,7,7,7,7,7,
            7,7,8,8,9,9,9,9,10,10,
            10,11,11,11,12,12,12,12,12,13,
            13,13,14,14,15,15,16,16,17,17,
            19,19,20,20,22,22,22,22,22,22,
            22,22,22,22,22,22,29,27,21,107,
            107,92,92,54,30,30,30,30,30,30,
            30,31,31,31,28,28,93,93,69,69,
            32,32,33,33,33,61,61,34,34,34,
            34,35,35,35,35,35,47,47,24,24,
            24,24,24,48,48,48,83,83,78,78,
            78,78,79,79,79,80,80,80,81,81,
            81,82,82,82,94,94,84,84,85,49,
            51,51,51,51,51,62,64,64,64,64,
            64,64,64,64,64,64,64,64,73,70,
            70,108,109,74,74,71,71,71,86,95,
            95,96,96,87,87,87,55,110,110,97,
            98,98,98,72,72,111,99,99,100,100,
            88,88,25,26,26,26,50,52,52,42,
            42,42,42,36,36,37,43,43,44,38,
            38,101,101,45,113,113,112,112,46,46,
            46,46,46,46,46,46,46,102,53,53,
            53,53,40,75,75,65,65,65,66,66,
            56,56,114,114,77,77,76,76,76,57,
            57,57,58,59,59,59,60,60,60,60,
            63,63,63,67,115,91,91,91,91,89,
            116,117,117,118,118,119,119,106,106,120,
            120,103,103,103,103,121,121,104,104,104,
            105,105,292,1729,754,16,20,17,1274,1248,
            44,1300,1327,1307,1384,1340,1436,1427,1521,1460,
            622,1550,74,1261,91,331,1509,134,212,1407,
            19,324,16,20,17,1274,42,44,1300,1327,
            1307,1384,1340,1436,1427,1521,1460,1509,1550,73,
            136,133,135,159,322,1062,556,223,232,296,
            773,1051,178,335,138,583,165,179,421,1110,
            718,312,142,145,148,151,636,581,330,1482,
            1407,1459,2090,2117,2121,1542,134,212,282,87,
            87,1127,1161,1534,1671,1012,115,556,223,231,
            1407,19,1295,16,20,17,1274,42,39,136,
            133,135,159,586,223,228,1804,254,212,217,
            743,220,222,138,908,165,1607,254,212,491,
            1677,142,145,148,151,636,308,587,30,1407,
            1459,2090,2117,2121,1542,1407,19,230,16,20,
            17,1274,42,44,1300,1327,1307,1384,1340,1436,
            1427,1953,341,1350,19,696,16,20,17,1274,
            1248,44,1300,1327,1307,1384,1340,1436,1427,1521,
            1460,440,1550,74,459,280,1369,19,696,16,
            20,17,1274,1248,44,1300,1327,1307,1384,1340,
            1436,1427,1521,1460,224,1550,74,892,280,1407,
            19,1506,16,20,17,1274,42,44,1300,1327,
            1307,1384,1340,1436,1954,127,285,24,1223,19,
            1598,16,20,17,1274,1248,44,1300,1327,1307,
            1384,1340,1436,1427,1521,1460,314,1550,74,285,
            1039,773,286,1598,699,1407,19,273,16,20,
            17,1274,42,44,1300,1327,1889,239,268,963,
            970,271,421,746,769,286,1006,1227,1265,19,
            696,16,20,17,1274,1248,44,1300,1327,1307,
            1384,1340,1436,1427,1521,1460,1534,1550,74,281,
            280,1199,19,1576,16,20,17,1274,1248,44,
            1300,1327,1307,1384,1340,1436,1427,1521,1460,305,
            1550,74,226,855,1407,19,176,16,20,17,
            1274,42,44,1300,1327,1307,1384,1340,1946,357,
            238,287,501,1242,19,1598,16,20,17,1274,
            1248,44,1300,1327,1307,1384,1340,1436,1427,1521,
            1460,1261,1550,74,421,280,582,288,1388,19,
            442,16,20,17,1274,1248,44,1300,1327,1307,
            1384,1340,1436,1427,1521,1460,412,1550,74,1523,
            280,1407,19,1862,16,20,17,1274,42,44,
            1300,1327,1307,1384,1952,421,157,718,1407,19,
            1598,16,20,17,1274,1248,44,1300,1327,1307,
            1384,1340,1436,1427,1521,1460,87,1550,74,1832,
            91,289,1032,913,364,1598,1426,19,2043,16,
            20,17,1274,1248,44,1300,1327,1307,1384,1340,
            1436,1427,1521,1460,626,1550,74,1887,947,1108,
            178,1407,19,788,16,20,17,1274,42,44,
            1300,1327,1307,1384,1340,1436,1427,1521,1460,227,
            1550,93,622,708,134,212,1407,19,1045,16,
            20,17,1274,42,44,1300,1327,1307,1805,419,
            1671,1544,2036,1303,291,355,123,136,133,135,
            159,908,1113,2126,769,1665,747,126,586,223,
            228,138,773,165,218,743,220,222,505,142,
            145,148,151,636,230,790,1366,1407,1459,2090,
            2117,2121,1542,1407,19,359,16,20,17,1274,
            1248,44,1300,1327,1307,1384,1340,1436,1427,1521,
            1460,794,1550,74,440,85,1407,19,259,16,
            20,17,1274,1248,44,1300,1327,1307,1384,1340,
            1436,1427,1521,1460,240,1550,74,229,84,1407,
            19,1329,16,20,17,1274,1248,44,1300,1327,
            1307,1384,1340,1436,1427,1521,1460,1000,1550,74,
            440,83,1407,19,1398,16,20,17,1274,1248,
            44,1300,1327,1307,1384,1340,1436,1427,1521,1460,
            233,1550,74,2099,82,1407,19,359,16,20,
            17,1274,1248,44,1300,1327,1307,1384,1340,1436,
            1427,1521,1460,1176,1550,74,440,81,1407,19,
            1287,16,20,17,1274,1248,44,1300,1327,1307,
            1384,1340,1436,1427,1521,1460,242,1550,74,18,
            80,1407,19,54,16,20,17,1274,1248,44,
            1300,1327,1307,1384,1340,1436,1427,1521,1460,275,
            1550,74,440,79,1407,19,274,16,20,17,
            1274,1248,44,1300,1327,1307,1384,1340,1436,1427,
            1521,1460,440,1550,74,1764,78,1407,19,359,
            16,20,17,1274,1248,44,1300,1327,1307,1384,
            1340,1436,1427,1521,1460,1789,1550,74,440,77,
            1407,19,443,16,20,17,1274,1248,44,1300,
            1327,1307,1384,1340,1436,1427,1521,1460,241,1550,
            74,1826,76,1407,19,440,16,20,17,1274,
            1248,44,1300,1327,1307,1384,1340,1436,1427,1521,
            1460,324,1550,74,58,75,1407,19,2002,16,
            20,17,1274,1248,44,1300,1327,1307,1384,1340,
            1436,1427,1521,1460,440,1550,74,1509,92,1407,
            19,828,16,20,17,1274,42,44,1300,1327,
            1307,1384,1340,1436,1427,1521,1460,2024,1550,93,
            1407,19,440,16,20,17,1274,1248,44,1300,
            1327,1307,1384,1340,1436,1427,1521,1460,203,1550,
            74,1131,1694,1445,19,22,16,20,17,1274,
            40,1407,19,211,16,20,17,1274,1248,44,
            1300,1327,1307,1384,1340,1436,1427,1521,1460,440,
            1550,74,1509,1829,1407,19,307,16,20,17,
            1274,42,44,1300,1327,1307,1384,1340,1436,1427,
            1521,1460,272,1550,93,1407,19,1523,16,20,
            17,1274,42,44,1300,1327,1307,1384,1340,1436,
            1427,1521,1460,180,1550,93,1407,19,384,16,
            20,17,1274,42,44,1800,1407,19,201,16,
            20,17,1274,42,44,1300,1327,1307,1384,1340,
            1436,1427,1521,1460,1490,1550,93,1407,19,202,
            16,20,17,1274,42,44,1300,1327,1307,1384,
            1340,1436,1427,1521,1460,1941,1550,93,587,1732,
            1056,628,1732,1432,178,1104,312,935,1407,19,
            1896,16,20,17,1274,42,44,1300,1327,1307,
            1837,833,110,1304,1313,86,718,663,1534,587,
            186,1986,95,1511,108,94,96,97,98,99,
            630,933,833,769,1419,89,1,1104,312,1407,
            19,109,16,20,17,1274,42,44,1300,1327,
            1934,421,310,312,110,196,946,86,1730,1483,
            1534,587,30,106,95,1511,108,94,96,97,
            98,99,87,104,345,196,209,311,966,208,
            908,440,2209,109,254,212,1769,1346,587,185,
            333,1739,586,223,228,326,764,1146,217,743,
            220,222,273,277,278,107,1998,1045,262,235,
            1104,312,292,266,963,970,271,509,192,587,
            187,1152,134,212,541,122,931,110,920,421,
            86,2120,263,1534,480,1104,718,95,1511,108,
            94,96,97,98,99,141,133,135,159,944,
            288,23,110,587,1666,86,109,359,421,140,
            1301,165,95,1511,1661,94,96,97,98,99,
            260,941,331,1513,134,212,1407,19,106,16,
            20,17,1274,42,44,1300,1327,1307,1384,1340,
            1436,1427,1521,1997,276,440,21,144,133,135,
            159,1045,1530,950,890,769,1649,586,223,228,
            1429,463,583,217,743,220,222,273,1867,111,
            119,1104,312,491,419,792,1683,1366,266,963,
            970,271,1108,178,581,1405,1555,421,110,1643,
            591,86,126,583,1534,331,1045,1199,95,1511,
            108,94,96,97,98,99,1610,134,212,258,
            1119,105,1776,421,125,718,1122,109,1391,1584,
            586,223,652,421,1027,357,217,743,220,680,
            137,133,135,159,87,583,158,622,1063,107,
            1058,253,212,421,139,2153,165,402,1597,769,
            1115,1064,143,146,149,152,636,1407,19,1112,
            16,20,17,1274,42,44,1300,1784,154,649,
            421,1366,473,586,223,1619,60,773,517,218,
            743,220,1611,628,1732,1101,586,223,228,1122,
            773,412,218,743,220,222,273,674,521,1104,
            718,876,421,258,496,172,1045,268,963,970,
            271,1205,874,1584,253,212,110,1045,538,86,
            562,1104,718,581,121,1482,95,1511,103,94,
            96,97,98,99,359,2232,587,294,110,1407,
            19,86,16,20,17,1274,42,38,95,1511,
            101,94,96,97,98,99,603,1104,718,586,
            223,228,1045,1126,402,217,743,220,222,360,
            331,208,1499,243,110,158,868,86,1482,1285,
            2241,193,671,1739,95,1511,102,94,96,97,
            98,99,1407,19,905,16,20,17,1274,42,
            44,1300,1327,1936,644,1104,718,154,649,419,
            583,1736,586,223,228,1144,1122,517,217,743,
            220,222,110,1610,706,86,745,194,2001,685,
            1104,718,95,1511,118,94,96,97,98,99,
            1505,253,212,1507,1110,367,718,110,1407,19,
            86,16,20,17,1274,42,37,95,1511,114,
            94,96,97,98,99,87,726,1104,718,359,
            440,115,1509,197,199,1289,19,477,16,20,
            17,1274,42,35,110,1045,1723,86,767,1104,
            718,1369,440,279,95,1511,2035,94,96,97,
            98,99,829,2242,769,1722,110,1045,244,86,
            808,1104,718,204,245,1870,95,1511,113,94,
            96,97,98,99,440,117,1534,1509,110,1284,
            309,86,849,1104,718,581,359,1482,95,1511,
            120,94,96,97,98,99,868,1892,1482,306,
            110,1407,19,86,16,20,17,1274,42,36,
            95,1511,119,94,96,97,98,99,494,587,
            296,586,223,228,1286,293,1470,217,743,220,
            222,1509,586,223,228,1484,1066,158,217,743,
            220,222,712,795,755,331,1407,19,2001,16,
            20,17,1274,42,44,1300,1327,1945,1407,19,
            1486,16,20,17,1274,42,44,1300,1786,155,
            649,349,27,371,1407,19,359,16,20,17,
            1274,42,44,1803,1005,583,2108,1185,1339,303,
            1955,1519,1514,198,199,809,1289,19,521,16,
            20,17,1274,42,35,1407,19,276,16,20,
            17,1274,42,34,1515,295,1407,19,302,16,
            20,17,1274,42,35,1025,1516,2331,2331,2331,
            273,2331,2331,1122,273,246,2331,2331,2331,2331,
            2331,266,963,970,271,266,963,970,271,1407,
            19,2331,16,20,17,1274,42,47,253,212,
            1199,2331,1407,19,265,16,20,17,1274,42,
            46,2331,2331,2331,299,301,2331,314,1407,19,
            1003,16,20,17,1274,42,45,2331,2331,1319,
            19,2109,16,20,17,1274,42,43,950,406,
            769,371,2331,2331,2331,134,212,1062,412,2331,
            874,1468,769,2331,2331,2331,938,303,769,2331,
            2331,2331,1366,809,2331,2331,2331,2331,147,133,
            135,159,134,212,196,1150,134,212,583,2331,
            1366,2331,2331,992,2331,769,302,2331,2331,2331,
            2331,521,2331,2331,258,150,133,135,159,153,
            133,135,159,1391,1584,1769,2331,196,2331,2331,
            1464,19,258,16,20,17,1274,33,2331,2331,
            2331,874,1584,1464,19,2331,16,20,17,1274,
            32,421,421,312,312,2331,2331,191,1769,402,
            2331,769,300,301,2331,336,1341,2331,419,2331,
            718,2331,87,87,2331,196,196,2331,966,966,
            2331,2331,1110,1366,718,2331,124,2331,917,87,
            191,1110,1110,718,718,1556,2331,2331,1202,1341,
            421,2331,718,87,2331,2331,1998,1998,2331,115,
            2331,2331,87,87,421,258,718,2331,115,115,
            2331,87,2331,2331,1830,1584,2331,1467,1085,1124,
            421,2331,718,2331,2331,87,2331,2331,2331,2331,
            2331,1970,2331,1845,2331,2331,2331,2331,2331,2331,
            2331,87,1852,1884,2331,2331,2331,1505,2331,0,
            10,225,0,2338,1,0,1,2567,0,7,
            9,0,178,19,0,1,2556,0,112,1848,
            0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,0,54,55,56,0,58,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,59,54,55,56,59,58,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,0,54,55,56,0,58,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            59,54,55,56,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,0,54,55,
            56,0,1,2,3,0,5,2,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,0,23,2,25,26,27,28,
            29,0,1,0,3,0,1,6,3,6,
            0,6,41,42,43,44,45,46,47,48,
            49,50,51,52,0,54,55,56,0,1,
            2,3,4,5,0,1,0,3,0,0,
            1,2,4,4,5,78,0,19,20,21,
            22,23,24,25,26,27,28,29,19,20,
            21,22,23,0,25,26,27,28,29,41,
            42,43,44,45,46,47,48,49,50,51,
            52,0,54,55,56,0,1,2,3,4,
            5,0,53,69,70,71,72,61,0,60,
            0,73,4,65,19,20,21,22,23,24,
            25,26,27,28,29,69,70,71,72,0,
            22,0,0,4,61,4,41,42,43,44,
            45,46,47,48,49,50,51,52,0,54,
            55,56,0,22,53,64,83,84,85,86,
            87,88,89,90,91,92,0,66,73,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,57,60,
            0,22,61,24,0,1,6,3,0,30,
            31,32,33,34,35,36,37,38,39,40,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,77,
            0,1,22,3,24,69,70,71,72,0,
            30,31,32,33,34,35,36,37,38,39,
            40,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            0,1,2,22,76,24,0,1,0,3,
            0,30,31,32,33,34,35,36,37,38,
            39,40,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,0,1,2,22,0,24,0,1,0,
            3,6,30,31,32,33,34,35,36,37,
            38,39,40,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,0,0,1,22,3,24,0,7,
            8,81,82,30,31,32,33,34,35,36,
            37,38,39,40,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,74,75,0,22,0,24,2,
            0,0,7,8,30,31,32,33,34,35,
            36,37,38,39,40,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,0,0,0,22,2,24,
            5,7,8,0,0,30,31,32,33,34,
            35,36,37,38,39,40,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,74,75,0,22,0,
            24,2,5,0,0,2,30,31,32,33,
            34,35,36,37,38,39,40,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,73,0,0,22,
            76,24,0,6,6,0,4,30,31,32,
            33,34,35,36,37,38,39,40,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,0,1,2,
            22,77,24,0,1,0,3,4,30,31,
            32,33,34,35,36,37,38,39,40,0,
            58,0,19,20,21,4,23,24,25,26,
            27,28,29,0,0,30,2,0,19,20,
            21,4,0,22,41,42,43,44,45,46,
            47,48,49,50,51,52,59,54,55,56,
            0,58,0,1,0,3,4,0,1,9,
            0,1,2,0,4,0,1,2,57,0,
            5,19,20,21,5,23,24,25,26,27,
            28,29,19,20,21,53,23,60,25,26,
            27,28,29,41,42,43,44,45,46,47,
            48,49,50,51,52,0,54,55,56,0,
            58,0,1,53,3,4,62,63,53,0,
            60,64,0,4,0,0,2,2,4,0,
            19,20,21,64,23,24,25,26,27,28,
            29,19,20,21,0,23,0,25,26,27,
            28,29,41,42,43,44,45,46,47,48,
            49,50,51,52,0,54,55,56,4,58,
            0,1,2,3,0,0,57,53,53,60,
            5,0,0,0,60,0,22,4,6,19,
            20,21,0,23,9,25,26,27,28,29,
            19,20,21,57,23,22,25,26,27,28,
            29,41,42,43,44,45,46,47,48,49,
            50,51,52,79,54,55,56,0,1,0,
            3,0,0,4,0,1,2,6,0,5,
            57,0,67,68,61,0,19,20,21,4,
            23,22,25,26,27,28,29,19,20,21,
            19,20,21,0,1,0,0,22,41,42,
            43,44,45,46,47,48,49,50,51,52,
            0,54,55,56,19,20,21,53,23,60,
            25,26,27,28,29,0,64,2,0,19,
            20,21,57,0,0,0,41,42,43,44,
            45,46,47,48,49,50,51,52,0,1,
            2,3,4,5,0,7,8,9,10,11,
            12,13,14,15,16,17,18,0,0,0,
            0,23,0,1,2,3,4,5,53,7,
            8,9,10,11,12,13,14,15,16,17,
            18,0,1,2,3,23,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            0,57,78,65,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,0,0,0,0,65,0,1,
            2,3,4,5,0,7,8,9,10,11,
            12,13,14,15,16,17,18,0,0,0,
            0,0,0,19,20,21,4,57,0,1,
            2,3,58,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,0,0,53,
            2,57,0,5,0,62,63,62,63,0,
            1,2,3,65,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,0,1,
            2,3,60,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,0,1,2,
            3,53,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,0,1,2,3,
            0,5,0,7,8,9,10,11,12,13,
            14,15,16,17,18,0,1,2,3,0,
            5,0,7,8,9,10,11,12,13,14,
            15,16,17,18,0,1,2,3,0,5,
            0,7,8,9,10,11,12,13,14,15,
            16,17,18,0,1,2,3,0,5,0,
            7,8,9,10,11,12,13,14,15,16,
            17,18,0,0,53,0,19,20,21,0,
            23,2,25,26,27,28,29,66,0,10,
            11,19,20,21,0,0,0,2,0,5,
            5,5,4,0,0,0,0,0,0,6,
            6,4,0,0,0,0,0,0,0,6,
            6,62,63,6,0,0,0,0,0,0,
            0,0,53,0,59,62,63,0,0,0,
            0,0,0,0,0,66,0,0,53,61,
            0,0,0,0,0,0,58,0,0,80,
            0,67,68,67,68,58,61,59,0,57,
            0,0,0,0,59,59,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            2331,4169,1,4168,1636,1,1342,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2339,1,2431,1,1,1,1,1,
            826,798,771,1417,993,1444,793,1463,871,2218,
            845,1,1,1,1,1,1,1,1,1,
            1,1,1,2331,1,1,1,2331,2337,7,
            2319,2319,2319,2319,2319,2319,2319,2319,2319,2319,
            2319,2319,2319,2319,2319,2319,2319,2319,2319,2319,
            2319,2319,2319,2319,2319,2319,2319,2319,2319,2319,
            2319,2319,2319,2319,2319,2319,2319,2319,2319,2319,
            2319,2319,2319,2319,2319,2319,2319,2319,2319,2319,
            2319,2319,1658,2319,2319,2319,1680,2319,2331,4169,
            1,4168,1636,1,1342,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            2339,1,2431,1,1,1,1,1,826,798,
            771,1417,993,1444,793,1463,871,2218,845,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2331,1,1,1,181,2337,2331,4169,1,
            4168,2340,1,1342,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2339,
            1,2431,1,1,1,1,1,826,798,771,
            1417,993,1444,793,1463,871,2218,845,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1716,1,1,1,2331,4169,1,4168,2340,1,
            1342,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,2339,1,2431,1,
            1,1,1,1,826,798,771,1417,993,1444,
            793,1463,871,2218,845,1,1,1,1,1,
            1,1,1,1,1,1,1,70,1,1,
            1,2331,2341,1361,2342,10,2026,2310,1911,1808,
            2015,2193,2180,1173,2343,2344,2345,2346,1699,410,
            2544,2545,2546,2331,2493,434,2494,2492,2547,2495,
            2491,2331,2341,2331,2342,2331,2341,1439,2342,1321,
            252,1468,2498,2503,2502,2500,2501,2499,2504,2505,
            2497,2506,2507,2508,59,1434,838,815,2331,1,
            1,1,2340,1,184,4166,156,4166,2331,19,
            178,2322,2334,2322,2322,455,61,1,1,1,
            2339,1,2635,1,1,1,1,1,178,178,
            178,2322,178,42,178,178,178,178,178,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,2331,1,1,1,2340,
            1,2331,2322,1956,1752,1349,565,653,1,2322,
            1,298,2340,2333,1,1,1,2339,1,2635,
            1,1,1,1,1,1956,1752,1349,565,2331,
            2339,234,182,2336,1083,222,1,1,1,1,
            1,1,1,1,1,1,1,1,284,1,
            1,1,68,222,1256,2588,1060,1037,1014,991,
            968,922,945,899,876,853,60,1696,297,2331,
            4169,1,4168,2340,1,1342,1,1,1,1,
            1,1,1,1,1,1,1,1,222,2335,
            228,2339,222,2431,183,4167,231,4167,66,826,
            798,771,1417,993,1444,793,1463,871,2218,845,
            2331,4169,1,4168,2340,1,1342,1,1,1,
            1,1,1,1,1,1,1,1,1,519,
            205,4170,2339,4170,2431,1956,1752,1349,565,2331,
            826,798,771,1417,993,1444,793,1463,871,2218,
            845,2331,4169,1,4168,2340,1,1342,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2556,387,2339,634,2431,2331,2341,2331,2342,
            72,826,798,771,1417,993,1444,793,1463,871,
            2218,845,2331,4169,1,4168,2340,1,1342,1,
            1,1,1,1,1,1,1,1,1,1,
            1,252,2556,387,2339,2331,2431,207,2341,62,
            2342,1547,826,798,771,1417,993,1444,793,1463,
            871,2218,845,2331,4169,1,4168,2340,1,1342,
            1,1,1,1,1,1,1,1,1,1,
            1,1,51,206,1298,2339,1298,2431,2331,1984,
            1246,1486,2264,826,798,771,1417,993,1444,793,
            1463,871,2218,845,2331,4169,1,4168,2340,1,
            1342,1,1,1,1,1,1,1,1,1,
            1,1,1,1308,796,53,2339,2331,2431,379,
            2331,63,1984,1246,826,798,771,1417,993,1444,
            793,1463,871,2218,845,2331,4169,1,4168,2340,
            1,1342,1,1,1,1,1,1,1,1,
            1,1,1,1,52,2331,2331,2339,378,2431,
            1514,1984,1246,2331,67,826,798,771,1417,993,
            1444,793,1463,871,2218,845,2331,4169,1,4168,
            2340,1,1342,1,1,1,1,1,1,1,
            1,1,1,1,1,1308,796,2331,2339,2331,
            2431,715,1570,2331,69,1573,826,798,771,1417,
            993,1444,793,1463,871,2218,845,2331,4169,1,
            4168,2340,1,1342,1,1,1,1,1,1,
            1,1,1,1,1,1,2309,2331,1,2339,
            634,2431,1,1603,1342,2331,2313,826,798,771,
            1417,993,1444,793,1463,871,2218,845,2331,4169,
            1,4168,2340,1,1342,1,1,1,1,1,
            1,1,1,1,1,1,1,1,2556,387,
            2339,519,2431,2331,1,2331,1,190,826,798,
            771,1417,993,1444,793,1463,871,2218,845,248,
            2337,2331,1,1,1,2340,1,2526,1,1,
            1,1,1,2331,2331,1754,2280,1,1,1,
            1,2336,219,2339,1,1,1,1,1,1,
            1,1,1,1,1,1,1204,1,1,1,
            64,190,2331,1,54,1,189,1,2316,701,
            1,2325,1481,129,2336,261,2556,1481,1895,1,
            1,1,1,1,252,1,2526,1,1,1,
            1,1,2544,2545,2546,611,2493,2335,2494,2492,
            2547,2495,2491,1,1,1,1,1,1,1,
            1,1,1,1,1,2331,1,1,1,2331,
            189,2331,1,611,1,190,1617,1968,611,2331,
            2335,2588,130,2336,1,221,1994,821,2336,2331,
            1,1,1,2588,1,2526,1,1,1,1,
            1,2544,2545,2546,112,2493,255,2494,2492,2547,
            2495,2491,1,1,1,1,1,1,1,1,
            1,1,1,1,2331,1,1,1,2340,190,
            1,369,387,2342,2331,48,1775,611,611,2335,
            2088,131,2331,235,2335,65,2339,222,1630,2544,
            2545,2546,2331,2493,701,2494,2492,2547,2495,2491,
            2544,2545,2546,822,2493,222,2494,2492,2547,2495,
            2491,2498,2503,2502,2500,2501,2499,2504,2505,2497,
            2506,2507,2508,2328,1434,838,815,2331,2341,1,
            2342,228,1,116,267,2556,1481,232,249,252,
            222,2331,2072,2059,222,2331,2544,2545,2546,2340,
            2493,116,2494,2492,2547,2495,2491,1,1,1,
            2544,2545,2546,2331,2568,128,2331,2339,2498,2503,
            2502,2500,2501,2499,2504,2505,2497,2506,2507,2508,
            250,1434,838,815,2544,2545,2546,611,2493,116,
            2494,2492,2547,2495,2491,269,2587,1390,2331,2544,
            2545,2546,1906,2331,71,2331,2498,2503,2502,2500,
            2501,2499,2504,2505,2497,2506,2507,2508,1,2341,
            1361,2342,2334,1835,88,1911,1808,2015,2193,2180,
            1173,2343,2344,2345,2346,1699,410,2331,2331,2331,
            2331,746,2331,2341,1361,2342,2334,2006,611,1911,
            1808,2015,2193,2180,1173,2343,2344,2345,2346,1699,
            410,2331,2341,1361,2342,1181,2026,4160,1911,1808,
            2015,2193,2180,1173,2343,2344,2345,2346,1699,410,
            29,1106,455,2333,1,2341,1361,2342,28,2026,
            4160,1911,1808,2015,2193,2180,1173,2343,2344,2345,
            2346,1699,410,58,206,57,270,2333,2331,2341,
            1361,2342,2334,2026,247,1911,1808,2015,2193,2180,
            1173,2343,2344,2345,2346,1699,410,2331,2331,2331,
            2331,2331,1,2544,2545,2546,90,2359,2331,2341,
            1361,2342,28,2026,1662,1911,1808,2015,2193,2180,
            1173,2343,2344,2345,2346,1699,410,2331,264,611,
            1994,3306,2331,1,2331,1617,1968,1617,1968,1,
            2341,1361,2342,2333,2026,4160,1911,1808,2015,2193,
            2180,1173,2343,2344,2345,2346,1699,410,1,2341,
            1361,2342,90,2026,4160,1911,1808,2015,2193,2180,
            1173,2343,2344,2345,2346,1699,410,2331,2341,1361,
            2342,611,2026,4160,1911,1808,2015,2193,2180,1173,
            2343,2344,2345,2346,1699,410,2331,2341,1361,2342,
            2331,2026,2331,1911,1808,2015,2193,2180,1173,2343,
            2344,2345,2346,1699,410,1,2341,1361,2342,2331,
            2026,290,1911,1808,2015,2193,2180,1173,2343,2344,
            2345,2346,1699,410,2331,2341,2201,2342,2331,2026,
            2331,1911,1808,2015,2193,2180,1173,2343,2344,2345,
            2346,1699,410,2331,2341,2202,2342,132,2026,56,
            1911,1808,2015,2193,2180,1173,2343,2344,2345,2346,
            1699,410,251,55,1277,2331,2544,2545,2546,31,
            2493,1324,2494,2492,2547,2495,2491,1929,210,2356,
            2357,2544,2545,2546,50,267,49,1994,2331,2088,
            252,2088,2338,41,2331,2331,2331,283,200,1662,
            1662,1583,29,188,188,1,1,188,2331,184,
            183,1617,1968,205,2331,2331,2331,2331,2331,2331,
            2331,2331,2250,2331,339,1617,1968,2331,2331,2331,
            2331,2331,2331,2331,2331,1371,2331,2331,611,1129,
            2331,2331,2331,2331,2331,2331,2337,2331,2331,447,
            2331,2072,2059,2072,2059,1583,678,1225,2331,588,
            2331,2331,2331,2331,2342,2341
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            493,1,371,447,493,491,180,192,489,192,
            489,489,192,489,192,373,271,449,438,524,
            449,343,489,309,309,489,309,449,271,208,
            271,8,9,282,373,491,153,566,565,271,
            62,344,491,211,491,273,271,200,449,282,
            39,284,373,449,21,449,343,254,154,154,
            309,524,524,241,524,524,154,343,15,256,
            15,447,359,491,211,273,273,200,396,284,
            93,59,396,119,359,256,256,256,256,256,
            43,256,256,256,113,130,135,133,141,137,
            144,143,146,145,147,208,203,373,207,465,
            238,491,256,62,565,341,154,256,154,357,
            256,400,256,256,344,241,15,241,449,150,
            402,211,238,458,211,273,275,453,275,396,
            200,207,396,59,42,39,256,256,256,256,
            256,256,256,256,256,256,256,208,208,526,
            359,359,309,309,161,256,256,256,256,256,
            256,256,256,256,256,256,256,256,256,256,
            256,256,256,256,256,205,206,279,271,284,
            238,19,254,154,208,524,208,208,343,241,
            256,211,460,275,238,256,309,200,451,256,
            256,59,43,21,271,279,208,208,208,59,
            133,133,130,130,137,137,135,135,135,135,
            143,141,145,144,15,146,282,208,312,203,
            19,154,254,241,256,241,241,238,153,256,
            152,238,59,59,19,526,312,532,491,256,
            284,208,275,158,161,154,208,342,460,256,
            19,208,238,17,569,309,256,157,208,161,
            154,241,275,3,21,59,309,256,241,208,
            238,59,241
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            73,0,4,57,58,22,0,2,4,61,
            57,60,22,53,59,0,4,58,53,66,
            2,13,14,15,16,1,3,10,11,9,
            5,7,8,17,18,12,6,0,19,20,
            21,23,10,11,9,5,7,8,17,18,
            12,2,1,3,13,14,15,16,65,4,
            0,25,41,19,42,54,26,43,27,44,
            45,28,20,46,47,23,55,29,56,48,
            49,21,50,51,52,1,3,4,61,57,
            22,0,19,20,21,10,11,9,5,7,
            8,17,18,12,2,1,3,13,14,15,
            16,0,53,2,66,80,10,11,61,83,
            84,85,86,87,89,88,90,91,92,5,
            67,68,7,8,63,62,69,70,71,72,
            74,75,9,76,77,78,58,81,82,65,
            60,59,57,22,4,0,61,53,66,0,
            4,60,12,13,14,15,16,1,3,2,
            10,11,9,5,7,8,17,18,0,49,
            41,46,44,45,43,42,47,48,50,51,
            52,59,22,29,26,23,25,28,27,19,
            20,21,5,1,2,53,57,60,4,0,
            25,41,19,42,54,26,43,27,44,45,
            28,20,46,47,23,55,29,56,48,49,
            21,50,51,52,1,3,24,4,58,0,
            32,34,6,38,40,35,30,36,37,33,
            31,39,24,22,4,10,11,9,7,8,
            17,18,12,2,1,3,13,14,15,16,
            5,0,1,3,4,58,57,0,5,2,
            53,60,4,25,41,19,42,54,26,43,
            27,44,45,28,20,46,47,23,55,29,
            56,48,49,21,50,51,52,64,1,3,
            0,5,25,41,19,42,54,26,43,27,
            44,45,28,20,46,47,23,55,29,56,
            48,49,21,50,51,52,1,3,64,0,
            73,79,58,32,34,6,38,40,35,30,
            36,37,33,31,39,24,4,22,13,14,
            15,16,10,11,9,7,8,17,18,12,
            5,2,1,3,54,55,56,49,41,46,
            44,45,43,42,47,48,50,51,52,29,
            26,23,25,28,27,19,20,21,0,30,
            0,66,80,10,11,9,7,8,67,68,
            62,63,69,70,71,72,74,75,76,77,
            78,81,82,61,83,84,85,86,87,88,
            89,90,91,92,57,53,60,25,19,26,
            27,28,20,23,29,21,22,4,5,2,
            1,0,4,57,58,61,0,22,4,5,
            1,2,59,0,25,41,19,42,54,26,
            43,27,44,45,28,20,46,47,23,55,
            29,56,48,49,21,50,51,52,1,3,
            6,0,73,25,41,19,42,54,26,43,
            27,44,45,28,20,46,47,23,55,29,
            56,48,49,21,50,51,52,1,3,5,
            22,4,24,2,0,4,60,5,2,53,
            0,9,5,7,8,67,68,62,63,69,
            70,71,72,74,75,76,77,78,81,82,
            59,83,84,85,86,87,88,89,90,91,
            92,65,60,58,6,4,57,22,61,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            145,27,17,167,154,15,117,118,54,118,
            93,93,118,92,118,112,109,122,27,27,
            120,71,7,7,7,7,7,9,27,152,
            109,43,43,151,105,15,168,27,27,109,
            27,65,61,105,27,105,27,105,128,151,
            50,85,39,122,56,126,81,166,168,168,
            7,27,27,95,27,27,168,71,27,48,
            27,167,1,27,158,105,7,105,138,162,
            47,52,138,27,88,48,48,48,48,48,
            51,48,48,48,27,27,27,27,27,27,
            27,27,27,27,27,152,101,20,27,140,
            105,27,48,27,27,27,168,48,168,28,
            89,27,89,89,65,95,27,95,122,27,
            27,105,72,167,77,7,13,27,27,138,
            33,152,138,52,51,33,48,48,48,48,
            48,48,48,48,48,48,48,152,152,103,
            88,88,35,35,74,89,48,48,48,48,
            48,48,48,48,48,48,48,48,48,48,
            48,48,48,89,48,43,43,100,109,85,
            72,105,30,168,152,27,152,152,81,95,
            48,158,122,13,72,48,7,33,27,48,
            48,52,51,48,109,149,152,152,152,52,
            27,27,27,27,27,27,27,27,27,27,
            27,27,27,27,27,27,151,152,107,132,
            46,168,30,95,89,95,95,72,168,48,
            27,72,52,52,105,134,107,27,27,48,
            85,152,13,59,30,168,152,27,122,48,
            46,152,72,45,27,7,48,63,152,30,
            168,95,13,37,56,52,7,48,95,152,
            72,52,95
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            83,81,80,74,79,78,1,0,36,38,
            40,0,68,0,105,0,36,2,101,83,
            82,81,80,74,79,78,0,24,47,2,
            61,0,25,0,90,0,115,0,24,2,
            121,0,46,0,89,67,2,6,0,2,
            6,39,0,108,0,6,67,0,117,0,
            109,0,119,0,2,24,1,29,93,0,
            2,41,0,2,107,0,2,55,87,0,
            29,1,69,41,2,24,0,55,2,27,
            0,111,86,0,1,29,2,30,0,23,
            36,43,58,59,2,0,2,24,40,53,
            0,74,70,71,72,73,62,48,0,45,
            38,43,36,2,0,38,45,36,43,40,
            0,36,43,59,58,40,0,75,0,2,
            24,47,28,0,120,24,2,0,58,59,
            2,23,0,24,2,103,0,96,2,55,
            0,112,2,24,0,27,2,18,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,87,9,3,10,11,8,6,
            7,68,81,82,83,84,12,13,48,64,
            76,92,69,93,44,55,60,63,72,77,
            45,46,49,50,51,57,58,59,65,71,
            47,52,56,61,62,66,67,74,75,78,
            79,80,1,54,70,73,42,91,29,90,
            31,16,17,30,89,4,14,15,18,19,
            20,21,94,22,23,24,25,26,53,5,
            27,28,32,33,34,35,36,37,38,39,
            40,41,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            99,0,0,0,0,101,105,106,107,108,
            109,110,111,112,113,114,115,98,116,117,
            0,118,96,127,135,0,100,123,119,122,
            0,0,0,0,0,157,0,160,95,0,
            97,154,156,0,158,159,126,134,0,0,
            0,145,155,121,149,168,171,172,173,0,
            0,137,144,0,161,167,0,0,125,138,
            139,140,141,146,166,170,103,129,130,131,
            132,133,136,142,143,0,148,153,174,102,
            104,120,124,128,0,147,151,0,0,152,
            162,165,179,0,181,0,0,0,0,150,
            0,163,164,169,0,175,176,0,177,178,
            180,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            82,113,166,92,35,41,121,12,136,21,
            51,69,28,47,103,145,162,181,185,149,
            1,1,32,56,79,189,6,107,156,127,
            156,99,59,59,59
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            90,90,90,90,4,4,90,18,142,26,
            4,26,26,4,101,90,26,26,4,153,
            4,4,26,4,26,26,9,110,159,130,
            174,101,66,61,74
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            72,70,6,72,46,46,70,63,33,60,
            46,38,60,46,87,28,7,6,6,20,
            119,118,58,46,36,4,89,87,8,34,
            6,87,38,45,38
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            58,58,58,58,65,65,58,58,79,60,
            65,60,60,65,22,58,60,60,65,59,
            65,65,60,65,60,60,61,1,60,30,
            60,22,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            112,112,9,112,87,87,112,65,72,91,
            87,98,91,87,5,71,9,9,9,39,
            1,3,91,87,98,9,67,5,12,72,
            9,5,98,100,98
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            147,53,0,95,0,209,95,0,31,144,
            0,161,184,95,6,160,0,97,0,0,
            158,95,2,151,0,96,0,158,95,2,
            0,169,2,0,115,23,195,95,53,0,
            115,195,95,23,53,0,115,23,53,0,
            115,195,95,53,0,115,53,0,129,0,
            2,0,163,96,0,2,96,0,158,95,
            2,129,0,2,0,161,96,0,145,2,
            0,161,192,95,6,94,204,54,0,97,
            0,161,192,95,6,204,54,0,148,0,
            98,0,203,95,148,0,95,148,0,150,
            98,0,188,95,6,202,94,201,167,0,
            188,95,6,201,167,0,123,35,0,77,
            2,100,96,98,0,123,116,120,2,38,
            0,53,122,0,186,95,6,0,120,82,
            112,0,29,117,0,170,2,0,96,106,
            0,170,2,12,0,161,184,95,6,116,
            170,2,0,96,3,0,104,0,97,0,
            200,2,99,0,120,53,99,0,120,2,
            0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1303,0,696,0,2153,1341,2120,0,2193,2180,
            1173,2099,2006,1486,519,455,701,634,1956,1752,
            1349,565,1308,796,1984,1246,1968,1617,2088,2072,
            2059,2026,2015,1835,1911,1808,1699,410,1277,1256,
            1225,339,1204,1181,1150,1129,1106,1083,1060,1037,
            1014,991,968,945,922,899,876,853,538,718,
            746,312,771,611,678,653,588,496,473,0,
            1862,1892,1870,1848,1826,1789,1764,1716,1530,1680,
            1658,1419,1444,1346,1304,0,970,963,743,586,
            521,1610,1994,1481,1998,1366,0,330,371,1906,
            1610,1736,1481,1683,1366,1597,1895,792,1544,387,
            0,769,312,1542,371,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,199,95,117,213,194,171,172,167,173,
            56,55,174,54,175,176,95,2,1,129,
            95,6,201,179,179,204,179,146,133,145,
            95,129,136,2,206,194,187,178,131,95,
            138,95,94,6,94,6,133,5,146,2,
            53,95,95,57,61,146,186,39,31,33,
            37,36,30,35,40,38,122,6,34,32,
            94,117,95,202,95,6,95,5,95,95,
            23,115,95,100,2,12,18,17,8,7,
            5,9,11,10,99,102,104,103,106,105,
            108,107,110,109,112,158,117,95,159,214,
            6,160,5,138,131,4,120,95,94,2,
            2,123,2,2,95,59,147,59,95,185,
            94,6,188,148,189,95,192,94,193,95,
            168,205,95,115,195,168,92,91,90,88,
            89,87,86,85,84,83,61,170,120,148,
            2,2,80,66,2,53,68,67,5,62,
            63,8,7,75,74,72,71,70,69,76,
            9,78,77,82,81,151,152,2,95,57,
            95,6,140,154,120,30,120,120,186,59,
            57,95,95,192,161,61,57,168,57,195,
            23,115,5,116,95,2,170,170,200,120,
            103,103,102,102,105,105,104,104,104,104,
            107,106,109,108,120,110,2,169,95,146,
            95,154,111,116,2,116,116,188,203,59,
            145,161,115,115,6,146,95,116,116,59,
            95,158,184,95,111,154,120,123,57,59,
            95,158,161,57,209,66,53,210,154,111,
            116,79,184,134,61,147,66,53,116,154,
            161,147,116
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_in_statement",
            "expression_list_actual",
            "constant_expression",
            "statement",
            "compound_statement",
            "block_item_list",
            "block_item",
            "declaration",
            "declaration_specifiers",
            "init_declarator_list",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "init_declarator",
            "complete_declarator",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "knr_direct_declarator",
            "array_modifier",
            "function_direct_declarator",
            "parameter_type_list",
            "function_declarator",
            "identifier_list",
            "knr_function_declarator",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "external_declaration_list",
            "external_declaration",
            "declaration_list",
            "function_body"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 24,
           SCOPE_UBOUND      = 34,
           SCOPE_SIZE        = 35,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 293,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2642,
           MAX_LA            = 2147483647,
           NUM_RULES         = 311,
           NUM_NONTERMINALS  = 122,
           NUM_SYMBOLS       = 215,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1981,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 73,
           EOLT_SYMBOL       = 73,
           ACCEPT_ACTION     = 2309,
           ERROR_ACTION      = 2331;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
