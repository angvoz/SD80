/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99SizeofExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, C99SizeofExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,8,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,1,4,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,5,9,8,
            3,2,2,2,3,2,4,2,2,2,
            2,2,1,1,1,1,2,1,2,2,
            2,1,2,2,1,2,2,1,2,2,
            1,2,2,1,3,1,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,6,8,
            0,0,1,1,3,3,3,0,1,0,
            1,2,4,2,1,1,1,3,1,1,
            2,3,7,8,0,1,0,1,3,1,
            3,1,1,1,1,1,1,3,1,1,
            1,1,1,3,1,2,2,1,5,3,
            1,3,5,1,3,1,3,2,4,3,
            5,4,6,6,3,5,1,3,4,5,
            6,0,1,2,1,3,1,1,3,2,
            1,1,1,1,2,1,2,3,1,1,
            1,3,1,2,2,2,3,4,5,1,
            7,3,0,0,1,1,3,3,4,1,
            1,2,3,2,3,2,1,0,1,2,
            1,1,1,1,1,2,4,3,6,2,
            4,1,1,-36,0,0,0,0,0,0,
            0,0,0,0,-156,0,0,0,0,0,
            0,0,0,0,0,0,-114,0,-74,-2,
            -33,0,0,0,0,-54,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-137,0,-115,0,
            -116,0,-4,0,0,0,0,0,-6,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-120,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-184,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-55,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-110,0,0,0,0,0,0,
            0,0,0,0,0,0,-80,0,-14,-104,
            -133,-29,0,0,-30,0,-16,0,-193,0,
            0,0,0,-117,0,-17,0,-157,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-72,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-118,
            0,0,0,-5,0,0,0,0,0,0,
            0,0,-18,-69,0,0,0,-7,0,0,
            0,0,0,0,0,0,-180,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-3,0,0,
            0,0,0,0,0,0,0,0,-132,0,
            0,0,0,0,0,0,0,0,-51,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-34,0,-107,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-75,-125,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -129,0,-165,0,0,-85,0,-48,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-67,0,0,0,0,
            0,0,-68,0,0,0,0,-52,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-19,0,0,-20,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -159,0,-182,0,0,0,0,0,0,0,
            -27,0,0,0,0,0,0,0,0,0,
            0,-21,0,0,0,0,0,0,0,0,
            0,-56,0,0,0,0,0,0,0,0,
            0,0,-22,0,0,0,0,0,0,0,
            0,0,-57,0,0,0,0,0,0,0,
            0,0,0,-23,0,0,0,0,0,0,
            0,0,0,-58,0,0,0,0,0,0,
            0,0,0,0,-24,0,0,0,0,0,
            0,0,0,0,-59,0,0,0,0,0,
            0,0,0,0,0,-25,0,0,0,0,
            0,0,0,0,0,-60,0,0,0,0,
            0,0,0,0,0,0,-26,0,0,0,
            0,0,0,0,0,0,-61,0,0,0,
            0,0,0,0,0,0,0,-86,0,0,
            0,0,0,0,0,0,0,-62,0,0,
            0,0,0,0,0,0,0,0,-87,0,
            0,0,0,0,0,0,0,0,-63,0,
            0,0,0,0,0,0,0,0,0,-88,
            0,0,0,0,0,0,0,0,0,-64,
            0,0,0,0,0,0,0,0,0,0,
            -89,0,0,0,0,0,0,0,0,0,
            -65,0,0,0,0,0,0,0,0,0,
            0,-90,0,0,0,0,0,0,0,0,
            0,-66,0,0,0,0,0,0,0,0,
            0,0,-91,0,0,0,0,0,0,0,
            0,0,-119,0,0,0,0,0,0,0,
            0,0,0,-92,0,0,0,0,0,0,
            0,0,0,-142,0,0,0,0,0,0,
            0,0,0,0,-93,0,0,0,0,0,
            0,0,0,0,-143,0,0,0,0,0,
            0,0,0,0,0,-94,0,0,0,0,
            0,0,0,0,0,-160,0,0,0,0,
            0,0,0,0,0,0,-162,0,0,0,
            0,0,0,0,0,-183,0,0,0,0,
            0,0,0,0,0,0,-174,0,0,0,
            0,0,0,0,0,-95,-78,0,0,-136,
            -96,0,-8,0,0,0,0,0,0,0,
            -192,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -201,0,0,0,0,0,0,0,0,0,
            0,-97,0,0,0,0,0,0,0,0,
            0,-155,0,-98,-99,0,0,-9,0,0,
            0,0,0,0,0,-209,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-128,-46,0,0,
            0,0,0,0,0,0,0,0,-49,0,
            0,0,0,0,0,0,0,0,0,-111,
            0,0,0,-108,-173,-146,-122,-127,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-189,0,0,-1,0,0,0,0,-100,
            0,0,0,0,0,0,0,-101,0,0,
            0,0,0,0,0,-171,0,0,0,0,
            -113,-131,0,-185,0,0,0,0,0,0,
            0,0,0,0,0,-102,-135,-103,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-106,0,0,0,0,
            -50,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-208,0,-121,0,0,
            -130,0,0,-134,-139,-152,0,-42,0,0,
            0,0,0,0,0,0,0,0,-47,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-12,0,0,0,0,
            0,0,0,-43,0,0,0,0,0,0,
            0,0,0,0,-44,0,0,0,0,0,
            0,0,0,0,0,-45,0,0,0,0,
            0,0,0,0,0,0,-203,0,0,-10,
            0,0,0,0,0,0,0,0,-37,0,
            0,0,0,0,0,0,0,-38,0,0,
            0,0,0,0,0,0,-73,-170,-138,0,
            0,0,0,0,0,0,-158,0,0,0,
            -126,-178,-186,0,-76,-179,-177,-124,-190,0,
            0,-71,0,-145,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-210,0,0,-202,
            -109,-147,-35,-123,0,-11,0,0,0,0,
            0,0,0,0,-207,-31,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-13,0,0,0,
            0,0,0,0,0,0,0,-39,0,0,
            0,0,0,0,0,0,0,-83,-81,0,
            0,-40,0,0,0,0,0,0,0,-41,
            0,0,0,0,0,0,0,-70,0,0,
            0,0,0,0,0,-112,0,-196,-169,0,
            -140,-15,-176,0,-141,-154,0,-144,-77,0,
            -150,-151,0,0,-148,0,0,-28,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-161,0,0,0,0,0,0,
            0,-149,0,0,-79,0,-187,0,-211,0,
            0,0,0,-163,0,0,-105,0,-82,0,
            0,0,0,-84,0,0,0,0,0,0,
            -153,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-32,0,-188,-175,-204,-166,-164,-53,
            -167,-172,-168,0,-181,0,0,-194,0,0,
            0,-195,0,-197,-191,-198,-199,-200,-205,0,
            0,0,0,0,0,0,0,-206,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            87,11,101,24,24,23,23,32,32,69,
            69,1,1,2,2,2,2,3,3,3,
            4,5,5,5,5,5,5,5,5,51,
            51,70,6,6,6,6,6,6,6,6,
            6,6,7,7,8,8,8,8,9,9,
            9,10,10,10,12,12,12,12,12,13,
            13,13,14,14,15,15,16,16,17,17,
            18,18,19,19,20,20,20,20,20,20,
            20,20,20,20,20,20,102,45,40,88,
            88,73,73,46,103,103,103,103,103,103,
            103,104,104,104,105,105,110,110,111,111,
            106,106,107,107,107,113,113,108,108,108,
            108,109,109,109,109,109,112,112,25,25,
            25,25,25,28,28,28,79,79,74,74,
            74,74,75,75,75,76,76,76,77,77,
            77,78,78,78,114,114,115,115,116,29,
            31,31,31,31,31,52,54,54,54,54,
            54,54,54,54,54,54,54,54,63,60,
            60,89,90,64,64,61,61,61,65,80,
            80,81,81,66,66,66,48,91,91,82,
            83,83,83,62,62,92,84,84,85,85,
            67,67,21,22,22,22,30,47,47,33,
            33,33,33,36,36,38,34,34,35,39,
            39,117,117,37,118,118,93,93,26,26,
            26,26,26,26,26,26,26,86,49,49,
            49,49,27,56,56,55,55,55,57,57,
            50,50,94,94,71,71,58,58,58,41,
            41,41,42,43,43,43,44,44,44,44,
            53,53,53,59,95,72,72,72,72,68,
            96,97,97,98,98,99,99,119,119,120,
            120,121,121,121,121,123,123,122,122,122,
            124,124,87,87,1,878,17,21,18,469,
            857,44,486,477,714,587,543,752,717,794,
            773,836,815,74,91,134,212,596,589,144,
            31,513,136,133,135,159,506,20,17,21,
            18,469,42,44,486,477,714,28,543,752,
            717,794,773,1248,1558,274,138,629,165,201,
            186,201,185,441,142,145,148,151,1097,506,
            20,17,21,18,469,42,40,373,1445,1579,
            1625,1639,1644,666,434,20,17,21,18,469,
            857,44,486,477,714,367,543,752,717,794,
            773,836,815,74,280,482,20,17,21,18,
            469,857,44,486,477,714,367,543,752,717,
            794,773,836,815,74,280,506,20,17,21,
            18,469,42,44,486,477,714,285,543,752,
            717,794,1276,1325,358,20,17,21,18,469,
            42,36,286,1437,1614,291,1100,387,285,579,
            14,14,201,31,1325,201,31,57,245,201,
            1442,394,1651,286,662,1324,157,1702,332,20,
            17,21,18,469,857,44,486,477,714,367,
            543,752,717,794,773,836,815,74,280,275,
            20,17,21,18,469,857,44,486,477,714,
            1481,543,752,717,794,773,836,815,74,1214,
            201,187,369,238,530,20,17,21,18,469,
            41,287,25,6,104,24,209,1325,506,20,
            17,21,18,469,42,39,288,458,20,17,
            21,18,469,857,44,486,477,714,22,543,
            752,717,794,773,836,815,74,280,506,20,
            17,21,18,469,857,44,486,477,714,124,
            543,752,717,794,773,836,815,74,91,506,
            20,17,21,18,469,42,44,486,477,714,
            289,543,752,717,1154,513,1325,554,20,17,
            21,18,469,857,44,486,477,714,1484,543,
            752,717,794,773,836,815,74,1448,19,327,
            299,20,17,21,18,469,857,44,486,477,
            714,373,543,752,717,794,773,836,815,74,
            1578,189,178,52,239,275,189,178,506,20,
            17,21,18,469,42,44,486,477,714,1326,
            543,1096,134,212,253,212,513,134,212,136,
            133,135,159,513,137,133,135,159,506,20,
            17,21,18,469,42,44,486,477,714,1278,
            543,752,1155,138,30,165,23,636,139,1443,
            165,142,145,148,151,1097,143,146,149,152,
            1097,201,294,201,296,1445,1579,1625,1639,1644,
            666,506,20,17,21,18,469,857,44,486,
            477,714,200,543,752,717,794,773,836,815,
            74,92,506,20,17,21,18,469,857,44,
            486,477,714,191,543,752,717,794,773,836,
            815,74,85,506,20,17,21,18,469,857,
            44,486,477,714,344,543,752,717,794,773,
            836,815,74,84,506,20,17,21,18,469,
            857,44,486,477,714,243,543,752,717,794,
            773,836,815,74,83,506,20,17,21,18,
            469,857,44,486,477,714,171,543,752,717,
            794,773,836,815,74,82,506,20,17,21,
            18,469,857,44,486,477,714,547,543,752,
            717,794,773,836,815,74,81,506,20,17,
            21,18,469,857,44,486,477,714,578,543,
            752,717,794,773,836,815,74,80,506,20,
            17,21,18,469,857,44,486,477,714,194,
            543,752,717,794,773,836,815,74,79,506,
            20,17,21,18,469,857,44,486,477,714,
            199,543,752,717,794,773,836,815,74,78,
            506,20,17,21,18,469,857,44,486,477,
            714,416,543,752,717,794,773,836,815,74,
            77,506,20,17,21,18,469,857,44,486,
            477,714,488,543,752,717,794,773,836,815,
            74,76,506,20,17,21,18,469,857,44,
            486,477,714,490,543,752,717,794,773,836,
            815,74,75,506,20,17,21,18,469,857,
            44,486,477,714,514,543,752,717,794,773,
            836,815,74,73,506,20,17,21,18,469,
            857,44,486,477,714,241,543,752,717,794,
            773,836,815,74,1688,506,20,17,21,18,
            469,857,44,486,477,714,601,543,752,717,
            794,773,836,815,74,1691,506,20,17,21,
            18,469,42,44,486,477,714,587,543,752,
            717,794,773,836,815,93,506,20,17,21,
            18,469,42,44,486,477,714,421,543,752,
            717,794,773,836,815,93,245,118,1232,282,
            711,13,1695,506,20,17,21,18,469,42,
            38,506,20,17,21,18,469,42,44,486,
            477,714,1698,543,752,717,794,773,836,815,
            93,506,20,17,21,18,469,42,44,486,
            477,714,50,543,752,717,794,773,836,815,
            93,325,612,1442,614,671,194,211,506,20,
            17,21,18,469,42,37,506,20,17,21,
            18,469,42,44,486,477,714,201,543,752,
            717,794,773,836,815,93,337,113,506,20,
            17,21,18,469,42,44,486,1025,1622,506,
            20,17,21,18,469,42,44,486,477,714,
            513,1101,202,273,104,587,207,44,513,208,
            217,1482,220,1585,222,223,228,1569,266,639,
            339,271,281,272,262,382,1447,1446,240,276,
            305,278,273,1687,1575,263,578,179,324,217,
            1482,220,1585,222,223,228,151,266,639,339,
            271,679,116,1693,52,217,1482,220,1585,222,
            223,228,1262,661,1210,87,600,14,97,1480,
            312,260,273,1318,277,253,212,1187,1152,218,
            1482,220,1585,222,223,228,676,268,639,339,
            271,506,20,17,21,18,469,42,44,486,
            477,714,258,1142,197,199,281,1582,737,1321,
            1568,670,340,1708,205,738,739,1687,506,20,
            17,21,18,469,42,44,486,477,941,506,
            20,17,21,18,469,42,44,486,1046,217,
            1482,220,1585,222,223,228,530,20,17,21,
            18,469,34,1480,506,20,17,21,18,469,
            42,44,486,477,962,506,20,17,21,18,
            469,42,44,486,477,983,506,20,17,21,
            18,469,42,44,486,477,1004,728,198,199,
            506,20,17,21,18,469,42,36,1687,506,
            20,17,21,18,469,42,44,899,506,20,
            17,21,18,469,42,44,920,326,679,14,
            217,1482,220,1585,222,223,228,697,1566,1627,
            1067,695,700,710,1693,232,724,721,104,721,
            276,230,44,273,358,20,17,21,18,469,
            42,36,254,212,254,212,134,212,266,639,
            339,271,242,141,133,135,159,733,246,1296,
            712,52,499,160,52,1210,506,20,17,21,
            18,469,42,35,1452,287,489,140,1705,165,
            1709,1637,253,212,1318,253,212,578,227,273,
            218,1482,220,1585,222,223,228,530,20,17,
            21,18,469,33,266,639,339,271,506,20,
            17,21,18,469,42,47,89,1441,439,414,
            1441,265,506,20,17,21,18,469,42,46,
            506,20,17,21,18,469,42,45,409,20,
            17,21,18,469,42,43,567,640,719,567,
            1014,44,14,612,1442,698,14,661,104,627,
            661,357,513,314,693,720,663,1573,14,254,
            212,1187,661,1296,1187,1789,1296,196,1689,314,
            134,212,241,530,371,279,1187,144,133,135,
            159,226,87,196,696,1637,258,615,1256,258,
            1483,1218,44,1321,1218,632,1321,588,87,158,
            484,259,1789,615,14,1789,1483,242,661,661,
            208,1789,1789,341,666,415,134,212,1789,1296,
            1789,48,1187,147,133,135,159,1449,1446,686,
            134,212,661,273,1318,134,212,150,133,135,
            159,1256,153,133,135,159,196,258,268,639,
            339,271,1704,14,1321,142,95,44,104,707,
            14,104,14,513,578,104,661,661,104,1087,
            1264,578,711,1685,513,587,365,587,446,587,
            196,196,243,292,1296,244,224,191,587,293,
            1706,1789,295,87,281,1789,1789,229,544,233,
            87,1215,1686,1087,1087,1240,1477,203,1789,180,
            1789,204,1789,1789,1789,1789,1789,1789,1789,1789,
            1629,191,192,1718,1789,1789,1789,1789,1789,1789,
            1789,1789,1789,1789,1789,1707,1686,1789,1789,1789,
            1789,1789,1789,1789,1789,1789,1789,193,1789,0,
            20,178,0,1,2014,0,1,2025,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,0,0,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,0,
            0,31,32,33,34,35,36,37,38,39,
            40,41,42,0,44,45,46,0,1,0,
            3,0,5,6,7,8,0,6,7,8,
            55,56,57,58,17,9,10,55,56,57,
            58,24,25,26,27,28,47,48,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,0,1,0,3,51,5,
            6,7,8,0,55,56,57,58,5,13,
            80,17,0,1,2,0,4,0,24,25,
            26,27,28,0,12,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,0,1,0,3,51,5,6,7,8,
            0,1,2,50,4,12,0,0,17,0,
            4,2,12,4,49,24,25,26,27,28,
            0,12,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,0,1,
            0,3,51,0,6,7,8,4,0,0,
            0,1,4,3,0,17,0,1,2,53,
            54,5,24,25,26,27,28,13,12,31,
            32,33,34,35,36,37,38,39,40,41,
            42,0,44,45,46,65,30,6,7,8,
            0,0,0,2,0,4,53,54,17,9,
            10,53,54,12,64,24,25,26,27,28,
            61,62,31,32,33,34,35,36,37,38,
            39,40,41,42,0,1,2,3,4,5,
            0,1,2,9,10,11,0,1,14,15,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,5,0,61,62,9,10,11,
            68,69,14,15,16,17,18,19,20,21,
            22,23,0,0,50,0,0,2,2,0,
            5,0,1,2,3,4,5,12,12,59,
            9,10,11,0,13,14,15,16,50,18,
            19,20,21,22,23,30,0,0,1,2,
            3,4,5,59,0,0,9,10,11,5,
            0,14,15,16,43,18,19,20,21,22,
            23,0,1,2,3,4,0,1,65,3,
            9,10,11,29,30,14,15,16,0,18,
            19,20,21,22,23,49,63,50,0,1,
            2,3,4,0,1,0,3,9,10,11,
            0,13,14,15,16,5,18,19,20,21,
            22,23,51,0,1,2,3,4,0,1,
            0,3,9,10,11,0,13,14,15,16,
            5,18,19,20,21,22,23,0,1,2,
            3,4,47,48,0,0,9,10,11,29,
            13,14,15,16,29,18,19,20,21,22,
            23,0,1,2,3,4,66,0,0,0,
            9,10,11,5,13,14,15,16,0,18,
            19,20,21,22,23,0,1,2,3,4,
            12,66,0,0,9,10,11,5,30,14,
            15,16,0,18,19,20,21,22,23,0,
            1,2,3,4,47,48,47,48,9,10,
            11,0,30,14,15,16,0,18,19,20,
            21,22,23,0,1,2,3,4,0,0,
            47,48,9,10,11,0,0,14,15,16,
            4,18,19,20,21,22,23,0,0,2,
            2,4,5,6,7,8,0,0,1,12,
            12,5,14,15,17,0,1,0,3,0,
            0,24,25,26,27,28,60,30,13,9,
            10,0,1,0,3,49,70,71,72,73,
            74,75,76,77,78,79,0,0,0,43,
            52,0,6,7,8,0,49,6,7,8,
            12,0,1,17,3,67,11,0,17,0,
            24,25,26,27,28,24,25,26,27,28,
            0,0,1,64,3,0,6,7,8,0,
            0,6,7,8,13,0,63,17,0,4,
            52,11,17,5,24,25,26,27,28,24,
            25,26,27,28,0,0,0,0,29,0,
            6,7,8,6,7,8,0,12,30,0,
            0,0,6,7,8,6,7,8,0,0,
            0,2,0,0,6,7,8,0,1,2,
            0,12,0,1,2,5,0,0,0,29,
            4,0,0,0,0,0,0,52,0,29,
            13,13,29,0,13,13,60,13,0,60,
            0,0,0,0,0,0,0,0,0,0,
            59,0,0,43,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1789,1800,1572,1801,1400,59,2002,2003,2004,1158,
            1103,1486,61,1,1517,1356,534,1951,1802,1803,
            1804,1805,548,379,1952,1950,2005,1953,1949,54,
            1789,1956,1961,1960,1958,1959,1957,1962,1963,1955,
            1964,1965,1966,252,1538,1539,467,1789,1,60,
            1,1789,190,1,1,1,51,2002,2003,2004,
            1386,1375,1364,1328,1,1418,1409,1386,1375,1364,
            1328,1,1,1,1,1,1188,1339,1,1,
            1,1,1,1,1,1,1,1,1,1,
            190,1,1,1,1789,1,1789,1,1984,189,
            1,1,1,1789,1386,1375,1364,1328,1793,470,
            1779,1,261,2014,1216,1,1,181,1,1,
            1,1,1,182,509,1,1,1,1,1,
            1,1,1,1,1,1,1,189,1,1,
            1,1789,1,270,1,1984,190,1,1,1,
            267,2014,1216,1792,252,509,48,284,1,264,
            1550,1427,509,1,2046,1,1,1,1,1,
            70,509,1,1,1,1,1,1,1,1,
            1,1,1,1,190,1,1,1,1789,1800,
            68,1801,1984,50,2002,2003,2004,1550,49,62,
            1789,1800,1550,1801,1789,1951,1,1783,1216,1542,
            1528,1795,1952,1950,2005,1953,1949,1576,509,1956,
            1961,1960,1958,1959,1957,1962,1963,1955,1964,1965,
            1966,128,1538,1539,467,436,1794,2002,2003,2004,
            53,267,72,1427,63,252,1542,1528,1951,1418,
            1409,1542,1528,509,599,1952,1950,2005,1953,1949,
            1301,1199,1956,1961,1960,1958,1959,1957,1962,1963,
            1955,1964,1965,1966,1,1800,1572,1801,454,1793,
            1,2014,1397,1158,1103,1486,1789,2026,1517,1356,
            534,617,1802,1803,1804,1805,548,379,1789,1800,
            1572,1801,1454,1793,1789,1301,1199,1158,1103,1486,
            346,1690,1517,1356,534,1035,1802,1803,1804,1805,
            548,379,1789,71,1792,1,269,1427,1261,1789,
            1795,1,1800,1572,1801,1400,29,509,509,1131,
            1158,1103,1486,66,2833,1517,1356,534,1792,1802,
            1803,1804,1805,548,379,1794,1,1789,1800,1572,
            1801,1400,1793,993,1789,1789,1158,1103,1486,1795,
            1789,1517,1356,534,29,1802,1803,1804,1805,548,
            379,1789,1,1,1,1,184,2844,436,2844,
            1,1,1,1495,1794,1,1,1,1789,1,
            1,1,1,1,1,2045,698,1792,1789,1800,
            1572,1801,1400,183,2845,58,2845,1158,1103,1486,
            1,470,1517,1356,534,1799,1802,1803,1804,1805,
            548,379,2102,1,1800,1572,1801,1400,205,2847,
            88,2847,1158,1103,1486,1789,2833,1517,1356,534,
            1799,1802,1803,1804,1805,548,379,1789,1800,1572,
            1801,1400,1188,1339,1789,1789,1158,1103,1486,741,
            2833,1517,1356,534,1316,1802,1803,1804,1805,548,
            379,1,1800,1572,1801,1400,1798,57,1,56,
            1158,1103,1486,90,2833,1517,1356,534,219,1802,
            1803,1804,1805,548,379,1789,1800,1572,1801,1400,
            509,1798,1789,55,1158,1103,1486,1795,90,1517,
            1356,534,1789,1802,1803,1804,1805,548,379,1789,
            1800,1588,1801,1400,1188,1339,1188,1339,1158,1103,
            1486,1789,1794,1517,1356,534,42,1802,1803,1804,
            1805,548,379,1,1800,1572,1801,1400,1789,1789,
            1188,1339,1158,1103,1486,1789,1,1517,1356,534,
            252,1802,1803,1804,1805,548,379,20,32,1780,
            1496,1780,1780,178,178,178,1789,1,1786,1780,
            1683,1797,1815,1816,178,1789,1800,1789,1801,69,
            52,178,178,178,178,178,972,1780,471,1418,
            1409,207,1800,67,1801,2046,951,930,909,888,
            867,825,846,804,783,762,129,1789,1789,1796,
            475,130,2002,2003,2004,64,2046,2002,2003,2004,
            1056,206,479,1951,479,472,668,1789,1951,1789,
            1952,1950,2005,1953,1949,1952,1950,2005,1953,1949,
            131,1789,1800,599,1801,132,2002,2003,2004,255,
            65,2002,2003,2004,1277,1789,698,1951,1,1217,
            731,668,1951,1795,1952,1950,2005,1953,1949,1952,
            1950,2005,1953,1949,247,290,1789,248,1581,210,
            2002,2003,2004,1,1,1,249,1076,1794,250,
            30,200,1,1,1,2002,2003,2004,251,221,
            30,1428,1789,206,2002,2003,2004,1,2014,1397,
            283,509,252,2014,1397,1429,1789,1789,1789,488,
            1571,188,188,1789,188,1789,1789,733,1789,1818,
            1634,1692,2744,1789,184,183,557,205,1789,1111,
            1789,1789,1789,1789,1789,1789,1789,1789,1789,1789,
            1166,1789,1789,1429
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            199,1,106,41,106,106,106,106,106,106,
            106,106,106,3,340,23,20,27,25,33,
            31,35,34,37,36,9,106,340,253,253,
            292,106,189,189,286,340,106,106,106,106,
            106,106,106,106,106,106,106,106,106,106,
            106,106,106,106,106,106,106,106,106,106,
            106,106,106,106,106,106,189,189,45,82,
            290,100,223,187,186,261,273,96,273,96,
            96,273,96,273,354,143,20,20,25,25,
            25,25,23,23,31,27,27,34,33,197,
            36,35,98,80,286,290,123,45,377,104,
            189,311,226,96,253,253,96,253,106,80,
            290,281,377,45,103,100,189,284,354,188,
            228,98,48,98,217,219,390,75,98,281,
            281,106,106,45,104,223,382,381,290,228,
            189,98,48,217,217,75,78,259,253,106,
            389,75,80,281,377,45,45,189,311,226,
            284,48,75,192,48,217,219,256,219,82,
            45,253,106,80,377,281,228,48,194,219,
            75,106,253,45,219,281,189,188,75,385,
            106,384,119,290,75,75,254,194,106,119,
            219
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,12,2,52,67,14,15,60,70,
            71,72,73,74,76,75,77,78,79,4,
            53,54,9,10,48,47,55,56,57,58,
            61,62,11,63,64,65,43,66,68,69,
            59,30,80,29,50,5,0,24,31,6,
            32,44,25,33,26,34,35,27,7,36,
            37,17,45,28,46,38,39,8,40,41,
            42,1,3,51,5,43,0,5,43,12,
            52,14,15,11,4,9,10,22,23,16,
            2,18,19,20,21,1,3,13,0,6,
            7,8,17,50,5,18,19,20,21,3,
            14,15,11,9,10,22,23,16,4,2,
            1,0,6,7,8,2,18,19,20,21,
            1,3,14,15,11,4,9,10,22,23,
            16,0,7,17,28,8,27,26,25,6,
            24,52,67,14,15,11,9,10,53,54,
            47,48,55,56,57,58,61,62,63,64,
            65,68,69,60,70,71,72,73,74,75,
            76,77,78,79,4,2,12,29,30,5,
            0,66,5,4,1,2,59,0,16,18,
            19,20,21,1,3,2,14,15,11,4,
            9,10,22,23,51,0,1,3,5,43,
            29,0,4,2,12,30,5,24,31,6,
            32,44,25,33,26,34,35,27,7,36,
            37,17,45,28,46,38,39,8,40,41,
            42,49,3,1,0,5,29,43,60,0,
            39,31,36,34,35,33,32,37,38,40,
            41,42,59,66,28,25,17,24,27,26,
            6,7,8,29,1,5,30,2,12,4,
            0,5,30,16,18,19,20,21,1,3,
            2,14,15,11,4,9,10,22,23,0,
            4,24,31,6,32,44,25,33,26,34,
            35,27,7,36,37,17,45,28,46,38,
            39,8,40,41,42,1,3,49,0,16,
            18,19,20,21,2,14,15,11,4,9,
            10,22,23,1,3,44,45,46,39,31,
            36,34,35,33,32,37,38,40,41,42,
            28,25,17,24,27,26,6,7,8,0,
            2,30,12,59,66,5,29,0,60,12,
            52,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            61,38,20,38,20,20,20,20,20,20,
            20,20,20,38,96,38,38,38,38,38,
            38,38,38,38,38,38,20,96,15,15,
            85,97,71,71,74,1,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,97,20,20,20,20,20,20,20,
            20,20,20,20,20,20,71,71,24,20,
            80,22,73,11,11,44,45,50,45,89,
            89,45,88,45,39,38,38,38,38,38,
            38,38,38,38,38,38,38,38,38,38,
            38,38,38,59,108,38,28,24,83,23,
            71,91,70,7,7,7,7,7,20,18,
            38,68,83,24,23,78,71,55,31,38,
            93,26,59,38,59,52,13,59,38,68,
            59,20,20,24,23,54,11,11,80,93,
            71,38,112,59,7,9,17,38,7,20,
            100,9,59,59,83,24,24,71,91,70,
            64,59,9,47,116,7,52,38,38,19,
            24,7,20,18,83,78,102,112,57,52,
            9,20,7,24,52,78,71,71,9,48,
            20,38,57,80,9,9,38,57,20,66,
            106
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            79,77,76,64,75,74,1,0,32,0,
            26,0,97,0,70,0,68,11,59,5,
            0,11,5,24,0,90,0,5,11,0,
            79,78,77,76,64,75,74,0,64,60,
            61,62,63,52,28,0,11,69,0,89,
            0,51,0,23,43,42,36,34,11,0,
            11,87,0,43,42,36,34,27,0,11,
            23,0,23,42,43,11,0,21,0,27,
            49,0,56,0,11,88,0,92,65,0,
            27,49,11,25,0,48,11,45,0,99,
            0,93,11,25,0,95,0,43,42,27,
            0,81,11,48,0,11,48,66,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,10,11,
            8,1,3,6,7,68,69,81,82,83,
            84,12,13,44,55,60,63,72,42,90,
            47,52,56,61,62,66,67,74,75,78,
            79,80,91,54,70,73,16,17,30,89,
            93,4,14,15,18,19,20,21,29,31,
            22,23,24,25,26,92,5,27,28,32,
            33,34,35,36,37,38,39,40,41,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            100,0,0,0,102,106,107,108,109,110,
            0,111,112,113,114,115,116,117,0,118,
            128,0,97,96,121,149,0,127,0,0,
            0,98,145,147,0,148,0,0,0,0,
            158,159,160,0,101,120,136,140,146,155,
            0,130,135,0,150,153,154,157,0,131,
            132,133,134,137,0,139,144,161,99,103,
            104,105,119,122,123,124,125,126,129,0,
            138,142,0,0,143,152,95,0,0,0,
            141,0,151,156,0,162,163,0,164,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            82,113,158,92,35,41,121,12,136,21,
            51,69,28,47,103,173,177,145,1,1,
            32,56,79,181,6,107,152,127,152,99,
            59,59,59
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            90,90,90,90,4,4,90,18,142,26,
            4,26,26,4,101,26,4,149,4,4,
            26,4,26,26,9,110,155,130,166,101,
            66,61,74
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            62,60,5,62,26,26,60,53,107,44,
            26,39,44,26,66,5,5,19,99,98,
            42,26,36,3,68,66,7,108,5,66,
            39,37,39
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            43,43,43,43,50,50,43,43,86,30,
            50,30,30,50,66,30,50,59,50,50,
            30,50,30,30,60,1,30,92,30,66,
            2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            17,17,32,17,21,21,17,87,-1,25,
            21,9,25,21,3,32,32,62,1,7,
            25,21,9,32,88,3,35,-1,32,3,
            9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            139,12,0,96,0,189,104,0,31,135,
            0,144,165,104,13,152,0,98,0,0,
            148,104,2,135,0,97,0,148,104,2,
            0,151,2,0,113,17,179,104,12,0,
            113,179,104,17,12,0,113,17,12,0,
            113,179,104,12,0,113,12,0,129,0,
            2,0,151,97,0,2,97,0,148,104,
            2,129,0,2,0,150,97,0,140,2,
            0,144,177,104,13,94,185,44,0,98,
            0,144,177,104,13,185,44,0,141,0,
            99,0,184,104,141,0,104,141,0,141,
            99,0,173,104,13,183,94,182,157,0,
            173,104,13,182,157,0,196,85,0,77,
            2,101,97,99,0,196,116,138,2,89,
            0,53,0,0,138,69,111,0,29,118,
            0,164,2,0,97,107,0,144,165,104,
            13,116,164,2,0,97,3,0,105,0,
            98,0,181,2,98,0,138,12,98,0,
            138,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1614,0,1685,1686,1651,0,367,0,1477,1316,
            1397,1232,1256,1216,1187,0,661,666,314,0,
            1585,1482,639,339,1256,1216,1187,1637,1427,1483,
            0,1517,1356,534,1454,454,1558,436,346,698,
            599,1301,1199,668,1339,1188,1386,1375,1364,1328,
            1550,1542,1528,1418,1409,1486,1400,1158,1103,548,
            379,1166,1131,1111,1076,1056,1035,1014,640,993,
            617,509,972,951,930,909,888,867,846,825,
            804,783,762,314,741,578,557,415,488,394,
            0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,180,104,166,16,23,22,10,9,4,
            11,15,14,98,2,102,101,105,103,107,
            106,109,108,111,110,99,29,2,67,52,
            2,12,164,138,141,104,10,9,54,53,
            4,58,57,56,55,47,48,11,62,61,
            64,63,69,68,65,79,78,77,75,76,
            74,73,72,71,70,60,164,181,138,116,
            104,12,2,136,135,167,168,157,169,46,
            45,170,44,171,172,94,101,101,103,103,
            103,103,102,102,106,105,105,108,107,138,
            110,109,116,13,142,120,17,113,104,4,
            151,104,2,182,158,158,185,158,59,104,
            120,4,104,113,179,149,148,118,104,150,
            104,94,13,94,13,165,104,13,152,4,
            120,179,17,113,4,2,127,129,104,29,
            148,183,104,13,104,144,29,189,52,12,
            190,104,13,120,104,113,113,140,104,2,
            142,13,173,141,174,104,177,94,178,60,
            139,52,12,104,104,149,104,104,104,177,
            144,60,29,139,165,149,148,186,173,184,
            59,140,2,104,144,144,29,29,59,142,
            125
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_sizeof_type_id_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 51,
           SCOPE_UBOUND      = 32,
           SCOPE_SIZE        = 33,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 211,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2102,
           MAX_LA            = 2,
           NUM_RULES         = 313,
           NUM_NONTERMINALS  = 124,
           NUM_SYMBOLS       = 217,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1235,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1779,
           ERROR_ACTION      = 1789;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
