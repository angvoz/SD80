/*******************************************************************************
* Copyright (c) 2006, 2009 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.parser.upc;

public class UPCSizeofExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, UPCSizeofExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,4,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,1,4,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,5,9,8,
            3,2,2,2,3,2,4,2,2,2,
            2,2,1,1,1,1,2,1,2,2,
            2,1,2,2,1,2,2,1,2,2,
            1,2,2,1,3,1,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,6,8,
            0,0,1,1,3,3,3,0,1,0,
            1,2,4,2,1,1,1,3,1,1,
            2,3,7,8,0,1,0,1,3,1,
            3,1,1,1,1,1,1,3,1,1,
            1,1,1,3,1,2,2,1,5,3,
            1,3,5,1,3,1,3,2,4,3,
            5,4,6,6,3,5,1,3,4,5,
            6,0,1,2,1,3,1,1,3,2,
            1,1,1,1,2,1,2,3,1,1,
            1,3,1,2,2,2,3,4,5,1,
            1,7,3,0,0,1,1,3,3,4,
            1,1,2,3,2,3,2,1,0,1,
            2,1,1,1,1,1,2,1,3,6,
            4,2,4,1,1,1,1,1,2,2,
            2,1,1,2,1,1,1,3,3,2,
            1,3,2,3,2,3,2,2,11,10,
            10,9,10,9,9,8,10,9,9,8,
            9,8,8,7,10,9,9,8,9,8,
            8,7,1,1,-39,0,0,0,0,0,
            0,0,0,0,0,-2,0,0,0,0,
            0,0,0,0,0,-80,0,0,0,0,
            -163,-120,0,-74,0,0,0,0,-145,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-174,0,-108,-36,-37,0,0,0,0,
            -82,0,0,-4,0,-32,0,-17,0,0,
            0,0,0,0,0,0,-126,0,-33,0,
            0,0,0,-45,0,0,0,0,0,0,
            0,0,0,0,0,-181,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-136,0,0,-57,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-72,0,0,0,0,-141,-70,-121,
            0,0,-54,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -194,0,-19,0,0,0,0,0,0,-71,
            0,-5,0,0,0,0,0,0,0,0,
            0,0,0,0,-196,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-75,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-122,0,0,
            0,-123,0,0,-124,0,-183,0,0,-3,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -112,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-119,0,0,0,0,0,0,0,0,
            0,0,-20,0,0,0,0,0,0,0,
            0,-21,0,-49,0,0,0,0,0,0,
            0,0,0,0,-50,0,0,0,0,0,
            0,0,0,0,0,-132,0,0,0,0,
            0,0,0,0,0,0,-22,0,0,0,
            0,0,0,0,0,0,0,-30,0,0,
            0,0,0,0,0,0,0,0,-113,0,
            0,0,0,0,0,0,0,0,-59,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-60,
            0,0,0,0,0,0,0,0,0,0,
            -131,0,0,0,0,0,0,0,0,0,
            -61,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-62,0,0,0,0,0,0,0,0,
            0,0,-139,0,0,0,0,0,0,0,
            0,0,-63,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-64,0,0,0,0,0,0,
            0,0,0,0,-150,0,0,0,0,0,
            0,0,0,0,-65,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-66,0,0,0,0,
            0,0,0,0,0,0,-166,0,0,0,
            0,0,0,0,0,0,-67,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-68,0,0,
            0,0,0,0,0,0,0,0,-167,0,
            0,0,0,0,0,0,0,0,-69,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-125,
            0,0,0,0,0,0,0,0,0,0,
            -197,0,0,0,0,0,0,0,0,0,
            -148,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-149,0,0,0,0,0,0,0,0,
            0,0,-23,0,0,0,0,0,0,0,
            0,0,-184,0,0,0,0,0,0,0,
            0,0,0,-129,0,0,0,0,0,0,
            0,0,-193,0,0,0,0,0,0,0,
            0,0,0,-84,0,0,0,0,0,0,
            0,0,0,-198,0,0,-73,0,0,0,
            0,0,0,0,-199,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-205,0,0,0,0,0,
            0,0,0,0,0,-127,0,0,0,0,
            0,0,0,0,-107,0,0,0,-173,-180,
            0,0,-77,-78,-89,0,-213,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-81,-85,0,0,0,0,-24,0,
            0,-142,-135,0,-25,-155,-146,-144,0,0,
            -161,0,0,0,0,0,0,0,0,0,
            0,-208,0,0,0,0,0,0,0,0,
            0,0,-152,-35,0,0,0,0,0,0,
            0,0,0,0,0,-147,0,0,0,0,
            0,-26,0,-160,-27,-28,0,0,0,-87,
            0,0,0,-164,0,-153,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-40,0,0,0,0,0,0,
            0,0,0,0,-29,0,0,-90,0,-58,
            0,0,0,0,0,0,0,0,0,0,
            -171,0,0,0,0,0,-55,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-6,0,0,0,0,0,0,0,0,
            -190,-172,-91,-116,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-51,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-92,-93,0,0,0,0,0,0,
            0,-41,0,0,0,0,0,0,0,0,
            0,-52,0,0,0,0,0,0,0,0,
            0,0,-134,0,-53,0,0,0,0,0,
            0,0,0,0,0,-212,0,-94,-154,-118,
            -185,-157,-95,0,0,-96,0,-97,0,-98,
            0,-176,0,0,-46,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-162,0,
            0,0,0,0,0,0,-9,0,0,0,
            0,0,0,0,-99,0,-47,0,0,0,
            0,0,0,0,0,0,0,-48,0,0,
            0,0,0,0,0,0,0,0,-79,-207,
            -10,0,0,0,0,0,0,0,0,0,
            0,0,-177,-100,-76,-168,-101,-102,-110,0,
            0,0,0,0,-191,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-192,-56,-83,0,0,-103,0,
            -203,-204,-104,0,0,0,-195,-86,0,0,
            0,0,0,0,0,0,-105,0,0,0,
            0,-88,-156,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-106,-201,0,
            -210,0,0,0,0,-115,0,0,0,0,
            0,0,0,-140,0,0,0,0,0,0,
            0,0,0,-214,0,0,0,-7,0,0,
            0,0,0,0,0,-151,0,0,0,0,
            0,0,0,-11,0,0,0,0,0,0,
            0,-109,0,-111,0,-128,0,0,0,0,
            0,0,0,0,-12,0,0,0,0,0,
            0,0,-13,0,0,0,0,0,0,0,
            -14,0,0,0,0,0,0,0,-38,-42,
            0,0,0,0,0,0,0,-137,-143,0,
            -43,0,0,0,0,0,0,0,-44,0,
            0,0,0,0,0,0,0,-117,-1,-170,
            -169,-8,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-15,0,0,0,
            0,0,0,-158,0,0,0,0,0,0,
            -16,0,0,0,0,0,0,-18,-114,-209,
            0,-178,-179,-130,-31,-182,0,-159,0,0,
            0,-202,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-206,
            -189,0,-175,-211,0,0,0,0,-188,0,
            0,0,-34,0,-165,0,0,0,0,0,
            -133,-138,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-186,0,0,0,-187,0,0,0,
            -200,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            89,11,105,21,21,26,26,41,41,71,
            71,1,1,2,2,2,2,3,3,3,
            4,5,5,5,5,5,5,5,5,61,
            61,72,6,6,6,6,6,6,6,6,
            6,6,7,7,8,8,8,8,9,9,
            9,10,10,10,12,12,12,12,12,13,
            13,13,14,14,15,15,16,16,17,17,
            18,18,19,19,20,20,20,20,20,20,
            20,20,20,20,20,20,106,48,42,90,
            90,74,74,43,107,107,107,107,107,107,
            107,108,108,108,109,109,114,114,115,115,
            110,110,111,111,111,117,117,112,112,112,
            112,113,113,113,113,113,116,116,27,27,
            27,27,27,30,30,30,80,80,75,75,
            75,75,76,76,76,77,77,77,78,78,
            78,79,79,79,118,118,119,119,120,31,
            33,33,33,33,33,55,56,56,56,56,
            56,56,56,56,56,56,56,56,65,62,
            62,91,92,67,67,63,63,63,68,81,
            81,82,82,69,69,69,51,93,93,83,
            84,84,84,64,64,94,85,85,86,86,
            70,70,22,23,23,23,32,50,50,34,
            34,34,34,37,37,39,35,35,36,40,
            40,121,121,38,122,122,95,95,28,28,
            28,28,28,28,28,28,28,87,52,52,
            52,52,29,58,58,57,57,57,59,59,
            53,53,96,96,73,73,60,60,60,44,
            44,44,45,46,46,46,47,47,47,47,
            66,66,49,49,54,98,97,97,97,97,
            88,99,100,100,101,101,102,102,123,123,
            124,124,125,125,125,125,127,127,126,126,
            126,128,129,129,89,89,2,2,2,6,
            6,6,22,22,24,24,25,25,103,103,
            103,107,130,130,130,130,130,130,130,112,
            112,112,112,112,112,112,112,112,112,112,
            112,112,112,112,112,112,112,112,112,112,
            112,112,112,131,131,1,1288,17,21,18,
            438,1285,44,683,553,727,760,692,1189,1043,
            1242,1195,1246,1245,74,91,866,134,212,322,
            323,227,184,528,25,136,133,135,159,582,
            20,17,21,18,438,1285,44,683,553,727,
            391,692,1189,1043,1242,1195,1246,1245,74,280,
            138,165,690,1634,6,324,324,142,145,148,
            151,53,431,1331,40,447,125,31,69,434,
            1479,1183,1526,1538,1552,1155,1499,541,281,125,
            31,1097,19,1632,648,20,17,21,18,438,
            42,44,683,553,1364,286,354,20,17,21,
            18,438,1285,44,683,553,727,391,692,1189,
            1043,1242,1195,1246,1245,74,280,287,283,324,
            1746,1411,292,194,225,178,1439,648,20,17,
            21,18,438,42,44,683,553,727,25,692,
            1189,1043,1242,1195,1547,281,134,212,322,323,
            1632,24,392,237,136,133,135,159,59,324,
            125,186,288,648,20,17,21,18,438,42,
            44,683,553,727,22,692,1189,1043,1498,138,
            165,125,1742,392,289,1145,142,145,148,151,
            324,431,681,20,17,21,18,438,321,1479,
            1183,1526,1538,1552,1155,615,20,17,21,18,
            438,1285,44,683,553,727,23,692,1189,1043,
            1242,1195,1246,1245,74,280,281,20,17,21,
            18,438,1285,44,683,553,727,1739,692,1189,
            1043,1242,1195,1246,1245,74,749,238,125,185,
            1724,209,769,1679,281,125,187,125,295,1632,
            648,20,17,21,18,438,1285,44,683,553,
            727,290,692,1189,1043,1242,1195,1246,1245,74,
            91,714,20,17,21,18,438,1285,44,683,
            553,727,1744,692,1189,1043,1242,1195,1246,1245,
            74,791,474,20,17,21,18,438,42,44,
            683,553,727,364,692,1189,1043,1242,1195,1246,
            1245,93,15,330,648,20,17,21,18,438,
            42,44,683,1418,434,648,20,17,21,18,
            438,42,44,683,1420,833,315,20,17,21,
            18,438,1285,44,683,553,727,39,692,1189,
            1043,1242,1195,1246,1245,74,875,239,648,20,
            17,21,18,438,1285,44,683,553,727,237,
            692,1189,1043,1242,1195,1246,1245,74,92,648,
            20,17,21,18,438,1285,44,683,553,727,
            240,692,1189,1043,1242,1195,1246,1245,74,85,
            648,20,17,21,18,438,1285,44,683,553,
            727,237,692,1189,1043,1242,1195,1246,1245,74,
            84,648,20,17,21,18,438,1285,44,683,
            553,727,242,692,1189,1043,1242,1195,1246,1245,
            74,83,648,20,17,21,18,438,1285,44,
            683,553,727,237,692,1189,1043,1242,1195,1246,
            1245,74,82,648,20,17,21,18,438,1285,
            44,683,553,727,328,692,1189,1043,1242,1195,
            1246,1245,74,81,648,20,17,21,18,438,
            1285,44,683,553,727,237,692,1189,1043,1242,
            1195,1246,1245,74,80,648,20,17,21,18,
            438,1285,44,683,553,727,241,692,1189,1043,
            1242,1195,1246,1245,74,79,648,20,17,21,
            18,438,1285,44,683,553,727,237,692,1189,
            1043,1242,1195,1246,1245,74,78,648,20,17,
            21,18,438,1285,44,683,553,727,243,692,
            1189,1043,1242,1195,1246,1245,74,77,648,20,
            17,21,18,438,1285,44,683,553,727,237,
            692,1189,1043,1242,1195,1246,1245,74,76,648,
            20,17,21,18,438,1285,44,683,553,727,
            244,692,1189,1043,1242,1195,1246,1245,74,75,
            648,20,17,21,18,438,1285,44,683,553,
            727,237,692,1189,1043,1242,1195,1246,1245,74,
            73,648,20,17,21,18,438,1285,44,683,
            553,727,294,692,1189,1043,1242,1195,1246,1245,
            74,917,648,20,17,21,18,438,1285,44,
            683,553,727,401,692,1189,1043,1242,1195,1246,
            1245,74,959,648,20,17,21,18,438,42,
            44,683,553,727,25,692,1189,1043,1242,1195,
            1246,1245,93,648,20,17,21,18,438,42,
            44,683,553,727,322,692,1189,1043,1242,1195,
            1246,1245,93,1236,125,297,1001,549,20,17,
            21,18,438,42,43,648,20,17,21,18,
            438,42,44,683,553,727,211,692,1189,1043,
            1242,1195,1246,1245,93,648,20,17,21,18,
            438,42,44,683,553,727,6,692,1189,1043,
            1242,1195,1246,1245,93,767,28,399,1581,541,
            541,1632,530,792,686,225,178,648,20,17,
            21,18,438,42,44,683,553,727,201,692,
            1189,1043,1242,1195,1246,1245,93,134,212,322,
            323,274,275,768,414,137,133,135,159,73,
            179,1537,6,389,28,400,25,25,6,1632,
            202,482,1742,1748,1196,134,212,322,323,1201,
            139,165,25,144,133,135,159,143,146,149,
            152,273,431,348,6,1634,1254,217,1256,220,
            1409,222,223,228,1701,630,239,266,1154,1153,
            271,1634,450,262,6,186,77,1785,1301,276,
            446,273,618,263,402,1422,871,217,1256,220,
            1409,222,223,228,1604,1833,87,266,1154,1153,
            271,208,523,1496,648,20,17,21,18,438,
            42,44,1333,1334,227,771,1493,1743,747,260,
            648,20,17,21,18,438,42,44,683,553,
            727,587,692,1189,1043,1242,1578,648,20,17,
            21,18,438,42,44,683,553,727,625,692,
            1189,1529,681,20,17,21,18,438,320,273,
            1636,253,6,480,324,218,1256,220,1409,222,
            223,228,1212,1771,622,268,1154,1153,271,648,
            20,17,21,18,438,42,44,683,553,727,
            272,692,1455,592,488,217,1256,220,1409,222,
            223,228,648,20,17,21,18,438,42,44,
            1363,1770,648,20,17,21,18,438,42,44,
            683,553,727,324,1494,648,20,17,21,18,
            438,42,44,683,553,727,253,1497,667,846,
            454,291,324,733,197,199,773,1212,750,278,
            800,1792,482,1742,1532,648,20,17,21,18,
            438,42,44,683,553,1408,277,226,279,874,
            217,1256,220,1409,222,223,228,648,20,17,
            21,18,438,42,40,129,1770,648,20,17,
            21,18,438,42,44,683,553,1413,648,20,
            17,21,18,438,42,44,683,553,1416,388,
            87,648,20,17,21,18,438,42,39,198,
            199,1212,208,875,75,238,324,131,590,620,
            1150,134,212,322,323,875,1698,1505,1743,141,
            133,135,159,293,217,1256,220,1409,222,223,
            228,276,224,273,541,6,788,273,1636,672,
            1496,541,653,351,140,165,630,61,808,266,
            1154,1153,271,268,1154,1153,271,547,134,212,
            322,323,828,689,1524,1334,147,133,135,159,
            134,212,322,323,494,203,1740,87,150,133,
            135,159,180,1533,134,212,322,323,820,324,
            1193,237,153,133,135,159,440,20,17,21,
            18,438,42,36,440,20,17,21,18,438,
            42,36,296,193,719,229,259,245,681,20,
            17,21,18,438,319,329,440,20,17,21,
            18,438,42,36,648,20,17,21,18,438,
            42,38,867,1636,625,282,869,246,218,1256,
            220,1409,222,223,228,648,20,17,21,18,
            438,42,37,648,20,17,21,18,438,42,
            36,648,20,17,21,18,438,42,35,70,
            648,20,17,21,18,438,42,47,481,870,
            394,648,20,17,21,18,438,42,46,648,
            20,17,21,18,438,42,45,273,361,508,
            454,361,681,20,17,21,18,438,41,494,
            630,1779,494,266,1154,1153,271,681,20,17,
            21,18,438,34,872,1193,230,1634,1193,265,
            1634,681,20,17,21,18,438,33,6,127,
            541,87,623,876,127,6,826,314,57,365,
            1499,258,251,1301,258,1393,365,1678,1393,494,
            1678,253,212,322,323,196,253,212,322,323,
            831,169,196,113,181,196,1906,1906,233,809,
            87,204,494,287,494,127,426,87,376,1669,
            494,183,171,426,630,1906,1669,1791,196,422,
            196,1906,1791,494,1906,1906,1193,253,212,322,
            323,425,1906,254,212,322,323,191,529,1193,
            1906,1906,422,1906,422,89,716,1906,1906,1149,
            1773,1011,258,127,1906,1906,1579,507,1678,1906,
            191,548,192,1837,1906,258,1906,1906,1906,1412,
            1906,1678,1531,1773,1906,253,212,322,323,254,
            212,322,323,254,212,322,323,1906,1906,1906,
            1906,1906,1906,560,1752,1906,1906,1906,1906,1906,
            1906,1906,1906,1906,1906,1906,1906,1906,1906,1906,
            1906,1841,1906,0,325,672,0,20,178,0,
            1,2131,0,1,2142,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,12,13,0,15,16,17,18,19,
            20,21,22,23,0,25,26,27,28,29,
            30,31,32,33,34,35,36,37,0,0,
            40,41,42,43,44,45,46,47,48,49,
            50,51,0,53,54,55,0,1,0,3,
            0,5,6,7,8,9,10,11,0,0,
            2,2,0,4,0,19,0,38,64,65,
            66,67,14,14,16,17,0,1,2,33,
            34,35,36,37,56,57,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,0,1,0,3,60,5,6,7,
            8,9,10,11,0,1,0,3,0,61,
            0,19,6,7,8,9,10,11,64,65,
            66,67,70,71,76,33,34,35,36,37,
            74,0,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,0,1,
            0,3,60,5,6,7,8,9,10,11,
            0,1,0,0,1,0,3,19,6,7,
            8,9,10,11,64,65,66,67,70,71,
            0,33,34,35,36,37,0,24,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,0,1,0,3,60,59,
            6,7,8,9,10,11,0,0,0,2,
            14,5,5,19,6,7,8,9,10,11,
            0,14,0,1,2,5,0,33,34,35,
            36,37,77,78,40,41,42,43,44,45,
            46,47,48,49,50,51,39,53,54,55,
            0,1,2,3,4,5,0,61,38,39,
            0,5,12,13,58,15,16,17,18,19,
            20,21,22,23,14,25,26,27,28,29,
            30,31,32,0,0,1,2,3,4,5,
            68,0,1,0,3,39,12,13,5,15,
            16,17,18,19,20,21,22,23,58,25,
            26,27,28,29,30,31,32,0,1,2,
            0,61,5,0,1,2,3,4,5,0,
            0,14,39,0,4,12,13,4,15,16,
            17,18,58,20,21,22,23,24,25,26,
            27,28,29,30,31,32,39,0,0,1,
            2,0,4,6,7,8,9,10,11,0,
            0,0,14,12,13,52,19,6,7,8,
            9,10,11,0,1,15,3,0,68,59,
            33,34,35,36,37,62,63,40,41,42,
            43,44,45,46,47,48,49,50,51,0,
            1,2,3,4,5,0,1,0,3,0,
            0,12,13,0,15,16,17,18,5,20,
            21,22,23,0,25,26,27,28,29,30,
            31,32,73,0,1,2,3,4,5,0,
            0,0,1,4,3,12,13,0,15,16,
            17,18,39,20,21,22,23,58,25,26,
            27,28,29,30,31,32,0,0,1,2,
            3,4,6,7,8,9,10,11,38,12,
            13,72,15,16,17,18,0,20,21,22,
            23,58,25,26,27,28,29,30,31,32,
            0,62,63,56,57,5,0,0,0,1,
            2,3,4,6,7,8,9,10,11,0,
            12,13,0,15,16,17,18,60,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,0,1,2,3,4,0,1,2,0,
            4,0,52,12,13,4,15,16,17,18,
            14,20,21,22,23,24,25,26,27,28,
            29,30,31,32,0,1,2,3,4,0,
            74,2,0,4,0,0,12,13,4,15,
            16,17,18,14,20,21,22,23,24,25,
            26,27,28,29,30,31,32,0,1,2,
            3,4,0,62,63,0,1,5,3,12,
            13,72,15,16,17,18,0,20,21,22,
            23,0,25,26,27,28,29,30,31,32,
            0,1,2,3,4,0,15,2,0,0,
            38,69,12,13,5,15,16,17,18,14,
            20,21,22,23,0,25,26,27,28,29,
            30,31,32,0,1,2,3,4,0,1,
            2,0,56,57,0,12,13,75,15,16,
            17,18,0,20,21,22,23,0,25,26,
            27,28,29,30,31,32,0,59,2,0,
            4,5,6,7,8,9,10,11,0,0,
            14,12,13,5,75,19,0,0,0,1,
            0,3,0,6,7,8,9,10,11,33,
            34,35,36,37,0,39,19,0,56,57,
            24,0,24,6,7,8,9,10,11,0,
            33,34,35,36,37,14,19,0,0,1,
            52,12,13,6,7,8,9,10,11,0,
            33,34,35,36,37,0,19,0,56,57,
            0,0,0,6,7,8,9,10,11,69,
            33,34,35,36,37,0,19,2,89,79,
            80,81,82,83,84,85,86,87,88,14,
            33,34,35,36,37,0,0,59,0,0,
            0,0,4,0,0,0,0,0,0,14,
            0,0,0,0,14,0,0,0,0,0,
            24,0,73,24,69,24,0,0,68,0,
            24,24,24,0,0,0,0,0,0,0,
            0,38,38,38,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1906,1917,1738,1918,1653,1,2119,2120,2121,2232,
            386,2233,1645,1624,59,1661,1731,1717,1702,2068,
            1919,1920,1921,1922,252,1481,1447,2222,2223,2224,
            1608,1322,562,2069,2067,2122,2070,2066,54,88,
            2073,2078,2077,2075,2076,2074,2079,2080,2072,2081,
            2082,2083,181,1250,1184,1084,1906,1,182,1,
            285,190,1,1,1,1,1,1,32,264,
            1783,1495,62,1,61,1,70,738,1468,1457,
            1425,454,1224,596,1932,1933,1,2131,1480,1,
            1,1,1,1,694,705,1,1,1,1,
            1,1,1,1,1,1,1,1,190,1,
            1,1,1906,1,1906,1,2101,189,1,1,
            1,1,1,1,1906,1917,1906,1918,63,449,
            60,1,2119,2120,2121,2232,386,2233,1468,1457,
            1425,454,1395,1382,436,1,1,1,1,1,
            1290,1906,1,1,1,1,1,1,1,1,
            1,1,1,1,189,1,1,1,1906,1,
            1,1,2101,190,1,1,1,1,1,1,
            1906,2143,247,1906,1917,72,1918,1,2119,2120,
            2121,2232,386,2233,1468,1457,1425,454,1395,1382,
            1906,1,1,1,1,1,1906,1192,1,1,
            1,1,1,1,1,1,1,1,1,1,
            190,1,1,1,1906,1917,1906,1918,2101,2163,
            2119,2120,2121,2232,386,2233,1906,1,248,1495,
            1053,1910,1912,2068,1,1,1,1,1,1,
            1906,596,1,2131,1480,1912,1906,2069,2067,2122,
            2070,2066,497,1525,2073,2078,2077,2075,2076,2074,
            2079,2080,2072,2081,2082,2083,1911,1250,1184,1084,
            1,1917,1738,1918,1586,1910,1,627,1774,1911,
            291,90,1645,1624,1909,1661,1731,1717,1702,651,
            1919,1920,1921,1922,1105,1481,1447,2222,2223,2224,
            1608,1322,562,1906,1906,1917,1738,1918,1616,1910,
            1125,184,3147,1906,3147,90,1645,1624,1912,1661,
            1731,1717,1702,1032,1919,1920,1921,1922,1909,1481,
            1447,2222,2223,2224,1608,1322,562,1,1900,1223,
            1906,1094,1912,1,1917,1738,1918,1653,29,1906,
            1,596,1911,48,252,1645,1624,1689,1661,1731,
            1717,1702,1909,1919,1920,1921,1922,3029,1481,1447,
            2222,2223,2224,1608,1322,562,1911,128,261,2131,
            1223,51,1,2119,2120,2121,2232,386,2233,68,
            64,249,596,1372,1274,29,2068,1,1,1,
            1,1,1,183,3148,1349,3148,1906,990,2163,
            2069,2067,2122,2070,2066,1681,1670,2073,2078,2077,
            2075,2076,2074,2079,2080,2072,2081,2082,2083,1906,
            1917,1738,1918,1653,1910,205,3149,1906,3149,66,
            1906,1645,1624,1,1661,1731,1717,1702,1912,1919,
            1920,1921,1922,1906,1481,1447,2222,2223,2224,1608,
            1322,562,533,1906,1917,1738,1918,1594,1910,50,
            255,207,1917,1689,1918,1645,1624,58,1661,1731,
            1717,1702,1911,1919,1920,1921,1922,1909,1481,1447,
            2222,2223,2224,1608,1322,562,250,1906,1,1,
            1,1,2119,2120,2121,2232,386,2233,1553,1,
            1,1307,1,1,1,1,1906,1,1,1,
            1,1909,1,1,1,1,1,1,1,1,
            1906,1681,1670,694,705,1914,71,251,1906,1917,
            1738,1918,1653,2119,2120,2121,2232,386,2233,1906,
            1645,1624,1906,1661,1731,1717,1702,2221,1919,1920,
            1921,1922,3029,1481,1447,2222,2223,2224,1608,1322,
            562,1,1917,1738,1918,1653,267,2131,1223,67,
            252,49,1913,1645,1624,1689,1661,1731,1717,1702,
            596,1919,1920,1921,1922,3029,1481,1447,2222,2223,
            2224,1608,1322,562,1906,1917,1738,1918,1653,267,
            1290,1495,210,252,1906,1906,1645,1624,1064,1661,
            1731,1717,1702,596,1919,1920,1921,1922,3029,1481,
            1447,2222,2223,2224,1608,1322,562,1906,1917,1738,
            1918,1653,1906,1681,1670,206,551,1916,551,1645,
            1624,1307,1661,1731,1717,1702,57,1919,1920,1921,
            1922,65,1481,1447,2222,2223,2224,1608,1322,562,
            1906,1917,1745,1918,1653,269,1349,1410,1,1,
            1406,1073,1645,1624,1916,1661,1731,1717,1702,596,
            1919,1920,1921,1922,1906,1481,1447,2222,2223,2224,
            1608,1322,562,1,1917,1738,1918,1653,252,2131,
            1480,1906,694,705,1906,1645,1624,1915,1661,1731,
            1717,1702,56,1919,1920,1921,1922,1906,1481,1447,
            2222,2223,2224,1608,1322,562,20,2162,1897,53,
            1897,1897,178,178,178,178,178,178,284,1906,
            1897,1372,1274,424,1915,178,1906,129,1906,1917,
            42,1918,55,2119,2120,2121,2232,386,2233,178,
            178,178,178,178,1906,1897,2068,130,694,705,
            3029,270,1198,2119,2120,2121,2232,386,2233,52,
            2069,2067,2122,2070,2066,596,2068,131,1,1903,
            424,1372,1274,2119,2120,2121,2232,386,2233,69,
            2069,2067,2122,2070,2066,1906,2068,132,694,705,
            200,1906,1906,2119,2120,2121,2232,386,2233,969,
            2069,2067,2122,2070,2066,221,2068,1700,1893,948,
            927,906,885,864,822,843,801,780,759,596,
            2069,2067,2122,2070,2066,325,1906,2163,1906,1906,
            219,1906,1197,30,30,206,188,188,188,1894,
            1906,1906,1906,1906,596,1906,1906,1906,1906,1906,
            1136,1906,533,1244,575,1332,1906,1906,1157,1906,
            184,183,205,1906,1906,1906,1906,1906,1906,1906,
            1906,466,1935,2926
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            403,1,149,105,149,149,149,149,149,149,
            149,149,149,149,149,149,67,10,87,84,
            91,89,97,95,99,98,101,100,73,149,
            10,368,368,432,149,286,286,329,10,149,
            149,149,149,149,149,149,149,149,149,149,
            149,149,149,149,149,149,149,149,149,149,
            149,149,149,149,149,149,149,149,149,286,
            286,109,116,333,140,335,284,283,301,3,
            313,136,313,136,136,313,136,313,30,237,
            84,84,89,89,89,89,87,87,95,91,
            91,98,97,65,100,99,138,228,138,329,
            333,143,109,53,173,286,371,338,173,136,
            368,368,136,368,149,228,114,333,321,53,
            109,172,140,286,327,30,285,340,109,173,
            138,198,138,231,114,321,321,149,149,109,
            173,335,290,289,333,340,286,138,198,231,
            231,233,298,321,53,109,109,286,371,338,
            327,198,228,60,198,231,233,427,233,228,
            112,430,368,149,297,53,321,340,198,62,
            233,228,149,368,67,116,109,368,149,321,
            286,285,228,293,149,292,168,333,228,109,
            369,62,149,168
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            89,0,5,68,38,58,39,75,14,18,
            20,21,22,23,2,16,17,15,4,12,
            13,25,26,27,28,29,30,31,32,1,
            3,53,54,55,48,40,45,43,44,42,
            41,46,47,49,50,51,37,34,19,33,
            36,35,6,7,8,10,9,11,0,75,
            5,4,1,2,68,0,14,2,61,76,
            16,17,69,79,80,81,82,83,85,84,
            86,87,88,4,62,63,12,13,57,56,
            64,65,66,67,70,71,15,72,73,74,
            52,75,77,78,68,39,89,38,58,5,
            0,5,52,14,61,16,17,15,4,12,
            13,25,26,18,30,31,32,2,20,21,
            22,23,27,28,29,1,3,24,0,58,
            5,19,6,7,8,9,10,11,20,21,
            22,23,27,28,29,3,16,17,15,12,
            13,25,26,18,30,31,32,4,2,1,
            0,19,58,5,16,17,15,4,12,13,
            25,26,18,30,31,32,2,1,3,20,
            21,22,23,27,28,29,0,33,40,6,
            41,53,34,42,35,43,44,36,7,45,
            46,19,54,37,55,47,48,8,49,50,
            51,1,3,9,10,11,60,5,52,0,
            1,3,5,52,38,0,7,19,37,8,
            36,35,34,6,33,9,10,11,61,76,
            16,17,15,12,13,62,63,56,57,64,
            65,66,67,70,71,72,73,74,77,78,
            69,79,80,81,82,83,84,85,86,87,
            88,4,2,14,38,39,5,0,2,39,
            14,68,75,5,38,0,69,14,61,0,
            48,40,45,43,44,42,41,46,47,49,
            50,51,68,75,37,34,19,33,36,35,
            6,7,8,9,10,11,38,1,5,39,
            2,14,4,0,4,2,14,39,5,33,
            40,6,41,53,34,42,35,43,44,36,
            7,45,46,19,54,37,55,47,48,8,
            49,50,51,9,10,11,59,3,1,0,
            4,33,40,6,41,53,34,42,35,43,
            44,36,7,45,46,19,54,37,55,47,
            48,8,49,50,51,1,3,9,10,11,
            59,0,18,20,21,22,23,1,3,2,
            16,17,15,4,12,13,25,26,27,28,
            29,30,31,32,60,0,5,38,52,69,
            0,5,39,18,20,21,22,23,1,3,
            2,16,17,15,4,12,13,25,26,27,
            28,29,30,31,32,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            100,37,28,37,28,28,28,28,28,28,
            28,28,28,28,28,28,37,103,37,37,
            37,37,37,37,37,37,37,37,37,28,
            103,21,21,121,104,78,78,85,1,28,
            28,28,28,28,28,28,28,28,28,28,
            28,28,28,28,28,104,28,28,28,28,
            28,28,28,28,28,28,28,28,28,78,
            78,42,47,13,40,84,51,51,58,9,
            59,19,59,69,69,59,68,59,53,37,
            37,37,37,37,37,37,37,37,37,37,
            37,37,37,37,37,37,48,66,37,89,
            37,44,42,107,41,78,95,77,41,7,
            7,7,7,7,28,23,66,37,75,107,
            42,41,124,78,62,30,37,97,42,41,
            38,66,37,66,26,75,66,28,28,42,
            41,61,51,51,13,97,78,37,109,66,
            7,82,11,66,107,42,42,78,95,77,
            71,66,23,16,113,7,82,37,37,23,
            25,37,7,28,80,107,124,117,109,64,
            82,23,28,7,93,27,42,7,28,124,
            78,78,23,17,28,37,64,13,23,42,
            37,64,28,73
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            80,78,77,67,76,75,1,0,103,0,
            100,0,29,52,0,11,71,0,91,0,
            72,0,41,0,88,11,54,5,0,80,
            79,78,77,67,76,75,0,92,0,11,
            5,21,0,5,11,0,5,54,49,0,
            28,0,67,62,63,64,65,55,30,0,
            26,46,45,37,35,11,0,94,68,0,
            46,45,37,35,29,0,11,26,0,102,
            0,61,0,26,45,46,11,0,46,45,
            29,0,98,0,29,52,11,27,0,11,
            89,0,51,11,48,0,58,0,82,11,
            51,0,11,51,69,0,95,11,27,0,
            11,90,0,22,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,96,97,
            98,10,11,1,8,6,7,68,69,81,
            82,83,84,3,12,13,93,94,95,100,
            101,102,44,55,60,63,72,42,90,47,
            52,56,61,62,66,67,74,75,78,79,
            80,91,54,70,73,16,17,89,30,107,
            4,14,15,18,19,20,21,29,31,22,
            23,24,25,26,92,5,27,28,32,33,
            34,35,36,37,38,39,40,41,108,45,
            46,49,50,51,53,57,58,59,65,71,
            77,88,99,103,104,105,106
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            114,0,0,0,116,120,121,122,123,124,
            0,125,126,127,128,129,130,131,0,132,
            110,142,0,0,0,111,135,163,0,141,
            0,0,0,159,161,0,162,0,0,0,
            112,0,134,172,173,174,0,115,119,150,
            154,160,169,0,144,0,164,167,168,171,
            0,145,146,147,148,149,151,0,153,158,
            113,117,118,133,136,137,138,139,140,143,
            0,152,156,0,0,157,166,176,109,0,
            0,0,155,0,165,170,175,0,177,178,
            0,179,180,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            108,139,118,47,57,147,12,174,21,75,
            93,63,28,71,40,129,199,203,40,40,
            183,40,1,1,1,32,35,80,103,35,
            207,6,133,190,190,165,125,153,153,153,
            153,153,83,83,83
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            116,116,116,4,4,116,18,180,26,4,
            26,68,26,4,4,127,26,4,44,68,
            187,53,4,4,4,26,38,4,26,106,
            26,9,136,193,196,168,127,155,157,159,
            161,163,90,85,98
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            64,62,64,28,28,62,49,111,47,28,
            40,28,47,28,28,69,5,5,28,28,
            19,28,103,102,101,45,60,28,37,50,
            3,88,69,7,5,112,69,79,78,77,
            76,75,40,38,40
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            52,52,52,58,58,52,52,95,39,58,
            39,20,39,58,58,75,39,58,4,20,
            68,19,58,58,58,39,2,58,39,1,
            39,69,1,39,39,101,75,1,53,54,
            54,48,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            25,25,25,29,29,25,19,-1,33,29,
            9,29,33,29,29,5,40,40,29,29,
            74,29,17,1,3,33,35,29,9,11,
            40,101,5,46,40,-1,5,26,26,26,
            26,26,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            150,14,0,110,0,206,118,0,31,149,
            0,168,204,118,24,161,0,112,0,0,
            164,118,2,152,0,111,0,164,118,2,
            0,167,2,0,159,118,0,172,0,194,
            118,14,0,9,110,0,127,19,194,118,
            14,0,69,132,110,0,127,194,118,19,
            14,0,194,118,19,14,0,132,110,0,
            127,19,14,0,127,194,118,14,0,127,
            14,0,144,0,2,0,165,111,0,2,
            111,0,164,118,2,144,0,2,0,164,
            111,0,157,2,0,159,0,168,192,118,
            24,108,201,53,0,112,0,168,192,118,
            24,201,53,0,158,0,113,0,200,118,
            158,0,118,158,0,155,113,0,188,118,
            24,199,108,198,174,0,188,118,24,198,
            174,0,187,0,148,0,147,0,146,0,
            145,0,144,0,214,94,0,77,2,115,
            111,113,0,214,133,155,2,98,0,53,
            0,0,155,78,125,0,29,132,0,180,
            2,0,111,121,0,111,119,0,197,2,
            112,0,155,14,112,0,155,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1411,0,391,0,1771,1773,1748,0,1604,1301,
            1406,1480,1331,1223,1193,0,386,0,575,466,
            399,1145,1097,0,1155,494,365,0,1409,1256,
            1154,1153,1301,1499,1223,1193,1495,1669,0,1731,
            1717,1702,1608,1322,562,1616,1594,1586,1097,1290,
            497,1307,533,1395,1382,1349,705,694,1468,1457,
            1425,454,1689,1681,1670,1372,1274,1661,1653,1645,
            1624,1481,1447,1157,1125,1105,575,1073,1053,1032,
            1011,716,990,672,651,596,969,948,927,906,
            885,864,843,822,801,780,759,365,738,630,
            466,399,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,196,118,181,32,31,30,18,26,25,
            13,12,4,15,17,16,112,2,116,115,
            119,117,121,120,123,122,125,124,113,38,
            2,76,61,2,14,180,155,158,118,13,
            12,63,62,4,67,66,65,64,56,57,
            15,71,70,73,72,78,77,74,88,87,
            86,84,85,83,82,81,80,79,69,180,
            197,155,133,118,14,2,153,152,182,10,
            183,174,184,55,54,185,53,186,187,108,
            115,115,117,117,117,117,116,116,120,119,
            119,122,121,155,124,123,133,24,161,159,
            136,19,127,118,4,167,118,2,14,198,
            175,175,201,175,68,118,24,136,4,118,
            127,194,165,164,134,118,166,118,150,4,
            108,24,108,24,118,4,136,194,19,127,
            4,2,142,144,118,38,164,199,118,24,
            118,204,118,136,118,127,127,157,118,2,
            159,24,188,158,189,118,192,108,193,168,
            38,206,61,14,207,118,165,118,118,118,
            192,168,69,38,148,69,150,61,14,165,
            164,202,188,200,68,157,2,118,168,150,
            38,38,68,159
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "MYTHREAD",
            "THREADS",
            "UPC_MAX_BLOCKSIZE",
            "relaxed",
            "shared",
            "strict",
            "upc_barrier",
            "upc_localsizeof",
            "upc_blocksizeof",
            "upc_elemsizeof",
            "upc_notify",
            "upc_fence",
            "upc_wait",
            "upc_forall",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_sizeof_type_id_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "initializer_seq",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator",
            "layout_qualifier"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 60,
           SCOPE_UBOUND      = 44,
           SCOPE_SIZE        = 45,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 214,
           NT_OFFSET         = 107,
           LA_STATE_OFFSET   = 2270,
           MAX_LA            = 2,
           NUM_RULES         = 364,
           NUM_NONTERMINALS  = 131,
           NUM_SYMBOLS       = 238,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1699,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 89,
           EOLT_SYMBOL       = 89,
           ACCEPT_ACTION     = 1893,
           ERROR_ACTION      = 1906;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
