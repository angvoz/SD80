/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99ExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, C99ExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,3,1,1,
            4,4,3,3,2,2,8,1,0,1,
            1,2,2,2,2,2,2,2,2,2,
            4,1,4,1,3,3,3,1,3,3,
            1,3,3,1,3,3,3,3,1,3,
            3,1,3,1,3,1,3,1,3,1,
            3,1,5,1,3,3,3,3,3,3,
            3,3,3,3,3,1,1,2,1,0,
            1,3,1,1,1,1,1,1,1,1,
            3,4,3,2,4,1,2,1,1,1,
            2,5,7,5,1,0,7,5,9,8,
            3,2,2,2,3,2,4,2,2,2,
            2,2,1,1,1,1,2,1,2,2,
            2,1,2,2,1,2,2,1,2,2,
            1,2,2,1,3,1,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,6,8,
            0,0,1,1,3,3,3,0,1,0,
            1,2,4,2,1,1,1,3,1,1,
            2,3,7,8,0,1,0,1,3,1,
            3,1,1,1,1,1,1,3,1,1,
            1,1,1,3,1,2,2,1,5,3,
            1,3,5,1,3,1,3,2,4,3,
            5,4,6,6,3,5,1,2,3,4,
            5,0,1,2,1,3,1,1,3,2,
            1,1,1,1,2,1,2,3,1,1,
            1,3,1,2,2,2,3,4,5,1,
            7,3,0,0,1,1,3,3,4,1,
            1,2,3,2,3,2,1,0,1,2,
            1,1,1,1,1,2,4,3,6,2,
            4,1,1,-37,0,0,0,0,0,0,
            0,0,0,0,-2,0,0,0,0,0,
            0,0,0,0,-159,0,0,-117,0,-4,
            0,0,0,0,-123,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-14,-76,
            -165,-79,-118,0,0,0,0,0,0,-5,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-140,0,0,0,
            0,0,0,0,-38,0,0,0,0,0,
            0,0,0,0,-119,0,0,-187,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-160,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-56,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-39,0,0,
            0,0,0,0,0,0,0,-120,0,0,
            -16,0,0,0,0,-177,-17,0,-6,0,
            0,0,0,0,0,0,0,0,-74,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-121,
            0,-18,0,-183,0,0,0,0,0,0,
            0,0,0,0,-201,0,0,0,0,0,
            0,0,0,0,-3,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-52,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-71,0,-110,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-128,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-132,0,-144,
            0,-55,0,0,0,0,0,0,0,0,
            0,0,-107,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-27,0,
            0,0,0,0,0,0,0,0,0,-125,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-162,0,-19,0,-185,0,0,0,
            0,0,0,-7,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-57,0,0,
            0,0,0,0,0,0,0,0,-34,0,
            0,0,0,0,0,0,0,0,-58,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-59,
            0,0,0,0,0,0,0,0,0,0,
            -35,0,0,0,0,0,0,0,0,0,
            -60,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-61,0,0,0,0,0,0,0,0,
            0,0,-68,0,0,0,0,0,0,0,
            0,0,-62,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-63,0,0,0,0,0,0,
            0,0,0,0,-69,0,0,0,0,0,
            0,0,0,0,-64,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-65,0,0,0,0,
            0,0,0,0,0,0,-70,0,0,0,
            0,0,0,0,0,0,-66,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-67,0,0,
            0,0,0,0,0,0,0,0,-114,0,
            0,0,0,0,0,0,0,0,-145,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-146,
            0,0,0,0,0,0,0,0,0,0,
            -130,0,0,0,0,0,0,0,0,0,
            -163,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -186,0,0,0,0,0,0,0,0,0,
            0,-20,0,0,0,0,0,0,0,0,
            -12,0,0,0,0,0,0,0,-8,0,
            0,0,0,0,0,0,-194,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-202,0,0,0,
            0,0,0,0,0,0,0,-80,0,0,
            0,0,0,0,0,0,-13,0,0,0,
            0,0,0,0,-9,0,0,0,0,0,
            0,0,-210,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-122,0,0,0,0,0,0,0,
            0,0,0,-131,0,0,0,0,0,0,
            0,0,-30,0,0,-21,-82,-22,-176,0,
            -136,-113,0,0,0,0,0,0,0,0,
            -112,0,-77,-149,-126,-135,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-83,0,0,0,0,
            -23,0,-167,-32,-153,-87,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -24,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-53,0,
            0,0,0,0,0,0,0,0,0,-174,
            0,0,0,-116,0,-129,0,0,0,0,
            0,0,-138,-25,0,0,0,0,0,0,
            0,-158,0,0,0,0,-73,0,0,-191,
            0,-26,-88,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-49,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -141,-31,0,0,0,0,0,0,0,0,
            -89,0,-90,-91,-92,0,-193,0,-50,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-51,0,0,0,0,0,0,0,0,
            0,0,-209,0,-143,0,0,-93,0,-111,
            -127,0,0,0,-154,0,-200,-206,-150,-147,
            0,-43,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-94,-95,-96,0,0,
            0,-44,0,0,0,0,0,0,0,0,
            0,0,-45,0,0,0,0,0,0,0,
            0,0,0,-46,0,0,0,0,0,0,
            0,0,0,0,0,0,-47,0,0,0,
            0,0,0,0,0,0,-48,0,0,0,
            0,0,0,0,0,0,-204,-75,-78,-10,
            0,0,0,0,0,0,0,0,0,-11,
            0,0,0,0,0,0,0,-152,0,-151,
            0,0,-97,0,-168,0,0,0,0,-169,
            0,0,0,0,0,0,0,-211,-36,-164,
            0,0,0,0,0,0,0,0,0,0,
            0,-98,0,0,-157,0,-148,0,0,0,
            0,0,0,0,0,0,0,-85,0,-179,
            0,0,0,0,0,0,0,0,-139,-99,
            0,0,0,0,0,-40,0,0,0,0,
            0,0,0,-100,-101,-102,0,-41,0,0,
            0,0,0,0,0,-42,0,0,0,0,
            0,0,0,-72,0,0,0,0,0,0,
            0,-115,-188,-15,-172,-28,-195,0,-1,0,
            -166,-175,0,0,0,0,0,0,0,0,
            -207,0,0,-212,0,0,0,-103,0,0,
            0,-33,0,0,0,0,0,-29,0,0,
            -180,0,0,-170,0,0,0,0,0,0,
            0,0,0,0,0,-173,0,-104,0,0,
            -81,0,0,0,0,0,0,0,-192,-197,
            0,-84,0,-205,0,-171,0,-105,0,0,
            -86,-156,0,0,-198,-108,-106,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-184,-189,-190,-178,0,-196,0,0,
            0,-134,0,0,0,0,0,-109,0,0,
            0,0,0,-54,-199,-124,0,-133,0,0,
            0,0,-137,-142,0,-155,0,-161,0,-181,
            -182,-203,-208,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            87,11,24,24,21,21,32,32,70,70,
            1,1,2,2,2,2,3,3,3,4,
            5,5,5,5,5,5,5,5,51,51,
            71,6,6,6,6,6,6,6,6,6,
            6,6,7,7,8,8,8,8,9,9,
            9,10,10,10,12,12,12,12,12,13,
            13,13,14,14,15,15,16,16,17,17,
            18,18,19,19,20,20,20,20,20,20,
            20,20,20,20,20,20,101,41,33,88,
            88,73,73,47,102,102,102,102,102,102,
            102,103,103,103,104,104,109,109,110,110,
            105,105,106,106,106,112,112,107,107,107,
            107,108,108,108,108,108,111,111,25,25,
            25,25,25,27,27,27,79,79,74,74,
            74,74,75,75,75,76,76,76,77,77,
            77,78,78,78,113,113,114,114,115,28,
            30,30,30,30,30,52,54,54,54,54,
            54,54,54,54,54,54,54,54,64,61,
            61,89,90,65,65,62,62,62,66,80,
            80,81,81,67,67,67,42,91,91,82,
            83,83,83,63,63,92,84,84,85,85,
            68,68,22,23,23,23,29,48,48,34,
            34,34,34,37,37,39,35,35,36,40,
            40,116,116,38,117,117,93,93,26,26,
            26,26,26,26,26,26,26,86,49,49,
            49,49,31,56,56,55,55,55,57,57,
            50,50,94,94,60,60,58,58,58,43,
            43,43,44,45,45,45,46,46,46,46,
            53,53,53,59,95,72,72,72,72,69,
            96,97,97,98,98,99,99,118,118,119,
            119,120,120,120,120,122,122,121,121,121,
            123,123,87,87,1,1273,16,20,17,369,
            1272,44,497,491,695,44,532,1146,1022,1191,
            1148,1254,1211,74,91,738,134,212,65,1166,
            172,136,133,135,159,432,19,16,20,17,
            369,1272,44,497,491,695,397,532,1146,1022,
            1191,1148,1254,1211,74,280,138,27,165,663,
            365,738,634,161,186,142,145,148,151,1078,
            524,19,16,20,17,369,40,340,1449,372,
            1631,1642,1651,1196,134,212,274,694,285,144,
            133,135,159,282,1714,501,19,16,20,17,
            369,42,44,1311,286,161,185,1529,478,19,
            16,20,17,369,1272,44,497,491,695,397,
            532,1146,1022,1191,1148,1254,1211,74,280,326,
            19,16,20,17,369,1272,44,497,491,695,
            397,532,1146,1022,1191,1148,1254,1211,74,280,
            501,19,16,20,17,369,42,44,497,491,
            695,285,532,1146,1022,1191,1628,1714,501,19,
            16,20,17,369,42,44,1313,286,352,1713,
            1640,21,287,1718,1490,291,739,154,1714,501,
            19,16,20,17,369,42,39,1270,288,275,
            19,16,20,17,369,1272,44,497,491,695,
            1161,532,1146,1022,1191,1148,1254,1211,74,1350,
            161,187,6,238,455,19,16,20,17,369,
            1272,44,497,491,695,723,532,1146,1022,1191,
            1148,1254,1211,74,280,501,19,16,20,17,
            369,1272,44,497,491,695,194,532,1146,1022,
            1191,1148,1254,1211,74,91,501,19,16,20,
            17,369,42,44,497,491,695,289,532,1146,
            1022,1544,282,1714,570,19,16,20,17,369,
            1272,44,497,491,695,1165,532,1146,1022,1191,
            1148,1254,1211,74,1351,193,21,299,19,16,
            20,17,369,1272,44,497,491,695,340,532,
            1146,1022,1191,1148,1254,1211,74,1360,189,178,
            52,239,501,19,16,20,17,369,42,44,
            497,491,695,13,532,1146,1022,1191,1148,1598,
            134,212,253,212,345,136,133,135,159,501,
            19,16,20,17,369,1272,44,497,491,695,
            596,532,1146,1022,1191,1148,1254,1211,74,92,
            138,640,165,161,294,69,1475,161,296,142,
            145,148,151,1078,501,19,16,20,17,369,
            42,38,1449,372,1631,1642,1651,1196,501,19,
            16,20,17,369,1272,44,497,491,695,727,
            532,1146,1022,1191,1148,1254,1211,74,85,501,
            19,16,20,17,369,1272,44,497,491,695,
            1564,532,1146,1022,1191,1148,1254,1211,74,84,
            501,19,16,20,17,369,1272,44,497,491,
            695,727,532,1146,1022,1191,1148,1254,1211,74,
            83,501,19,16,20,17,369,1272,44,497,
            491,695,18,532,1146,1022,1191,1148,1254,1211,
            74,82,501,19,16,20,17,369,1272,44,
            497,491,695,727,532,1146,1022,1191,1148,1254,
            1211,74,81,501,19,16,20,17,369,1272,
            44,497,491,695,1648,532,1146,1022,1191,1148,
            1254,1211,74,80,501,19,16,20,17,369,
            1272,44,497,491,695,727,532,1146,1022,1191,
            1148,1254,1211,74,79,501,19,16,20,17,
            369,1272,44,497,491,695,1657,532,1146,1022,
            1191,1148,1254,1211,74,78,501,19,16,20,
            17,369,1272,44,497,491,695,727,532,1146,
            1022,1191,1148,1254,1211,74,77,501,19,16,
            20,17,369,1272,44,497,491,695,22,532,
            1146,1022,1191,1148,1254,1211,74,76,501,19,
            16,20,17,369,1272,44,497,491,695,727,
            532,1146,1022,1191,1148,1254,1211,74,75,501,
            19,16,20,17,369,1272,44,497,491,695,
            272,532,1146,1022,1191,1148,1254,1211,74,1480,
            501,19,16,20,17,369,1272,44,497,491,
            695,727,532,1146,1022,1191,1148,1254,1211,74,
            1614,501,19,16,20,17,369,42,44,497,
            491,695,278,532,1146,1022,1191,1148,1254,1211,
            93,501,19,16,20,17,369,42,44,497,
            491,695,67,532,1146,1022,1191,1148,1254,1211,
            93,547,19,16,20,17,369,33,1683,501,
            19,16,20,17,369,42,37,501,19,16,
            20,17,369,42,44,497,491,695,1688,532,
            1146,1022,1191,1148,1254,1211,93,501,19,16,
            20,17,369,42,44,497,491,695,125,532,
            1146,1022,1191,1148,1254,1211,93,547,19,16,
            20,17,369,32,211,501,19,16,20,17,
            369,42,36,501,19,16,20,17,369,42,
            44,497,491,695,201,532,1146,1022,1191,1148,
            1254,1211,93,501,19,16,20,17,369,42,
            44,497,491,695,151,532,1146,1022,1191,1148,
            1254,1211,73,161,30,1468,144,250,219,738,
            202,13,357,19,16,20,17,369,42,35,
            273,52,1652,673,711,52,157,338,217,1359,
            220,1470,222,223,228,1575,245,266,1163,370,
            271,179,262,253,212,276,413,253,212,275,
            273,191,263,52,605,710,189,178,217,1359,
            220,1470,222,223,228,555,638,266,1163,370,
            271,319,1646,373,24,253,212,1246,134,212,
            1134,1246,939,137,133,135,159,89,260,501,
            19,16,20,17,369,42,44,497,491,695,
            198,532,1146,1545,735,259,638,617,139,1573,
            165,949,415,13,281,1692,1716,143,146,149,
            152,1078,552,1720,1262,277,273,70,254,212,
            247,1706,554,593,218,1359,220,1470,222,223,
            228,1644,897,268,1163,370,271,501,19,16,
            20,17,369,42,44,497,491,695,1698,532,
            1473,13,161,30,217,1359,220,1470,222,223,
            228,156,371,350,415,460,1656,738,1722,501,
            19,16,20,17,369,42,44,497,491,695,
            208,1502,501,19,16,20,17,369,42,44,
            497,491,695,247,1530,647,1611,1721,483,203,
            282,282,197,199,1644,727,1193,738,738,682,
            282,545,501,19,16,20,17,369,42,44,
            497,491,1314,23,240,242,279,217,1359,220,
            1470,222,223,228,241,227,686,194,324,180,
            204,1722,501,19,16,20,17,369,42,44,
            497,491,1315,501,19,16,20,17,369,42,
            44,497,491,1348,501,19,16,20,17,369,
            42,44,497,491,1386,198,199,501,19,16,
            20,17,369,42,44,497,1387,501,19,16,
            20,17,369,42,44,497,1388,484,717,232,
            501,19,16,20,17,369,42,35,1644,1572,
            501,19,16,20,17,369,42,34,70,276,
            701,134,212,575,273,684,141,133,135,159,
            282,217,1359,220,1470,222,223,228,748,241,
            736,266,1163,370,271,1646,226,254,212,1698,
            1267,140,50,165,243,13,939,357,19,16,
            20,17,369,42,35,273,1520,1240,437,1706,
            552,1720,218,1359,220,1470,222,223,228,742,
            57,246,266,1163,370,271,501,19,16,20,
            17,369,42,47,323,428,104,265,501,19,
            16,20,17,369,42,46,501,19,16,20,
            17,369,42,45,408,19,16,20,17,369,
            42,43,307,718,13,307,13,161,1720,380,
            335,13,13,638,530,314,638,314,208,292,
            555,738,418,1685,211,254,212,1134,513,196,
            1134,196,13,1698,1639,1721,1698,87,13,87,
            488,745,87,555,282,771,1489,771,1489,314,
            312,1656,258,1594,1240,258,735,981,656,1708,
            981,643,1708,196,729,87,813,1684,244,745,
            742,87,672,592,70,209,727,230,97,771,
            1489,681,48,134,212,727,242,351,147,133,
            135,159,1317,638,134,212,325,224,855,150,
            133,135,159,134,212,1698,229,196,153,133,
            135,159,273,282,110,142,95,1706,282,281,
            1358,1591,615,1488,496,638,638,638,532,268,
            1163,370,271,638,13,577,590,293,377,1134,
            196,196,295,509,751,555,754,1134,392,191,
            755,761,236,767,1789,1789,233,496,496,1789,
            1789,1789,1149,1686,258,1789,1789,87,1789,1655,
            1789,1708,258,1789,1789,1546,1789,1355,1789,1708,
            1789,1789,191,192,1789,1789,1789,1789,1789,1789,
            1789,1789,1789,1789,1789,1357,1686,1789,1789,1789,
            1789,1789,1789,1789,1789,1789,1789,1705,1789,0,
            19,178,0,1,2014,0,1,2025,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,0,13,14,15,16,17,18,19,
            0,21,22,23,24,25,26,27,28,9,
            10,31,32,33,34,35,36,37,38,39,
            40,41,42,0,44,45,46,0,1,0,
            3,0,5,6,7,8,0,6,7,8,
            55,56,57,58,0,1,0,3,0,0,
            23,24,25,26,27,28,12,11,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,0,1,0,3,51,5,
            6,7,8,0,55,56,57,58,12,0,
            1,55,56,57,58,47,48,23,24,25,
            26,27,28,80,0,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,0,1,0,3,51,5,6,7,8,
            0,1,2,0,4,0,0,4,49,4,
            0,1,59,3,23,24,25,26,27,28,
            20,0,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,0,1,
            0,3,51,0,6,7,8,0,1,2,
            29,4,9,10,61,62,53,54,53,54,
            0,23,24,25,26,27,28,20,0,31,
            32,33,34,35,36,37,38,39,40,41,
            42,0,44,45,46,0,0,6,7,8,
            0,0,2,2,4,4,0,1,2,0,
            1,0,3,63,23,24,25,26,27,28,
            20,20,31,32,33,34,35,36,37,38,
            39,40,41,42,0,1,2,3,4,5,
            0,0,64,9,10,11,5,13,14,15,
            16,17,18,19,59,21,22,23,0,1,
            2,3,4,5,0,59,0,9,10,11,
            4,13,14,15,16,17,18,19,0,21,
            22,23,0,0,50,0,1,2,3,4,
            5,50,9,10,9,10,11,12,13,14,
            15,16,17,18,19,65,21,22,50,0,
            0,0,1,4,3,49,0,1,2,3,
            4,5,12,12,0,9,10,11,43,13,
            14,15,16,17,18,19,0,21,22,0,
            1,2,3,4,20,63,68,69,9,10,
            11,0,13,14,15,16,17,18,19,0,
            21,22,53,54,0,29,50,0,1,2,
            3,4,0,1,0,3,9,10,11,12,
            13,14,15,16,17,18,19,0,21,22,
            51,0,1,2,3,4,0,1,11,3,
            9,10,11,12,13,14,15,16,17,18,
            19,60,21,22,0,1,2,3,4,0,
            0,47,48,9,10,11,12,13,14,15,
            16,17,18,19,0,21,22,0,1,2,
            3,4,0,0,1,2,9,10,11,12,
            13,14,15,16,17,18,19,0,21,22,
            0,1,2,3,4,0,47,48,0,9,
            10,11,0,13,14,15,16,17,18,19,
            12,21,22,0,1,2,3,4,0,47,
            48,0,9,10,11,4,13,14,15,16,
            17,18,19,0,21,22,0,1,2,3,
            4,0,1,0,3,9,10,11,0,13,
            14,15,16,17,18,19,0,21,22,0,
            1,2,3,4,0,0,0,65,9,10,
            11,5,13,14,15,16,17,18,19,0,
            21,22,0,4,2,0,4,5,6,7,
            8,6,7,8,0,29,30,0,1,5,
            3,0,20,60,0,23,24,25,26,27,
            28,0,30,70,71,72,73,74,75,76,
            77,78,79,0,30,61,62,0,0,6,
            7,8,0,6,7,8,0,0,6,7,
            8,0,6,7,8,0,23,24,25,26,
            27,28,0,49,2,23,24,25,26,27,
            28,0,0,0,2,13,14,6,7,8,
            0,0,20,0,0,0,6,7,8,6,
            7,8,20,0,23,24,25,26,27,28,
            0,20,2,23,24,25,26,27,28,0,
            0,1,2,20,52,5,0,0,2,64,
            20,5,0,6,7,8,0,5,0,67,
            20,5,47,48,0,0,20,0,0,5,
            30,0,5,5,0,52,30,0,1,2,
            0,29,0,0,0,20,30,5,49,0,
            0,0,12,0,30,12,0,1,0,0,
            29,12,0,29,0,12,0,0,0,0,
            43,12,0,0,0,0,0,52,66,29,
            0,0,0,0,0,43,0,0,0,0,
            0,0,0,0,66,0,0,0,0,0,
            0,0,0,0,60,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1789,1799,1574,1800,1450,59,2002,2003,2004,1095,
            1039,1460,1,1087,1031,380,1801,1802,1803,1804,
            51,704,499,1951,1952,1950,2005,1953,1949,478,
            405,1956,1961,1960,1958,1959,1957,1962,1963,1955,
            1964,1965,1966,1789,1518,1186,1147,1789,1,61,
            1,1789,190,1,1,1,60,2002,2003,2004,
            1414,1403,1392,1362,1789,1799,64,1800,54,252,
            1,1,1,1,1,1,1151,1287,1,1,
            1,1,1,1,1,1,1,1,1,1,
            190,1,1,1,1789,1,41,1,1984,189,
            1,1,1,1789,1414,1403,1392,1362,653,1,
            1786,1414,1403,1392,1362,1427,1437,1,1,1,
            1,1,1,1779,181,1,1,1,1,1,
            1,1,1,1,1,1,1,189,1,1,
            1,1789,1,62,1,1984,190,1,1,1,
            261,2014,1164,48,1,50,182,1556,2046,1556,
            1789,1799,1123,1800,1,1,1,1,1,1,
            509,88,1,1,1,1,1,1,1,1,
            1,1,1,1,190,1,1,1,1789,1799,
            66,1800,1984,53,2002,2003,2004,267,2014,1164,
            669,252,478,405,1332,1319,1548,1536,1548,1536,
            284,1951,1952,1950,2005,1953,1949,509,68,1956,
            1961,1960,1958,1959,1957,1962,1963,1955,1964,1965,
            1966,128,1518,1186,1147,200,1789,2002,2003,2004,
            264,267,1448,1448,1,252,1,2014,1447,184,
            2862,1789,2862,1229,1951,1952,1950,2005,1953,1949,
            509,509,1956,1961,1960,1958,1959,1957,1962,1963,
            1955,1964,1965,1966,1,1799,1574,1800,1152,1792,
            70,1789,576,1095,1039,1460,1792,1087,1031,380,
            1801,1802,1803,1804,1103,704,499,594,1789,1799,
            1574,1800,1507,1792,1789,1067,1,1095,1039,1460,
            252,1087,1031,380,1801,1802,1803,1804,72,704,
            499,970,67,52,1791,1,1799,1574,1800,1450,
            28,1791,478,405,1095,1039,1460,2855,1087,1031,
            380,1801,1802,1803,1804,460,704,499,1791,49,
            1789,1789,1799,1556,1800,2046,1789,1799,1574,1800,
            1450,1792,653,1253,270,1095,1039,1460,28,1087,
            1031,380,1801,1802,1803,1804,255,704,499,1789,
            1,1,1,1,509,1229,642,1704,1,1,
            1,1789,1,1,1,1,1,1,1,1789,
            1,1,1548,1536,1789,1195,1791,1789,1799,1574,
            1800,1450,183,2866,58,2866,1095,1039,1460,653,
            1087,1031,380,1801,1802,1803,1804,65,704,499,
            2102,1,1799,1574,1800,1450,205,2872,1287,2872,
            1095,1039,1460,2855,1087,1031,380,1801,1802,1803,
            1804,534,704,499,1789,1799,1574,1800,1450,57,
            1789,1427,1437,1095,1039,1460,2855,1087,1031,380,
            1801,1802,1803,1804,1789,704,499,1,1799,1574,
            1800,1450,56,1,2014,1447,1095,1039,1460,2855,
            1087,1031,380,1801,1802,1803,1804,1789,704,499,
            1789,1799,1574,1800,1450,1789,1427,1437,1789,1095,
            1039,1460,71,1087,1031,380,1801,1802,1803,1804,
            1505,704,499,1789,1799,1576,1800,1450,1789,1427,
            1437,1789,1095,1039,1460,680,1087,1031,380,1801,
            1802,1803,1804,1789,704,499,1789,1799,1608,1800,
            1450,207,1799,42,1800,1095,1039,1460,1789,1087,
            1031,380,1801,1802,1803,1804,1789,704,499,1,
            1799,1574,1800,1450,63,1789,1789,460,1095,1039,
            1460,1794,1087,1031,380,1801,1802,1803,1804,1789,
            704,499,19,1345,1780,248,1780,1780,178,178,
            178,1,1,1,1,1723,1793,206,1577,90,
            1577,1789,1780,928,1,178,178,178,178,178,
            178,1789,1780,907,886,865,844,823,781,802,
            760,739,718,129,90,1332,1319,247,1789,2002,
            2003,2004,130,2002,2003,2004,249,1789,2002,2003,
            2004,1789,1,1,1,69,1951,1952,1950,2005,
            1953,1949,31,2046,1194,1951,1952,1950,2005,1953,
            1949,131,269,1789,1244,1814,1815,2002,2003,2004,
            132,219,1602,250,1789,55,2002,2003,2004,2002,
            2003,2004,509,1789,1951,1952,1950,2005,1953,1949,
            221,509,1626,1951,1952,1950,2005,1953,1949,1,
            1,1783,1164,991,1302,1794,1,251,1448,576,
            509,1794,1789,2002,2003,2004,1789,1798,1789,1143,
            509,1794,1427,1437,1,290,509,1789,1,1794,
            1793,29,1796,1798,29,693,1793,252,2014,1447,
            1789,1343,283,1789,210,1011,1793,1301,2045,188,
            206,1789,1581,188,1793,1582,1789,2026,1789,188,
            439,184,1789,1817,1789,183,1789,1789,1789,1789,
            1795,205,1789,1789,1789,1789,1789,697,1797,2710,
            1789,1789,1789,1789,1789,1301,1789,1789,1789,1789,
            1789,1789,1789,1789,1797,1789,1789,1789,1789,1789,
            1789,1789,1789,1789,1047
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            370,1,83,41,83,83,83,83,83,83,
            83,83,83,3,329,403,400,407,405,413,
            411,415,414,417,416,10,83,329,329,254,
            254,150,83,221,221,282,329,83,83,83,
            83,83,83,83,83,83,83,83,83,83,
            83,83,83,83,83,83,83,83,83,83,
            83,83,83,83,83,83,83,221,221,221,
            45,52,286,77,224,219,218,257,269,66,
            269,66,66,269,66,269,343,175,400,400,
            405,405,405,405,403,403,411,407,407,414,
            413,294,416,415,388,68,50,282,286,100,
            45,366,81,221,300,227,66,254,254,66,
            254,83,50,286,277,366,45,80,77,221,
            280,343,220,229,68,120,68,169,171,297,
            147,68,277,366,83,83,45,81,224,289,
            288,286,229,221,68,120,169,169,147,48,
            431,254,83,296,147,50,366,277,45,45,
            221,300,227,280,120,147,70,120,169,171,
            428,171,52,45,254,83,50,277,229,120,
            72,171,147,83,254,45,171,221,220,147,
            424,83,423,96,286,147,147,255,72,83,
            96,171
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,66,20,2,52,67,13,14,11,
            4,9,10,53,54,47,48,55,56,57,
            58,61,62,63,64,65,68,69,43,60,
            70,71,72,73,74,76,75,77,78,79,
            59,30,80,29,50,5,0,5,43,20,
            52,13,14,11,4,9,10,21,22,15,
            2,16,17,18,19,1,3,12,0,66,
            5,4,1,2,59,0,6,7,8,23,
            50,5,16,17,18,19,3,13,14,11,
            9,10,21,22,15,4,2,1,0,6,
            7,8,2,16,17,18,19,1,3,13,
            14,11,4,9,10,21,22,15,0,24,
            31,6,32,44,25,33,26,34,35,27,
            7,36,37,23,45,28,46,38,39,8,
            40,41,42,1,3,51,5,43,0,5,
            30,15,16,17,18,19,1,3,2,13,
            14,11,4,9,10,21,22,0,1,3,
            5,43,29,0,7,23,28,8,27,26,
            25,6,24,52,67,13,14,11,9,10,
            53,54,47,48,55,56,57,58,61,62,
            63,64,65,68,69,60,70,71,72,73,
            74,75,76,77,78,79,4,2,20,29,
            30,5,0,4,2,20,30,5,24,31,
            6,32,44,25,33,26,34,35,27,7,
            36,37,23,45,28,46,38,39,8,40,
            41,42,49,3,1,0,39,31,36,34,
            35,33,32,37,38,40,41,42,59,66,
            28,25,23,24,27,26,6,7,8,29,
            1,5,30,2,20,4,0,2,5,29,
            30,66,20,59,0,60,20,52,0,4,
            24,31,6,32,44,25,33,26,34,35,
            27,7,36,37,23,45,28,46,38,39,
            8,40,41,42,1,3,49,0,15,16,
            17,18,19,2,13,14,11,4,9,10,
            21,22,1,3,44,45,46,39,31,36,
            34,35,33,32,37,38,40,41,42,28,
            25,23,24,27,26,6,7,8,0,15,
            16,17,18,19,1,3,2,13,14,11,
            4,9,10,21,22,51,0,60,70,71,
            72,73,74,75,76,77,78,79,12,4,
            53,54,9,10,48,47,55,56,57,58,
            61,62,11,63,64,65,50,30,43,80,
            68,69,59,66,5,29,0,5,29,43,
            60,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            99,37,18,37,18,18,18,18,18,18,
            18,18,18,37,95,37,37,37,37,37,
            37,37,37,37,37,37,18,95,95,40,
            40,53,96,71,71,79,1,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,96,18,18,18,18,18,18,
            18,18,18,18,18,18,18,71,71,71,
            25,18,75,23,78,11,11,61,62,38,
            62,86,86,62,85,62,56,37,37,37,
            37,37,37,37,37,37,37,37,37,37,
            37,37,37,37,37,37,49,108,37,27,
            25,42,24,71,90,70,7,7,7,7,
            7,18,16,37,49,42,25,24,73,71,
            45,30,37,92,51,49,37,49,88,13,
            49,37,49,42,18,18,25,24,44,11,
            11,75,92,71,37,104,49,7,9,15,
            37,7,18,83,9,49,42,73,25,25,
            71,90,70,64,49,9,20,116,7,88,
            37,37,17,25,7,18,16,73,112,104,
            47,88,9,18,7,25,88,71,71,9,
            21,18,37,47,75,9,9,37,47,18,
            66,102
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            79,77,76,65,75,74,1,0,32,0,
            26,0,97,0,69,11,59,5,0,11,
            70,0,11,5,24,0,5,11,0,79,
            78,77,76,65,75,74,0,89,0,71,
            0,56,0,21,45,44,37,35,11,0,
            90,0,11,88,0,65,61,62,63,64,
            52,27,0,45,44,37,35,31,0,11,
            21,0,22,0,31,49,0,21,44,45,
            11,0,99,0,92,66,0,51,0,31,
            49,11,25,0,42,11,41,0,11,87,
            0,95,0,81,11,42,0,45,44,31,
            0,93,11,25,0,11,42,67,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,10,11,
            8,3,6,7,68,81,82,83,84,1,
            12,13,69,44,55,60,63,72,42,90,
            47,52,56,61,62,66,67,74,75,78,
            79,80,91,54,70,73,16,17,30,89,
            93,4,14,15,18,19,20,21,29,31,
            22,23,24,25,26,92,5,27,28,32,
            33,34,35,36,37,38,39,40,41,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            100,0,0,0,102,106,107,108,109,110,
            0,111,112,113,114,115,116,117,118,119,
            97,129,0,96,122,150,128,0,0,0,
            0,98,0,146,148,0,149,0,0,0,
            101,141,159,160,161,0,121,137,147,156,
            0,131,136,0,151,154,155,158,0,104,
            132,133,134,135,138,0,140,145,162,99,
            103,105,120,123,124,125,126,127,130,0,
            139,143,0,0,144,153,95,0,0,0,
            142,0,152,157,0,163,164,0,165,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            82,113,162,92,35,41,121,12,136,21,
            51,69,28,47,103,158,177,181,145,1,
            1,32,56,79,185,6,107,152,127,152,
            99,59,59,59
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            90,90,90,90,4,4,90,18,142,26,
            4,26,26,4,101,26,26,4,149,4,
            4,26,4,26,26,9,110,155,130,170,
            101,66,61,74
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            63,61,5,63,26,26,61,53,106,46,
            26,40,46,26,67,6,5,5,19,99,
            98,44,26,37,3,69,67,7,107,5,
            67,40,38,40
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            43,43,43,43,50,50,43,43,86,30,
            50,30,30,50,66,30,30,50,59,50,
            50,30,50,30,30,60,1,30,92,30,
            66,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            17,17,32,17,21,21,17,87,-1,25,
            21,9,25,21,3,32,32,32,62,1,
            7,25,21,9,32,88,3,35,-1,32,
            3,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            140,20,0,96,0,189,104,0,31,136,
            0,144,165,104,12,152,0,98,0,0,
            148,104,2,137,0,97,0,148,104,2,
            0,151,2,0,113,23,179,104,20,0,
            113,179,104,23,20,0,113,23,20,0,
            113,179,104,20,0,113,20,0,130,0,
            2,0,152,97,0,2,97,0,148,104,
            2,130,0,2,0,151,97,0,141,2,
            0,144,177,104,12,94,185,44,0,98,
            0,144,177,104,12,185,44,0,135,0,
            99,0,184,104,135,0,104,135,0,142,
            99,0,173,104,12,183,94,182,158,0,
            173,104,12,182,158,0,195,85,0,77,
            2,101,97,99,0,195,114,134,2,89,
            0,53,0,0,134,69,111,0,29,118,
            0,153,2,0,97,107,0,153,2,15,
            0,144,165,104,12,114,153,2,0,97,
            3,0,105,0,98,0,181,2,98,0,
            134,20,98,0,134,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1490,0,1685,1686,1652,0,397,0,1488,1343,
            1447,1270,1240,1164,1134,0,638,1196,314,0,
            1470,1359,1163,370,1240,1164,1134,1656,1448,1489,
            0,1087,1031,380,1507,1152,1564,460,642,1229,
            576,1332,1319,1287,1437,1427,1414,1403,1392,1362,
            1556,1548,1536,478,405,1460,1450,1095,1039,704,
            499,1103,1067,1047,1011,991,970,949,617,1123,
            594,509,928,907,886,865,844,823,802,781,
            760,739,718,314,669,555,534,418,439,345,
            0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,180,104,166,15,22,21,10,9,4,
            11,14,13,98,2,102,101,105,103,107,
            106,109,108,111,110,99,29,2,2,67,
            52,2,20,153,134,135,104,10,9,54,
            53,4,58,57,56,55,47,48,11,62,
            61,64,63,69,68,65,79,78,77,75,
            76,74,73,72,71,70,60,153,153,181,
            134,114,104,20,2,138,137,167,168,158,
            169,46,45,170,44,171,172,94,101,101,
            103,103,103,103,102,102,106,105,105,108,
            107,134,110,109,114,114,12,142,124,23,
            113,104,4,151,104,2,182,159,159,185,
            159,59,104,124,4,104,113,179,149,148,
            118,104,150,104,94,12,94,12,165,104,
            12,152,4,104,179,23,113,4,2,128,
            130,104,29,148,183,104,12,104,144,29,
            189,52,20,190,104,12,104,149,113,113,
            141,104,2,142,12,173,135,174,104,177,
            94,178,60,140,52,20,104,149,104,104,
            104,177,144,60,29,140,165,148,186,173,
            184,59,141,2,104,144,144,29,29,59,
            142,125
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "expression_parser_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 51,
           SCOPE_UBOUND      = 33,
           SCOPE_SIZE        = 34,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 212,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2102,
           MAX_LA            = 2,
           NUM_RULES         = 313,
           NUM_NONTERMINALS  = 123,
           NUM_SYMBOLS       = 216,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1579,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1779,
           ERROR_ACTION      = 1789;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
