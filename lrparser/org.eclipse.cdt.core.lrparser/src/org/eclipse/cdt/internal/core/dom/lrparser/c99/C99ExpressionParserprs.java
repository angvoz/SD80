/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99ExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, C99ExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,3,1,
            1,4,4,3,3,2,2,8,1,0,
            1,1,2,2,2,2,2,2,2,2,
            2,4,1,4,1,3,3,3,1,3,
            3,1,3,3,1,3,3,3,3,1,
            3,3,1,3,1,3,1,3,1,3,
            1,3,1,5,1,3,3,3,3,3,
            3,3,3,3,3,3,1,1,2,1,
            0,1,3,1,1,1,1,1,1,1,
            1,3,4,3,2,4,1,2,1,1,
            1,2,5,7,5,1,0,7,5,9,
            8,3,2,2,2,3,2,4,2,2,
            2,2,2,1,1,1,1,2,1,2,
            2,2,1,2,2,1,2,2,1,2,
            2,1,2,2,1,3,1,3,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,6,
            8,0,0,1,1,3,3,3,0,1,
            0,1,2,4,2,1,1,1,3,1,
            1,2,3,7,8,0,1,0,1,3,
            1,3,1,1,1,1,1,1,3,1,
            1,1,1,1,3,1,2,2,1,5,
            3,1,3,5,1,3,1,3,2,4,
            3,5,4,6,6,3,5,1,3,4,
            5,6,0,1,2,1,3,1,1,3,
            2,1,1,1,1,2,1,2,3,1,
            1,1,3,1,2,2,2,3,4,5,
            1,7,3,0,0,1,1,3,3,4,
            1,1,2,3,2,3,2,1,0,1,
            2,1,1,1,1,1,2,4,3,6,
            2,4,1,1,-37,0,0,0,0,0,
            0,0,0,0,0,-159,0,0,0,0,
            0,0,0,0,0,-2,0,0,-4,-76,
            -71,-77,0,0,0,0,-55,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-117,
            0,-118,0,-140,-14,0,0,0,0,0,
            -5,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-123,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-187,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-56,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-38,0,0,0,0,0,
            0,0,0,0,-196,0,0,-16,0,0,
            0,0,-30,0,0,-39,0,0,0,0,
            0,0,0,0,0,-31,0,0,-160,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-74,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -17,-107,0,0,-12,0,0,0,0,0,
            0,0,0,0,-119,0,-18,0,-6,0,
            0,0,0,0,0,0,0,0,-183,0,
            0,0,0,0,0,0,0,0,0,-34,
            0,0,0,0,0,0,0,0,0,-3,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -52,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-85,0,-110,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-82,
            -19,-128,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-132,0,-129,0,-53,0,0,0,
            0,0,0,0,0,0,0,-20,0,0,
            0,-165,0,-125,0,0,0,0,-35,-79,
            0,0,0,0,-49,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-21,0,0,0,0,
            0,-120,0,0,0,0,0,0,-7,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-27,0,0,0,0,0,0,0,
            0,0,0,-68,0,0,0,0,0,0,
            0,0,0,-57,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-58,0,0,0,0,0,
            0,0,0,0,0,-69,0,0,0,0,
            0,0,0,0,0,-59,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-60,0,0,0,
            0,0,0,0,0,0,0,-70,0,0,
            0,0,0,0,0,0,0,-61,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-62,0,
            0,0,0,0,0,0,0,0,0,-114,
            0,0,0,0,0,0,0,0,0,-63,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -64,0,0,0,0,0,0,0,0,0,
            0,-130,0,0,0,0,0,0,0,0,
            0,-65,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-66,0,0,0,0,0,0,0,
            0,0,0,-154,0,0,0,0,0,0,
            0,0,0,-67,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-122,0,0,0,0,0,
            0,0,0,0,0,-171,0,0,0,0,
            0,0,0,0,0,-145,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-146,0,0,0,
            0,0,0,0,0,0,0,-22,0,0,
            0,0,0,0,0,0,0,-163,0,0,
            0,0,0,0,0,0,0,0,-80,0,
            0,0,0,0,0,0,0,-186,0,0,
            0,0,0,0,0,0,0,0,-83,0,
            0,0,0,0,0,0,0,-13,0,0,
            0,0,0,0,0,-8,0,0,0,0,
            0,0,0,-195,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-204,0,0,0,0,0,0,
            0,0,0,0,-139,0,0,0,0,0,
            0,0,0,-135,0,-121,0,0,-162,0,
            0,-23,-164,-185,0,-73,-24,-174,-78,-212,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-131,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-25,-143,
            0,0,0,0,0,0,0,-152,-200,-149,
            0,-207,0,0,0,0,0,0,0,0,
            0,-177,0,0,0,0,0,0,-136,0,
            0,-33,0,0,0,0,-189,0,0,0,
            -87,0,0,0,0,0,0,0,0,0,
            -192,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-176,-203,0,0,0,
            0,0,0,0,-47,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-180,0,-26,-88,0,0,-89,
            -90,0,0,0,0,0,-50,0,0,0,
            0,0,0,0,0,0,0,-199,0,-51,
            0,0,0,0,0,0,0,0,0,0,
            -193,0,0,0,-211,-91,0,-92,-93,0,
            0,0,-94,-194,0,0,-43,0,0,0,
            0,0,0,0,0,0,0,-44,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-198,-158,0,-95,
            -96,0,0,-45,0,0,0,0,0,0,
            0,0,0,0,-46,0,0,0,0,0,
            0,0,0,0,0,-48,0,0,0,0,
            0,0,0,0,0,-206,0,0,-138,-111,
            -116,-75,-127,-201,-147,-97,0,0,-98,0,
            -150,0,0,-113,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-151,-213,
            -81,0,0,0,0,0,0,0,-148,0,
            0,0,0,0,0,0,-141,-99,-100,0,
            -101,-102,0,0,0,-103,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -9,0,0,0,0,0,0,0,-10,0,
            0,0,0,0,0,0,-11,0,0,0,
            0,0,0,0,-36,-40,0,0,0,0,
            0,0,0,-144,-157,0,-41,0,0,0,
            0,0,0,0,0,0,-104,-169,-105,-106,
            0,-42,0,0,0,0,0,0,0,-72,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-115,-15,-173,-172,-28,-166,-29,-167,
            -32,-170,0,0,0,0,0,0,0,0,
            0,0,-184,-175,-202,0,-208,0,0,0,
            0,0,0,0,0,0,0,-214,-109,0,
            -124,0,-84,0,0,0,0,0,0,0,
            0,0,0,-86,0,0,0,0,0,0,
            0,-108,0,0,0,0,0,-156,0,-190,
            0,0,0,0,-191,0,0,-133,0,-1,
            0,0,0,0,0,0,-178,0,0,-134,
            0,-197,0,-137,0,-112,-142,0,0,0,
            0,-179,0,-155,0,0,0,0,-126,0,
            -209,0,0,-161,0,0,0,0,0,0,
            0,-181,-182,-205,0,-153,0,-54,0,-210,
            0,0,0,0,0,-168,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-188,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            87,11,101,24,24,21,21,32,32,70,
            70,1,1,2,2,2,2,3,3,3,
            4,5,5,5,5,5,5,5,5,51,
            51,71,6,6,6,6,6,6,6,6,
            6,6,6,7,7,8,8,8,8,9,
            9,9,10,10,10,12,12,12,12,12,
            13,13,13,14,14,15,15,16,16,17,
            17,18,18,19,19,20,20,20,20,20,
            20,20,20,20,20,20,20,102,41,33,
            88,88,73,73,47,103,103,103,103,103,
            103,103,104,104,104,105,105,110,110,111,
            111,106,106,107,107,107,113,113,108,108,
            108,108,109,109,109,109,109,112,112,25,
            25,25,25,25,28,28,28,79,79,74,
            74,74,74,75,75,75,76,76,76,77,
            77,77,78,78,78,114,114,115,115,116,
            29,31,31,31,31,31,52,54,54,54,
            54,54,54,54,54,54,54,54,54,64,
            61,61,89,90,65,65,62,62,62,66,
            80,80,81,81,67,67,67,42,91,91,
            82,83,83,83,63,63,92,84,84,85,
            85,68,68,22,23,23,23,30,48,48,
            34,34,34,34,37,37,39,35,35,36,
            40,40,117,117,38,118,118,93,93,26,
            26,26,26,26,26,26,26,26,86,49,
            49,49,49,27,56,56,55,55,55,57,
            57,50,50,94,94,60,60,58,58,58,
            43,43,43,44,45,45,45,46,46,46,
            46,53,53,53,59,95,72,72,72,72,
            69,96,97,97,98,98,99,99,119,119,
            120,120,121,121,121,121,123,123,122,122,
            122,124,124,87,87,1,1307,17,21,18,
            375,1306,45,531,468,641,738,547,716,678,
            1162,1048,1209,1167,75,92,44,135,213,172,
            365,282,673,137,134,136,160,501,20,17,
            21,18,375,43,45,531,468,641,28,547,
            716,678,1162,1048,1496,22,275,139,276,166,
            65,1154,161,187,694,663,143,146,149,152,
            1069,524,20,17,21,18,375,41,339,1169,
            690,1471,1623,1634,1251,432,20,17,21,18,
            375,1306,45,531,468,641,374,547,716,678,
            1162,1048,1209,1167,75,281,478,20,17,21,
            18,375,1306,45,531,468,641,374,547,716,
            678,1162,1048,1209,1167,75,281,501,20,17,
            21,18,375,43,45,531,468,641,286,547,
            716,678,1162,1557,1677,501,20,17,21,18,
            375,43,45,1310,287,161,1702,1145,21,286,
            1694,1163,292,161,31,1677,501,20,17,21,
            18,375,43,45,1311,287,161,31,1387,326,
            20,17,21,18,375,1306,45,531,468,641,
            374,547,716,678,1162,1048,1209,1167,75,281,
            275,20,17,21,18,375,1306,45,531,468,
            641,1676,547,716,678,1162,1048,1209,1167,75,
            1430,154,13,210,239,547,20,17,21,18,
            375,34,288,395,25,161,186,6,1677,501,
            20,17,21,18,375,43,40,24,289,455,
            20,17,21,18,375,1306,45,531,468,641,
            727,547,716,678,1162,1048,1209,1167,75,281,
            501,20,17,21,18,375,1306,45,531,468,
            641,1570,547,716,678,1162,1048,1209,1167,75,
            92,501,20,17,21,18,375,43,45,531,
            468,641,290,547,716,678,1489,437,1677,570,
            20,17,21,18,375,1306,45,531,468,641,
            1689,547,716,678,1162,1048,1209,1167,75,1433,
            250,69,299,20,17,21,18,375,1306,45,
            531,468,641,339,547,716,678,1162,1048,1209,
            1167,75,1435,189,179,596,240,501,20,17,
            21,18,375,43,45,531,468,641,67,547,
            716,1491,738,1156,70,135,213,255,213,727,
            634,137,134,136,160,501,20,17,21,18,
            375,43,45,531,468,641,372,547,1436,722,
            19,1544,135,213,283,139,144,166,145,134,
            136,160,352,1674,143,146,149,152,1069,501,
            20,17,21,18,375,43,39,1169,690,1471,
            1623,1634,1251,501,20,17,21,18,375,1306,
            45,531,468,641,727,547,716,678,1162,1048,
            1209,1167,75,93,501,20,17,21,18,375,
            1306,45,531,468,641,1559,547,716,678,1162,
            1048,1209,1167,75,86,501,20,17,21,18,
            375,1306,45,531,468,641,727,547,716,678,
            1162,1048,1209,1167,75,85,501,20,17,21,
            18,375,1306,45,531,468,641,1560,547,716,
            678,1162,1048,1209,1167,75,84,501,20,17,
            21,18,375,1306,45,531,468,641,727,547,
            716,678,1162,1048,1209,1167,75,83,501,20,
            17,21,18,375,1306,45,531,468,641,23,
            547,716,678,1162,1048,1209,1167,75,82,501,
            20,17,21,18,375,1306,45,531,468,641,
            727,547,716,678,1162,1048,1209,1167,75,81,
            501,20,17,21,18,375,1306,45,531,468,
            641,273,547,716,678,1162,1048,1209,1167,75,
            80,501,20,17,21,18,375,1306,45,531,
            468,641,727,547,716,678,1162,1048,1209,1167,
            75,79,501,20,17,21,18,375,1306,45,
            531,468,641,279,547,716,678,1162,1048,1209,
            1167,75,78,501,20,17,21,18,375,1306,
            45,531,468,641,727,547,716,678,1162,1048,
            1209,1167,75,77,501,20,17,21,18,375,
            1306,45,531,468,641,280,547,716,678,1162,
            1048,1209,1167,75,76,501,20,17,21,18,
            375,1306,45,531,468,641,727,547,716,678,
            1162,1048,1209,1167,75,74,501,20,17,21,
            18,375,1306,45,531,468,641,225,547,716,
            678,1162,1048,1209,1167,75,1558,501,20,17,
            21,18,375,1306,45,531,468,641,219,547,
            716,678,1162,1048,1209,1167,75,1592,501,20,
            17,21,18,375,43,45,531,468,641,125,
            547,716,678,1162,1048,1209,1167,94,501,20,
            17,21,18,375,43,45,531,468,641,413,
            547,716,678,1162,1048,1209,1167,94,547,20,
            17,21,18,375,33,1603,501,20,17,21,
            18,375,43,38,501,20,17,21,18,375,
            43,45,531,468,641,1672,547,716,678,1162,
            1048,1209,1167,94,501,20,17,21,18,375,
            43,45,531,468,641,742,547,716,678,1162,
            1048,1209,1167,94,157,545,161,188,370,161,
            295,212,191,736,161,297,70,319,198,232,
            501,20,17,21,18,375,43,45,531,468,
            641,202,547,716,678,1162,1048,1209,1167,94,
            151,135,213,1619,274,1621,326,142,134,136,
            160,1218,219,1441,221,1469,223,224,229,281,
            70,269,342,340,272,1642,274,203,70,727,
            711,141,70,166,218,1441,221,1469,223,224,
            229,1586,739,267,342,340,272,1590,263,13,
            230,277,13,1261,1684,1619,274,684,264,1619,
            1648,189,179,580,218,1441,221,1469,223,224,
            229,247,293,267,342,340,272,1168,1006,255,
            213,1470,1222,135,213,88,738,723,880,138,
            134,136,160,341,261,501,20,17,21,18,
            375,43,45,531,1390,218,1441,221,1469,223,
            224,229,195,140,745,166,554,593,180,1704,
            156,350,144,147,150,153,1069,501,20,17,
            21,18,375,43,45,531,468,641,718,1439,
            501,20,17,21,18,375,43,45,531,468,
            641,745,1488,198,200,247,415,194,460,483,
            255,213,1277,686,738,1354,1222,501,20,17,
            21,18,375,43,45,531,468,1346,501,20,
            17,21,18,375,43,45,531,468,1348,218,
            1441,221,1469,223,224,229,204,742,552,1702,
            194,324,1607,1704,501,20,17,21,18,375,
            43,45,531,468,1349,501,20,17,21,18,
            375,43,45,531,468,1353,501,20,17,21,
            18,375,43,45,531,1391,484,199,200,13,
            282,735,717,282,577,282,575,1222,1691,50,
            1388,682,1670,1583,357,20,17,21,18,375,
            43,36,278,277,241,234,209,243,274,242,
            218,1441,221,1469,223,224,229,228,246,701,
            748,643,1304,1703,1006,267,342,340,272,357,
            20,17,21,18,375,43,36,13,57,323,
            880,428,104,135,213,227,513,1621,682,148,
            134,136,160,247,219,1441,221,1469,223,224,
            229,501,20,17,21,18,375,43,37,501,
            20,17,21,18,375,43,36,501,20,17,
            21,18,375,43,35,241,501,20,17,21,
            18,375,43,48,638,13,1166,501,20,17,
            21,18,375,43,47,1716,1682,656,282,97,
            351,274,501,20,17,21,18,375,43,46,
            408,20,17,21,18,375,43,44,267,342,
            340,272,244,307,13,735,307,13,13,13,
            647,605,282,266,663,315,1650,663,315,416,
            315,1730,580,282,13,738,231,738,1190,197,
            1619,1190,197,1619,197,1655,245,88,211,532,
            88,590,88,672,90,689,1535,294,689,1535,
            689,1535,1642,259,681,1168,259,181,922,205,
            1658,922,242,1658,570,135,213,754,48,796,
            110,151,134,136,160,142,135,213,377,663,
            380,663,154,134,136,160,663,95,274,1621,
            615,580,282,197,509,1190,52,751,663,838,
            197,663,552,1702,754,269,342,340,272,52,
            1232,738,197,88,392,1190,296,1232,254,213,
            259,313,755,761,236,1219,710,1658,13,1232,
            767,254,213,282,1798,192,52,663,1798,580,
            259,1798,192,1618,1798,964,1798,1658,1276,1667,
            52,1190,665,1798,193,1605,1667,1798,254,213,
            1798,88,1798,1434,1798,665,1798,336,1798,1492,
            209,1798,254,213,1798,1798,260,1798,1798,1798,
            1798,1798,642,1798,1798,1798,1341,1703,1798,1798,
            1798,1798,1247,1798,1798,1016,1798,1798,1798,1798,
            1798,1798,1798,1798,1798,1798,1328,1798,0,20,
            179,0,1,2024,0,1,2035,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,0,13,14,15,16,17,18,19,
            0,21,22,23,24,25,26,27,28,9,
            10,31,32,33,34,35,36,37,38,39,
            40,41,42,0,44,45,46,0,1,0,
            3,0,5,6,7,8,0,6,7,8,
            55,56,57,58,0,1,0,3,0,0,
            23,24,25,26,27,28,12,11,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,0,1,0,3,51,5,
            6,7,8,0,55,56,57,58,12,0,
            1,55,56,57,58,47,48,23,24,25,
            26,27,28,80,0,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,0,1,0,3,51,5,6,7,8,
            0,1,2,0,4,0,0,4,49,4,
            0,1,59,3,23,24,25,26,27,28,
            20,0,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,0,1,
            0,3,51,0,6,7,8,0,1,2,
            29,4,9,10,61,62,53,54,53,54,
            0,23,24,25,26,27,28,20,0,31,
            32,33,34,35,36,37,38,39,40,41,
            42,0,44,45,46,0,0,6,7,8,
            0,0,2,2,4,4,0,1,2,0,
            1,0,3,63,23,24,25,26,27,28,
            20,20,31,32,33,34,35,36,37,38,
            39,40,41,42,0,1,2,3,4,5,
            0,0,64,9,10,11,5,13,14,15,
            16,17,18,19,59,21,22,23,0,1,
            2,3,4,5,0,59,0,9,10,11,
            4,13,14,15,16,17,18,19,0,21,
            22,23,0,0,50,0,1,2,3,4,
            5,50,9,10,9,10,11,12,13,14,
            15,16,17,18,19,65,21,22,50,0,
            0,0,1,4,3,49,0,1,2,3,
            4,5,12,12,0,9,10,11,43,13,
            14,15,16,17,18,19,0,21,22,0,
            1,2,3,4,20,63,68,69,9,10,
            11,0,13,14,15,16,17,18,19,0,
            21,22,53,54,0,29,50,0,1,2,
            3,4,0,1,0,3,9,10,11,12,
            13,14,15,16,17,18,19,0,21,22,
            51,0,1,2,3,4,0,1,11,3,
            9,10,11,12,13,14,15,16,17,18,
            19,60,21,22,0,1,2,3,4,0,
            0,47,48,9,10,11,12,13,14,15,
            16,17,18,19,0,21,22,0,1,2,
            3,4,0,0,1,2,9,10,11,12,
            13,14,15,16,17,18,19,0,21,22,
            0,1,2,3,4,0,47,48,0,9,
            10,11,0,13,14,15,16,17,18,19,
            12,21,22,0,1,2,3,4,0,47,
            48,0,9,10,11,4,13,14,15,16,
            17,18,19,0,21,22,0,1,2,3,
            4,0,1,0,3,9,10,11,0,13,
            14,15,16,17,18,19,0,21,22,0,
            1,2,3,4,0,0,0,65,9,10,
            11,5,13,14,15,16,17,18,19,0,
            21,22,0,4,2,0,4,5,6,7,
            8,6,7,8,0,29,30,0,1,5,
            3,0,20,60,0,23,24,25,26,27,
            28,0,30,70,71,72,73,74,75,76,
            77,78,79,0,30,61,62,0,0,6,
            7,8,0,6,7,8,0,0,6,7,
            8,0,6,7,8,0,23,24,25,26,
            27,28,0,49,2,23,24,25,26,27,
            28,0,0,0,2,13,14,6,7,8,
            0,0,20,0,0,0,6,7,8,6,
            7,8,20,0,23,24,25,26,27,28,
            0,20,2,23,24,25,26,27,28,0,
            0,1,2,20,52,5,0,0,2,64,
            20,5,0,6,7,8,0,5,0,67,
            20,5,47,48,0,0,20,0,0,5,
            30,0,5,5,0,52,30,0,1,2,
            0,29,0,0,0,20,30,5,49,0,
            0,0,12,0,30,12,0,1,0,0,
            29,12,0,29,0,12,0,0,0,0,
            43,12,0,0,0,0,0,52,66,29,
            0,0,0,0,0,43,0,0,0,0,
            0,0,0,0,66,0,0,0,0,0,
            0,0,0,0,60,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1798,1809,1584,1810,1519,60,2012,2013,2014,1511,
            1106,1527,1,1098,535,381,1811,1812,1813,1814,
            52,729,549,1961,1962,1960,2015,1963,1959,476,
            455,1966,1971,1970,1968,1969,1967,1972,1973,1965,
            1974,1975,1976,1798,617,1089,640,1798,1,62,
            1,1798,191,1,1,1,61,2012,2013,2014,
            1405,1394,1368,1357,1798,1809,65,1810,55,253,
            1,1,1,1,1,1,1239,695,1,1,
            1,1,1,1,1,1,1,1,1,1,
            191,1,1,1,1798,1,42,1,1994,190,
            1,1,1,1798,1405,1394,1368,1357,532,1,
            1795,1405,1394,1368,1357,1285,1416,1,1,1,
            1,1,1,1788,182,1,1,1,1,1,
            1,1,1,1,1,1,1,190,1,1,
            1,1798,1,63,1,1994,191,1,1,1,
            262,2024,1220,49,1,51,183,1562,2056,1562,
            1798,1809,995,1810,1,1,1,1,1,1,
            510,89,1,1,1,1,1,1,1,1,
            1,1,1,1,191,1,1,1,1798,1809,
            67,1810,1994,54,2012,2013,2014,268,2024,1220,
            743,253,476,455,1330,1317,1547,1536,1547,1536,
            285,1961,1962,1960,2015,1963,1959,510,69,1966,
            1971,1970,1968,1969,1967,1972,1973,1965,1974,1975,
            1976,129,617,1089,640,201,1798,2012,2013,2014,
            265,268,1432,1432,1,253,1,2024,1426,185,
            2872,1798,2872,667,1961,1962,1960,2015,1963,1959,
            510,510,1966,1971,1970,1968,1969,1967,1972,1973,
            1965,1974,1975,1976,1,1809,1584,1810,1444,1802,
            71,1798,601,1511,1106,1527,1802,1098,535,381,
            1811,1812,1813,1814,1170,729,549,619,1798,1809,
            1584,1810,1479,1802,1798,1134,1,1511,1106,1527,
            253,1098,535,381,1811,1812,1813,1814,73,729,
            549,1037,68,53,1801,1,1809,1584,1810,1519,
            29,1801,476,455,1511,1106,1527,2865,1098,535,
            381,1811,1812,1813,1814,437,729,549,1801,50,
            1798,1798,1809,1562,1810,2056,1798,1809,1584,1810,
            1519,1802,532,1429,271,1511,1106,1527,29,1098,
            535,381,1811,1812,1813,1814,256,729,549,1798,
            1,1,1,1,510,667,347,1708,1,1,
            1,1798,1,1,1,1,1,1,1,1798,
            1,1,1547,1536,1798,1706,1801,1798,1809,1584,
            1810,1519,184,2876,59,2876,1511,1106,1527,532,
            1098,535,381,1811,1812,1813,1814,66,729,549,
            2112,1,1809,1584,1810,1519,206,2882,695,2882,
            1511,1106,1527,2865,1098,535,381,1811,1812,1813,
            1814,559,729,549,1798,1809,1584,1810,1519,58,
            1798,1285,1416,1511,1106,1527,2865,1098,535,381,
            1811,1812,1813,1814,1798,729,549,1,1809,1584,
            1810,1519,57,1,2024,1426,1511,1106,1527,2865,
            1098,535,381,1811,1812,1813,1814,1798,729,549,
            1798,1809,1584,1810,1519,1798,1285,1416,1798,1511,
            1106,1527,72,1098,535,381,1811,1812,1813,1814,
            1545,729,549,1798,1809,1587,1810,1519,1798,1285,
            1416,1798,1511,1106,1527,684,1098,535,381,1811,
            1812,1813,1814,1798,729,549,1798,1809,1589,1810,
            1519,208,1809,43,1810,1511,1106,1527,1798,1098,
            535,381,1811,1812,1813,1814,1798,729,549,1,
            1809,1584,1810,1519,64,1798,1798,437,1511,1106,
            1527,1804,1098,535,381,1811,1812,1813,1814,1798,
            729,549,20,1210,1789,248,1789,1789,179,179,
            179,2012,2013,2014,1,1710,1803,207,465,91,
            465,1798,1789,974,1,179,179,179,179,179,
            179,1798,1789,953,932,911,890,869,827,848,
            806,785,764,130,91,1330,1317,249,1798,2012,
            2013,2014,131,1,1,1,250,1798,2012,2013,
            2014,1798,1,1,1,70,1961,1962,1960,2015,
            1963,1959,32,2056,1591,1961,1962,1960,2015,1963,
            1959,132,270,1798,1431,1824,1825,2012,2013,2014,
            133,220,1242,251,1798,56,2012,2013,2014,2012,
            2013,2014,510,1798,1961,1962,1960,2015,1963,1959,
            222,510,1585,1961,1962,1960,2015,1963,1959,1,
            1,1792,1220,1058,486,1804,1,252,1432,601,
            510,1804,1798,2012,2013,2014,1798,1808,1798,473,
            510,1804,1285,1416,1,291,510,1798,1,1804,
            1803,30,1806,1808,30,1159,1803,253,2024,1426,
            1798,1345,284,1798,211,1078,1803,1487,2055,189,
            207,1798,1588,189,1803,1604,1798,2036,1798,189,
            489,185,1798,1827,1798,184,1798,1798,1798,1798,
            1805,206,1798,1798,1798,1798,1798,1164,1807,2720,
            1798,1798,1798,1798,1798,1487,1798,1798,1798,1798,
            1798,1798,1798,1798,1807,1798,1798,1798,1798,1798,
            1798,1798,1798,1798,1114
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            410,1,76,41,76,76,76,76,76,76,
            76,76,76,3,350,23,20,27,25,33,
            31,35,34,37,36,9,76,350,350,270,
            270,391,76,231,231,142,350,76,76,76,
            76,76,76,76,76,76,76,76,76,76,
            76,76,76,76,76,76,76,76,76,76,
            76,76,76,76,76,76,76,231,231,231,
            45,52,146,70,240,229,228,117,129,66,
            129,66,66,129,66,129,364,185,20,20,
            25,25,25,25,23,23,31,27,27,34,
            33,279,36,35,281,68,50,142,146,93,
            45,387,74,231,321,243,66,270,270,66,
            270,76,50,146,137,387,45,73,70,231,
            140,364,230,245,68,155,68,234,236,114,
            182,68,137,137,76,76,45,74,240,274,
            273,146,245,231,68,155,234,234,182,48,
            431,270,76,113,182,50,137,387,45,45,
            231,321,243,140,155,182,148,155,234,236,
            428,236,52,45,270,76,50,387,137,245,
            155,150,236,182,76,270,45,236,137,231,
            230,182,317,76,316,89,146,182,182,271,
            150,76,89,236
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,20,2,52,67,13,14,60,70,
            71,72,73,74,76,75,77,78,79,4,
            53,54,9,10,48,47,55,56,57,58,
            61,62,11,63,64,65,43,66,68,69,
            59,30,80,29,50,5,0,5,43,20,
            52,13,14,11,4,9,10,21,22,15,
            2,16,17,18,19,1,3,12,0,6,
            7,8,23,50,5,16,17,18,19,3,
            13,14,11,9,10,21,22,15,4,2,
            1,0,6,7,8,2,16,17,18,19,
            1,3,13,14,11,4,9,10,21,22,
            15,0,60,20,52,0,39,31,36,34,
            35,33,32,37,38,40,41,42,59,66,
            28,25,23,24,27,26,6,7,8,29,
            1,5,30,2,20,4,0,66,5,4,
            1,2,59,0,24,31,6,32,44,25,
            33,26,34,35,27,7,36,37,23,45,
            28,46,38,39,8,40,41,42,1,3,
            51,5,43,0,7,23,28,8,27,26,
            25,6,24,52,67,13,14,11,9,10,
            53,54,47,48,55,56,57,58,61,62,
            63,64,65,68,69,60,70,71,72,73,
            74,75,76,77,78,79,4,2,20,29,
            30,5,0,1,3,5,43,29,0,4,
            2,20,30,5,24,31,6,32,44,25,
            33,26,34,35,27,7,36,37,23,45,
            28,46,38,39,8,40,41,42,49,3,
            1,0,2,5,29,30,66,20,59,0,
            11,4,9,10,53,54,47,48,55,56,
            57,58,61,62,63,64,65,68,69,60,
            70,71,72,73,74,75,76,77,78,79,
            50,30,43,80,12,59,66,5,29,0,
            4,24,31,6,32,44,25,33,26,34,
            35,27,7,36,37,23,45,28,46,38,
            39,8,40,41,42,1,3,49,0,15,
            16,17,18,19,2,13,14,11,4,9,
            10,21,22,1,3,44,45,46,39,31,
            36,34,35,33,32,37,38,40,41,42,
            28,25,23,24,27,26,6,7,8,0,
            5,30,15,16,17,18,19,1,3,2,
            13,14,11,4,9,10,21,22,0,15,
            16,17,18,19,1,3,2,13,14,11,
            4,9,10,21,22,51,0,5,29,43,
            60,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            111,39,20,39,20,20,20,20,20,20,
            20,20,20,39,90,39,39,39,39,39,
            39,39,39,39,39,39,20,90,90,15,
            15,94,91,78,78,81,1,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,91,20,20,20,20,20,20,
            20,20,20,20,20,20,20,78,78,78,
            24,20,50,22,80,11,11,74,75,42,
            75,27,27,75,26,75,69,39,39,39,
            39,39,39,39,39,39,39,39,39,39,
            39,39,39,39,39,39,64,99,39,29,
            24,118,23,78,85,77,7,7,7,7,
            7,20,18,39,57,118,24,23,40,78,
            60,32,39,87,46,64,39,64,44,13,
            64,39,57,64,20,20,24,23,59,11,
            11,50,87,78,39,103,64,7,9,17,
            39,7,20,48,9,64,64,118,24,24,
            78,85,77,53,64,9,66,114,7,44,
            39,39,19,24,7,20,18,118,40,107,
            103,62,44,9,20,7,24,44,40,78,
            78,9,67,20,39,62,50,9,9,39,
            62,20,55,97
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            79,77,76,65,75,74,1,0,32,0,
            26,0,97,0,71,0,69,11,59,5,
            0,11,5,24,0,92,66,0,5,11,
            0,79,78,77,76,65,75,74,0,22,
            0,89,0,51,0,90,0,99,0,27,
            49,0,45,44,37,35,27,0,21,45,
            44,37,35,11,0,11,70,0,65,61,
            62,63,64,52,28,0,11,21,0,21,
            44,45,11,0,27,49,11,25,0,42,
            11,41,0,11,88,0,95,0,45,44,
            27,0,81,11,42,0,93,11,25,0,
            11,87,0,11,42,67,0,56,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,10,11,
            8,3,6,7,68,81,82,83,84,1,
            12,13,69,44,55,60,63,72,42,90,
            47,52,56,61,62,66,67,74,75,78,
            79,80,91,54,70,73,16,17,30,89,
            93,4,14,15,18,19,20,21,29,31,
            22,23,24,25,26,92,5,27,28,32,
            33,34,35,36,37,38,39,40,41,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            100,0,0,0,102,106,107,108,109,110,
            0,111,112,113,114,115,116,117,0,118,
            97,128,0,96,121,149,0,127,0,0,
            0,98,0,145,147,0,148,0,0,0,
            101,140,158,159,160,0,120,136,146,155,
            0,130,135,0,150,153,154,157,0,104,
            131,132,133,134,137,0,139,144,161,99,
            103,105,119,122,123,124,125,126,129,0,
            138,142,0,0,143,152,95,0,0,0,
            141,0,151,156,0,162,163,0,164,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            82,113,162,92,35,41,121,12,136,21,
            51,69,28,47,103,158,177,181,145,1,
            1,32,56,79,185,6,107,152,127,152,
            99,59,59,59
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            90,90,90,90,4,4,90,18,142,26,
            4,26,26,4,101,26,26,4,149,4,
            4,26,4,26,26,9,110,155,130,170,
            101,66,61,74
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            63,61,5,63,26,26,61,53,107,46,
            26,40,46,26,67,6,5,5,19,99,
            98,44,26,37,3,69,67,7,108,5,
            67,40,38,40
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            43,43,43,43,50,50,43,43,86,30,
            50,30,30,50,66,30,30,50,59,50,
            50,30,50,30,30,60,1,30,92,30,
            66,2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            17,17,32,17,21,21,17,87,-1,25,
            21,9,25,21,3,32,32,32,62,1,
            7,25,21,9,32,88,3,35,-1,32,
            3,9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            140,20,0,96,0,189,104,0,31,135,
            0,144,165,104,12,152,0,98,0,0,
            148,104,2,137,0,97,0,148,104,2,
            0,151,2,0,113,23,179,104,20,0,
            113,179,104,23,20,0,113,23,20,0,
            113,179,104,20,0,113,20,0,130,0,
            2,0,151,97,0,2,97,0,148,104,
            2,130,0,2,0,150,97,0,141,2,
            0,144,177,104,12,94,185,44,0,98,
            0,144,177,104,12,185,44,0,135,0,
            99,0,184,104,135,0,104,135,0,141,
            99,0,173,104,12,183,94,182,158,0,
            173,104,12,182,158,0,196,85,0,77,
            2,101,97,99,0,196,114,134,2,89,
            0,53,0,0,134,69,111,0,29,118,
            0,153,2,0,97,107,0,153,2,15,
            0,144,165,104,12,114,153,2,0,97,
            3,0,105,0,98,0,181,2,98,0,
            134,20,98,0,134,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1163,0,1655,1667,1648,0,374,0,1470,1345,
            1426,1261,1168,1220,1190,0,663,1251,315,0,
            1469,1441,342,340,1168,1220,1190,1642,1432,1535,
            0,1098,535,381,1479,1444,1570,437,347,667,
            601,1330,1317,695,1416,1285,1405,1394,1368,1357,
            1562,1547,1536,476,455,1527,1519,1511,1106,729,
            549,1170,1134,1114,1078,1058,1037,1016,642,995,
            619,510,974,953,932,911,890,869,848,827,
            806,785,764,315,743,580,559,416,489,395,
            0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,180,104,166,15,22,21,10,9,4,
            11,14,13,98,2,102,101,105,103,107,
            106,109,108,111,110,99,29,2,2,67,
            52,2,20,153,134,135,104,10,9,54,
            53,4,58,57,56,55,47,48,11,62,
            61,64,63,69,68,65,79,78,77,75,
            76,74,73,72,71,70,60,153,153,181,
            134,114,104,20,2,138,137,167,168,158,
            169,46,45,170,44,171,172,94,101,101,
            103,103,103,103,102,102,106,105,105,108,
            107,134,110,109,114,114,12,142,120,23,
            113,104,4,151,104,2,182,159,159,185,
            159,59,104,120,4,104,113,179,149,148,
            118,104,150,104,94,12,94,12,165,104,
            12,152,4,120,179,23,113,4,2,128,
            130,104,29,148,183,104,12,104,144,29,
            189,52,20,190,104,12,120,104,113,113,
            141,104,2,142,12,173,135,174,104,177,
            94,178,60,140,52,20,104,104,149,104,
            104,104,177,144,60,29,140,165,149,148,
            186,173,184,59,141,2,104,144,144,29,
            29,59,142,125
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "expression_parser_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "and_expression",
            "exclusive_or_expression",
            "inclusive_or_expression",
            "logical_and_expression",
            "logical_or_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 51,
           SCOPE_UBOUND      = 33,
           SCOPE_SIZE        = 34,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 214,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2112,
           MAX_LA            = 2,
           NUM_RULES         = 314,
           NUM_NONTERMINALS  = 124,
           NUM_SYMBOLS       = 217,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1660,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1788,
           ERROR_ACTION      = 1798;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
