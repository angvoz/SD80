/*******************************************************************************
 * Copyright (c) 2009 Nokia and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Nokia - Initial API and implementation
 *******************************************************************************/
package org.eclipse.cdt.debug.edc.internal.symbols;

import java.util.Collection;

import org.eclipse.cdt.core.IAddress;
import org.eclipse.cdt.core.ISymbolReader;
import org.eclipse.core.runtime.IPath;

/**
 * Interface for getting symbolics information from a symbol file. The symbolics
 * information includes debug information (e.g. DWARF, CODEVIEW) and symbol
 * table data. A binary file may only have symbol table without debug
 * information.
 */
public interface IEDCSymbolReader extends IModuleScope, ISymbolReader {
	
	enum DebugInformationType {
		DWARF,
		CODEVIEW,
		STABS
	}

	/**
	 * Get the absolute path to the symbol file
	 * 
	 * @return
	 */
	IPath getSymbolFile();

	/**
	 * Get the sections from the symbol file
	 * 
	 * @return unmodifiable list of sections
	 */
	Collection<ISection> getSections();

	/**
	 * Get the base image address generated by the linker
	 * 
	 * @return the base address, or null if unknown
	 */
	IAddress getBaseLinkAddress();

	/**
	 * Get the modification date of the symbol file when it was parsed. This is
	 * used for caching purposes.
	 * 
	 * @return the modification date (e.g. file.lastModified())
	 */
	long getModificationDate();

	/**
	 * Get the symbols from the symbol table
	 * 
	 * @return unmodifiable list of symbols
	 */
	Collection<ISymbol> getSymbols();

	/**
	 * Get the symbol that contains the given link address
	 * 
	 * @param linkAddress
	 *            the link address
	 * @return the symbol containing this address, or null if none found
	 */
	ISymbol getSymbolAtAddress(IAddress linkAddress);

	/**
	 * Get all functions in the module with the given name
	 * 
	 * @param name
	 *            the function name
	 * @return unmodifiable list of functions, which may be empty
	 */
	Collection<IFunctionScope> getFunctionsByName(String name);

	/**
	 * Get all variables in any scope in the module with the given name
	 * 
	 * @param name
	 *            the variable name
	 * @return unmodifiable list of variables, which may be empty
	 */
	Collection<IVariable> getVariablesByName(String name);

	/**
	 * The reader is no longer needed and should free up any resources
	 */
	void shutDown();

	/**
	 * Check whether the symbol file has debug information recognized by this
	 * reader. The debug information here means data in the binary file that's
	 * specially for debugger, such as DWARF and CODEVIEW. The symbol table
	 * section data in many types of binary files is not considered debug
	 * information here.
	 * 
	 * @return
	 */
	boolean hasRecognizedDebugInformation();

	/**
	 * Get the type of debug information that this reader can parse. It's assumed
	 * one reader handles only one type of debug information.
	 * 
	 * @return a {@link DebugInformationType} value.
	 */
	DebugInformationType getRecognizedDebugInformationType();
}
