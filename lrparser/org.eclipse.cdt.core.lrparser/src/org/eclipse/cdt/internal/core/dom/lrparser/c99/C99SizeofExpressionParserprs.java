/*******************************************************************************
* Copyright (c) 2006, 2008 IBM Corporation and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     IBM Corporation - initial API and implementation
*********************************************************************************/

// This file was generated by LPG

package org.eclipse.cdt.internal.core.dom.lrparser.c99;

public class C99SizeofExpressionParserprs implements lpg.lpgjavaruntime.ParseTable, C99SizeofExpressionParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,3,1,1,
            4,4,3,3,2,2,8,1,0,1,
            1,2,2,2,2,2,2,2,2,2,
            1,4,1,3,3,3,1,3,3,1,
            3,3,1,3,3,3,3,1,3,3,
            1,3,1,3,1,3,1,3,1,3,
            1,5,1,3,3,3,3,3,3,3,
            3,3,3,3,1,1,2,1,0,1,
            3,1,1,1,1,1,1,1,1,3,
            4,3,2,4,1,2,1,1,1,2,
            5,7,5,1,0,7,5,9,8,3,
            2,2,2,3,2,4,2,2,2,2,
            2,1,1,1,1,2,1,2,2,2,
            1,2,2,1,2,2,1,2,2,1,
            2,2,1,3,1,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,6,8,0,
            0,1,1,3,3,3,0,1,0,1,
            2,4,2,1,1,1,3,1,1,2,
            3,7,8,0,1,0,1,3,1,3,
            1,1,1,1,1,1,3,1,1,1,
            1,1,3,1,2,2,1,5,3,1,
            3,5,1,3,1,3,2,4,3,5,
            4,6,6,3,5,1,2,3,4,5,
            0,1,2,1,3,1,1,3,2,1,
            1,1,1,2,1,2,3,1,1,1,
            3,1,2,2,2,3,4,5,1,7,
            3,0,0,1,1,3,3,4,1,1,
            2,3,2,3,2,1,0,1,2,1,
            1,1,1,1,2,4,3,6,2,4,
            1,1,-36,0,0,0,0,0,0,0,
            0,0,0,-78,0,0,0,0,0,0,
            0,0,0,0,0,-80,-114,0,-2,0,
            0,0,0,-120,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-4,0,-115,0,-14,
            -69,-126,0,0,0,0,0,-110,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-137,0,-116,0,-132,
            0,0,0,-6,0,0,0,0,0,0,
            0,0,0,-117,0,0,-184,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-157,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-55,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-145,0,0,0,
            0,0,0,0,0,-16,-104,-17,0,0,
            0,0,0,0,-118,0,0,0,-81,-18,
            0,-19,-74,-75,-33,0,-72,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-180,0,0,0,0,0,0,0,0,
            0,0,-20,0,0,0,0,0,0,0,
            0,0,-3,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-51,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-34,
            0,-107,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-21,-125,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-129,0,-141,0,-52,
            0,0,0,0,0,0,0,0,0,0,
            -122,0,0,0,-67,-22,0,0,0,0,
            -156,0,0,0,0,0,-27,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-23,0,
            -159,0,0,0,-162,0,0,0,0,0,
            -37,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-56,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-57,0,0,0,
            0,0,0,0,0,0,0,-24,0,0,
            0,0,0,0,0,0,0,-58,0,0,
            0,0,0,0,0,0,0,0,-25,0,
            0,0,0,0,0,0,0,0,-59,0,
            0,0,0,0,0,0,0,0,0,-26,
            0,0,0,0,0,0,0,0,0,-60,
            0,0,0,0,0,0,0,0,0,0,
            -86,0,0,0,0,0,0,0,0,0,
            -61,0,0,0,0,0,0,0,0,0,
            0,-87,0,0,0,0,0,0,0,0,
            0,-62,0,0,0,0,0,0,0,0,
            0,0,-88,0,0,0,0,0,0,0,
            0,0,-63,0,0,0,0,0,0,0,
            0,0,0,-89,0,0,0,0,0,0,
            0,0,0,-64,0,0,0,0,0,0,
            0,0,0,0,-90,0,0,0,0,0,
            0,0,0,0,-65,0,0,0,0,0,
            0,0,0,0,0,-91,0,0,0,0,
            0,0,0,0,0,-66,0,0,0,0,
            0,0,0,0,0,0,-92,0,0,0,
            0,0,0,0,0,0,-142,0,0,0,
            0,0,0,0,0,0,0,-93,0,0,
            0,0,0,0,0,0,0,-143,0,0,
            0,0,0,0,0,0,0,0,-136,0,
            0,0,0,0,0,0,0,0,-160,0,
            0,0,0,0,0,0,0,0,0,-173,
            0,0,0,0,0,0,0,0,-183,0,
            0,0,0,0,0,0,0,0,0,-174,
            0,0,0,0,0,0,0,0,-94,0,
            0,0,-177,-95,0,-7,0,0,0,0,
            0,0,0,-191,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-199,0,0,0,0,0,0,
            0,0,0,0,-133,0,0,0,0,0,
            0,0,0,0,-161,0,-182,0,0,0,
            -8,0,0,0,0,0,0,0,-207,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-119,0,
            0,0,0,0,0,0,0,0,0,-96,
            0,0,0,0,0,0,0,0,-97,-192,
            0,-98,-83,-99,0,-54,0,0,0,0,
            0,0,0,0,0,0,-128,0,0,0,
            0,0,0,-29,0,-30,0,0,-48,0,
            0,0,0,0,0,0,0,0,0,-100,
            0,0,0,0,-101,-146,-102,-103,-106,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-1,-32,0,-53,-31,0,0,0,-85,
            0,0,0,0,0,0,0,-68,0,0,
            0,0,0,0,0,-121,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-171,0,
            0,-46,0,0,0,0,0,0,0,0,
            0,0,-130,0,-188,-135,-138,-140,-147,0,
            0,0,0,0,0,0,0,0,0,0,
            -134,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-139,-152,0,0,0,
            0,0,0,0,-5,0,0,0,0,0,
            0,0,-49,0,0,0,0,0,0,0,
            0,0,0,-158,0,-50,0,0,0,0,
            0,0,0,0,0,0,-190,0,-206,-12,
            0,0,0,0,0,0,0,0,-165,0,
            -209,-178,-179,-200,-205,0,-42,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-13,0,
            0,0,0,0,0,0,-43,0,0,0,
            0,0,0,0,0,0,0,-44,0,0,
            0,0,0,0,0,0,0,0,-45,0,
            0,0,0,0,0,0,0,0,0,-111,
            0,0,-47,0,0,0,0,0,0,0,
            0,0,-201,-38,0,0,0,0,0,0,
            0,0,0,0,-154,0,-163,0,0,-73,
            -113,-170,-108,-189,-194,0,-76,0,-124,-185,
            0,0,0,-208,-127,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-155,0,
            0,0,0,0,0,-172,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-9,0,0,0,0,0,0,0,-10,
            0,0,0,0,0,0,0,-11,0,0,
            0,0,0,0,0,-35,-39,0,0,0,
            0,0,0,0,0,-150,0,-40,0,0,
            0,0,0,0,0,0,0,0,-71,-149,
            -197,0,-41,0,0,0,0,0,0,0,
            0,-148,0,0,-144,0,0,0,0,0,
            -70,0,0,0,0,0,0,0,-112,0,
            0,-169,0,0,0,0,-77,0,0,0,
            0,0,0,-166,-15,-151,-167,0,0,-181,
            -28,-168,-193,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-79,0,0,0,0,0,0,0,
            0,0,-82,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-84,-153,0,0,
            0,0,0,0,0,-105,-198,0,0,0,
            0,0,0,-176,0,0,-186,0,0,-187,
            -202,0,0,0,0,0,0,0,-175,-131,
            0,0,-203,0,-109,0,0,-123,-195,0,
            0,0,-196,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-204,0,0,
            -164,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            87,11,24,24,23,23,32,32,69,69,
            1,1,2,2,2,2,3,3,3,4,
            5,5,5,5,5,5,5,5,51,51,
            70,6,6,6,6,6,6,6,6,6,
            6,7,7,8,8,8,8,9,9,9,
            10,10,10,12,12,12,12,12,13,13,
            13,14,14,15,15,16,16,17,17,18,
            18,19,19,20,20,20,20,20,20,20,
            20,20,20,20,20,101,45,40,88,88,
            73,73,46,102,102,102,102,102,102,102,
            103,103,103,104,104,109,109,110,110,105,
            105,106,106,106,112,112,107,107,107,107,
            108,108,108,108,108,111,111,25,25,25,
            25,25,27,27,27,79,79,74,74,74,
            74,75,75,75,76,76,76,77,77,77,
            78,78,78,113,113,114,114,115,28,30,
            30,30,30,30,52,54,54,54,54,54,
            54,54,54,54,54,54,54,63,60,60,
            89,90,64,64,61,61,61,65,80,80,
            81,81,66,66,66,48,91,91,82,83,
            83,83,62,62,92,84,84,85,85,67,
            67,21,22,22,22,29,47,47,33,33,
            33,33,36,36,38,34,34,35,39,39,
            116,116,37,117,117,93,93,26,26,26,
            26,26,26,26,26,26,86,49,49,49,
            49,31,56,56,55,55,55,57,57,50,
            50,94,94,71,71,58,58,58,41,41,
            41,42,43,43,43,44,44,44,44,53,
            53,53,59,95,72,72,72,72,68,96,
            97,97,98,98,99,99,118,118,119,119,
            120,120,120,120,122,122,121,121,121,123,
            123,87,87,1,811,16,20,17,370,790,
            43,488,486,502,118,500,614,543,689,656,
            769,748,73,90,133,211,387,596,400,31,
            135,132,134,158,434,19,16,20,17,370,
            790,43,488,486,502,396,500,614,543,689,
            656,769,748,73,279,137,441,164,201,185,
            579,104,698,141,144,147,150,324,358,19,
            16,20,17,370,41,35,366,1457,1597,1633,
            1643,1657,1210,253,211,21,629,284,201,184,
            124,368,244,1296,506,19,16,20,17,370,
            41,39,285,337,662,1281,979,482,19,16,
            20,17,370,790,43,488,486,502,396,500,
            614,543,689,656,769,748,73,279,332,19,
            16,20,17,370,790,43,488,486,502,396,
            500,614,543,689,656,769,748,73,279,506,
            19,16,20,17,370,41,43,488,486,502,
            284,500,614,543,689,1187,1296,358,19,16,
            20,17,370,41,35,285,57,14,157,1455,
            1297,286,1324,1085,290,201,186,1296,344,414,
            6,245,30,144,327,513,287,275,19,16,
            20,17,370,790,43,488,486,502,1695,500,
            614,543,689,656,769,748,73,1453,1581,273,
            274,237,458,19,16,20,17,370,790,43,
            488,486,502,636,500,614,543,689,656,769,
            748,73,279,506,19,16,20,17,370,790,
            43,488,486,502,398,500,614,543,689,656,
            769,748,73,90,506,19,16,20,17,370,
            41,43,488,486,502,288,500,614,543,1142,
            513,1296,554,19,16,20,17,370,790,43,
            488,486,502,1698,500,614,543,689,656,769,
            748,73,1459,18,200,299,19,16,20,17,
            370,790,43,488,486,502,366,500,614,543,
            689,656,769,748,73,1575,189,177,52,238,
            506,19,16,20,17,370,41,43,488,486,
            502,695,500,614,1144,513,191,133,211,252,
            211,587,638,135,132,134,158,506,19,16,
            20,17,370,790,43,488,486,502,1188,500,
            614,543,689,656,769,748,73,91,137,344,
            164,201,293,27,1349,587,141,144,147,150,
            324,506,19,16,20,17,370,41,43,832,
            1457,1597,1633,1643,1657,1210,506,19,16,20,
            17,370,790,43,488,486,502,281,500,614,
            543,689,656,769,748,73,84,506,19,16,
            20,17,370,790,43,488,486,502,243,500,
            614,543,689,656,769,748,73,83,506,19,
            16,20,17,370,790,43,488,486,502,171,
            500,614,543,689,656,769,748,73,82,506,
            19,16,20,17,370,790,43,488,486,502,
            547,500,614,543,689,656,769,748,73,81,
            506,19,16,20,17,370,790,43,488,486,
            502,578,500,614,543,689,656,769,748,73,
            80,506,19,16,20,17,370,790,43,488,
            486,502,194,500,614,543,689,656,769,748,
            73,79,506,19,16,20,17,370,790,43,
            488,486,502,199,500,614,543,689,656,769,
            748,73,78,506,19,16,20,17,370,790,
            43,488,486,502,416,500,614,543,689,656,
            769,748,73,77,506,19,16,20,17,370,
            790,43,488,486,502,488,500,614,543,689,
            656,769,748,73,76,506,19,16,20,17,
            370,790,43,488,486,502,490,500,614,543,
            689,656,769,748,73,75,506,19,16,20,
            17,370,790,43,488,486,502,514,500,614,
            543,689,656,769,748,73,74,506,19,16,
            20,17,370,790,43,488,486,502,241,500,
            614,543,689,656,769,748,73,1604,506,19,
            16,20,17,370,790,43,488,486,502,711,
            500,614,543,689,656,769,748,73,1607,506,
            19,16,20,17,370,41,43,488,486,502,
            587,500,614,543,689,656,769,748,92,506,
            19,16,20,17,370,41,43,488,486,502,
            421,500,614,543,689,656,769,748,92,601,
            661,1265,178,721,245,1610,506,19,16,20,
            17,370,41,38,506,19,16,20,17,370,
            41,43,488,486,502,1613,500,614,543,689,
            656,769,748,92,506,19,16,20,17,370,
            41,43,488,486,502,14,500,614,543,689,
            656,769,748,92,1337,696,1658,201,295,193,
            210,506,19,16,20,17,370,41,37,506,
            19,16,20,17,370,41,43,488,486,502,
            200,500,614,543,689,656,769,748,92,506,
            19,16,20,17,370,41,43,488,486,502,
            13,500,614,543,689,656,769,748,72,50,
            201,1352,614,439,671,201,506,19,16,20,
            17,370,41,43,488,486,502,113,500,614,
            543,689,656,1185,201,30,201,30,1560,506,
            19,16,20,17,370,41,43,488,486,502,
            305,500,1034,272,291,324,207,600,97,676,
            216,1269,219,1572,221,222,227,1592,265,504,
            503,270,382,14,261,14,489,208,495,275,
            189,177,272,553,553,262,553,553,513,216,
            1269,219,1572,221,222,227,737,265,504,503,
            270,133,211,1612,24,414,23,136,132,134,
            158,22,86,86,1420,86,88,311,371,151,
            1180,259,506,19,16,20,17,370,41,43,
            488,958,138,670,164,281,14,14,707,499,
            142,145,148,151,324,272,1681,1489,695,1721,
            1226,205,217,1269,219,1572,221,222,227,339,
            267,504,503,270,1218,226,738,739,216,1269,
            219,1572,221,222,227,530,19,16,20,17,
            370,40,1354,506,19,16,20,17,370,41,
            43,488,486,502,697,1130,506,19,16,20,
            17,370,41,43,488,486,502,587,1139,281,
            530,19,16,20,17,370,33,196,198,710,
            1681,158,700,724,712,287,1667,506,19,16,
            20,17,370,41,43,488,486,874,1796,202,
            253,211,216,1269,219,1572,221,222,227,530,
            19,16,20,17,370,32,1354,506,19,16,
            20,17,370,41,43,488,486,895,506,19,
            16,20,17,370,41,43,488,486,916,506,
            19,16,20,17,370,41,43,488,486,937,
            513,197,198,506,19,16,20,17,370,41,
            43,488,1029,728,506,19,16,20,17,370,
            41,43,853,271,1681,14,280,14,1796,1796,
            326,679,679,104,721,711,1674,232,417,104,
            719,1589,1690,1677,733,513,216,1269,219,1572,
            221,222,227,275,276,229,272,239,133,211,
            1612,253,211,241,140,132,134,158,277,612,
            1352,265,504,503,270,1226,14,217,1269,219,
            1572,221,222,227,1796,1693,1718,1680,1420,139,
            1796,164,506,19,16,20,17,370,41,36,
            506,19,16,20,17,370,41,35,506,19,
            16,20,17,370,41,34,160,506,19,16,
            20,17,370,41,46,1796,357,1559,506,19,
            16,20,17,370,41,45,207,636,1796,44,
            44,587,272,506,19,16,20,17,370,41,
            44,1157,720,1033,1353,104,1796,265,504,503,
            270,409,19,16,20,17,370,41,42,567,
            1189,1189,567,179,264,1796,258,627,225,240,
            636,1796,1796,636,104,14,513,104,1666,1249,
            104,14,513,104,1157,1796,313,1157,133,211,
            1189,1796,313,1189,143,132,134,158,242,278,
            195,243,1796,632,292,223,195,294,1666,257,
            1796,1249,257,661,1465,86,1263,1465,1796,1263,
            590,86,1796,1536,133,211,590,666,48,1536,
            146,132,134,158,133,211,242,446,1796,636,
            149,132,134,158,612,1352,505,588,133,211,
            142,44,655,195,152,132,134,158,636,95,
            116,636,272,587,1796,52,1796,1226,52,513,
            636,636,1157,365,1796,195,1020,267,504,503,
            270,1796,1189,1796,195,1157,252,211,587,252,
            211,52,228,1796,190,203,232,257,1020,1796,
            1464,1796,1699,1796,1263,1796,192,1020,1000,1689,
            257,207,252,211,1796,1606,190,1263,1796,1796,
            1351,372,1796,1796,372,191,1796,1796,1454,1353,
            1561,1689,1796,1796,1796,1796,1796,1796,1796,1796,
            1703,1796,1796,1796,1796,1796,1796,1460,1796,1796,
            1796,615,1796,1796,947,1796,0,19,177,0,
            1,2020,0,1,2031,0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,0,6,7,8,9,
            10,11,0,0,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,0,
            0,31,32,33,34,35,36,37,38,39,
            40,41,42,0,44,45,46,0,1,0,
            3,0,5,6,7,8,0,6,7,8,
            55,56,57,58,17,9,10,55,56,57,
            58,24,25,26,27,28,47,48,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,0,1,0,3,51,5,
            6,7,8,0,55,56,57,58,5,13,
            80,17,0,1,2,0,4,0,24,25,
            26,27,28,0,12,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,0,1,0,3,51,5,6,7,8,
            0,1,2,50,4,12,0,0,17,0,
            4,2,12,4,49,24,25,26,27,28,
            0,12,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,0,1,
            0,3,51,0,6,7,8,4,0,0,
            0,1,4,3,0,17,0,1,2,53,
            54,5,24,25,26,27,28,13,12,31,
            32,33,34,35,36,37,38,39,40,41,
            42,0,44,45,46,65,30,6,7,8,
            0,0,0,2,0,4,53,54,17,9,
            10,53,54,12,64,24,25,26,27,28,
            61,62,31,32,33,34,35,36,37,38,
            39,40,41,42,0,1,2,3,4,5,
            0,1,2,9,10,11,0,1,14,15,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,5,0,61,62,9,10,11,
            68,69,14,15,16,17,18,19,20,21,
            22,23,0,0,50,0,0,2,2,0,
            5,0,1,2,3,4,5,12,12,59,
            9,10,11,0,13,14,15,16,50,18,
            19,20,21,22,23,30,0,0,1,2,
            3,4,5,59,0,0,9,10,11,5,
            0,14,15,16,43,18,19,20,21,22,
            23,0,1,2,3,4,0,1,65,3,
            9,10,11,29,30,14,15,16,0,18,
            19,20,21,22,23,49,63,50,0,1,
            2,3,4,0,1,0,3,9,10,11,
            0,13,14,15,16,5,18,19,20,21,
            22,23,51,0,1,2,3,4,0,1,
            0,3,9,10,11,0,13,14,15,16,
            5,18,19,20,21,22,23,0,1,2,
            3,4,47,48,0,0,9,10,11,29,
            13,14,15,16,29,18,19,20,21,22,
            23,0,1,2,3,4,66,0,0,0,
            9,10,11,5,13,14,15,16,0,18,
            19,20,21,22,23,0,1,2,3,4,
            12,66,0,0,9,10,11,5,30,14,
            15,16,0,18,19,20,21,22,23,0,
            1,2,3,4,47,48,47,48,9,10,
            11,0,30,14,15,16,0,18,19,20,
            21,22,23,0,1,2,3,4,0,0,
            47,48,9,10,11,0,0,14,15,16,
            4,18,19,20,21,22,23,0,0,2,
            2,4,5,6,7,8,0,0,1,12,
            12,5,14,15,17,0,1,0,3,0,
            0,24,25,26,27,28,60,30,13,9,
            10,0,1,0,3,49,70,71,72,73,
            74,75,76,77,78,79,0,0,0,43,
            52,0,6,7,8,0,49,6,7,8,
            12,0,1,17,3,67,11,0,17,0,
            24,25,26,27,28,24,25,26,27,28,
            0,0,1,64,3,0,6,7,8,0,
            0,6,7,8,13,0,63,17,0,4,
            52,11,17,5,24,25,26,27,28,24,
            25,26,27,28,0,0,0,0,29,0,
            6,7,8,6,7,8,0,12,30,0,
            0,0,6,7,8,6,7,8,0,0,
            0,2,0,0,6,7,8,0,1,2,
            0,12,0,1,2,5,0,0,0,29,
            4,0,0,0,0,0,0,52,0,29,
            13,13,29,0,13,13,60,13,0,60,
            0,0,0,0,0,0,0,0,0,0,
            59,0,0,43,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1796,1806,1605,1807,1520,58,2008,2009,2010,1512,
            1091,1528,60,1,1379,1340,1305,1957,1808,1809,
            1810,1811,1036,404,1958,1956,2011,1959,1955,53,
            1796,1962,1967,1966,1964,1965,1963,1968,1969,1961,
            1970,1971,1972,251,1143,499,336,1796,1,59,
            1,1796,189,1,1,1,50,2008,2009,2010,
            1409,1398,1387,1357,1,1434,701,1409,1398,1387,
            1357,1,1,1,1,1,1252,1423,1,1,
            1,1,1,1,1,1,1,1,1,1,
            189,1,1,1,1796,1,1796,1,1990,188,
            1,1,1,1796,1409,1398,1387,1357,1799,487,
            1786,1,260,2020,1186,1,1,180,1,1,
            1,1,1,181,507,1,1,1,1,1,
            1,1,1,1,1,1,1,188,1,1,
            1,1796,1,269,1,1990,189,1,1,1,
            266,2020,1186,1798,251,507,47,283,1,263,
            1563,1450,507,1,2052,1,1,1,1,1,
            69,507,1,1,1,1,1,1,1,1,
            1,1,1,1,189,1,1,1,1796,1806,
            67,1807,1990,49,2008,2009,2010,1563,48,61,
            1796,1806,1563,1807,1796,1957,1,1790,1186,1548,
            1537,1801,1958,1956,2011,1959,1955,1445,507,1962,
            1967,1966,1964,1965,1963,1968,1969,1961,1970,1971,
            1972,127,1143,499,336,459,1800,2008,2009,2010,
            52,266,71,1450,62,251,1548,1537,1957,1434,
            701,1548,1537,507,574,1958,1956,2011,1959,1955,
            1326,1313,1962,1967,1966,1964,1965,1963,1968,1969,
            1961,1970,1971,1972,1,1806,1605,1807,378,1799,
            1,2020,1433,1512,1091,1528,1796,2032,1379,1340,
            1305,592,1808,1809,1810,1811,1036,404,1796,1806,
            1605,1807,477,1799,1796,1326,1313,1512,1091,1528,
            1146,1205,1379,1340,1305,968,1808,1809,1810,1811,
            1036,404,1796,70,1798,1,268,1450,1451,1796,
            1801,1,1806,1605,1807,1520,28,507,507,1064,
            1512,1091,1528,65,2839,1379,1340,1305,1798,1808,
            1809,1810,1811,1036,404,1800,1,1796,1806,1605,
            1807,1520,1799,1119,1796,1796,1512,1091,1528,1801,
            1796,1379,1340,1305,28,1808,1809,1810,1811,1036,
            404,1796,1,1,1,1,183,2850,459,2850,
            1,1,1,1355,1800,1,1,1,1796,1,
            1,1,1,1,1,2051,640,1798,1796,1806,
            1605,1807,1520,182,2851,57,2851,1512,1091,1528,
            1,487,1379,1340,1305,1805,1808,1809,1810,1811,
            1036,404,2108,1,1806,1605,1807,1520,204,2853,
            87,2853,1512,1091,1528,1796,2839,1379,1340,1305,
            1805,1808,1809,1810,1811,1036,404,1796,1806,1605,
            1807,1520,1252,1423,1796,1796,1512,1091,1528,667,
            2839,1379,1340,1305,1339,1808,1809,1810,1811,1036,
            404,1,1806,1605,1807,1520,1804,56,1,55,
            1512,1091,1528,89,2839,1379,1340,1305,218,1808,
            1809,1810,1811,1036,404,1796,1806,1605,1807,1520,
            507,1804,1796,54,1512,1091,1528,1801,89,1379,
            1340,1305,1796,1808,1809,1810,1811,1036,404,1796,
            1806,1611,1807,1520,1252,1423,1252,1423,1512,1091,
            1528,1796,1800,1379,1340,1305,41,1808,1809,1810,
            1811,1036,404,1,1806,1605,1807,1520,1796,1796,
            1252,1423,1512,1091,1528,1796,1,1379,1340,1305,
            251,1808,1809,1810,1811,1036,404,19,31,1787,
            1206,1787,1787,177,177,177,1796,1,1793,1787,
            1203,1803,1821,1822,177,1796,1806,1796,1807,68,
            51,177,177,177,177,177,926,1787,1075,1434,
            701,206,1806,66,1807,2052,905,884,863,842,
            821,779,800,758,737,716,128,1796,1796,1802,
            1166,129,2008,2009,2010,63,2052,2008,2009,2010,
            989,205,1140,1957,1140,1164,1169,1796,1957,1796,
            1958,1956,2011,1959,1955,1958,1956,2011,1959,1955,
            130,1796,1806,574,1807,131,2008,2009,2010,254,
            64,2008,2009,2010,1266,1796,640,1957,1,651,
            691,1169,1957,1801,1958,1956,2011,1959,1955,1958,
            1956,2011,1959,1955,247,289,1796,246,1546,209,
            1,1,1,2008,2009,2010,248,1009,1800,249,
            29,199,1,1,1,2008,2009,2010,250,220,
            29,1452,1796,205,2008,2009,2010,1,2020,1433,
            282,507,251,2020,1433,1267,1796,1796,1796,438,
            1268,187,187,1796,187,1796,1796,1087,1796,1824,
            1447,1496,2750,1796,183,182,532,204,1796,1044,
            1796,1796,1796,1796,1796,1796,1796,1796,1796,1796,
            1099,1796,1796,1267
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            231,1,104,41,104,104,104,104,104,104,
            104,104,104,3,380,73,70,77,75,83,
            81,85,84,87,86,10,104,380,309,309,
            249,104,187,187,337,380,104,104,104,104,
            104,104,104,104,104,104,104,104,104,104,
            104,104,104,104,104,104,104,104,104,104,
            104,104,104,104,104,104,187,187,45,52,
            341,98,279,185,184,312,324,66,324,66,
            66,324,66,324,394,141,70,70,75,75,
            75,75,73,73,81,77,77,84,83,349,
            86,85,68,50,337,341,121,45,417,102,
            187,351,282,66,309,309,66,309,104,50,
            341,332,417,45,101,98,187,335,394,186,
            284,68,197,68,268,270,228,224,68,332,
            417,104,104,45,102,279,344,343,341,284,
            187,68,197,268,268,224,48,277,309,104,
            227,224,50,417,332,45,45,187,351,282,
            335,197,224,190,197,268,270,274,270,52,
            45,309,104,50,332,284,197,192,270,224,
            104,309,45,270,187,186,224,94,104,93,
            117,341,224,224,310,192,104,117,270
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            80,0,66,12,2,52,67,14,15,11,
            4,9,10,53,54,47,48,55,56,57,
            58,61,62,63,64,65,68,69,43,60,
            70,71,72,73,74,76,75,77,78,79,
            59,30,80,29,50,5,0,5,43,12,
            52,14,15,11,4,9,10,22,23,16,
            2,18,19,20,21,1,3,13,0,4,
            53,54,9,10,48,47,55,56,57,58,
            61,62,11,63,64,65,50,30,43,80,
            68,69,59,66,5,29,0,6,7,8,
            17,50,5,18,19,20,21,3,14,15,
            11,9,10,22,23,16,4,2,1,0,
            6,7,8,2,18,19,20,21,1,3,
            14,15,11,4,9,10,22,23,16,0,
            7,17,28,8,27,26,25,6,24,52,
            67,14,15,11,9,10,53,54,47,48,
            55,56,57,58,61,62,63,64,65,68,
            69,60,70,71,72,73,74,75,76,77,
            78,79,4,2,12,29,30,5,0,66,
            5,4,1,2,59,0,24,31,6,32,
            44,25,33,26,34,35,27,7,36,37,
            17,45,28,46,38,39,8,40,41,42,
            1,3,51,5,43,0,60,12,52,0,
            16,18,19,20,21,1,3,2,14,15,
            11,4,9,10,22,23,51,0,5,30,
            16,18,19,20,21,1,3,2,14,15,
            11,4,9,10,22,23,0,1,3,5,
            43,29,0,5,29,43,60,0,4,2,
            12,30,5,24,31,6,32,44,25,33,
            26,34,35,27,7,36,37,17,45,28,
            46,38,39,8,40,41,42,49,3,1,
            0,39,31,36,34,35,33,32,37,38,
            40,41,42,59,66,28,25,17,24,27,
            26,6,7,8,29,1,5,30,2,12,
            4,0,2,5,29,30,66,12,59,0,
            4,24,31,6,32,44,25,33,26,34,
            35,27,7,36,37,17,45,28,46,38,
            39,8,40,41,42,1,3,49,0,16,
            18,19,20,21,2,14,15,11,4,9,
            10,22,23,1,3,44,45,46,39,31,
            36,34,35,33,32,37,38,40,41,42,
            28,25,17,24,27,26,6,7,8,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            60,38,20,38,20,20,20,20,20,20,
            20,20,20,38,98,38,38,38,38,38,
            38,38,38,38,38,38,20,98,51,51,
            63,99,88,88,83,1,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,99,20,20,20,20,20,20,20,
            20,20,20,20,20,20,88,88,26,20,
            90,24,82,22,22,71,72,9,72,49,
            49,72,48,72,66,38,38,38,38,38,
            38,38,38,38,38,38,38,38,38,38,
            38,38,38,58,106,38,28,26,118,25,
            88,93,87,7,7,7,7,7,20,18,
            38,58,118,26,25,11,88,54,31,38,
            95,15,58,38,58,41,13,58,38,58,
            118,20,20,26,25,53,22,22,90,95,
            88,38,102,58,7,39,17,38,7,20,
            46,39,58,118,11,26,26,88,93,87,
            74,58,39,43,114,7,41,38,38,19,
            26,7,20,18,11,110,102,56,41,39,
            20,7,26,41,88,88,39,44,20,38,
            56,90,39,39,38,56,20,76,80
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            79,77,76,64,75,74,1,0,89,0,
            21,0,97,0,90,0,68,11,59,5,
            0,26,0,11,5,24,0,5,11,0,
            79,78,77,76,64,75,74,0,32,0,
            51,0,11,69,0,99,0,92,65,0,
            70,0,23,43,42,36,34,11,0,11,
            87,0,11,88,0,64,60,61,62,63,
            52,27,0,43,42,36,34,31,0,95,
            0,23,42,43,11,0,11,23,0,31,
            49,0,31,49,11,25,0,48,11,45,
            0,81,11,48,0,43,42,31,0,93,
            11,25,0,11,48,66,0,56,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            85,2,86,9,87,48,64,76,10,11,
            8,1,3,6,7,68,69,81,82,83,
            84,12,13,44,55,60,63,72,42,90,
            47,52,56,61,62,66,67,74,75,78,
            79,80,91,54,70,73,16,17,30,89,
            93,4,14,15,18,19,20,21,29,31,
            22,23,24,25,26,92,5,27,28,32,
            33,34,35,36,37,38,39,40,41,94,
            45,46,49,50,51,53,57,58,59,65,
            71,77,88
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            100,0,0,0,102,106,107,108,109,110,
            0,111,112,113,114,115,116,117,118,119,
            129,0,97,96,122,150,128,0,0,0,
            0,98,146,148,0,149,0,0,0,0,
            159,160,161,0,101,121,137,141,147,156,
            0,131,136,0,151,154,155,158,0,132,
            133,134,135,138,0,140,145,162,99,103,
            104,105,120,123,124,125,126,127,130,0,
            139,143,0,0,144,153,95,0,0,0,
            142,0,152,157,0,163,164,0,165,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            82,113,158,92,35,41,121,12,136,21,
            51,69,28,47,103,173,177,145,1,1,
            32,56,79,181,6,107,152,127,152,99,
            59,59,59
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            90,90,90,90,4,4,90,18,142,26,
            4,26,26,4,101,26,4,149,4,4,
            26,4,26,26,9,110,155,130,166,101,
            66,61,74
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            62,60,5,62,26,26,60,53,106,44,
            26,39,44,26,66,5,5,19,99,98,
            42,26,36,3,68,66,7,107,5,66,
            39,37,39
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            43,43,43,43,50,50,43,43,86,30,
            50,30,30,50,66,30,50,59,50,50,
            30,50,30,30,60,1,30,92,30,66,
            2,2,2
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            17,17,32,17,21,21,17,87,-1,25,
            21,9,25,21,3,32,32,62,1,7,
            25,21,9,32,88,3,35,-1,32,3,
            9,9,9
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            139,12,0,96,0,189,104,0,31,136,
            0,144,165,104,13,152,0,98,0,0,
            148,104,2,135,0,97,0,148,104,2,
            0,151,2,0,113,17,179,104,12,0,
            113,179,104,17,12,0,113,17,12,0,
            113,179,104,12,0,113,12,0,129,0,
            2,0,152,97,0,2,97,0,148,104,
            2,129,0,2,0,151,97,0,140,2,
            0,144,177,104,13,94,185,44,0,98,
            0,144,177,104,13,185,44,0,141,0,
            99,0,184,104,141,0,104,141,0,142,
            99,0,173,104,13,183,94,182,157,0,
            173,104,13,182,157,0,195,85,0,77,
            2,101,97,99,0,195,116,138,2,89,
            0,53,0,0,138,69,111,0,29,118,
            0,164,2,0,97,107,0,144,165,104,
            13,116,164,2,0,97,3,0,105,0,
            98,0,181,2,98,0,138,12,98,0,
            138,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1085,0,1680,1689,1658,0,396,0,1464,1339,
            1433,1265,1249,1186,1157,0,636,1210,313,0,
            1572,1269,504,503,1249,1186,1157,1666,1450,1536,
            0,1379,1340,1305,477,378,1581,459,1146,640,
            574,1326,1313,1169,1423,1252,1409,1398,1387,1357,
            1563,1548,1537,1434,701,1528,1520,1512,1091,1036,
            404,1099,1064,1044,1009,989,968,947,615,1119,
            592,507,926,905,884,863,842,821,800,779,
            758,737,716,313,667,553,532,417,438,344,
            0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,180,104,166,16,23,22,10,9,4,
            11,15,14,98,2,102,101,105,103,107,
            106,109,108,111,110,99,29,2,67,52,
            2,12,164,138,141,104,10,9,54,53,
            4,58,57,56,55,47,48,11,62,61,
            64,63,69,68,65,79,78,77,75,76,
            74,73,72,71,70,60,164,181,138,116,
            104,12,2,136,135,167,168,157,169,46,
            45,170,44,171,172,94,101,101,103,103,
            103,103,102,102,106,105,105,108,107,138,
            110,109,116,13,142,124,17,113,104,4,
            151,104,2,182,158,158,185,158,59,104,
            124,4,104,113,179,149,148,118,104,150,
            104,94,13,94,13,165,104,13,152,4,
            104,179,17,113,4,2,127,129,104,29,
            148,183,104,13,104,144,29,189,52,12,
            190,104,13,104,149,113,113,140,104,2,
            142,13,173,141,174,104,177,94,178,60,
            139,52,12,104,149,104,104,104,177,144,
            60,29,139,165,148,186,173,184,59,140,
            2,104,144,144,29,29,59,142,125
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "[",
            "(",
            "{",
            ".",
            "->",
            "++",
            "--",
            "&",
            "*",
            "+",
            "-",
            "~",
            "!",
            "/",
            "%",
            ">>",
            "<<",
            "<",
            ">",
            "<=",
            ">=",
            "==",
            "!=",
            "^",
            "|",
            "&&",
            "||",
            "?",
            ":",
            "...",
            "=",
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            ">>=",
            "<<=",
            "&=",
            "^=",
            "|=",
            ",",
            "$empty",
            "auto",
            "break",
            "case",
            "char",
            "const",
            "continue",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extern",
            "float",
            "for",
            "goto",
            "if",
            "inline",
            "int",
            "long",
            "register",
            "restrict",
            "return",
            "short",
            "signed",
            "sizeof",
            "static",
            "struct",
            "switch",
            "typedef",
            "union",
            "unsigned",
            "void",
            "volatile",
            "while",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "integer",
            "floating",
            "charconst",
            "stringlit",
            "identifier",
            "Completion",
            "EndOfCompletion",
            "Invalid",
            "RightBracket",
            "RightParen",
            "RightBrace",
            "SemiColon",
            "ERROR_TOKEN",
            "EOF_TOKEN",
            "no_sizeof_type_id_start",
            "]",
            ")",
            "}",
            ";",
            "identifier_token",
            "expression",
            "postfix_expression",
            "member_name",
            "type_id",
            "initializer_list",
            "unary_expression",
            "cast_expression",
            "multiplicative_expression",
            "additive_expression",
            "shift_expression",
            "relational_expression",
            "equality_expression",
            "AND_expression",
            "exclusive_OR_expression",
            "inclusive_OR_expression",
            "logical_AND_expression",
            "logical_OR_expression",
            "conditional_expression",
            "assignment_expression",
            "expression_list_actual",
            "constant_expression",
            "declaration_specifiers",
            "simple_declaration_specifiers",
            "struct_or_union_declaration_sp" +
            "ecifiers",
            "elaborated_declaration_specifi" +
            "ers",
            "enum_declaration_specifiers",
            "typdef_name_declaration_specif" +
            "iers",
            "no_type_declaration_specifier",
            "type_qualifier",
            "no_type_declaration_specifiers",
            "simple_type_specifier",
            "struct_or_union_specifier",
            "elaborated_specifier",
            "enum_specifier",
            "type_name_specifier",
            "initializer",
            "declarator",
            "struct_or_union",
            "struct_declaration_list",
            "struct_declaration",
            "specifier_qualifier_list",
            "struct_declarator_list",
            "complete_struct_declarator",
            "enumerator_list",
            "enumerator",
            "direct_declarator",
            "pointer_seq",
            "array_direct_declarator",
            "basic_direct_declarator",
            "array_modifier",
            "parameter_type_list",
            "identifier_list",
            "array_modifier_type_qualifiers",
            "type_qualifier_list",
            "parameter_list",
            "parameter_declaration",
            "complete_parameter_declarator",
            "abstract_declarator",
            "direct_abstract_declarator",
            "basic_direct_abstract_declarat" +
            "or",
            "array_direct_abstract_declarat" +
            "or",
            "designated_initializer",
            "designation",
            "designator_list",
            "designator"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 51,
           SCOPE_UBOUND      = 32,
           SCOPE_SIZE        = 33,
           MAX_NAME_LENGTH   = 38;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 209,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2108,
           MAX_LA            = 2,
           NUM_RULES         = 312,
           NUM_NONTERMINALS  = 123,
           NUM_SYMBOLS       = 216,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1202,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 1786,
           ERROR_ACTION      = 1796;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
